{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-09-05T01:34:38.919039+00:00",
  "repo": "lake-wg/edhoc",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "Close?",
      "description": "",
      "color": "E33AA3"
    },
    {
      "name": "traces and test vectors",
      "description": "",
      "color": "E5EF39"
    },
    {
      "name": "PR exists",
      "description": "",
      "color": "1d76db"
    },
    {
      "name": "Merged to master",
      "description": "",
      "color": "c5def5"
    },
    {
      "name": "Clarification in specification needed",
      "description": "",
      "color": "d4c5f9"
    },
    {
      "name": "Ready to merge?",
      "description": "",
      "color": "e99695"
    },
    {
      "name": "reopened",
      "description": "",
      "color": "3CF7D0"
    },
    {
      "name": "Merge?",
      "description": "",
      "color": "bfdadc"
    },
    {
      "name": "Needs PR",
      "description": "",
      "color": "006b75"
    },
    {
      "name": "Discussion needed",
      "description": "",
      "color": "c2e0c6"
    },
    {
      "name": "test vectors",
      "description": "",
      "color": "0e8a16"
    },
    {
      "name": "Fixed in master",
      "description": "",
      "color": "5319e7"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "MDU6SXNzdWU2NTIzNjcyMDg=",
      "title": "Self-contained specification",
      "url": "https://github.com/lake-wg/edhoc/issues/1",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Comment by Martin Disch in \r\nhttps://mailarchive.ietf.org/arch/msg/lake/KmAQm0KmDGEBnvQm3ZGwGiLu3LE/\r\n\r\n\"The draft does a good job of pointing to the right places in RFC 8152, but I still ended up trying to\r\nunderstand another ~100 page document just to implement the few constructs I actually needed.\"\r\n\r\nShould we provide more details about COSE constructs, e.g. in appendix A.2?\r\n",
      "createdAt": "2020-07-07T14:23:51Z",
      "updatedAt": "2021-07-19T13:13:37Z",
      "closedAt": "2021-07-19T13:13:37Z",
      "comments": [
        {
          "author": "martindisch",
          "authorAssociation": "NONE",
          "body": "(pasting my response from the mailing list here for completeness)\r\n\r\nThanks for following up on this. Yes, in my opinion expanding on the COSE constructs would be helpful. But I also sympathize with not wanting to duplicate what is already defined in another RFC (and possibly getting it wrong, as Carsten points out). Considering that there are quite a few implementers already and besides mine you have only received one other similar comment, maybe this isn't an issue for a meaningful majority.\r\n\r\nIn any case, the draft has made great strides already in terms of accessibility and is in a good state now, so I don't see improvements in this area as an absolute necessity.",
          "createdAt": "2020-07-07T16:06:59Z",
          "updatedAt": "2020-07-07T16:06:59Z"
        },
        {
          "author": "TimothyClaeys",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The two COSE constructs that are used in EHDOC, `COSE_Encrypt0` and `COSE_Sign1` are fairly simple. They don't use the recursive `COSE_Recipient` structure or embed `COSE_Keys`. I think it is possible to add some additional clarifications on the structure of the COSE messages in the EHDOC draft without having to copy too much text from RFC 8152.",
          "createdAt": "2020-11-11T10:29:09Z",
          "updatedAt": "2020-11-11T10:29:09Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "MDU6SXNzdWU2NTI0NjEzODQ=",
      "title": "Ciphersuites requiring multiple SHA ",
      "url": "https://github.com/lake-wg/edhoc/issues/2",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Comment by Rene Struik:\r\nhttps://mailarchive.ietf.org/arch/msg/lake/KGiw6uY5u5J9ANcwbnsaRvqWh1s/\r\n\r\n\"why enforcing both SHA512 and SHA256 at the same time\"\r\n\r\nEd25519 specifies SHA512. Ciphersuite 0 and 1 additionally requires SHA256.\r\n\r\nProposed solution: Require only SHA512 in ciphersuite 0 and 1.",
      "createdAt": "2020-07-07T16:32:47Z",
      "updatedAt": "2021-01-26T05:26:45Z",
      "closedAt": "2021-01-26T05:26:44Z",
      "comments": [
        {
          "author": "ms-s",
          "authorAssociation": "NONE",
          "body": "A couple of references to look at while fixing this issue: \r\nhttps://tools.ietf.org/html/draft-ietf-lwig-curve-representations-11\r\nand \r\nhttps://tools.ietf.org/html/draft-ietf-6lo-ap-nd-23#section-8.2",
          "createdAt": "2020-07-31T11:49:22Z",
          "updatedAt": "2020-07-31T11:49:22Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "https://tools.ietf.org/html/draft-ietf-lwig-curve-representations-11 may not solve the issue with SHA-512 but should be mentioned in the security considerations, together with relevant NIST terminology.",
          "createdAt": "2020-10-16T12:22:57Z",
          "updatedAt": "2020-10-16T12:22:57Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Discuss at IETF 109. When changed, test vectors needs to be updated.\r\n",
          "createdAt": "2020-10-30T13:18:27Z",
          "updatedAt": "2020-10-30T13:18:27Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Cipher suite 0 and 1 when used with Static Diffie Hellman keys does not require SHA-512. So we should not change this to SHA-512",
          "createdAt": "2020-11-03T08:33:21Z",
          "updatedAt": "2020-11-03T08:33:21Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "So, to have a cipher suite with a single SHA (avoid implementing multiple), signature and static DH algorithms need to use the same, which requires a new specification of one or the other?\r\n\r\nSee also #21.\r\n\r\n",
          "createdAt": "2020-11-05T09:49:53Z",
          "updatedAt": "2020-11-05T10:14:13Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "More background. Hash functions are used in several places in EDHOC:\r\n- Transcript Hash\r\n- Key-Derivation Function (KDF)\r\n- Signature algorithm\r\n- Credential identifiers (ID_CRED_R and ID_CRED_I)\r\nAdditionally, a hash function is used by the application, e.g., in the OSCORE KDF.\r\n\r\nA solution involving only SHA-512 in cipher suites with Ed25519 would require more memory to handle larger digests. Note that it also increases the length of x5t identifiers to 256 bit instead of 64.",
          "createdAt": "2020-11-05T18:27:43Z",
          "updatedAt": "2020-11-05T18:27:43Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on the points in the comment above, I concur it is good to have (also) SHA-256 involved in the cipher suites.",
          "createdAt": "2020-11-10T07:20:33Z",
          "updatedAt": "2020-11-10T07:20:33Z"
        },
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "I agree on keeping SHA-256",
          "createdAt": "2020-11-10T12:38:51Z",
          "updatedAt": "2020-11-10T12:38:51Z"
        },
        {
          "author": "TimothyClaeys",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I also agree on keeping SHA-256. Since I prefer to switch to Ed25519 with SHA-256 (https://github.com/lake-wg/edhoc/issues/22#issuecomment-724843802), this would also solve the issue of using multiple SHA primitives in a single ciphersuite.",
          "createdAt": "2020-11-10T17:25:02Z",
          "updatedAt": "2020-11-10T17:25:02Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue has been overtaken by events.  SHA-256-only implementations are supported as of 70088cc.\r\n\r\n\r\n",
          "createdAt": "2021-01-26T05:26:44Z",
          "updatedAt": "2021-01-26T05:26:44Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "MDU6SXNzdWU2NTMzNjQwODg=",
      "title": "Replace PSK ECDHE ",
      "url": "https://github.com/lake-wg/edhoc/issues/3",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "According to the requirements\r\n  \"an AKE which is\r\n   extensible but does not include PSK ECDHE would be conformant with\r\n   the requirements for the initial scope. \"\r\n(https://tools.ietf.org/html/draft-ietf-lake-reqs-04#section-2.2.1)\r\n\r\nIn the absence of PSK ECHDE, another PSK based procedure providing forward security is needed, as introduced here:\r\nhttps://mailarchive.ietf.org/arch/msg/lake/-Fx-NVLrZohQ7p8Wy8VNpsDC_-M/\r\n\r\nAn alternative/complement is to include a procedure in OSCORE:\r\nhttps://mailarchive.ietf.org/arch/msg/lake/5DAmN2c7cOXCUej-4XRHxa18MIQ/",
      "createdAt": "2020-07-08T14:53:22Z",
      "updatedAt": "2021-01-26T05:19:07Z",
      "closedAt": "2021-01-26T05:19:07Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on feedback during IETF 108 it seems clear that we need to first describe the problem better before stating what properties the procedure replacing PSK ECDHE should have. Things to consider, in addition to the mail content in thread referenced above, include (but not limited to):\r\n\r\n- application \"session\" resumption\r\n- key rotation between or within application \"session\"\r\n- key rotation before exceeding usage limits (taking into account the commonly used AES-CCM truncated to 64 bits, https://tools.ietf.org/html/draft-wood-cfrg-aead-limits)\r\n- forward and/or backward security\r\n- performance, in particular number and size of messages (if any)\r\n",
          "createdAt": "2020-08-01T08:10:46Z",
          "updatedAt": "2020-08-01T08:10:46Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I assign to myself to restart the discussion on the LAKE mailing list.",
          "createdAt": "2020-08-02T14:21:31Z",
          "updatedAt": "2020-08-02T14:21:42Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Covered by the separate issues: #20 #24 #25 ",
          "createdAt": "2020-11-06T13:24:03Z",
          "updatedAt": "2021-01-26T05:19:00Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "MDU6SXNzdWU2NzA2NTk4MTc=",
      "title": "User stories",
      "url": "https://github.com/lake-wg/edhoc/issues/4",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Extracted from  https://arxiv.org/abs/2007.11427\r\nhttps://www.ietf.org/proceedings/108/slides/slides-108-lake-tamarin-study-of-edhoc-00\r\n\r\n\"exploring user-stories or use-cases would help identify which trade-offs to make\" ",
      "createdAt": "2020-08-01T08:30:27Z",
      "updatedAt": "2020-11-02T14:42:47Z",
      "closedAt": "2020-11-02T14:42:47Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed by new section 1.2.",
          "createdAt": "2020-11-02T14:42:47Z",
          "updatedAt": "2020-11-02T14:42:47Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "MDU6SXNzdWU2NzA2NjgwNTc=",
      "title": "Clarify assumptions regarding use of TEE",
      "url": "https://github.com/lake-wg/edhoc/issues/5",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Extracted from https://arxiv.org/abs/2007.11427\r\nhttps://www.ietf.org/proceedings/108/slides/slides-108-lake-tamarin-study-of-edhoc-00\r\n\r\nOPTLS takes advantage of the use of TEE, relevant for STAT-based methods.\r\n\r\n\r\n",
      "createdAt": "2020-08-01T08:42:16Z",
      "updatedAt": "2021-02-21T10:08:18Z",
      "closedAt": "2021-02-21T10:08:18Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This doesn't have to be TEE required or not required. The protocol could offer some security properties for non-TEE implementations, but provide better properties with certain use of TEE.",
          "createdAt": "2020-08-01T08:46:46Z",
          "updatedAt": "2020-08-01T08:46:46Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Recent update provide recommendation to store as much as possible and to provide as many operations as possible in TEE.",
          "createdAt": "2020-11-02T19:51:05Z",
          "updatedAt": "2020-11-02T19:51:05Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@StefanHri @pbtgit @TimothyClaeys & others - more input about TEE would be useful:\r\nHow much state can be stored in TEE of microcontrollers you are familiar with? \r\nWhat protocol components can we assume to implement in the TEE? \r\nAny expected change in the future?\r\n\r\n",
          "createdAt": "2020-11-11T09:47:57Z",
          "updatedAt": "2020-11-12T07:23:46Z"
        },
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "My limited experience of TEE is ARM TZ on ARM V8 and there the execution state can be  stored (protected with using device unique keys) to NV to allow power save of SDRAM.\r\n\r\nI am not aware of exactly how this is differs on micro controllers since  ARM V8-M.\r\nBut it seems like mbedTLS is used by several projects including TF-M which is \u201cTrusted FW for ARM V8-M\u201d.\r\n\r\n",
          "createdAt": "2020-11-12T08:57:57Z",
          "updatedAt": "2020-11-12T15:12:58Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "To save state in the secure world RAM of a Cortex M23/33 is not a problem at all. On those microcontrollers, the total available RAM can be divided between the secure and non-secure worlds. In our work we save all intermediate secret results of the computations (the state) in the secure world, which was a few hundred bytes. \r\n@gselander, @emanjon: Can you post a link to the  OPTLS with TEE document?",
          "createdAt": "2020-11-12T11:57:37Z",
          "updatedAt": "2020-11-12T11:57:37Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@StefanHri The formulation of this issue is based on the comment from formal verification work referenced a the top. The OPTLS paper is here: \r\n\r\nhttps://eprint.iacr.org/2015/978.pdf\r\n\r\nBut this paper does not formulate properties in terms of TEE. As I understand the reasoning, there is a long term private key ('s'), potentially in security storage/execution, and an ephemeral private keys ('x') which may not be in secure storage/execution. By construction these keys are used together to derive the session key. Hence neither compromise of long-term key only nor ephemeral secret only reveals the session key.",
          "createdAt": "2020-11-12T15:11:37Z",
          "updatedAt": "2020-11-12T15:11:37Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "Are we talking about the static DH key authentication modes, or authentication with signatures, or both?",
          "createdAt": "2020-11-12T15:35:57Z",
          "updatedAt": "2020-11-12T15:35:57Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The comment was specifically about static DH based authentication. The general distinction between long term and ephemeral of course still applies to signature based AKE, but I'm not aware of an analogue in properties of derived keys.",
          "createdAt": "2020-11-13T10:50:45Z",
          "updatedAt": "2020-11-13T10:50:45Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "While the original comment was specifically about static DH based authentication. I don\u2019t think there is anything specific with static DH at all. The question is what parts we can expect to be implemented in a TEE. Key storage? Crypto operations like ECDH, SIGN, HMAC? The whole EDHOC protocol? EDHOC and OCSORE?\r\n",
          "createdAt": "2020-11-13T11:38:16Z",
          "updatedAt": "2020-11-13T11:59:12Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Trimmed the email header and trailer from the previous comment (which I don't disagree with - I responded specifically in the context OPTLS).",
          "createdAt": "2020-11-13T12:01:57Z",
          "updatedAt": "2020-11-13T12:01:57Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "The idea of a TEE is to put as little as possible code in the TEE in order to minimize the chance that exploitable vulnerabilities are introduced in it. \r\n\r\n\" The question is what parts we can expect to be implemented in a TEE?\"\r\nI will say it depends on the specific application/IoT device how much benefit is drawn (or must be drowned) through using the TEE. For some huge applications, it may be OK to put the complete OSCORE and EDHOC implementation in the TEE. For others however which have to be highly secure, it is better to put only the crypto operations and the keys in TEE.\r\n\r\n In our paper (still not published. When it gets published I will put a reference here) we are considering the latter case. Here is the subsection about sensitive assets:\r\n \r\n \"Sensitive Assets. By analyzing the EDHOC specifica-\r\ntion we identified the following key material as sensitive: 1)\r\nthe long term authentication keys, i.e. secret signature keys\r\nor secret static DH keys, 2) the public authentication key of\r\nthe other party when RPK is used and the root public key of\r\nthe CA when certificates are used, 3) intermediate EDHOC\r\nkeys and 4) the result of the EDHOC protocol. An attacker\r\nhaving access to one of those keys may: 1) impersonate the\r\ndevice by leaking its long term authentication keys, 2) fool\r\nthe device that its talking to a legit peer by changing the\r\npeer\u2019s public key or the root public key of the CA and 3) com-\r\npromise the security of EDHOC by leaking or manipulating\r\nits intermediate keys or the end result of the protocol.\r\nAlso sensitive are all cryptographic routines using the\r\nkeys. If these routines are manipulated, they may leak the\r\nkeys or allow the EDHOC protocol to succeed although the\r\ncommunication peer is not authentic.\"\r\n \r\n \r\n I think letting the ephemeral secret key outside the TEE is not a good idea because in this way an attacker outside the TEE may calculate the derived key. ",
          "createdAt": "2020-11-13T12:21:39Z",
          "updatedAt": "2020-11-13T12:22:42Z"
        },
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "I agree with above. It may be possible to put EDHOC/OSCORE in a TEE but as pointed out above the sensitive assets are the keys.\r\nThe concern of protecting EDHOC/OSCORE code can be addressed using some form of \"secure boot\", memory protection etc.",
          "createdAt": "2020-11-13T13:53:05Z",
          "updatedAt": "2020-11-13T13:53:05Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I updated the security considerations based on the discussion here. Removed that EDHOC is optimally implemented in TEE and added \"secure boot\".\r\n\r\nNote that Key compromise is described in one part of sec con and TEE in another.\r\n\r\nI think this can be closed\r\n",
          "createdAt": "2021-02-21T10:08:18Z",
          "updatedAt": "2021-02-21T10:08:18Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "MDU6SXNzdWU2NzA2Nzg1Mzg=",
      "title": "Clarify properties inferred from other crypto",
      "url": "https://github.com/lake-wg/edhoc/issues/6",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Extracted from https://arxiv.org/abs/2007.11427\r\nhttps://www.ietf.org/proceedings/108/slides/slides-108-lake-tamarin-study-of-edhoc-00\r\n\r\n\"Unclear if there is an *exact* mapping to Noise, so proofs of those does not necessarily automatically carry over.\"\r\n\r\nSimilar, if relevant, for OPTLS.\r\n\r\nUpdate security claims accordingly. In particular, the section on security properties in the security considerations is not making clear what methods the properties apply to.\r\n",
      "createdAt": "2020-08-01T08:57:30Z",
      "updatedAt": "2021-02-21T10:14:30Z",
      "closedAt": "2021-02-21T10:14:30Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The security consideration has been updated several times since 2007. In particular is has been updated to clearly refer to method when something only is true for a specific method.\r\n\r\nThe is not a direct mapping to OPTLS, the might be a mapping to Noise, but this has not been anylysed and is not used. The is strict mapping to SIGMA for the signature case, at least when a subject name is used.\r\n\r\nI close this now. It can be reopened if there are more concrete and recent things that need to be updated.",
          "createdAt": "2021-02-21T10:14:29Z",
          "updatedAt": "2021-02-21T10:14:29Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "MDU6SXNzdWU2NzA2ODcyODg=",
      "title": "Different properties of different methods",
      "url": "https://github.com/lake-wg/edhoc/issues/7",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Freely extracted from https://arxiv.org/abs/2007.11427\r\nhttps://www.ietf.org/proceedings/108/slides/slides-108-lake-tamarin-study-of-edhoc-00\r\n\r\nDo we need\r\n\"homogeneity among the EDHOC methods when it comes to what security properties they provide\"?\r\n\r\nExample 1. All methods support (implicit) mutual authentication. Methods 0 and 1 support injective agreement (i.e. additional key confirmation of the responder). \r\n\r\nExample 2. Not all methods support non-repudation\r\n",
      "createdAt": "2020-08-01T09:10:07Z",
      "updatedAt": "2020-11-02T19:24:13Z",
      "closedAt": "2020-11-02T19:24:13Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Assuming we allow that different methods to have different properties, how do we handle the differences?\r\n\r\n* Is it sufficient to state that all methods has at least certain properties?\r\n\r\n* Describe additional properties in security considerations?\r\n\r\n* Require or recommend different applications of different methods? \r\n\r\n",
          "createdAt": "2020-08-01T09:14:33Z",
          "updatedAt": "2020-08-01T09:14:33Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The draft should state when key confirmation is achieved and that the parties can save the session state for future use.\r\n",
          "createdAt": "2020-10-16T12:08:35Z",
          "updatedAt": "2020-10-16T12:08:35Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that as described in the security considerations, none of the methods provide non-repudiation in a useful way. As the singature is over a MAC, non-repudiation requires that long-term storage of the ephemeral key which would remove PFS.",
          "createdAt": "2020-11-02T19:21:59Z",
          "updatedAt": "2020-11-02T19:21:59Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Recent commits add information on the implicit key authentication and explicit key confirmation, giving advise on when the parties get explicit key confirmation which should be assured before the session key is stored long-term.\r\n",
          "createdAt": "2020-11-02T19:24:13Z",
          "updatedAt": "2020-11-02T19:24:13Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "MDU6SXNzdWU2NzA2OTQ5NzQ=",
      "title": "Verification of intended peer",
      "url": "https://github.com/lake-wg/edhoc/issues/8",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "Extracted from https://arxiv.org/abs/2007.11427\r\nhttps://www.ietf.org/proceedings/108/slides/slides-108-lake-tamarin-study-of-edhoc-00\r\n\r\n\"Section 3.2 of the specification states that a parties are required to be configured with a policy restricting the set of peers an they are allowed to run EDHOC with.\"\r\n\r\n\"the initiator is not required to verify that the ID CRED R received in message 2 is the same as the one the application intended when initiating the EDHOC run\"\r\n\r\n\"the initiator [need] to match ID CRED R to the intended identity provided by the application\"\r\n\r\n\"the application must be able to instruct EDHOC to not accept the same identity in the next attempt\"\r\n",
      "createdAt": "2020-08-01T09:20:53Z",
      "updatedAt": "2021-09-10T13:48:25Z",
      "closedAt": "2021-09-10T13:48:25Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "When raw public keys are used in EDHOC, EDHOC allows the parties to agree on an optional \u201csubject name\u201d that are included in the MAC/Signature (i.e. not sent on the wire). We would like more input from  people deploying contrained IoT devices and what their operational requirements on identity are. Do they see the public key itself as the identity? Is a subject name available in many or all cases?\r\n\r\nShould the \u201csubject name\u201d in raw public keys be recommended or even mandatory?\r\n",
          "createdAt": "2020-11-06T06:56:31Z",
          "updatedAt": "2020-11-06T06:56:31Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "At least for [rd.link](https://tools.ietf.org/html/draft-amsuess-t2trg-rdlink-01) purposes (which is admittedly just an independent draft right now), an RPK can be a standalone thing to verify, and adding any further identifier (like an EUI-64 picked by the identifying party) that'd needed to be known would just weigh down discovery needlessly. Sure, a subject identifier can be derived from the known RPK, but then what's the value of it. (That is saying nothing against having an agreed-on subject, of course.)",
          "createdAt": "2020-11-16T06:31:36Z",
          "updatedAt": "2020-11-16T06:31:36Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this? There has been quite a lot of work in this area, so the dicussion here seems a bit outdated. If anything remains, it might be better to open a new focused issue.",
          "createdAt": "2021-08-26T16:47:18Z",
          "updatedAt": "2021-08-26T16:47:18Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree. This issue has been considered in more than one way:\r\n\r\nIn 3.5.3: \r\n\"The EDHOC implementation or the application must enforce information\r\n   about the intended endpoint, and in particular whether it is a\r\n   specific identity or a set of identities.\"\r\n\r\nIn 3.5.2:\r\n\"To prevent misbinding attacks in systems where an attacker can\r\n   register public keys without proving knowledge of the private key,\r\n   SIGMA [SIGMA] enforces a MAC to be calculated over the \"identity\".\r\n   EDHOC follows SIGMA by calculating a MAC over the whole credential,\r\n   which in case of a X.509 or C509 certificate includes the \"subject\"\r\n   and \"subjectAltName\" fields, and in the case of CWT or UCCS includes\r\n   the \"sub\" claim, see Section 3.5.3. \"\r\n\r\nIf there are other aspects where verification of intended peer is missing we can open a new issue.\r\n\r\nI close this now.\r\n",
          "createdAt": "2021-09-10T13:48:18Z",
          "updatedAt": "2021-09-10T13:48:18Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "MDU6SXNzdWU2NzA3MDczMzE=",
      "title": "Caching rejected cipher suites",
      "url": "https://github.com/lake-wg/edhoc/issues/9",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Extracted from https://arxiv.org/abs/2007.11427\r\nhttps://www.ietf.org/proceedings/108/slides/slides-108-lake-tamarin-study-of-edhoc-00\r\n\r\n\"the specification does not describe for how long the initator should remember a rejected cipher suite for a given party. \"\r\n\r\n",
      "createdAt": "2020-08-01T09:38:47Z",
      "updatedAt": "2020-11-02T17:44:14Z",
      "closedAt": "2020-11-02T17:44:14Z",
      "comments": []
    },
    {
      "number": 10,
      "id": "MDU6SXNzdWU2NzA3MTEyMzE=",
      "title": "Injective agreement issue (was: G_IY in session key material)",
      "url": "https://github.com/lake-wg/edhoc/issues/10",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Extracted from https://arxiv.org/abs/2007.11427\r\nhttps://www.ietf.org/proceedings/108/slides/slides-108-lake-tamarin-study-of-edhoc-00\r\n\r\n\"While we show bidirectional injective agreement on G_X and G_Y for all methods, initiators cannot obtain injective agreement on G_IY when using the STAT method themselves. \"\r\n\r\nThis is a special case of issue #7. ",
      "createdAt": "2020-08-01T09:44:40Z",
      "updatedAt": "2021-04-22T08:39:13Z",
      "closedAt": "2021-04-22T08:39:13Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Key confirmation is obtained with the following OSCORE exchange. An optional fourth EDHOC message is an alternative, see #18.",
          "createdAt": "2020-10-16T11:57:31Z",
          "updatedAt": "2020-11-06T07:04:57Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "More background:\r\nWhile the lack of \u201cinjective agreement\u201d is specific to the static Diffie-Hellman, the lack of explicit key confirmation for the Initiator exists also for the modes when I authenticates with a signature.\r\n\r\ndraft-ietf-lake-edhoc-02 adds text illustrating that while R gets explicit key agreement after verifying message_3, I does not get explicit key agreement until I has verified an OSCORE message from R. The recommendation is to wait with storing the keying material long-term until key confirmation has been assured.",
          "createdAt": "2020-11-06T07:07:23Z",
          "updatedAt": "2020-11-06T07:07:23Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Key confirmation addressed in -06 and earlier versions.",
          "createdAt": "2021-04-22T08:39:13Z",
          "updatedAt": "2021-04-22T08:39:13Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "MDU6SXNzdWU2NzA3MjAyODI=",
      "title": "Agreement of method",
      "url": "https://github.com/lake-wg/edhoc/issues/11",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Section 3 of -00 says \"The Initiator and the Responder need to have agreed on a single method to be used for EDHOC.\"\r\n\r\nIs this enough for expected deployments of EDHOC. If not, is an attacker blocking one method to force the use of a second method acceptable or is negotiation/verification of the selected method needed?",
      "createdAt": "2020-08-01T09:57:58Z",
      "updatedAt": "2021-02-21T07:01:15Z",
      "closedAt": "2021-02-21T07:01:14Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "In version -01 this is more appropriately described as:\r\n\r\n\"The Initiator decides on the method parameter, see {{method-types}}. The Responder either accepts or rejects.\"\r\n\r\nThis scheme makes sense for the potentially common setting that the Initiator is a constrained device/device behind constrained network, and the Responder is less constrained.",
          "createdAt": "2020-10-20T06:07:59Z",
          "updatedAt": "2020-10-20T06:07:59Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "This looks good.",
          "createdAt": "2020-11-10T07:24:10Z",
          "updatedAt": "2020-11-10T07:24:10Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This can be closed now",
          "createdAt": "2021-02-21T07:01:14Z",
          "updatedAt": "2021-02-21T07:01:14Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "MDU6SXNzdWU2ODgwMTk5NDQ=",
      "title": "Old notation U and V",
      "url": "https://github.com/lake-wg/edhoc/issues/12",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "4.2.3 \r\n\"If V does not support the selected cipher suite\"\r\n\r\n7.1 \r\n\"Repudiation: In EDHOC authenticated with signature keys, Party U could theoretically prove that Party V performed a run of the protocol by presenting the private ephemeral key, and vice versa.\"",
      "createdAt": "2020-08-28T11:50:20Z",
      "updatedAt": "2020-10-20T05:23:04Z",
      "closedAt": "2020-10-20T05:23:04Z",
      "comments": []
    },
    {
      "number": 13,
      "id": "MDU6SXNzdWU2ODgxMDAwMTg=",
      "title": "Clarify encoding in Appendix B",
      "url": "https://github.com/lake-wg/edhoc/issues/13",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [],
      "body": "Timothy Claeys suggested changes (on page 47):\r\n\r\nOLD\r\nID_CRED_x = { 34 : COSE_CertHash }, for x = I or R, and since the\r\nSHA-2 256-bit Hash truncated to 64-bits is used (value -15):\r\n\r\nNEW\r\nID_CRED_x = { 34 : COSE_CertHash }, for x = I or R. The digest in \r\nCOSE_CertHash is computed by CBOR decoding CRED_R, hashing the certificate \r\nbytes with SHA-2 256-bit and truncating the digest to 64-bits (value -15).\r\n\r\n---\r\n\r\nOLD\r\nCRED_R is the certificate encoded as a byte string:\r\n\r\nNEW\r\nCRED_R is the certificate encoded as a CBOR bstr:\r\n\r\n",
      "createdAt": "2020-08-28T14:05:15Z",
      "updatedAt": "2020-10-20T08:19:00Z",
      "closedAt": "2020-10-20T08:19:00Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm . . . need to trim the text in the first change a bit more, taking into account the preceding sentence.\r\n\r\nOLD\r\n\"And because 'x5t' has value certificate are used, ID_CRED_R is the following:\r\n\r\nID_CRED_x = { 34 : COSE_CertHash }, for x = I or R, and since the SHA-2 256-bit Hash truncated to 64-bits is used (value -15):\"\r\n\r\nPerhaps \r\n\r\nNEW\r\n\"And because 'x5t' is used, ID_CRED_R = { 34 : COSE_CertHash }.\r\n\r\nThe digest in COSE_CertHash is computed by CBOR decoding CRED_R, hashing the certificate\r\nbytes with SHA-2 256-bit and truncating the digest to 64-bits (value -15).\"\r\n\r\n\r\n",
          "createdAt": "2020-10-20T05:17:58Z",
          "updatedAt": "2020-10-20T05:17:58Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@fpalombini: Should we update the appendix directly, or the test vector code?",
          "createdAt": "2020-10-20T05:18:36Z",
          "updatedAt": "2020-10-20T05:18:36Z"
        },
        {
          "author": "fpalombini",
          "authorAssociation": "COLLABORATOR",
          "body": "The test vector code only includes the data, all the text around is added manually, so we can only change that.",
          "createdAt": "2020-10-20T07:56:21Z",
          "updatedAt": "2020-10-20T07:56:21Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "MDU6SXNzdWU3MzQ2NDg2NzM=",
      "title": "Specify key exchange as KEM?",
      "url": "https://github.com/lake-wg/edhoc/issues/17",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "Close?"
      ],
      "body": "All new PQC algorithms from NIST is expected to be specified as Key Encapsulation Methods (KEM). Might be a good idea to specify the key exchange in EDHOC so that is is prepared to be used with future KEMs\r\n\r\nInitiator: Generate ephemeral public key PK and send to R\r\nResponder: Use PK use it to encapsulate. Send ciphertext to I\r\nInitiator: Decapsulate\r\n\r\nECDHE can quite easily be specified as a KEM. CFRG HPKE does exactly this.",
      "createdAt": "2020-11-02T16:32:16Z",
      "updatedAt": "2021-10-22T08:37:11Z",
      "closedAt": "2021-10-22T08:37:11Z",
      "comments": [
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "Having a PQC/future safe version framework seems interesting - can this be achieved without extra messages or overhead?",
          "createdAt": "2020-11-13T15:11:07Z",
          "updatedAt": "2020-11-13T15:11:07Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, It can be achieved without extra messages or overhead.\r\n\r\nEDHOC can be specified using the CFRG HPKE functions (using the exact definitions would change implementations):\r\n\t( skX, pkX ) = GenerateKeyPair()\t\t( skX, pkX ) = GenerateKeyPair()\r\n\t( shared_secret, enc ) = Encap( pk ), \t\t( shared_secret, enc ) = AuthEncap(pkR, skS )\r\n\tshared_secret = Decap( enc, sk ), \t\tshared_secret = AuthDecap( skR, pkS )\r\n\r\nECDHE can quite easily be specified as a KEM. CFRG HPKE does exactly this. \r\n\t(sk, pk) = (x, gx)\t(shared_secret, enc) = (gxy, gy)\r\n\r\nSuch a reformulation would very likely work for PQC KEMs when signature authentication. However it seems moore uncertain that future PQC KEMs will they adhere to the CFRG HPKE AuthEncap, AuthDecap interfaces (which would be needed in the static DH authentication). PQC algorithms might require additional precautions when keys are used more than once. In AuthEncap() both pkR, skS would be used more than once.\r\n\r\nIf we are pretty certain the change allow future PQC KEMs can be used, I think the change to KEM is worth doing. If we are uncertain future PQC KEMs will adhere to the interface, the change to KEM might just be confusin to people used to ECDHE.\r\n\r\n\r\n\r\n",
          "createdAt": "2020-11-14T09:30:03Z",
          "updatedAt": "2020-11-14T09:30:03Z"
        },
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "Is the \"EDHOC KEM\" or the CRFG Hybrid function being discussed in COSE?",
          "createdAt": "2020-11-17T07:46:06Z",
          "updatedAt": "2020-11-17T07:46:06Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@pbtgit There was a comment at the IETF 109 WG meeting that any impact on the use of COSE needs to be considered. Was this your concern? We should bring up this for discussion again at the December 18 interim.",
          "createdAt": "2020-12-02T12:58:27Z",
          "updatedAt": "2020-12-02T12:58:27Z"
        },
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "@gselander My comment was more a about potential re-use of COSE definitions/constructions than an actual concern. ",
          "createdAt": "2020-12-02T13:07:13Z",
          "updatedAt": "2020-12-02T13:07:13Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "We tried this in #38, discussed at the interim Dec. 2020 and agreed not to do it.",
          "createdAt": "2021-01-26T05:15:56Z",
          "updatedAt": "2021-01-26T05:15:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue was brought up again in #180. Method 0 uses ECC in traditional KEM and Signature interfaces and will work with KEM and Signatures specified including PQC. I think this should be made clear in the text even if COSE has not specified any other KEMs right now. This would not be a technical change. G_X and G_Y are already confirming to a KEM interface.\r\n\r\nMethod 1,2,3 does not use ECC as a KEM and cannot do so without additional overhead. ",
          "createdAt": "2021-10-07T07:26:06Z",
          "updatedAt": "2021-10-07T07:26:06Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this again?",
          "createdAt": "2021-10-11T09:07:10Z",
          "updatedAt": "2021-10-11T09:07:10Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "MDU6SXNzdWU3MzQ3NDk1NTY=",
      "title": "Optional message_4 for key confirmation",
      "url": "https://github.com/lake-wg/edhoc/issues/18",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The Initiator does not get explicit key confirmation until the Initiator has received a MAC calculated with a key derived from PRK_4x3m and TH_4. One way to get explicit key confirmation is that R sends a OSCORE request or response to I.\r\n\r\nShould EDHOC specify an optional message_4 with the sole purpose to give I explicit key confirmation (Suggestion from Karl Norrman which did a formal verification of EDHOC). The fourth message could be very short and simple\r\n\r\n   message_4 = (\r\n     ? C_I : bstr_identifier,\r\n     CIPHERTEXT_4\r\n   )\r\n\r\nwhere CIPHERTEXT_4 is only a MAC, i.e. length of plaintext == 0\r\n",
      "createdAt": "2020-11-02T19:06:17Z",
      "updatedAt": "2021-04-22T08:40:30Z",
      "closedAt": "2021-04-22T08:40:30Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The Initiator can still send OSCORE messages directly after message_3 has been sent. \r\n\r\nNote that a fourth message might have other benefits than purely cryptographic as discussed previously on the list, e.g., to avoid issues where message_3 is lost or delayed due to unreliable transport. \r\n \r\nAlso note it is proposed that message_3 may as an option be sent in an OSCORE request, see draft-palombini-core-oscore-edhoc\r\n",
          "createdAt": "2020-11-06T07:17:00Z",
          "updatedAt": "2020-11-06T07:17:00Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it's good to define Message 4. If defined, I suppose optionality is about sending it, while it has to be supported and understood as for the other messages.\r\n\r\nI agree this has the advantages beyond security mentioned above.\r\n\r\nSince it's optional, one can wonder for how long the Initiator should possibly wait for it before giving up, and possibly start sending application data anyway if it does not care of key confirmation before doing that.\r\n\r\nHow about this kind of signaling?\r\n\r\n1) In Message 2, the Responder can signal that it will send Message 4 later on, as a heads up to the Initiator.\r\n\r\n2) In Message 3, the Initiator can:\r\n\r\n2a) Explicitly request for Message 4 to be sent, if its sending was not anticipated with the signaling in Message 2 (see above); or\r\n\r\n2b) If an upcoming Message 4 was signaled in Message 2 (see above), explicitly tell the Responder to not send Message 4, as not caring to achieve key confirmation before sending application data.",
          "createdAt": "2020-11-10T07:26:18Z",
          "updatedAt": "2020-11-10T07:32:45Z"
        },
        {
          "author": "TimothyClaeys",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am also in favor of defining a `message 4` which can optionally be requested by the Initiator. \r\n\r\nI don't know if it is useful to provide the ability to the Responder to notify the Initiator in `message 2` that it will send a `message 4`. I am unsure about the advantage of letting the Responder decide to send a` message 4` if the Initiator didn't specifically request it.\r\n\r\nPersonally, I think it makes more sense to append the option to `message 1`, next to the other negotiation parameters, but there might be advantages to attaching the request to `message 3` that I don't know.\r\n\r\n",
          "createdAt": "2020-11-11T12:06:35Z",
          "updatedAt": "2020-11-11T12:07:47Z"
        },
        {
          "author": "eduingles",
          "authorAssociation": "NONE",
          "body": "I don't have strong opposition to adding an optional message 4, but I do not see it necessary. \r\n\r\nSince this WG is looking for an authentication protocol with OSCORE, I opt for solutions such as [draft-palombini-core-oscore-edhoc](https://tools.ietf.org/html/draft-palombini-core-oscore-edhoc-01) instead of including more messages.\r\n\r\nI do not see any practical scenario where that fourth message is really necessary and it is not solved by the following OSCORE message. If there is, I'd love to see it.\r\n\r\nOn the other hand, adding the fourth message implies adding complexity to the process, increasing the packet size and increasing the interaction time. This increases the chances of an error and the need to repeat the authentication process. Therefore, I prefer to avoid giving the option.\r\n\r\nNevertheless, it is interesting to analyze the cost of adding an additional message in networks such as LoRaWAN where an error can be a huge punishment.\r\n\r\nHaving said that, I understand that we are talking about something optional but giving that option could lead to it being widely used in scenarios where it is not necessary and decrease the performance of the protocol.",
          "createdAt": "2020-11-12T12:50:18Z",
          "updatedAt": "2020-11-12T12:50:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Sending message_3 in OSCORE as specified in draft-palombini-core-oscore-edhoc and requiring a response seems to solve all problems for use cases when The EDHOC Initiator is the OSCORE Client.\r\n\r\nWhat about cases when the EDHOC Initiator is the OSCORE Server? ",
          "createdAt": "2020-11-13T17:20:03Z",
          "updatedAt": "2020-11-13T17:20:03Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The case with OSCORE Server being EDHOC Initiator seems less problematic. No actions takes place before the first OSCORE request arrives to the server, and the OSCORE processing hands over the plain text message for CoAP processing only after having verified the MAC and thereby obtained key confirmation.",
          "createdAt": "2020-11-14T10:20:44Z",
          "updatedAt": "2020-11-14T10:20:44Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think the problem is not OSCORE processing before the Initiator has gotten \"delivery receipt for message_3  / key confirmation\". The Initiator can e.g. start sending as many OSCORE request as it wants without knowing for sure that the Responder has received and accepted message_3.\r\n\r\nThe only problem as I see it is the the Initator has sent message_3 and then does not receive any OSCORE from the Responder. How long does the Initiator store the keying material? If the Initiator is only a CoAP server it cannot send a OSCORE request to the Responder.",
          "createdAt": "2020-11-14T10:28:46Z",
          "updatedAt": "2020-11-14T10:32:53Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I have not seen any objection to specify message_4 in response to message_3 so we should do that. We should make it optional to implement so it does not add complexity when not needed. \r\n\r\nAttempted processing description:\r\n* It is optional for the Initiator to request key confirmation\r\n* If the Responder receives the signal for key confirmation and supports then it is RECOMMENDED to respond with a message containing a MAC derived from the key\r\nNOTE: If the Initiator requests key confirmation and does not receive a response, the Responder need to be prepared that the Initiator may discontinue the protocol or discard the keys. \r\n\r\nWe need to define the signal for key confirmation, most likely in message_3, whose integrity can be immediately verified.",
          "createdAt": "2021-01-21T08:59:00Z",
          "updatedAt": "2021-01-21T13:36:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I have now added specification of an optional to support message_4 to master. The EDHOC message_4 should be seen as replacement for an protected application leyer message from R to I. The intention is that it is only used when no  protected application leyer messages are sent from R to I.\r\n\r\nAt the last interim it was discussed to signal the need for key confirmation in message_1 or message_3. But when starting to implement this I wonder if that is the right thing to do. message_4 is only needed in some rare cases where no applicaiton data is sent or when application data is only sent in the I to R direction.\r\n\r\nAs this message_4 is a rare case it might be easier to just mandate key confirmation. Key confirmation is achieved by all deployments that send application data from R to I. Might be easier to mandate message_4 for the rare cases when no application data is sent from R to I. Then nothing changes in current implementations.\r\n\r\nAre there any uses cases that do not need key confirmation. I would say no, and even if there is I do not think they are common enough to introduce signaling in message_1 or 3",
          "createdAt": "2021-01-23T11:03:12Z",
          "updatedAt": "2021-01-23T11:03:12Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with the proposal. But how does the Responder know at reception of message_3 that it will later send an application message to the initiator? In case the responder is CoAP server, it requires a request to provide key confirmation in the response, and it does not a priori know if it will recieve a request with protected application data. With draft-palombini-core-oscore-edhoc it will, but this is optional to use. ",
          "createdAt": "2021-01-25T08:58:24Z",
          "updatedAt": "2021-01-25T08:58:45Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we need to define transport of auxiliary data in message_4? This would  only result in rename MAC_4 -> CIPHERTEXT_4, and add AD_4 to plaintext.\r\n",
          "createdAt": "2021-01-25T09:41:28Z",
          "updatedAt": "2021-03-04T06:35:16Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "The Responder would probably have to follow an application policy to decide if it has to send Message_4 or not.\r\n\r\nHowever, strictly while processing Message_3, the Responder may not really know why it is running EDHOC, i.e. for what exact applications. This means that a Responder running multiple applications that rely on EDHOC would need to have a single common policy covering all of them, as to whether to send Message_4 or not.\r\n\r\nAn alternative would be to decide based on the particular identity keys used while running EDHOC. Then different applications (requiring key-confirmation or not) can be associated to different identity keys, and taking a decision about sending Message_4 becomes easy. The price to pay is having multiple identity keys, although just two might suffice.",
          "createdAt": "2021-01-28T15:44:50Z",
          "updatedAt": "2021-01-28T15:44:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "No unified view from the discussion at Hackathon. \r\n\r\nExample of comments:\r\n* An explicit signal is useful\r\n* Handle out of band, e.g. using applicability statement and transport layer messages.",
          "createdAt": "2021-03-02T15:39:32Z",
          "updatedAt": "2021-03-02T15:39:32Z"
        },
        {
          "author": "highlunder",
          "authorAssociation": "NONE",
          "body": "I'm late to the discussion, so maybe I'm missing something. To me, having a well defined option for AD_4-data seems useful for all cases where AD_3-data is used in message3 to piggy-back a request where the initiator expects a reply with content.\r\n\r\nIf not, how are those scenarios meant to be handled?",
          "createdAt": "2021-03-04T08:59:52Z",
          "updatedAt": "2021-03-04T08:59:52Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Included in -06 and earlier versions.",
          "createdAt": "2021-04-22T08:40:30Z",
          "updatedAt": "2021-04-22T08:40:30Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "MDU6SXNzdWU3MzUwOTk2ODE=",
      "title": "Support of SHAKE and KMAC",
      "url": "https://github.com/lake-wg/edhoc/issues/19",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The COSE WG is working on adding SHAKE128 and SHAKE256 to COSE and there is ongoing work to define the use of KMAC128 the KMAC256 as KDFs.\r\n\r\nhttps://tools.ietf.org/html/draft-ietf-cose-hash-algs\r\nhttps://tools.ietf.org/html/draft-schaad-cose-more-algs\r\n\r\nThere has been interest in the IETF IoT community to use these algorithms. As currently specified, EDHOC supports SHAKE, but would run SHAKE in HMAC mode, which is inefficient. \r\n\r\nShould EDHOC should be updated to use a KMAC KDF together with SHAKE? I.e KMAC128 instead of HMAC-SHAKE128 for Extract and Expand.",
      "createdAt": "2020-11-03T07:52:00Z",
      "updatedAt": "2021-01-23T10:54:17Z",
      "closedAt": "2021-01-23T10:54:17Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "As I understand this, this is an aspect of future-proofing, where the cipher suite would contain one more item, the extract-and-expand-scheme, with currently two potential values: either HMAC or KMAC.",
          "createdAt": "2020-11-05T18:40:26Z",
          "updatedAt": "2020-11-05T18:40:26Z"
        },
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "No strong opinion but it seems to make sense to go for the more efficient combination with KMAC. ",
          "createdAt": "2020-11-10T13:04:17Z",
          "updatedAt": "2020-11-10T13:04:17Z"
        },
        {
          "author": "TimothyClaeys",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I seems like the current hardware acceleration for hashing in constrained devices is limited to SHA-2 implementations [1][2]. I also think it is preferable to go for the more efficient KMAC extension, unless a software implementation of KMAC-SHAKE128 would require substantially more flash than HMAC-SHAKE128.\r\n\r\n1: [https://infocenter.nordicsemi.com/index.jsp?topic=%2Fps_nrf52840%2Fkeyfeatures_html5.html](https://infocenter.nordicsemi.com/index.jsp?topic=%2Fps_nrf52840%2Fkeyfeatures_html5.html)\r\n2: [https://www.ti.com/lit/ug/swru319c/swru319c.pdf?ts=1605020127382](https://www.ti.com/lit/ug/swru319c/swru319c.pdf?ts=1605020127382)",
          "createdAt": "2020-11-10T16:22:37Z",
          "updatedAt": "2020-11-16T05:44:35Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "KMAC is basically SHAKE so if an implementation has SHAKE, they more or less have KMAC. KMAC is a thin shim layer.",
          "createdAt": "2020-11-27T09:40:21Z",
          "updatedAt": "2020-11-27T09:40:21Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The agreed KMAC change is now added to Master.\r\n\r\nThe change to the specification is quite small. EDHOC is now defined in terms of Extract and Expand instead of HKDF-Extract and HKDF-Expand. When SHA-2 is used then HKDF-Extract/HKDF-Expand is used. When SHAKE is used then KMAC is used.\r\n\r\nThe change does not affect current implementations. \r\n\r\nBTW the title of this issue is misleading. SHAKE is supported like all COSE algorithms. We are not planning to define a cipher suite at this moment but SHAKE can be used with private cipher suites.",
          "createdAt": "2020-11-27T09:44:26Z",
          "updatedAt": "2020-11-27T09:44:26Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "When SHAKE is used (currently this can only be done with a private cipher suite) then KMAC is used. This behavior is specified in -03 and has been discussed at the two last interims",
          "createdAt": "2021-01-23T10:54:17Z",
          "updatedAt": "2021-01-23T10:54:17Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "MDU6SXNzdWU3MzUwOTk5ODU=",
      "title": "Rekeying of AEAD algorithms",
      "url": "https://github.com/lake-wg/edhoc/issues/20",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The TLS WG have analyzed, discussed, and specified bounds for distinguishing and forgery attacks on various AEAD algorithms in TLS. The distinguishing attack lets an attacker destringing the ciphertext from a random string and the forgery attack lets an attacks forge a single message (typically consisting of a random looking string). CFRG is now planning to publish a document with formulas to calculate AEAD limits. The limits chosen by TLS are stricter that any earlier protocol or specification. This is fine if rekeying is easy.\r\n\r\nIt would be good if the IETF IoT community discussed which probability is acceptable for the IoT protocols in IETF. \r\n\r\nEDHOC does not use the same key more than once, but the exported session key might be used for a long period in e.g. OSCORE. The most efficient solution may be to rekey in the application security protocol. E.g. if OSCORE would frequently derive a new Sender/Recipient Key from the Master Key, this would effectively mitigate distinguishing attacks. See e.g. \"key_derivation_rate\" in SRTP (RFC 3711). This is not currently part of OSCORE but could quite easily be added in a backward compatible way.\r\n\r\nWhat is the acceptable probability for IoT? How do we do this rekeying for OSCORE? Do we need to do anything in EDHOC at all?",
      "createdAt": "2020-11-03T07:52:37Z",
      "updatedAt": "2021-04-22T08:36:52Z",
      "closedAt": "2021-04-22T08:36:52Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "OSCORE sequence numbers allow synchronized rekeying at regular intervals. The \"key_derivation_rate\" needs to be known, either alg-dependent or set by the application, but there could be a default value, e.g., corresponding to AES_128_CCM_8. \r\n ",
          "createdAt": "2020-11-06T06:35:22Z",
          "updatedAt": "2020-11-06T06:35:22Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "How many usable messages are we talking about?\r\n\r\nAfter skimming DTLS1.3, it sounds to me that it's about 2^23 messages. If that's the order of magnitude we're talking about, I'd practically do nothing at all but flag a security context as exhausted at reaching 2^23 rather than reading 2^40 with a per-algorithm limit, or just the worst-case limit for the supported algorithm. Any mechanism that's added would need to justify how it amortizes the additional code size in firmware updates over running an EDHOC continuation run every 2^23 messages.\r\n\r\nIf, of course, the sequence number space is limited to something to less than 2^14, something might need to be done.\r\n\r\n[edit: And frankly I'd be glad to fit my sender sequence numbers and replay window low water mark in uint32_t ;-) ]",
          "createdAt": "2020-11-09T15:28:30Z",
          "updatedAt": "2020-11-09T15:29:39Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, 2^23 is the number we have seen for DTLS 1.3 and which can serve as a first estimate also for OSCORE. (The setting is slightly different though, related to \"what is the acceptable probability for IoT?\" which is likely going in one direction, and the use of AAD with the AEAD, which goes in the opposite direction.)\r\n\r\nDid I understand the comment right, that another asymmetric EDHOC run after ~ 2^20 messages is not an issue?\r\n\r\nAbout \"additional code size in firmware updates\": The mechanism we are talking about could be a derivation of a new master secret every  \"key_derivation_rate\" message. That would probably not have a huge impact in OSCORE code size. But it would be an update to OSCORE.\r\n\r\nEdit: Here is an example of addition to OSCORE:\r\nhttps://mailarchive.ietf.org/arch/msg/lake/5DAmN2c7cOXCUej-4XRHxa18MIQ/\r\n",
          "createdAt": "2020-11-09T15:52:40Z",
          "updatedAt": "2020-11-10T14:42:04Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "At least not in terms of energy consumption. Even if an EDHOC exchange has 1000x the energy cost of a regular message, that's still only 0.1% in total change. (Admittedly that number is out of thin air, looking for better ones).\r\n\r\nIt may be an issue for devices that previously would have gotten away with being sure to never run out of sequence numbers but now can, though :-/",
          "createdAt": "2020-11-09T16:08:47Z",
          "updatedAt": "2020-11-09T16:08:47Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Overall, this sounds like something better to do in OSCORE.",
          "createdAt": "2020-11-10T07:23:48Z",
          "updatedAt": "2020-11-10T07:23:48Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Done in CoRE. No comment on the key-update function so far, make a new issue if necessary.",
          "createdAt": "2021-04-22T08:36:52Z",
          "updatedAt": "2021-04-22T08:36:52Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "MDU6SXNzdWU3MzUxMDM5Njc=",
      "title": "Use of SHA-512 in constrained IoT.",
      "url": "https://github.com/lake-wg/edhoc/issues/21",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "SHA-512 is not supported on many IoT devices and the question is if it ever will. Currently SHA-256 have wide support and is often HW accelerated. Adding also SHA-512 requires more code storage. If SHA-256 gets replaces it would likely be with SHAKE128 or some future XOF emerging from the NIST lightweight standardization protect (e.g. Gimli).\r\n\r\nEd25519 is currently only specified with SHA-512. While there are benefits of having a single algorithm, CFRG should maybe have taken IoT more into consideration. Specifying Ed25519 with another hash algorithm is technically easy, but would mean even less implementations.\r\n\r\nIt has been suggested that draft-ietf-lwig-curve-representations-05 and W-25519 from Draft NIST SP 800-186 would solve this problem. As far as we know, they only helps with implementing X25519 and Ed25519 on devices which only has acceleration of Weierstrass curves. They do not affect the hash function in any way. We plan to add references to draft-ietf-lwig-curve-representations-05 and W-25519 with the text that they may help with HW acceleration.\r\n\r\nIs the use of SHA-512 in Ed25519 a problem?",
      "createdAt": "2020-11-03T08:00:23Z",
      "updatedAt": "2021-01-26T05:30:20Z",
      "closedAt": "2021-01-26T05:30:20Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Ed25519 has several benefits, including performance, which makes it very well suited for a constrained setting, but supporting multiple hash functions is an issue. The bundling of Ed25519 and SHA-512 makes the threshold for changing to Ed25519 high. Bundling Ed25519 with another even less common secure hash function does not make this easier.\r\n\r\nEither we accept that constrained devices for a long time to come (also considering life time of the device) will not be able to make use of the widely accepted upcoming signature algorithm, or we need to make the transition easier. \r\n\r\nIt has been discussed before, but perhaps we have now better arguments for the case of Ed25519 with SHA-256? Although it is far from ideal to specify multiple variants, the difference between Ed25519/SHA-512 and Ed25519/SHA-256 is very small. The implementation effort for extending support from the first to the second is small, and the change is only needed in those servers that communicates with constrained devices. Supporting the two SHA algorithms is no issue on the non-constrained side.\r\n\r\nShall we propose to CFRG to specify Ed25519 with SHA-256?\r\nWould Ed25519 with SHA-256 be deployed by IoT industry?\r\n\r\n\r\n ",
          "createdAt": "2020-11-05T09:21:46Z",
          "updatedAt": "2020-11-05T18:30:13Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Copying from Ilari's recent email to LWIG/COSE:\r\n\r\n\"And some notes about making version of Ed25519 that uses SHA-256:\r\n\r\n- The Ed25519 subkey derivation needs to be split into two hashes\r\n  instead of running once and splitting the result. The input fits into\r\n  one block anyway, so it will still be fast. For example,\r\n  a=SHA256(0|k_priv) and seed=SHA256(1|k_priv).\r\n- It is not trivially possible to replace the inner hash SHA512(seed|M)\r\n  with SHA256(seed|M). However, it turns out that the order in fact\r\n  does allow this replacement.\r\n- If one wants noisy signatures, one way is to replace SHA256(seed|M)\r\n  with SHA256(seed|M)^noise. The noise must be independent of the\r\n  private key and seed, but otherwise bad noise (including completely\r\n  broken one) will not cause immediate catastrophic failure.\r\n- If one wants randomized signatures, due to the same reasons as why\r\n  the inner hash may be replaced, it is recommended to generate more\r\n  randomness than 256 bits, and then use SHA256 to squash it to 256\r\n  bits. This hedges against not-quite-ideal random number generators\r\n  that would otherwise cause catastrophic failure. However, it will\r\n  not prevent broken random number generator from causing immediate\r\n  catastrophic failure.\r\n- The outer hash SHA512(R|A|M) can trivially be replaced by\r\n  SHA256(R|A|M).\"\r\n\r\nThe mail also has some details about qDSA:\r\nhttps://mailarchive.ietf.org/arch/msg/cose/3WATdZGKvprM7qCZ_axVccvfYzU/\r\n",
          "createdAt": "2020-11-09T20:17:49Z",
          "updatedAt": "2020-11-09T20:17:49Z"
        },
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "It would be good to have metrics comparing SHA-512 in terms of code size, message size and computations:\r\nTo my knowledge SHA-512 can be accelerated using NEON extension of ARM. Message size is still highly relevant though. \r\n",
          "createdAt": "2020-11-10T13:18:54Z",
          "updatedAt": "2020-11-10T13:18:54Z"
        },
        {
          "author": "eduingles",
          "authorAssociation": "NONE",
          "body": "My concern is with the constrained devices that are close to the minimum requirements for running EDHOC. I would not switch to SHA-512 at this time without the support of the manufacturers. Using alternatives that are not HW accelerated I believe would considerably reduce the use of EDHOC on those devices. Even nrf52840 does not support SHA-512 by hardware either although it supports Ed25519 (https://infocenter.nordicsemi.com/pdf/nRF52840_PS_v1.1.pdf). Therefore, I am in favour of keeping SHA-256 if this implies that the devices can take advantage of the hardware modules and avoid doing it by software.\r\n\r\nOn the other hand, in line with #22 , I would pose the same question. What kind of devices should be supported in EDHOC?",
          "createdAt": "2020-11-12T12:52:39Z",
          "updatedAt": "2020-11-12T12:52:39Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "SHA-256-only implementations are supported as of 70088cc.",
          "createdAt": "2021-01-26T05:30:20Z",
          "updatedAt": "2021-01-26T05:30:20Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "MDU6SXNzdWU3MzY4Mjg5NjY=",
      "title": "Mandatory to implement cipher suite",
      "url": "https://github.com/lake-wg/edhoc/issues/22",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Considering the potential long deployment times for these device it seemed prudent to require a cipher suite based on Curve25519 (cipher suite no. 0).\r\n\r\nEdDSA (and to a smaller degree X25519) does not have as many IoT implementations as ES256 and P-256, but draft-ietf-lwig-curve-representations-05 and W-25519 is suggested to provide a work-around for implementing X25519 and Ed25519 on devices which only has acceleration of Weierstrass curves.\r\n\r\nStill remain the issues with SHA-512 (see #21) and with supporting multiple SHA algorithms (#2).\r\n\r\nOptions:\r\n\r\n1. Change MTI cipher suite to one based on ECDSA, e.g., no. 2. This has negative consequences on performance and security, which will remain for long time.\r\n\r\n2. Keep MTI cipher suite 0. This may mean accept that some devices will not implement MTI cipher suite. This is beyond the control of the specification and has a number of issues.\r\n\r\n3. Define a MTI cipher suite using Curve25519 which has the potential to be widely implemented, e.g., based on a TBD Ed25519 with SHA-256 (see #21). This requires a specification, but would be possible to implement with legacy Weierstrass curve computations and hash algorithm.\r\n\r\n\r\n",
      "createdAt": "2020-11-05T10:55:22Z",
      "updatedAt": "2022-02-22T08:03:08Z",
      "closedAt": "2022-02-22T08:03:08Z",
      "comments": [
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "I tend to prefer Option 2 as to what is MTI. The uncertainty on deploying Option 3 might be even larger than for Option 2.\r\n\r\nThe Group OSCORE document [1] also indicates Ed25519 as MTI. The outcome of this discussion will likely affect Group OSCORE, as better to have the same MTI signature algorithm of EDHOC. Thinking of devices that use EDHOC and OSCORE on one hand, and Group OSCORE on the other hand, having a single signature algorithm implemented would be clearly preferable if not unavoidable.\r\n\r\nJust for information, see the nRF52840 DK [2] equipped with the CryptoCell CC310 accelerator [3] and providing HW acceleration for Ed25519.\r\n\r\n\r\n[1] https://datatracker.ietf.org/doc/draft-ietf-core-oscore-groupcomm/\r\n\r\n[2] https://www.nordicsemi.com/-/media/Software-and-other-downloads/Product-Briefs/nRF52840-DK-product-brief.pdf?la=en&hash=5D78D8104D4FC04D539BDBACFBB5150F34487447\r\n\r\n[3] https://infocenter.nordicsemi.com/index.jsp?topic=%2Fps_nrf9160%2Fcryptocell.html",
          "createdAt": "2020-11-10T07:22:47Z",
          "updatedAt": "2020-11-10T07:22:47Z"
        },
        {
          "author": "TimothyClaeys",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I tend to prefer option 3. I think option 1 is not preferable because of the long term impact it would have. \r\n\r\nConcerning the deployment issues of option 3, one aspect we can consider is that upcoming devices (like the nRF52840) will have all the hardware building blocks to fully accelerate Ed25519 with SHA256. The ARM cryptocell has hardware acceleration for SHA-2, but only up to 256 [1]. I am not aware of old or new constrained devices with hardware acceleration for SHA-512.\r\n\r\n1: [https://developer.arm.com/ip-products/security-ip/cryptocell-300-family](https://developer.arm.com/ip-products/security-ip/cryptocell-300-family) ",
          "createdAt": "2020-11-10T17:16:23Z",
          "updatedAt": "2020-11-10T17:18:06Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "The documentation of the cryptocell (eg. [in the nrf52840 docs](https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcomp_matrix_nrf52840%2FCOMP%2Fnrf52840%2FnRF52840_doc_ref_design_files_overview.html)) is confusing to me. It states that it has acceleration for SHA up to 256, and that it supports Ed25519 (and the document it cites for it is the original Ed25519 one that puts SHA-512 in the example).\r\n\r\nHas anyone outside the hardware builders specified Ed25519 with SHA-256 anywhere so far? If so, option 3 might be a lot faster in that it could be as simple as allocating COSE identifiers for that specified algorithm combination, but it'd at least need a specification.\r\n\r\n---\r\n\r\nFrom the point of view of implementing this in anything but the most constrained devices, going with 3 would make things a bit harder: Support for Ed25519 as in [RFC8032](https://tools.ietf.org/html/rfc8032) is widely available, but for the 256 version not so, and even if right now someone would produce a published RFC about Ed25519-SHA256 *and* people like the OpenSSL maintainers started adding it, it'd still take considerable time to be available on widespread systems. Having an existing specification out there, even if it's as short as an application note, may help getting a head start there as it could justify starting work on the additions in the widespread libraries.",
          "createdAt": "2020-11-10T17:33:36Z",
          "updatedAt": "2020-11-10T17:33:36Z"
        },
        {
          "author": "eduingles",
          "authorAssociation": "NONE",
          "body": "I am aware of the security issues and would like to support option 2. However, I must go for option 1. Forcing cipher suites with Ed25519 would make it difficult to use EDHOC on Cortex M3 like devices. For example, Openmote B and Zolertia Firefly with the CC2538 microchip can run P-256 in hardware while the studies of Ed25519 on Cortex M3 devices mention issues in its execution. \r\n\r\nI consider that denying the use of P-256 establishes an important red line that would leave many devices out. Also, the arguments here should be consistent with issue #21 on SHA-512. And since it would mark the future of the protocol, I would raise a question. Will EDHOC be an IoT protocol designed for constrained devices with P-256 or EDHOC will be for not so constrained devices?",
          "createdAt": "2020-11-12T12:44:39Z",
          "updatedAt": "2020-11-12T12:44:39Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "First of all, it is acknowledged that it may be an issue to support Ed25519 and this the reason why we have the discussion about whether the MTI algorithms really should be mandatory to implement in the most constrained settings, which definitely are the target for EDHOC.\r\n\r\nSecond, one reason for ECC based on Curve25519 is superior performance, which should be good news for constrained IoT, once available.\r\n\r\nThird, if Curve25519 based crypto is not available then those devices will have to settle for P-256, or for mapping Curve25519 to Weierstrass coordinates (draft-ietf-lwig-curve-representations). The specification needs to provide guidance here. But we don't want to prevent encourage the move to what is expected to be better and more performant algorithms.\r\n\r\n@eduingles Could you please provide a reference to issues of using Ed25519 you mention? Assuming Ed25519 is specified with SHA-256 (option 3), does that help or what additional/remaining issues do you see? Thanks!\r\n",
          "createdAt": "2020-11-13T11:11:58Z",
          "updatedAt": "2020-11-13T11:57:21Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "If it turns out that both the specified curves have flaws that implementors may consider insurmountable for their deployments, and that option 3 is harder than just putting an entry in the registry pointing to whoever already specified it,\r\n\r\nwould it be an option to, rather than making one MTI, state that there are currently no suitable algorithms to make MTI, and instead it is recommended that implementations provide both 1 and 2 if they can (otherwise, either of them) until a universally suitable curve is specified (which is then invited to update this document to make it MTI)?",
          "createdAt": "2020-11-13T14:01:19Z",
          "updatedAt": "2020-11-13T14:01:19Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Implement proposal discussed in latest interim meeting. ",
          "createdAt": "2021-01-21T09:00:04Z",
          "updatedAt": "2021-01-21T09:00:04Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I reopened this issue following the discussion of MTI cipher suite at the LAKE interim Jan 2021. \r\n\r\nRecap: Following the discussion above and at the LAKE interim Dec 2020 (minutes:\r\nhttps://datatracker.ietf.org/meeting/interim-2020-lake-04/materials/minutes-interim-2020-lake-04-202012181600-00)\r\nwe formulated the following recommendation in EDHOC-04:\r\n\r\n\"To enable as much interoperability as we can\r\n  reasonably achieve, less constrained devices SHOULD implement\r\n  both cipher suite 0 (AES-CCM-16-64-128, SHA-256, X25519, \r\n  EdDSA, Ed25519, AES-CCM-16-64-128, SHA-256) \r\n  and cipher suite 2 (AES-CCM-16-64-128, SHA-256, P-256, \r\n  ES256, P-256, AES-CCM-16-64-128, SHA-256).\r\n  Constrained endpoints SHOULD implement cipher suite 0 or cipher\r\n  suite 2.\"\r\n\r\nPlease consider the arguments leading up to this formulation when proposing a change.",
          "createdAt": "2021-02-02T10:43:44Z",
          "updatedAt": "2021-02-02T10:43:44Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would like to understand better the pitfalls of Option 1:\r\n\r\n> This has negative consequences on performance and security, which will remain for long time.\r\n\r\nPerformanse-wise, the indicators we care about are:\r\na) processing time\r\nb) code footprint\r\nc) messaage overhead\r\n\r\nIn terms of (a), a software implementation of Ed25519 seems to be favored over ECDSA. From John's slides at [1], I gather that bad number of ECDSA have been due to unoptimized implementations of P-256 and that on some platforms ECDSA and Ed25519 have \"equal performance\". More importantly, the state-of-the-art constrained devices have dominantly ECDSA hardware accelerators. If we are to optimize for the constrained side, as we usually do, this indicator favors ECDSA. Since we are talking about hardware, this is expected to remain for at least the next 5-10 years, considering what is already deployed. \r\n\r\nIn terms of (b), an implementation of EdDSA requires SHA-512, in addition to SHA-256 that is needed by EDHOC, so two hash functions. Again, constrained devices have dominantly SHA-256 acceleration, without clear plans on adding SHA-512 to the mix. Code footprint favors ECDSA.\r\n\r\nIn terms of (c), there is no difference.\r\n\r\nMy conclusion from (a), (b) and (c) is that the argument on the negative impact of ECDSA on performance in constrained devices does not hold and that ECDSA is in fact favored performance-wise.\r\n\r\nSecurity-wise, Ed25519 is favored. There have been speculations on the possible backdoors in the NIST P-256 curve. As far as I am aware, these are still considered speculations. The problem are the attacks on the signature algorithm, ECDSA. A notable example is Minerva [1], an implementation attack. What are the other attacks on ECDSA we should take into consideration? Do these attacks affect the hardware-accelerated implementations in constrained devices we are targeting?\r\n\r\n[1] https://datatracker.ietf.org/meeting/interim-2020-lake-04/materials/slides-interim-2020-lake-04-sessa-edhoc-issues-after-03-00 (slide 15)\r\n[2] https://minerva.crocs.fi.muni.cz",
          "createdAt": "2021-02-26T10:59:54Z",
          "updatedAt": "2021-03-02T11:23:56Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "People may have missed that @emanjon provided input to this issue in \r\nhttps://mailarchive.ietf.org/arch/msg/lake/75nRaD6czYG6RqLT06Qe8C_lsaM/\r\n\r\n@malishav:  Would you like to comment on this input, either here or on the mailing list? \r\nCan we narrow down the remaining concerns?",
          "createdAt": "2021-07-15T19:52:35Z",
          "updatedAt": "2021-07-15T19:52:35Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@gselander I think that @emanjon 's mail summarizes nicely the data points that we should take into account to make a decision. From that email, I concurred with his suggestion to delay the decision on this as late as possible, when other issues are closed. Should we have the consensus call at the IETF 111 meeting?",
          "createdAt": "2021-07-16T08:27:42Z",
          "updatedAt": "2021-07-16T08:27:42Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems like there is agreement on this now. Closing.",
          "createdAt": "2022-02-22T08:03:08Z",
          "updatedAt": "2022-02-22T08:03:08Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "MDU6SXNzdWU3Mzc1MjAxNDM=",
      "title": "Agreement/negotiation of parameters/options",
      "url": "https://github.com/lake-wg/edhoc/issues/23",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "EDHOC has parameters/options that are set in different ways. Agreeing beforehand reduces flexibility. Negotiation might increase message sizes and roundtrips. Letting each party chose parameters in the protocol run allows an on-path attacker to block parameters that can be seen from the message size, and may affect availability as the parties may not support the same COSE options. \r\n \r\nParameters agreed beforehand:\r\n- Method (see #11)\r\n- Transport and Correlation\r\n- Use and format of AD_1, AD_2, AD_3\r\n \r\n(If a parameter not agreed beforehand is received the protocol can be discontinued, see #11 )\r\n\r\nParameters negotiated/verified:\r\n- Cipher suite\r\n \r\nChosen by each party (no current requirement and agreement beforehand):\r\n- Raw public key OR certificate: CRED_R and CRED_I\r\n- Type of credential identifier: ID_CRED_R and ID_CRED_I\r\n\r\nShould agreement/negotiation of any of the parameters be changed?\r\n",
      "createdAt": "2020-11-06T06:52:16Z",
      "updatedAt": "2021-02-21T10:32:16Z",
      "closedAt": "2021-02-21T10:32:16Z",
      "comments": [
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "This current way looks good.",
          "createdAt": "2020-11-10T07:24:00Z",
          "updatedAt": "2020-11-10T07:24:00Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "My suggestion is to add an appendix with some explanatory/example applicability text that collects all the things that need to be agreed beforehand.\r\n",
          "createdAt": "2020-11-16T05:19:09Z",
          "updatedAt": "2020-11-16T05:19:09Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "There seems to be WG consensus for the high level approach. An appendix has been added that summarized the informaiton. Any further comments on the specific content of the appendix should be filed as a new issue or PR.",
          "createdAt": "2021-02-21T10:32:16Z",
          "updatedAt": "2021-02-21T10:32:16Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "MDU6SXNzdWU3Mzc1NTA4ODc=",
      "title": "Forward and backward secrecy",
      "url": "https://github.com/lake-wg/edhoc/issues/24",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The currently best practice for IPsec is to do a new ECDHE every few hours or after a certain amount of data has been sent. Constrained IoT are not expected to run ECDHE every few hours, but can probably do better that today when many IoT deployments today use the same session key for 10 years. Perhaps every month or every year?\r\n\r\nFrequent ECDHE achieves:\r\n* An attacker having compromised R or I needs to be active to get the session key.\r\n* An attacker gaining a session key can only use it for a limited period of time forward and backward in time.\r\n\r\nIs rerunning EDHOC efficient enough?\r\n\r\nSuggestion by Karthik on the list to PSK-FS by exchanging nonces without DHE and then hash with sequence numbers / previous state. This can likely be done much more efficient with an update to OSCORE, and should be considered in the context of #20.\r\n\r\nIs there a need for an \"intermediate\" protocol component that provides both forward and backward secrecy but is more lightweight than the 3-pass PSK-ECDHE which was removed?\r\n\r\n",
      "createdAt": "2020-11-06T07:52:30Z",
      "updatedAt": "2021-04-22T08:42:07Z",
      "closedAt": "2021-04-22T08:42:07Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "In light of #20 we discussed running OSCORE B.2 during the hackathon. If it were to be used, it'd be good to have it more formalized, and include analysis of when it can run tacked on existing exchanges (possibly like B.1.2 can run without added roundtrips when the requested resource is safe).\r\n\r\nThe points there about amortization may be less applicable here as we're talking about time limits and not message limits. Still, it'd be good to get a sense for the orders of magnitude we're aiming for here. If this is done every other month and needs a single round-trip of 200 byte each in EDHOC, and firmware is updated once a year, then any mechanism added needs to fit within 2\\*200\\*6~=2KB to be worth it.\r\n\r\n[edit: Markdown is lacking automatic math mode]\r\n\r\n[edit2: Maybe that comment missed the point; hackathon discussion just running]",
          "createdAt": "2020-11-09T15:54:10Z",
          "updatedAt": "2020-11-09T16:38:02Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "It may help what kind of intermediate protocol component we're talking about here. My impression is that protocols that are static only come to LAKE to do the asymmetrical work, which is what gets them PFS. What would an intermediate protocol be other than LAKE with some preshared stuff?",
          "createdAt": "2020-11-09T17:20:04Z",
          "updatedAt": "2020-11-09T17:20:04Z"
        },
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "I am also very interested in the balance of Appendix B.2 vs re-running EDHOC.",
          "createdAt": "2020-11-10T13:14:01Z",
          "updatedAt": "2020-11-10T13:14:01Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@chrysn @pbtgit \r\nAs I see it the main question is how often it is needed to rekey for obtaining backward secrecy, i.e. secrecy of future sessions in the event of a temporary compromise enabling the use long term secrets. \r\n\r\n(The currently defined EDHOC methods or an addition to OSCORE (#20) can provide forward secrecy -- Appendix B.2 does not. The currently defined EDHOC methods or an additional CoAP Echo provides freshness.)\r\n\r\nFor backward secrecy a DH exchange is necessary, and appropriate use of the shared secret. This could potentially be a symmetric key authenticated two pass DH exchange with message sizes comparable to static DH, but computationally more lightweight.\r\n\r\n\r\nEdit: Ratcheting is one example, see \r\nhttps://www.signal.org/blog/advanced-ratcheting/",
          "createdAt": "2020-11-10T16:31:45Z",
          "updatedAt": "2020-11-11T07:58:13Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "* Discussed at LAKE interim Dec. 2020.\r\n* Minutes: \"Working assumption is either do full EDHOC exchange, or hash-based forward secrecy which requires no asymmetric operations. No formal ratcheting.\" \r\n* https://datatracker.ietf.org/doc/minutes-interim-2020-lake-04-202012181600/\r\n* Version -03 and later defines an EDHOC-Rekey-...-FS() interface.",
          "createdAt": "2021-01-26T20:54:50Z",
          "updatedAt": "2021-01-26T20:54:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Working assumption seems to hold. No additional issues has been raised.",
          "createdAt": "2021-04-22T08:42:07Z",
          "updatedAt": "2021-04-22T08:42:07Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "MDU6SXNzdWU3Mzc1NTM4NTg=",
      "title": "Need for resumption procedure?",
      "url": "https://github.com/lake-wg/edhoc/issues/25",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resumption lets endpoints close connections and only store a small amount of state. Resumption can then be performed more efficiently than a full initial handshake, which is very useful on the web. IoT devices typically have a few long connections and the work of doing a resumption may be heavier that keeping the connection open. \r\n\r\nResumption provides other benefits like re-keying and a new authentication which guarantees that messages are fresh. However, those things can be achieved much more efficiently with re-keying inside OSCORE (see #20) and the use of the CoAP Echo option (draft-ietf-core-echo-request-tag).\r\n\r\nIs there any need for a resumption mechanism in EDHOC?\r\n",
      "createdAt": "2020-11-06T07:58:10Z",
      "updatedAt": "2021-01-23T10:52:42Z",
      "closedAt": "2021-01-23T10:52:42Z",
      "comments": [
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "For EDHOC/OSCORE the case for re-keying seems stronger than the case for resumption. \r\nOr at least, the re-keying is a problem for OSCORE to solve rather than EDHOC.",
          "createdAt": "2020-11-10T13:08:26Z",
          "updatedAt": "2020-11-10T13:08:26Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been borught up at the LAKE interim meetings without anybody expressing the wish for resumption. ",
          "createdAt": "2021-01-23T10:52:42Z",
          "updatedAt": "2021-01-23T10:52:42Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "MDU6SXNzdWU3NDA2NDExMjg=",
      "title": "Compact encryption of identity",
      "url": "https://github.com/lake-wg/edhoc/issues/26",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Current specification uses XOR with a HMAC-derived key stream for encryption of identity, which saves message overhead compared with encryption with a MAC. Are we happy with this or should we replace with some other construction?\r\n\r\n ",
      "createdAt": "2020-11-11T10:09:24Z",
      "updatedAt": "2020-11-14T13:01:01Z",
      "closedAt": "2020-11-14T13:01:01Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Replaced by #34",
          "createdAt": "2020-11-14T13:01:00Z",
          "updatedAt": "2020-11-14T13:01:00Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "MDU6SXNzdWU3NDA5MzEyMDg=",
      "title": "Understanding \"selected cipher suite\"",
      "url": "https://github.com/lake-wg/edhoc/issues/28",
      "state": "CLOSED",
      "author": "StefanHri",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In message 1 a CBOR array containing the supported cipher suites is sent.\r\nThe document says \"One of the supported cipher suites is selected.\" \r\nHow is this indicated? Is the selected suite the first in the array? If so it may make sense to write something like:\r\n\"One of the supported cipher suites is selected. The selected suite is the first suite in the SUITES_I CBOR array\"",
      "createdAt": "2020-11-11T17:12:59Z",
      "updatedAt": "2020-11-15T07:24:25Z",
      "closedAt": "2020-11-15T07:24:25Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "See commit 1f853ac. \r\n@StefanHri Please close the issue after checking.",
          "createdAt": "2020-11-14T11:03:57Z",
          "updatedAt": "2020-11-14T11:03:57Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "> See commit [1f853ac](https://github.com/lake-wg/edhoc/commit/1f853ac3dd5590ae1de2132c21812f4ef3807f18).\r\n> @StefanHri Please close the issue after checking.\r\n\r\n@gselander: I think that's the wrong commit link?",
          "createdAt": "2020-11-14T12:28:28Z",
          "updatedAt": "2020-11-14T12:28:28Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n\r\n\r\n> > See commit [1f853ac](https://github.com/lake-wg/edhoc/commit/1f853ac3dd5590ae1de2132c21812f4ef3807f18).\r\n> > @StefanHri Please close the issue after checking.\r\n> \r\n> @gselander: I think that's the wrong commit link?\r\n\r\n@StefanHri Right, sorry, should be 820fc1d",
          "createdAt": "2020-11-14T12:34:39Z",
          "updatedAt": "2020-11-14T12:34:39Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "MDU6SXNzdWU3NDA5Mzc4NTE=",
      "title": "Why it is required to send a list of cipher suites in message 1? Why it is not enough to send only the selected suite?",
      "url": "https://github.com/lake-wg/edhoc/issues/29",
      "state": "CLOSED",
      "author": "StefanHri",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In section 5.1.1.  Example Use of EDHOC Error Message with SUITES_R: \r\n\r\n* the Initiator sends SUITES_I = [5,5,6,7]. The selected suite is 5. \r\n* The responder supports only suite 6 -> the selected suite 5 is not supported \r\n* the responder sends error msg containing  SUITES_R = 6. \r\n* The information that suites 5,6,7 are supported by the initiator is not used ->\r\n\r\n  Is it not enough to only send SUITES_I = 5?\r\n\r\n  I know it is possible to truncate SUITES_I, but is it not better when the initiator sends the selected suite? Then if the responder does not support this suite it can answer with a list of suites? ",
      "createdAt": "2020-11-11T17:22:46Z",
      "updatedAt": "2020-12-16T12:35:14Z",
      "closedAt": "2020-12-16T12:35:14Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, it is enough to only send SUITES_I = 5, and the responder can answer with a list of suites. That is a different example, similar to the second example.\r\n\r\nIn the first example it is illustrated that the Initiator tells the Responder that it supports 5,6,7 and that it proposes to use 5. The initiator could in this case have sent just 5, that would have been a different example. Some of the illustrations intended with this example is to show a) that the Initiator can inform the Responder about suites it supports, b) that the Initiator can support more suites than it sends, and c) an example of the second message from the Initiator [6,5,6] which protects against downgrade attacks since it repeats all information about more preferred suites.\r\n\r\nIn the second example, the proposed suites by the Initiator are disjoint from those proposed by the Responder, which is addressing your second point. Again the suites of the first message are repeated in the second message and the selected is added. Given that the supported suites are the same in the first and second example, but the initiator is showing different suites in message_1 in the two examples, we thought it would be clear that yet other variants are possible, including only showing one suite, which would then be the selected suite. Can we make the examples more clear? ",
          "createdAt": "2020-11-14T11:26:22Z",
          "updatedAt": "2020-11-14T11:26:22Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "I am missing a top-level explanation of the procedure and its rationale. \r\nWhich use cases we are trying to cover?\r\n\r\nWhy it is not enough to say: the initiator selects a cipher suite and sends it to the responder. The responder either accepts or sends its list. In the latter case, the initiator selects from the received list a new preferred suite.",
          "createdAt": "2020-11-15T07:58:06Z",
          "updatedAt": "2020-11-15T07:58:06Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@StefanHri You are right that the default procedure is that the Initiator sends the selected cipher suite. This example had the ambition to explain why things work also in corner cases, but your question made clear that we lost focus on the most common way how this should work. I have tried to fix that in caea215, have a look!",
          "createdAt": "2020-12-03T16:22:52Z",
          "updatedAt": "2020-12-03T16:22:52Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "looks good for me. ",
          "createdAt": "2020-12-16T12:35:11Z",
          "updatedAt": "2020-12-16T12:35:11Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "MDU6SXNzdWU3NDA5NDU3NzM=",
      "title": "What exactly is ERR_MSG and how to distinguish a regular message from an error message",
      "url": "https://github.com/lake-wg/edhoc/issues/30",
      "state": "CLOSED",
      "author": "StefanHri",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "E.g. when the initiator receives a message after message 1 -> this message can be message 2 or an error message.\r\nmessage 2 :\r\n\r\n```\r\nmessage_2 = (\r\n     data_2,\r\n     CIPHERTEXT_2 : bstr,\r\n   )\r\n   \r\n      data_2 = (\r\n     ? C_I : bstr_identifier,\r\n     G_Y : bstr,\r\n     C_R : bstr_identifier,\r\n   )\r\n```\r\n\r\nerror message:\r\n\r\n```\r\n   error = (\r\n     ? C_x : bstr_identifier,\r\n     ERR_MSG : tstr,\r\n     ? SUITES_R : [ supported : 2* suite ] / suite,\r\n   )\r\n```\r\n\r\nA possible mechanism to distinguish between both is to use ERR_MSG. Is ERR_MSG something that has to be defined by the protocol implementer or something provided by the user?\r\n\r\nWhat is the recommended way to distinguish between error messages and regular messages?\r\n\r\nA test vector with an error message will be very helpful for EDHOC implementors\r\n",
      "createdAt": "2020-11-11T17:34:23Z",
      "updatedAt": "2021-02-21T10:21:41Z",
      "closedAt": "2021-02-21T10:21:41Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, the error message has a mandatory text string as first or second field, which is different from normal messages. See proposed formulation in e0d85f95.\r\n\r\nAgree, test vectors needs to be added.",
          "createdAt": "2020-12-02T12:49:42Z",
          "updatedAt": "2020-12-02T12:49:42Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "I am still confused. Here are my questions:\r\n\r\n1) Is there an additional purpose for ERR_MSG than only to distinguish regular messages from error messages? \r\n2) Is ERR_MSG something which the EDHOC implementer defines? If this is the case the content of ERR_MSG cannot be processed automatically because interoperability between different implementations cannot be achieved? \r\n3) Let say my EDHOC implementation receives ERR_MSG form a different EDHOC implementation. What should I do with that? Should I provide ERR_MSG to the application? \r\n4) Section 5.5.2 in RFC7252 says:\r\n\r\n   If no Content-Format option is given, the payload of responses\r\n   indicating a client or server error is a brief human-readable\r\n   diagnostic message, explaining the error situation.  This diagnostic\r\n   message MUST be encoded using UTF-8 [RFC3629], more specifically\r\n   using Net-Unicode form [RFC5198].\r\n\r\n   The message is similar to the Reason-Phrase on an HTTP status line.\r\n   It is not intended for end users but for software engineers that\r\n   during debugging need to interpret it in the context of the present,\r\n   English-language specification; therefore, no mechanism for language\r\n   tagging is needed or provided.  In contrast to what is usual in HTTP,\r\n   the payload SHOULD be empty if there is no additional information\r\n   beyond the Response Code.\r\n   \r\nI don't understand how to interpret the second paragraph in the context of EDHOC. Can you give us some examples? ",
          "createdAt": "2020-12-16T13:06:07Z",
          "updatedAt": "2020-12-16T13:06:07Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "From my perspective, it is important and sufficient that the error message and a regular message are distinguishable. \r\n\r\nIn that case, if an error message is received the edhoc implementation can notice that, discontinue the protocol and provide the error message to the caller (application). Then the application has to handle the error. This is the easiest and most simple way from the implementation perspective.\r\n\r\nAdditionally, it will be nice to have some guidance about which are the cases where an error message may be sent. Are there cases where an error message must definitively be send, e.g. during the suite negotiation?",
          "createdAt": "2021-01-21T09:05:18Z",
          "updatedAt": "2021-01-21T09:05:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The specification was updated based on Stefans comments in -04. No more comments has been received. I therefore close this issue.\r\n\r\nA related but different issue has been opened in #74 ",
          "createdAt": "2021-02-21T10:21:41Z",
          "updatedAt": "2021-02-21T10:21:41Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "MDU6SXNzdWU3NDEzNjYxNTk=",
      "title": "Small mistakes and clarifications",
      "url": "https://github.com/lake-wg/edhoc/issues/31",
      "state": "CLOSED",
      "author": "StefanHri",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "By reading the document I notices some small mistakes and a few things which can be explained better:\r\n\r\n1) Section 5.1.1\r\n```\r\n...Figures 6 and 7 show\r\n   examples of how the Responder can truncate SUITES_I and how SUITES_R\r\n   is used by the Responder to give the Initiator...\r\n```\r\n\r\nI think it should be: \r\n```\r\n...Figures 6 and 7 show\r\n   examples of how the **Initiator** can truncate SUITES_I and how SUITES_R\r\n   is used by the Responder to give the Initiator...\r\n```\r\n---\r\n\r\n2) Section 5.1.1 bellow figure 6\r\nI don't understand what you want to say with:\r\n\r\n\"...    As the Initiator's list of supported cipher suites and order of\r\n   preference is fixed, and the Responder only accepts message_1 if the\r\n   selected cipher suite is the first cipher suite in SUITES_I that the\r\n   Responder supports, the parties can verify that the selected cipher\r\n   suite is the most preferred (by the Initiator) cipher suite supported\r\n   by both parties.  If the selected cipher suite is not the first\r\n   cipher suite in SUITES_I that the Responder supports, the Responder\r\n   will discontinue the protocol.\"\r\n   \r\n It may make sense to paraphrase this part?  \r\n\r\n--- \r\n\r\n3) Caption figure 7 and 8 \r\nNow both figures have the same caption. It will be probably  better ->\r\nFigure 7: Transferring EDHOC in CoAP where the initiator is a CoAP client\r\nFigure 8: Transferring EDHOC in CoAP where the initiator is a CoAP server\r\n\r\n---\r\n\r\n4) Section 4.3 Encoding of bstr_identifier\r\nWhat is the rationale for using int - 24? A short sentence like: \r\n\"A bstr_identifier is a special encoding for byte strings, used hroughout the protocol. The reason for using bstr_identifier is ...\"   \r\nwill be very helpful for me.",
      "createdAt": "2020-11-12T07:51:33Z",
      "updatedAt": "2020-12-16T12:16:10Z",
      "closedAt": "2020-12-16T12:16:10Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@StefanHri See 1c44106",
          "createdAt": "2020-11-14T12:58:08Z",
          "updatedAt": "2020-11-14T12:58:08Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "I still don't understand:\r\n\"A bstr_identifier is a special encoding for byte strings, used throughout the protocol to encode short byte strings as int to save overhead since CBOR ints in the interval -24 to 23 can be encoded as one byte.\"\r\n\r\nLet say we have a single-byte integer (int8_t) 120. 120-24 = 96. 96 is not in the interval -24 to 23 so we cannot encode it as CBOR int?",
          "createdAt": "2020-11-15T07:38:39Z",
          "updatedAt": "2020-11-15T07:38:39Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This applies to *byte strings* that can be encoded as CBOR ints of length one byte. I made another attempt, but perhaps it can be improved further, see 325f6a8.",
          "createdAt": "2020-11-15T08:01:55Z",
          "updatedAt": "2020-11-15T08:08:50Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "I still don't understand that completely. Probably this is better:\r\n\r\nA bstr_identifier is a special encoding for byte strings, used throughout the protocol to encode those short byte strings that can as CBOR integers. Such integers are in the interval -24 to 23. They are encoded in a single byte.\r\n\r\nHowever, it is still not clear, why we need to calculate int - 24 ?",
          "createdAt": "2020-11-15T08:12:10Z",
          "updatedAt": "2020-11-15T08:12:10Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@StefanHri I tried to reformulate. Have a look at 733b590",
          "createdAt": "2020-12-02T11:12:57Z",
          "updatedAt": "2020-12-02T11:12:57Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "MDU6SXNzdWU3NDIyMjc2ODQ=",
      "title": "Identifying a certificate with 'kid' by specified",
      "url": "https://github.com/lake-wg/edhoc/issues/32",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently the specification assumes that certificates are identified with x5t or x5u which are bigger than a kid can be. This limits the use of certificates compared to raw-public keys. If a raw public key in EDHOC can be identified with a kid, then a cert can as well. I would suggest to specify identification of cert with kid. This enables certificates to be used with as small messages as RPK. Making them usable in single message lorawan and 5-hop 6tisch",
      "createdAt": "2020-11-13T07:33:38Z",
      "updatedAt": "2021-04-22T08:44:45Z",
      "closedAt": "2021-04-22T08:44:45Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The missing component to use this needs to be defined in COSE. Work in progress in draft-mattsson-cose-cbor-cert-compress.",
          "createdAt": "2021-04-22T08:44:45Z",
          "updatedAt": "2021-04-22T08:44:45Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "MDU6SXNzdWU3NDI1MTc5OTc=",
      "title": "Reference draft-mattsson-cose-cbor-cert-compress",
      "url": "https://github.com/lake-wg/edhoc/issues/33",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Should reference draft-mattsson-cose-cbor-cert-compress and c5u c5t in addition to x5u x5t. https://tools.ietf.org/html/draft-mattsson-cose-cbor-cert-compress\r\n\r\nShould wait until there is a COSE adopted draft.\r\n",
      "createdAt": "2020-11-13T15:05:24Z",
      "updatedAt": "2021-01-26T06:17:43Z",
      "closedAt": "2021-01-26T06:17:43Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in 06ba35e8",
          "createdAt": "2021-01-26T06:17:43Z",
          "updatedAt": "2021-01-26T06:17:43Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "MDU6SXNzdWU3NDI4MjQ0NTY=",
      "title": "How to do encryption without integrity in message_2",
      "url": "https://github.com/lake-wg/edhoc/issues/34",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current specification generates a long encryption key and perform XOR cipher.\r\n\r\nAs there are no non-AEAD algorithms in COSE, other options are a bit more complex.\r\n\r\n- Remove the tag from AEAD ciphertext. Only works when AEAD has a well-defined tag.\r\n- Ascociate a IND-CPA encryption algorithm with each AEAD. Requires a table.\r\n\r\nAES-CCM -> AES\r\nAES-GCM -> AES\r\nChaCha20-Poly1305 -> ChaCha20\r\n",
      "createdAt": "2020-11-13T22:21:52Z",
      "updatedAt": "2021-02-21T06:46:06Z",
      "closedAt": "2021-02-21T06:46:06Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "As the Responder sends its identity to an unauthenticated part, there is no need to have IND-CCA against active attackers. IND-CPA encryption is enough in this case. See full SIGMA paper for more information.",
          "createdAt": "2020-11-13T22:23:39Z",
          "updatedAt": "2020-11-13T22:23:39Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Should we define the encryption to that it can be performed by removing the tag. ",
          "createdAt": "2020-11-27T09:30:10Z",
          "updatedAt": "2020-11-27T09:30:10Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Specifying an specific AES-CTR and ChaCha20 stream cipher mode makes it cumbersome for implementors....\r\n\r\nEDHOC need to encrypt more data than DTLS 1.3 and cannot rely on AES-ECB and the ChaCha20 block cipher.\r\n\r\nI think the right way to do this in a way easy for developers (which we want) is to just remove the tag....\r\n\r\nIf there would ever be a future COSE AEAD that does not have a well defined tag, it would be needed to define how encryption without integrity is done.",
          "createdAt": "2020-11-27T09:38:08Z",
          "updatedAt": "2020-11-27T09:38:08Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Commit 6469cb8 changes the Table solution to a remove tag solution.\r\n\r\nhttps://github.com/lake-wg/edhoc/commit/6469cb8dd1865eb19ad049c28b3781688fcb1aef\r\n\r\nLooking at the changes give a good overview of the two solutions.\r\n\r\nHaving implemented both, I have a preference to just removing the tag from the COSE_Encrypt.\r\n\r\nUsing AES-CTR or ChaCha20 stream cipher requires far more work from the implementor. The developer would have to find the raw AES and ChaCha20 functions and make sure to implement the stream ciphers. This is doable but a bit complicated. We would like to keep implementation simple.\r\n\r\nThe solution with deriving a long key and XORing was simple but raised a lot of questions as XOR encryption has in the past been used in insecure ways (repeating a short key....). HMAC-SHA-256 on the other hand could very have higher security bounds than AES-128-CTR.\r\n\r\nI think just removing the tag is the best overall solution. It works for all current and foreseeable AEAD in COSE. It is very easy to implement for the developer and it does not raise any questions like old HMAC-SHA-256+XOR solution\r\n\r\nWould be good with other peoples opinion on this\r\n ",
          "createdAt": "2020-11-27T10:34:38Z",
          "updatedAt": "2020-11-27T10:34:38Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "For -04 we are reverting back to -02. That seems like the easiest solution given that COSE does not support any IND-CPA encrytion algorithms (COSE itself does not need that). We do not want people to change their implementations unless we are sure that there will be a change.\r\n\r\nUsing HKDF as a binary additive stream cipher is perfectly secure, in fact it is a much better stream cipher than AES-CTR. The reason that AES-CTR is used is that something like HKDF-Expand is overkill security wise for simple encryption and much much slower that AES-CTR.",
          "createdAt": "2021-01-25T11:40:25Z",
          "updatedAt": "2021-01-25T11:40:25Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "much much slower is for long messages.... for very short messages is would actually be faster. For the short message_2 speed difference is negligible.\r\n\r\nAnother reasons HKDF-Expand is not typically used is that most application require both IND-CCA2 confidentiality as well as integrity protection. Both of which are given by an AEAD.",
          "createdAt": "2021-01-25T11:48:21Z",
          "updatedAt": "2021-01-25T11:48:21Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in -04?",
          "createdAt": "2021-02-11T15:16:24Z",
          "updatedAt": "2021-02-11T15:16:24Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "No objections or comments to the -04 version. -05 test vectors implement this",
          "createdAt": "2021-02-21T06:46:06Z",
          "updatedAt": "2021-02-21T06:46:06Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "MDU6SXNzdWU3NDI5NjAxMTU=",
      "title": "Register ciphersuites with high security",
      "url": "https://github.com/lake-wg/edhoc/issues/35",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There has been interest to use EDHOC with high level security, i.e. AES-256 and 384 bit ECC.\r\n\r\nShould we register a CNSA compliant cipher suite?\r\n(A256GCM, SHA-384, P-384, ES384, P-384, A256GCM, SHA-384)\r\n\r\nAnd/or something alternative?\r\n(A256GCM, SHAKE256, X448, EdDSA, Ed448, A256GCM, SHAKE256)\r\n(ChaCha20/Poly1305, SHAKE256, X448, EdDSA, Ed448, ChaCha20/Poly1305, SHAKE256)\r\n\r\nThe document should be more clear that it is possible to use EDHOC with any registered COSE algorithms by using a private number for the cipher suite.\r\n\r\n",
      "createdAt": "2020-11-14T08:27:18Z",
      "updatedAt": "2021-01-26T06:19:52Z",
      "closedAt": "2021-01-26T06:19:52Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm proxying input on two new proposed cipher suites:\r\n\r\nArray: 11, 6, 2, -35, 2, 11, 6\r\nDesc: AES-CCM-16-64-256, SHA-384, P-384, ES384, P-384, AES-CCM-16-64-256, SHA-384\r\n \r\nArray: 13, 6, 2, -35, 2, 13, 6\r\nDesc: AES-CCM-64-64-256, SHA-384, P-384, ES384, P-384, AES-CCM-64-64-256, SHA-384",
          "createdAt": "2020-12-03T14:15:31Z",
          "updatedAt": "2020-12-03T14:15:31Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "AES-CCM-16-64-256 and AES-CCM-64-64-256 are quite odd algorithms. Combining 256 bit keys with 64 bit tags is quite unbalanced. TLS WG has dicussed and decided to not standardize any more such algorithms.\r\n\r\nPeople can already use them as private cipher suites, but I do not see that it is something that can be recommended in general. I think:\r\n\r\n(A256GCM, SHA-384, P-384, ES384, P-384, A256GCM, SHA-384)\r\n(ChaCha20/Poly1305, SHAKE256, X448, EdDSA, Ed448, ChaCha20/Poly1305, SHAKE256)\r\n\r\nwould be the reasonable high security cipher suites to register. The first of these which aligns with CNSA I think should be registered.\r\n",
          "createdAt": "2020-12-03T15:00:26Z",
          "updatedAt": "2020-12-03T15:00:26Z"
        },
        {
          "author": "lemikev",
          "authorAssociation": "NONE",
          "body": "Hi Emanjon.\r\n\r\nI'm the one who asked for \"AES-CCM-64-64-256, SHA-384, P-384, ES384, P-384, AES-CCM-64-64-256, SHA-384\".\r\nThe goal was effectively to be CNSA aligned.\r\nI agree with your comments and \"A256GCM, SHA-384, P-384, ES384, P-384, A256GCM, SHA-384\" is perfectly find for my needs.\r\nTo cover CNSA, it might be logical to also include \"A128GCM, SHA-256, P-256, ES256, P-256, A128GCM, SHA-256\".\r\nJust a suggestion, I don't correctly have a need for it.",
          "createdAt": "2020-12-03T15:30:13Z",
          "updatedAt": "2020-12-03T15:30:13Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "We had a similar request some weeks ago, so I go ahead and make a commit for \"A256GCM, SHA-384, P-384, ES384, P-384, A256GCM, SHA-384\".\r\n\r\nA128GCM, SHA-256, P-256, ES256, P-256, A128GCM, SHA-256\" used to be in Suite B, but is no longer in CNSA. I Agree that it probably makes sense to add something between CNSA and Constrained CCM_8. I will bring up the question in an upcoming LAKE meeting. I think the algorithms used on state of the art web servers today is typically:\r\nA128GCM, SHA-256, Curve25519, ES256, P-256, A128GCM, SHA-256",
          "createdAt": "2020-12-03T17:58:15Z",
          "updatedAt": "2020-12-03T17:58:15Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a commit e3dc83b registering two more cipher suites. One aligning with CNSA and one aligning with current best practice for HTTPS (used e.g. by GitHub). I also added more information on the posibility of using private cipher suites.",
          "createdAt": "2020-12-03T18:27:03Z",
          "updatedAt": "2020-12-03T18:27:03Z"
        },
        {
          "author": "lemikev",
          "authorAssociation": "NONE",
          "body": "Thanks for this change. Please send advise if somebody else is implementing \"A256GCM, SHA-384, P-384, ES384, P-384, A256GCM, SHA-384\". I will be interested to interop with him.",
          "createdAt": "2020-12-03T20:40:19Z",
          "updatedAt": "2020-12-03T20:40:19Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in -03",
          "createdAt": "2021-01-26T06:19:52Z",
          "updatedAt": "2021-01-26T06:19:52Z"
        }
      ]
    },
    {
      "number": 39,
      "id": "MDU6SXNzdWU3NTY5MjcxODA=",
      "title": "Add guidelines for distinguishing received messages. Relates to #30.",
      "url": "https://github.com/lake-wg/edhoc/issues/39",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-12-04T08:57:50Z",
      "updatedAt": "2021-07-15T19:36:59Z",
      "closedAt": "2021-07-15T19:36:59Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Proxying draft solution:\r\n\r\n    First, check if it is an Error Message. That's the case if and only\r\n    if the first or second element of the sequence is a text string.\r\n\r\n    If it's not an Error Message:\r\n\r\n    - If the sequence has 1 or 2 elements, it's Message 3.\r\n\r\n    - If the sequence has 3 elements, it's Message 2.\r\n\r\n    - If the sequence has 5 elements, it's message 1.\r\n\r\n    - If the sequence has 4 elements, check its second element.\r\n    --- If it is an array or an integer, it's Message 1.\r\n    --- If it is a byte string, it's Message 2.\r\n",
          "createdAt": "2020-12-10T07:58:10Z",
          "updatedAt": "2020-12-10T07:58:10Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Since both a client and a server can act as Initiator or Responder, this early understanding helps in taking the next steps when receiving a message.\r\n\r\nThis helps especially for retrieving the status of an ongoing EDHOC execution when receiving Error Message, Message 2 or Message 3, or for starting processing Message 1 that potentially yields the creation and storage of a new execution status as Responder.\r\n\r\nFor the status retrieval, the endpoint uses C_I/C_R (if included in the message) or implicit transport protocol indications, depending on the correlation method.",
          "createdAt": "2020-12-18T08:51:28Z",
          "updatedAt": "2020-12-18T08:51:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think these are good points, but I don't see exactly why you are having a problem and how the draft should be updated. Could you provide a conrete message flow that also shows which protocol layers that are used below EDHOC. Could be that normative text on how to distinguish the messages are needed, or this is mostly implementation guidance. Might also be that something in the draft needed to be more strict or change. I think both endpoints sending message_1 has not been discussed other than from a security perspective.",
          "createdAt": "2020-12-18T10:59:20Z",
          "updatedAt": "2020-12-18T10:59:20Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "It is just for implementation guidance, as a possible way to do the message distinction. I didn't think of something to add or fix in the actual protocol.",
          "createdAt": "2020-12-18T13:31:46Z",
          "updatedAt": "2020-12-18T13:31:46Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "I'd prefer not to parse the full message (which, given it's CBOR sequences, ) at the point where I branch around; looking at the decision tree from that side.\r\n\r\nI'm only considering a server's situation here, so it can receive a Message 1, a Message 3 (carrying a c_r, of the server's choice), or a Message 2 or 4 (both carrying a c_i, with a value of the server's choice).\r\n\r\nSuch a server WOULD PROBABLY pick c_i and c_r values which it can distinguish from each other (say, by their least significant bit, or by a prefix), and WOULD PROBABLY NOT pick any value that's a legal METHOD_CORR (ie. no values from 0 to 15 inclusive).\r\n\r\nThe server can then tell whether it's\r\n* Message 1: first element in 0..=15\r\n* Message 3: first element is a C_R\r\n* Message 2: first element is a C_I\r\n* Message 4: does that ever get used with a server at all?\r\n\r\n  Probably not, as \"In deployments where no protected application message is sent from the Responder to the Initiator\" is not the case -- because that's one of the cases where it is not needed.\r\n\r\n  If s, the distinction between message 2 and 4 is \"is it over after having decoded the two elements\" (given message 4 has 2 elements in presence of a C_I, message 2 has 4).",
          "createdAt": "2021-03-01T13:53:24Z",
          "updatedAt": "2021-03-01T13:53:24Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Provided by transport. In -08 this is described for CoAP in Appendix A.3.",
          "createdAt": "2021-07-15T19:36:59Z",
          "updatedAt": "2021-07-15T19:36:59Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "MDU6SXNzdWU3NjEwMzQ0MDU=",
      "title": "Section 3 and 4.1-4.2 needs restructure ",
      "url": "https://github.com/lake-wg/edhoc/issues/40",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The structure of sections 2, 3 and 4.1-4.2 is reflecting old versions of the protocol: New methods have been added and the symmetric key authentication variant has been removed.\r\n\r\nSome examples of why this is needed:\r\n* Section 4 is described as containing the asymmetric key authentication variant although the current protocol only supports asymmetric key authentication. There are two sections labelled as \"overview\" (3 and 4.1) with overlap in content and unclear division of content. Section 2 already contains an overview.\r\n\r\n* Figure 3 in section 3 is not very helpful to explain the protocol components, replace with figure 4 from section 4.\r\n\r\nA restructure is needed, some initial ideas:\r\n\r\n* Keep section 2 largely as is but change title to \"EDHOC outline\" and mention other methods\r\n* Rename section 3 \"Protocol components\" and move corresponding content here\r\n* Rename section 4 \"Messages formatting and processing\" and focus on that",
      "createdAt": "2020-12-10T08:44:59Z",
      "updatedAt": "2021-01-26T05:08:19Z",
      "closedAt": "2021-01-26T05:08:19Z",
      "comments": []
    },
    {
      "number": 42,
      "id": "MDU6SXNzdWU3NjYxOTgyMjE=",
      "title": "Missing Responder private key in test vector.",
      "url": "https://github.com/lake-wg/edhoc/issues/42",
      "state": "CLOSED",
      "author": "TimothyClaeys",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the following test vector [method 2 - Static(Initiator)-Sign(Responder)]:\r\n\r\nhttps://github.com/lake-wg/edhoc/blob/c73dc6affe2d7a47fa8eac97be4d4bbd8bd7c667/test-vectors/vectors.txt#L978\r\n\r\nThe Responder is missing its private authentication key. The Responder's private key is required to compute the `sign_or_mac2 `part of `message 2`, using an COSE_Sign1 structure.",
      "createdAt": "2020-12-14T09:31:46Z",
      "updatedAt": "2021-02-21T06:27:17Z",
      "closedAt": "2021-02-21T06:27:17Z",
      "comments": [
        {
          "author": "fpalombini",
          "authorAssociation": "COLLABORATOR",
          "body": "Again due to the copy paste typo in the generation code, now fixed in a09570b. Need to run the code to regenerate new test vectors using the updated code, I wouldn't update the appendix at the same time to match the vectors.txt though, because that's not really necessary (they are still correct, just need to fix the print).",
          "createdAt": "2020-12-14T14:38:54Z",
          "updatedAt": "2020-12-14T14:38:54Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in test-vector-05",
          "createdAt": "2021-02-21T06:27:17Z",
          "updatedAt": "2021-02-21T06:27:17Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "MDU6SXNzdWU3NjYyMDg4MzI=",
      "title": "Redundant Responder private key",
      "url": "https://github.com/lake-wg/edhoc/issues/43",
      "state": "CLOSED",
      "author": "TimothyClaeys",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The following test vector:\r\n\r\nhttps://github.com/lake-wg/edhoc/blob/c73dc6affe2d7a47fa8eac97be4d4bbd8bd7c667/test-vectors/vectors.txt#L704\r\n\r\nSeems to have a redundant Responder private authentication key listed.\r\n\r\nhttps://github.com/lake-wg/edhoc/blob/c73dc6affe2d7a47fa8eac97be4d4bbd8bd7c667/test-vectors/vectors.txt#L766\r\n\r\nThe test vector computes the correct values using the private key:\r\n\r\nhttps://github.com/lake-wg/edhoc/blob/c73dc6affe2d7a47fa8eac97be4d4bbd8bd7c667/test-vectors/vectors.txt#L770",
      "createdAt": "2020-12-14T09:42:35Z",
      "updatedAt": "2021-02-21T06:49:07Z",
      "closedAt": "2021-02-21T06:49:07Z",
      "comments": [
        {
          "author": "TimothyClaeys",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The redundant private key does **NOT** seem to match the missing key in issue https://github.com/lake-wg/edhoc/issues/42#issue-766198221.",
          "createdAt": "2020-12-14T09:46:19Z",
          "updatedAt": "2020-12-14T09:46:19Z"
        },
        {
          "author": "fpalombini",
          "authorAssociation": "COLLABORATOR",
          "body": "This seemed to be a copy-paste typo in the test vectors code (now should be fixed a09570b4fe83c3 ). \r\nKeeping open because we still need to fix the test vectors (vectors.txt) and in the draft.",
          "createdAt": "2020-12-14T14:25:27Z",
          "updatedAt": "2020-12-14T14:25:27Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with test vectors -05",
          "createdAt": "2021-02-21T06:49:07Z",
          "updatedAt": "2021-02-21T06:49:07Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "MDU6SXNzdWU3NjYyNDI2MTc=",
      "title": "Test vectors not adhering to section 4.4.3 (cipher suite verification by the Responder in message 1)",
      "url": "https://github.com/lake-wg/edhoc/issues/44",
      "state": "CLOSED",
      "author": "TimothyClaeys",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the following test vector:\r\n\r\nhttps://github.com/lake-wg/edhoc/blob/c73dc6affe2d7a47fa8eac97be4d4bbd8bd7c667/test-vectors/vectors.txt#L2520\r\n\r\nThe Responder supports all 4 cipher suites (0, 1, 2, 3). The Initiator sends a message 1, where it includes 0, 1, and 2 as supported cipher suites and selects cipher suite 1. According to [section 4.4.3 ](https://tools.ietf.org/html/draft-ietf-lake-edhoc-02#section-4.4), the Responder must verify that the selected cipher suite is supported and that no prior cipher suites in SUITES_I are supported.\r\n\r\nSince the Responder supports cipher suite 0 and cipher suite 0 also has a higher preference for the Initiator (it appears as the first element in SUITES_I), the Responder should answer with and EDHOC error message.\r\n\r\nThe test vector can be fixed by removing cipher suite 0 from the Responder's supported cipher suites.",
      "createdAt": "2020-12-14T10:13:35Z",
      "updatedAt": "2021-01-27T08:35:16Z",
      "closedAt": "2021-01-27T08:35:16Z",
      "comments": [
        {
          "author": "TimothyClaeys",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Two other test vectors with the same issue:\r\n\r\nhttps://github.com/lake-wg/edhoc/blob/c73dc6affe2d7a47fa8eac97be4d4bbd8bd7c667/test-vectors/vectors.txt#L2820\r\n\r\nhttps://github.com/lake-wg/edhoc/blob/c73dc6affe2d7a47fa8eac97be4d4bbd8bd7c667/test-vectors/vectors.txt#L3075",
          "createdAt": "2020-12-14T10:34:35Z",
          "updatedAt": "2020-12-14T10:34:35Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "MDU6SXNzdWU3NjYyNTQ0MzM=",
      "title": "Typo in section 4.4.3",
      "url": "https://github.com/lake-wg/edhoc/issues/45",
      "state": "CLOSED",
      "author": "TimothyClaeys",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "**When the responder is processing message 1, section 4.4.3 reads:**\r\n\r\nIf any verification step fails, the Initiator MUST send an EDHOC error message back, formatted as defined in Section 5, and the protocol MUST be discontinued.\r\n\r\nI think this should be:\r\n\r\nIf any verification step fails, the `Responder` MUST send an EDHOC error message back, formatted as defined in Section 5, and the protocol MUST be discontinued.\r\n\r\nPR: https://github.com/lake-wg/edhoc/pull/46#issue-539337881",
      "createdAt": "2020-12-14T10:24:10Z",
      "updatedAt": "2020-12-17T08:08:07Z",
      "closedAt": "2020-12-17T08:08:07Z",
      "comments": []
    },
    {
      "number": 47,
      "id": "MDU6SXNzdWU3NjYzODg1NDM=",
      "title": "Test vectors additions",
      "url": "https://github.com/lake-wg/edhoc/issues/47",
      "state": "CLOSED",
      "author": "fpalombini",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?",
        "traces and test vectors"
      ],
      "body": "as requested from interop:\r\n\r\n- [x] obsolete PSK test vectors\r\n- [x] add TH4 output\r\n- [x] add exporter, exporter outputs, keyupdate, to all test vectors\r\n- [x] add KEYSTREAM_2\r\n- [x] print out public keys.\r\n- [x] Add error message\r\n- [x] Add message_4\r\n- [x] Add ead\r\n- [x] Update test vectors to -10\r\n- [x] Add JSON format\r\n- [x] add real certificates to test vectors - 0:CBOR native and DER (and possibly later 1:ASN.1 translated)\r\n- [x] Add ciphersuites 2 and 3 to test vectors, ECDSA keys should print out full y coordinate\r\n",
      "createdAt": "2020-12-14T12:41:48Z",
      "updatedAt": "2022-10-11T09:50:36Z",
      "closedAt": "2022-10-11T09:50:36Z",
      "comments": [
        {
          "author": "TimothyClaeys",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It would also be useful to have a test vector that has additional data attached to the exchange. Depending on the message, this data is also protected so a test vector would allow an implementation to verify if the protection of the additional data is done properly.",
          "createdAt": "2020-12-14T13:25:58Z",
          "updatedAt": "2020-12-14T13:25:58Z"
        },
        {
          "author": "fpalombini",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @TimothyClaeys, good point!",
          "createdAt": "2020-12-14T14:00:07Z",
          "updatedAt": "2020-12-14T14:00:07Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I have updated the list. The new test vectors add ead, error messages, and message_4 and aligns with -10.\r\n\r\nI have not added real certificates yet. But I made them a sequence 00 01 02 03 ...  to make it easy to see they are not real. The old one were random strings and several people tried to parse them",
          "createdAt": "2021-09-05T06:29:03Z",
          "updatedAt": "2021-09-05T06:29:03Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I thinking about adding the error message to actual flows where the error message might come after any of normal  EHODC messages.\r\n\r\nafter message_1 : ERR_CODE 1 or 2\r\nafter message_2 : ERR_CODE 1\r\nafter message_3 : ERR_CODE 0 or 1\r\nafter message_3 : ERR_CODE 0 or 1\r\n",
          "createdAt": "2021-09-09T15:49:50Z",
          "updatedAt": "2021-09-09T15:49:50Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I added the two additional test vectors with a SDH key in a x509 and a signature key in a UCCS.",
          "createdAt": "2021-09-12T12:42:22Z",
          "updatedAt": "2021-09-12T12:42:22Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I uploaded preliminary -11 test vectors base on the current master. The two changes that affect test vectors are\r\n-  Changed several of the KDF and Exporter labels \u00a0\r\n-  Replaced edhoc_aead_id with selected_suite",
          "createdAt": "2021-09-17T14:27:42Z",
          "updatedAt": "2021-09-17T14:27:42Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "While there is still a need for documentation of the test vectors (#187), there are now test vectors with cipher suite 2 (no major difference with 3) and test vectors which uses real certificates. Both are included in the -traces draft. Therefore I think we can close this issue.",
          "createdAt": "2022-03-17T17:55:16Z",
          "updatedAt": "2022-03-17T17:55:16Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as there have been no comments.",
          "createdAt": "2022-10-11T09:50:35Z",
          "updatedAt": "2022-10-11T09:50:35Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "MDU6SXNzdWU3NjgyMDEzNDk=",
      "title": "Sections 1.0 and 1.1 needs restructure",
      "url": "https://github.com/lake-wg/edhoc/issues/48",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Sections 1.1 and the text before section 1.1 in section 1 (=1.0) is overlapping, reflecting that section 1.1 has been added without harmonization of the existing text. Some  pieces are duplicate, other parts are redundant because they contain alternative reasoning with the same conclusion. \r\n\r\nSection 1.1 should be merged into a new section 1.0.",
      "createdAt": "2020-12-15T21:02:31Z",
      "updatedAt": "2021-01-26T05:08:01Z",
      "closedAt": "2021-01-26T05:08:01Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with 5f5bee3",
          "createdAt": "2021-01-26T05:08:01Z",
          "updatedAt": "2021-01-26T05:08:01Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "MDU6SXNzdWU3NzEwMjExODE=",
      "title": "Add cipher suite with Wei25519",
      "url": "https://github.com/lake-wg/edhoc/issues/50",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "",
      "createdAt": "2020-12-18T16:38:30Z",
      "updatedAt": "2022-10-11T09:49:34Z",
      "closedAt": "2022-10-11T09:49:34Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Will be done when IANA registrations are done",
          "createdAt": "2021-02-21T06:58:23Z",
          "updatedAt": "2021-02-21T06:58:23Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Should we close this? The draft does not seem to progress. I have made a commit to master with the equations on how to transform curve25519 and edward25519 to Weirstra\u00df format to enable acceleration on exisitng HW, these equiations are very useful.\r\n\r\nPart of the interest in Wei25519 seems to have been based on misunderstanding and the actual interest was in the now referenced equations.\r\n\r\nA Wei25519 cipher suite can easily be registered later if there is interest.",
          "createdAt": "2022-01-24T14:43:15Z",
          "updatedAt": "2022-01-24T14:43:15Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as agreed in the interim.",
          "createdAt": "2022-10-11T09:49:34Z",
          "updatedAt": "2022-10-11T09:49:34Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "MDU6SXNzdWU3ODMyMjY1ODk=",
      "title": "Test vector",
      "url": "https://github.com/lake-wg/edhoc/issues/51",
      "state": "CLOSED",
      "author": "fpalombini",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "add real certificates in the test vector (both appendix and .txt) instead of random bytes",
      "createdAt": "2021-01-11T09:56:14Z",
      "updatedAt": "2021-02-21T06:57:25Z",
      "closedAt": "2021-02-21T06:57:25Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Updates #47 with this information. Close this",
          "createdAt": "2021-02-21T06:57:25Z",
          "updatedAt": "2021-02-21T06:57:25Z"
        }
      ]
    },
    {
      "number": 52,
      "id": "MDU6SXNzdWU3ODUwNzU2MzE=",
      "title": "Clarify decryption of CIPHERTEXT_2",
      "url": "https://github.com/lake-wg/edhoc/issues/52",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In the latest version -03, Section 5.3.3 says:\r\n\r\n\"Decrypt CIPHERTEXT_2 by computing an outer COSE_Encrypt0 as defined in see Section 5.3.2 and XORing CIPHERTEXT_2 with the 'ciphertext' of the outer COSE_Encrypt0 with the tag removed.\"\r\n\r\n\r\nCould you clarify this process and elaborate on its steps?\r\n\r\nAlso, is this actually involving a XORing? That seems being left here from the previous process in version -02 based on a keystream.",
      "createdAt": "2021-01-13T12:47:27Z",
      "updatedAt": "2021-02-12T10:57:43Z",
      "closedAt": "2021-02-12T10:57:43Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that the operation to encrypt message_2 is not determined yet. We are awaiting developer feedback if the -02 or -03 way of doing things are the best way from a development perspective.\r\n\r\nCould you clarify what is missing or unclear in the -03 description? The -03 description seems correct to me. XOR is needed in more or less all modern encryption.\r\n\r\n(Feedback that AES-CTR and ChaCha20 stream cipher without Poly1305 is the right way is also ok of course. I found that alternative way to complex to implement).",
          "createdAt": "2021-01-23T10:15:52Z",
          "updatedAt": "2021-01-23T10:15:52Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Trying to rewrite that sentence as steps, I read it as:\r\n\r\n1. Fill an Encrypt0 object like the one in Section 5.3.2 and encrypt it.\r\n\r\n2. Take the resulting 'ciphertext' of the processed object and remove the tag.\r\n\r\n3. Take the output of step 2 and XOR it with CIPHERTEXT_2 from Message_2.\r\n\r\nThe result of step 3 is the plaintext with ID_CRED_R, Signature_or_MAC_2 and possibly AD_2.\r\n\r\n\r\nIs this the intended workflow? If so, what is used as plaintext P in step 1?",
          "createdAt": "2021-01-23T12:17:18Z",
          "updatedAt": "2021-01-23T12:17:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, that is the intended workflow.\r\n\r\nThe value of P is clearly missing, P needs to be set to a byte string of zeroes of the same length as the intitial byte string, which the reciever would need to calculate as the length of the ciphertext minus the length of the tag. This is clearly missing from the text. \r\n\r\nThanks. ",
          "createdAt": "2021-01-24T06:14:15Z",
          "updatedAt": "2021-01-24T06:14:15Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe this removing tag is a bit more complex that I first thought. It actually requires two things from the AEAD. That is has a well-defined tag and that the encryption is done with a synchronous xor based stream cipher. Both of these happen to be true for all the currently defined AEAD algs.\r\n\r\nMight very well be that we should for the -02 version if that is easier. I think that solution fine if we reformulate it that we are using HMAC-SHA256 as a stream cipher to generate keystream. The reason nobody does that is that HMAC-SHA256 is overkill security wise and are slow.\r\n\r\nAnother alternative would be to use AES-CTR but then I think that should not be left to the developers and instead registered as an algorithm in COSE.",
          "createdAt": "2021-01-25T08:28:11Z",
          "updatedAt": "2021-01-25T08:28:11Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Or rather we are using HKDF-Expand as a stream cipher to generate key stream",
          "createdAt": "2021-01-25T08:30:17Z",
          "updatedAt": "2021-01-25T08:30:17Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Reverted to -02, rephrased as binary stream cipher, see:\r\n\r\ne2912c9\r\ncd5fdb5\r\nd5ac597\r\nc95a3d2\r\n",
          "createdAt": "2021-01-26T09:02:46Z",
          "updatedAt": "2021-01-26T09:02:46Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for this. Note that:\r\n\r\n* The notation in Figure 3 is still using K_2e for message_2.\r\n\r\n* In Section 4, below the CBOR encoding of 'info':\r\n\r\n--- K_2e is still mentioned in the first bullet point.\r\n\r\n--- The label \"K_2e\" is still in the list of possible labels, in the third bullet point.\r\n\r\nWhile still making it clear that the plaintext for message_2 is XORed with a keystream, keeping the original name K_2e may help readability (think also of Figure 3).\r\n\r\nAlso, keeping the label \"K_2e\" would preserve the current values in the test vectors.",
          "createdAt": "2021-01-26T14:02:06Z",
          "updatedAt": "2021-01-26T14:02:06Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in -04?",
          "createdAt": "2021-02-11T15:14:14Z",
          "updatedAt": "2021-02-11T15:14:14Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think it's fixed.",
          "createdAt": "2021-02-11T17:16:17Z",
          "updatedAt": "2021-02-11T17:16:17Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "MDU6SXNzdWU3ODU4MDE5MzI=",
      "title": "Terminology for ciphertext/authentication tag",
      "url": "https://github.com/lake-wg/edhoc/issues/53",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Comment from implementer that the use of the term ciphertext is confusing.\r\n\r\nEDHOC reuses terminology from RFC 6655 where the term ciphertext denote ciphertext concatenated with authentication tag.\r\n\r\nRFC 6655:\r\n\"The AEAD_AES_128_CCM_8 ciphertext consists of the ciphertext output of\r\n   the CCM encryption operation concatenated with the 8-octet\r\n   authentication tag output of the CCM encryption operation. \"\r\n\r\nSince -03 the protocol contains instances of three uses of the term ciphertext:\r\n1. the output of the encryption only (= ciphertext)\r\n2. the authentication tag only (= ciphertext, in case of empty plaintext), and \r\n3. the concatenation of these (= ciphertext according to RFC 6655). \r\n\r\n\r\n\r\n",
      "createdAt": "2021-01-14T08:49:21Z",
      "updatedAt": "2021-01-26T04:34:14Z",
      "closedAt": "2021-01-26T04:34:14Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "7f1e2310 addresses this issue by clarifying the the notation 'ciphertext'.\r\n\r\n\r\n",
          "createdAt": "2021-01-22T11:03:29Z",
          "updatedAt": "2021-01-22T11:03:29Z"
        }
      ]
    },
    {
      "number": 54,
      "id": "MDU6SXNzdWU3ODU4MDU4NDM=",
      "title": "Real certificates in test vector",
      "url": "https://github.com/lake-wg/edhoc/issues/54",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "X509_I and X509_R in appendix B.1 are just dummy byte strings. Request from implementer to replace with real certificates.",
      "createdAt": "2021-01-14T08:55:29Z",
      "updatedAt": "2021-01-21T08:14:06Z",
      "closedAt": "2021-01-21T08:14:06Z",
      "comments": [
        {
          "author": "fpalombini",
          "authorAssociation": "COLLABORATOR",
          "body": "this is a duplicate of https://github.com/lake-wg/edhoc/issues/51 and also of https://github.com/lake-wg/edhoc/issues/47",
          "createdAt": "2021-01-18T14:56:41Z",
          "updatedAt": "2021-01-18T14:57:22Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, lost track.",
          "createdAt": "2021-01-21T08:14:06Z",
          "updatedAt": "2021-01-21T08:14:06Z"
        }
      ]
    },
    {
      "number": 55,
      "id": "MDU6SXNzdWU3ODgzNTU1MTM=",
      "title": "Fix test vector",
      "url": "https://github.com/lake-wg/edhoc/issues/55",
      "state": "CLOSED",
      "author": "fpalombini",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "```\r\n  data_2 =\r\n  (\r\n    h'71a3d599c21da18902a1aea810b2b6382ccd8d5f9bf0195281754c5ebcaf301e',\r\n    h'13'\r\n  )\r\n```\r\n\r\nShould be:\r\n\r\n```\r\n  data_2 =\r\n  (\r\n    h'71a3d599c21da18902a1aea810b2b6382ccd8d5f9bf0195281754c5ebcaf301e',\r\n    19\r\n  )\r\n```",
      "createdAt": "2021-01-18T15:23:12Z",
      "updatedAt": "2021-01-18T15:36:08Z",
      "closedAt": "2021-01-18T15:36:08Z",
      "comments": []
    },
    {
      "number": 56,
      "id": "MDU6SXNzdWU3OTA4MjAwNDY=",
      "title": "Rename EDHOC-Exporter-FS",
      "url": "https://github.com/lake-wg/edhoc/issues/56",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The name gives the impression that it is exporting something, but the function does not return anything.",
      "createdAt": "2021-01-21T08:31:37Z",
      "updatedAt": "2021-02-21T06:42:22Z",
      "closedAt": "2021-02-21T06:42:21Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "First attempt: EDHOC-Rekey-Exporter-FS  (see 2f6ecec).\r\n\r\nOther proposals: \r\n* EDHOC-Rekey-FS()\r\n* EDHOC-Rekey()",
          "createdAt": "2021-01-25T07:37:10Z",
          "updatedAt": "2021-01-25T07:37:10Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Reopened due to further comments on the name in EDHOC-04: \"EDHOC-Rekey-FS()\"\r\n\r\nJohn: The term \"key update\" (also used by TLS 1.3) is more appropriate than \"rekey\". \r\nG\u00f6ran: The notation \"FS\" as in forward secrecy is an intended property but should not be part of the function name.\r\n\r\nNew proposal: EDHOC-Key-Update()\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-02-02T10:51:35Z",
          "updatedAt": "2021-02-02T10:51:35Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Done in 9dcf610\r\n\r\nI will make test vectors for EDHOC-Key-Update()",
          "createdAt": "2021-02-13T08:51:58Z",
          "updatedAt": "2021-02-13T08:51:58Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should change to the more simple\r\n\r\nEDHOC-KeyUpdate( nonce ):\r\n      PRK_4x3m = Extract( nonce, PRK_4x3m )\r\n\r\nThis aligns with the other usages of Extract. \r\n\r\n\r\n",
          "createdAt": "2021-02-13T09:29:41Z",
          "updatedAt": "2021-02-13T09:29:41Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "No objection to this. This is implemented in -05 specification and test vectors.",
          "createdAt": "2021-02-21T06:42:21Z",
          "updatedAt": "2021-02-21T06:42:21Z"
        }
      ]
    },
    {
      "number": 57,
      "id": "MDU6SXNzdWU3OTExNDg2MTY=",
      "title": "Passing information to the application",
      "url": "https://github.com/lake-wg/edhoc/issues/57",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Sections 5.2.3, 5.3.3 and 5.4.3 can explicitly say that nothing should be passed to the application if any verification step fails and the protocol is discontinued.\r\n\r\nThis applies to Application Data and other information mentioned in the last bullet point of each of those sections.",
      "createdAt": "2021-01-21T14:27:13Z",
      "updatedAt": "2021-05-24T19:22:23Z",
      "closedAt": "2021-05-24T19:22:23Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics When to send EAD is now explicitly stated. What information to send to application is implementation dependent. Is this still an issue?",
          "createdAt": "2021-05-24T13:28:46Z",
          "updatedAt": "2021-05-24T13:28:46Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks good. I think the issue can be closed.",
          "createdAt": "2021-05-24T17:13:55Z",
          "updatedAt": "2021-05-24T17:13:55Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "MDU6SXNzdWU3OTExNTcwOTU=",
      "title": "Length values when using the Exporter for OSCORE",
      "url": "https://github.com/lake-wg/edhoc/issues/58",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In Section 7.1.1, perhaps the two values specified for the 'length' parameter in the two Exporter invocations can be indicated simply as default values.\r\n\r\nThe two peers might have been able to agree in advance on different length values, out-of-band or through separate assisted negotiations.",
      "createdAt": "2021-01-21T14:34:25Z",
      "updatedAt": "2021-02-21T06:49:51Z",
      "closedAt": "2021-02-21T06:49:51Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics Please provide an example where you think this is useful.",
          "createdAt": "2021-01-25T09:49:33Z",
          "updatedAt": "2021-01-25T09:49:33Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "I was thinking of a possible EDHOC profile of ACE.\r\n\r\nThen the Authorization Server can provide not only authentication information to run EDHOC, but also additional information like the intended size for the OSCORE Master Secret and Master Salt to use in the Exporters.",
          "createdAt": "2021-01-25T11:06:33Z",
          "updatedAt": "2021-01-25T11:06:33Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "> I was thinking of a possible EDHOC profile of ACE.\r\n> \r\n> Then the Authorization Server can provide not only authentication information to run EDHOC, but also additional information like the intended size for the OSCORE Master Secret and Master Salt to use in the Exporters.\r\n\r\nThis seems to be merging into the space of https://datatracker.ietf.org/doc/draft-selander-ace-ake-authz/ where we get info from an AS.",
          "createdAt": "2021-01-25T16:01:25Z",
          "updatedAt": "2021-01-25T16:01:25Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a commit for -05 ",
          "createdAt": "2021-02-21T06:49:51Z",
          "updatedAt": "2021-02-21T06:49:51Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "MDU6SXNzdWU3OTI3MzA0NTU=",
      "title": "Update acknowledgements.",
      "url": "https://github.com/lake-wg/edhoc/issues/59",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-01-24T06:15:14Z",
      "updatedAt": "2021-02-21T06:50:29Z",
      "closedAt": "2021-02-21T06:50:29Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Here are some: 2e77356. Who did I forget?\r\n",
          "createdAt": "2021-01-26T06:52:17Z",
          "updatedAt": "2021-01-26T06:52:17Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "MDU6SXNzdWU3OTQ5NzIzNDQ=",
      "title": "Test vectors comments from Peter",
      "url": "https://github.com/lake-wg/edhoc/issues/60",
      "state": "CLOSED",
      "author": "fpalombini",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "page 51 info for IV_2m, algorithm number 10;\r\nIt might be good to remind that the 10 comes from the cose algorithm number specified in item 0 of the suite.\r\n\r\npage 52 at the end\r\nK_2e = HKDF-Expand( PRK, info, length) should that not be: K_2e = HKDF-Expand( PRK_3e2m, info, length) .\r\nIf not, what should it be?\r\n\r\nThe number of bytes are sometimes a bit magical; In some cases it can be reminded that ECDH uses 32 bytes and the signature of the ed25519 is 32 bytes as well.\r\n\r\npage 51: may be mention that for MAC_2, 8 bytes is length of TAG\r\n\r\npage 52: cbor bytes of Signature_or_MAC_2  or h'Signature_or_MAC_2' instead of Signature_or_MAC_2.\r\n\r\npage 58 line 6-7: ID_CRED_I, h'Signature_or_MAC_3'\r\n\r\npage 59, line 1, HKDF-Expand(PRK_4x3m, info, L))\r\n\r\nmessage_3 = ( h'13', h'CIPHERTEXT_3')\r\n",
      "createdAt": "2021-01-27T10:27:16Z",
      "updatedAt": "2021-03-02T14:55:45Z",
      "closedAt": "2021-03-02T14:55:45Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@petervanderstok I tried to address what remains of these comments. Let me know I missed something.",
          "createdAt": "2021-02-22T18:23:51Z",
          "updatedAt": "2021-02-22T18:23:51Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed as discussed during Hackathon.",
          "createdAt": "2021-03-02T14:55:45Z",
          "updatedAt": "2021-03-02T14:55:45Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "MDU6SXNzdWU3OTQ5NzI4MTU=",
      "title": "Change message_1 format",
      "url": "https://github.com/lake-wg/edhoc/issues/61",
      "state": "CLOSED",
      "author": "fpalombini",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @petervanderstok:\r\n\r\nCan both message_3 and message_1 be started with C_R that helps the parsing and makes a distinction between the two messages.\r\nIn message_1 C_R = h'' means that C_R is to be calcuated by Receiver.\r\nOtherwise C_R serves to determine it is a new connection (messagee_1) or an existing ongoing connection (message_3).",
      "createdAt": "2021-01-27T10:27:50Z",
      "updatedAt": "2021-07-15T19:54:35Z",
      "closedAt": "2021-07-15T19:54:35Z",
      "comments": [
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "This also relates to https://github.com/lake-wg/edhoc/issues/39\r\n\r\nIt is possible to distinguish the two message types based on the number of elements that they include.",
          "createdAt": "2021-01-28T15:56:05Z",
          "updatedAt": "2021-01-28T15:56:05Z"
        },
        {
          "author": "petervanderstok",
          "authorAssociation": "NONE",
          "body": "That is true,\n\nI found even other means to do so; But they are indirect, and not\nassured to be true in the future.\nThat is the motivation for asking the change.\n\nIt is not a major issue, just makes the code more robust.\n\ngreetings,\n\nPeter\n\nmarco-tiloca-sics schreef op 2021-01-28 16:56:\n\n> This also relates to #39 [1] \n> \n> It is possible to distinguish the two message types based on the number of elements that they include. \n> \n> --\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub [2], or unsubscribe [3].\n \n\nLinks:\n------\n[1] https://github.com/lake-wg/edhoc/issues/39\n[2] https://github.com/lake-wg/edhoc/issues/61#issuecomment-769183292\n[3]\nhttps://github.com/notifications/unsubscribe-auth/ADCZGQKTHFYJ5LWRGODKTRDS4GCKRANCNFSM4WVAIABQ",
          "createdAt": "2021-01-28T16:02:45Z",
          "updatedAt": "2021-01-28T16:02:45Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Starting message_1 with the fixed h'' sound like it might be a good idea. That only cost one byte and the size in message_1 is not critical.\r\n\r\nThe change would reduce the number of 1 byte C_R from 49 to 48 or something like that, but we could live with that.\r\n\r\nThe text would also need to be update to reflect that this would be a dummy C_R and not a value chosen by R.",
          "createdAt": "2021-02-15T17:18:09Z",
          "updatedAt": "2021-02-15T17:18:09Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "I had a very similar issue [here](https://github.com/lake-wg/edhoc/issues/30). At the end, the way to distinguish between messages is through the number of elements and their CBOR types. However, I agree with \r\npetervanderstok that this method is indirect. \r\n\r\nThe suggested dummy C_R (as far I understand) acts as a message ID. Will it be better to call it message ID? Additionally, also the error message may use a message ID which will make its parsing also easier. \r\n\r\nFor me, it is a trade-off between message size and parsing complexity, however, both variants work.",
          "createdAt": "2021-02-16T08:12:10Z",
          "updatedAt": "2021-02-16T08:12:45Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think a undocumented design philosophy was that first element should be used to distinguish message_1 and message_3. This aspect dissapeared with the bstr_identifier optimization.\r\n\r\nI am always hesitant to add bytes, but I think this is a good change. Even if its possible to implement now, there could be future methods that make things more tricky.\r\n\r\nThe change also needs to make sure that the dummy value h'' cannot be used as a real C_R. ",
          "createdAt": "2021-02-16T13:08:29Z",
          "updatedAt": "2021-02-16T13:08:29Z"
        },
        {
          "author": "petervanderstok",
          "authorAssociation": "NONE",
          "body": "Hi John,\n\n\"The change also needs to make sure that the dummy value h'' cannot be\nused as a real C_R.\"\n\nAt least, h'' can be detected and represented as a byte string with\nlength 0;\nIMO that means: not yet determined.\n\nPeter\n\nJohn Mattsson schreef op 2021-02-16 14:08:\n\n> I think a undocumented design philosophy was that first element should be used to distinguish message_1 and message_3. This aspect dissapeared with the bstr_identifier optimization. \n> \n> I am always hesitant to add bytes, but I think this is a good change. Even if its possible to implement now, there could be future methods that make things more tricky. \n> \n> The change also needs to make sure that the dummy value h'' cannot be used as a real C_R. \n> \n> --\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub [1], or unsubscribe [2].\n \n\nLinks:\n------\n[1] https://github.com/lake-wg/edhoc/issues/61#issuecomment-779825214\n[2]\nhttps://github.com/notifications/unsubscribe-auth/ADCZGQKD24IKSXMEUZW4HW3S7JU53ANCNFSM4WVAIABQ",
          "createdAt": "2021-02-16T14:09:21Z",
          "updatedAt": "2021-02-16T14:09:21Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "I also believe this is a good change to do.",
          "createdAt": "2021-02-16T22:02:37Z",
          "updatedAt": "2021-02-16T22:02:37Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "> I had a very similar issue [here](https://github.com/lake-wg/edhoc/issues/30). At the end, the way to distinguish between messages is through the number of elements and their CBOR types. However, I agree with\r\n> petervanderstok that this method is indirect.\r\n\r\nIt's not just indirect, it's unstable to future changes in the specification.\r\nIt's also hard for an observer to help debug.\r\nSo, please let's make this explicit.",
          "createdAt": "2021-02-19T17:05:48Z",
          "updatedAt": "2021-02-19T17:05:48Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I added \r\nC_1 : bstr .size 0\r\n\r\nBut this is likely not what we want. This stops the server to negotiate the optimal client ID for OSCORE",
          "createdAt": "2021-02-21T06:22:56Z",
          "updatedAt": "2021-02-21T06:22:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Should we reserve one of the 1 byte or one of the 2 byte C_R / Client ID ?",
          "createdAt": "2021-02-21T06:26:05Z",
          "updatedAt": "2021-02-21T06:26:05Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we need to discuss and document how the EDHOC processing should be done. This is unfortunatly a bit missing from the document so I understand all the issues regarding this. In the document the processin is written under each message which probably gives the idea that the implementation has to know the message to do processing.\r\n\r\nI dont think my previous statement \"think a undocumented design philosophy was that first element should be used to distinguish message_1 and message_3. This aspect dissapeared with the bstr_identifier optimization.\" was true. \r\n\r\nThinking some more, I think the idea when writing the spec was as follows.\r\n\r\n```\r\n- First detemine that is is a EDHOC message.\r\n\r\n- Retrieve the security context using the connection identifier and/or other external information such as the CoAP Token and the 5-tuple.\r\n\r\nIF security context was found\r\n      - IF messege is error, process as error\r\n      - ELSE process as expected next message in security context\r\nELSE process as message_1\r\n```\r\nThe issue suggesting message_3 several times makes me a bit worried. I cannot see any concrete attacks but it is definitly not intended and might break the security properties.\r\n\r\n",
          "createdAt": "2021-02-21T11:29:41Z",
          "updatedAt": "2021-02-21T11:29:41Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Coming at this from issue https://github.com/lake-wg/edhoc/issues/39#issuecomment-787965315 (didn't see this one after I posted there), things look already pretty well distinguishable to me as long as the server doesn't pick a value from 0 to 15 for C_R. A server supporting both roles may additionally use distinct sets of C_I and C_R.",
          "createdAt": "2021-03-01T13:57:01Z",
          "updatedAt": "2021-03-01T13:57:01Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The ambition is to neither require restriction of C_R, nor policies for C_I and C_R when an endpoint simultaneously acts client and server for multiple connections. As John commented above, the bstr_identifier optimization was one reason for this problem apperaring and we need to fix it, one thing to discuss at March 2 Hackathon. \r\n\r\nIs it feasible to implement according to the procedure John described? Other preferred solution?\r\n",
          "createdAt": "2021-03-01T14:53:40Z",
          "updatedAt": "2021-03-01T16:12:56Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Some comments from Hackathon:\r\n\r\n* Need to make expected processing clear \r\n* Proposal to introduce a mandatory null (0xf6) as first field in message_1\r\n\r\n",
          "createdAt": "2021-03-02T15:34:56Z",
          "updatedAt": "2021-03-31T10:50:08Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "e3f542d adds an initial null to message_1.\r\n\r\nThis is optional since it may be inferred by other means, e.g. CoAP Uri-Path.",
          "createdAt": "2021-03-31T10:53:41Z",
          "updatedAt": "2021-04-01T08:11:44Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "First draft of new section addressing expected processing: dd3e80f6",
          "createdAt": "2021-04-01T14:02:53Z",
          "updatedAt": "2021-04-01T14:02:53Z"
        },
        {
          "author": "petervanderstok",
          "authorAssociation": "NONE",
          "body": "Sorry. Reference to coap uri is a bit cryptic. Nothing is mentioned in the text?\r\n\r\nOtherwise: nice.",
          "createdAt": "2021-04-01T17:25:29Z",
          "updatedAt": "2021-04-07T07:36:00Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@petervanderstok The use of CoAP Uri-Path to distinguish messages is mentioned in the Applicability Statmement section. This section is now moved from appendix to the body, see Editor's copy on github: \r\n\r\nhttps://lake-wg.github.io/edhoc/draft-ietf-lake-edhoc.html#name-applicability-statement\r\n\r\nWe did not want to bring in CoAP specific options into the generic message processing. Is this still cryptic?",
          "createdAt": "2021-04-06T07:05:46Z",
          "updatedAt": "2021-04-06T07:05:46Z"
        },
        {
          "author": "petervanderstok",
          "authorAssociation": "NONE",
          "body": "HI Goran,\r\n\r\nI am still not quite sure what it all means.\r\nIn my concept of the world edhoc is used for coap and in a 2nd  instance \r\nfor http.\r\nAnything else may live in the heads of the writers but is not very \r\nrelevant for the current standardization effort.\r\n\r\nThis is equivalent to what we did for resource directory: in the RD \r\nanything concerning htpp has been spelled out to remove confusions.\r\nAnd yet, confusion remains....\r\n\r\nTherefore, I recommend strongly to forget about anything beyond coap and \r\nhtpp.\r\nAnd spell out how you see the use of http by introducing an htpp section \r\nnext to the coap section. (for example discovery of an edhoc path in \r\nhttp is quite different )\r\n",
          "createdAt": "2021-04-06T07:22:44Z",
          "updatedAt": "2021-04-07T07:36:14Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Provided by transport. In -08 this is described for CoAP in Appendix A.3.",
          "createdAt": "2021-07-15T19:54:35Z",
          "updatedAt": "2021-07-15T19:54:35Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "MDU6SXNzdWU3OTQ5NzY2MDU=",
      "title": "COSE_Key content constrained according to EDHOC",
      "url": "https://github.com/lake-wg/edhoc/issues/62",
      "state": "CLOSED",
      "author": "fpalombini",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @lemikev:\r\n\r\nI have a question about the following sentence on page 13.\r\n\r\nMaybe somebody on the call can explain the rational of this sentence.\r\n\r\n \r\n\r\n  \" For COSE_Keys of type EC2 the CBOR map SHALL only include the parameters 1 (kty), -1 (crv), -2 (x-coordinate), and -3 (y-coordinate). \"\r\n\r\n \r\n\r\nFirst, this sentence is incorrect since \"subject name\" is also allowed.\r\n\r\nWhy the content of the COSE_Key is constrained?\r\n\r\nWhy 2 (kid) and 3 (alg) are excluded?\r\n\r\n \r\n\r\nCan we replace \u201cSHALL only include\u201d by \u201cSHALL minimally include\u201d?",
      "createdAt": "2021-01-27T10:32:29Z",
      "updatedAt": "2021-07-26T14:17:55Z",
      "closedAt": "2021-07-24T11:50:06Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this: The COSE_Key is now replaced with UCCS, and the mandatory terminology is removed (depends on applicability statement).",
          "createdAt": "2021-07-24T11:50:06Z",
          "updatedAt": "2021-07-24T11:50:06Z"
        },
        {
          "author": "lemikev",
          "authorAssociation": "NONE",
          "body": "Thanks for the follow-up G\u00f6ran.",
          "createdAt": "2021-07-26T14:17:55Z",
          "updatedAt": "2021-07-26T14:17:55Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "MDU6SXNzdWU3OTYxMjM5NjY=",
      "title": "When key-confirmation is needed latest",
      "url": "https://github.com/lake-wg/edhoc/issues/63",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For applications needing key-confirmation, it may help to formulate it as a requirement for the Initiator along these lines.\r\n\r\n\"The Initiator must have achieved key-confirmation through WAY_1 or WAY_2 ... before doing THIS_1 and THIS_2, and at the latest before doing THAT.\"\r\n\r\nFor instance, the Initiator might be fine to send a protected GET request even without having achieved key-confirmation yet, while the same may not be fine for a PUT request.",
      "createdAt": "2021-01-28T15:46:02Z",
      "updatedAt": "2021-05-05T16:32:01Z",
      "closedAt": "2021-05-05T16:32:01Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The only limitation would be that you should maybe not permanently store the key. There is no relation to GET POST like TLS 0-RTT data without replay. In fact it is not so much a security problem at all, its more like a normal transport problem. I has not gotten any confirmation that R received the message.  ",
          "createdAt": "2021-02-21T12:24:14Z",
          "updatedAt": "2021-02-21T12:24:14Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics can we close this?",
          "createdAt": "2021-04-22T08:49:24Z",
          "updatedAt": "2021-04-22T08:49:24Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "I think so, the text in Section 8.1 builds on John's point.\r\n\r\nI just wonder if the recommendation about \"not permanently storing\" extends also to the possible application key material already derived from PRK_4x3m and TH_4.",
          "createdAt": "2021-04-22T09:38:42Z",
          "updatedAt": "2021-04-22T09:38:42Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics While this is strictly up to the application, I think it makes sense to extend this recommendation to the derived application keys, see recent commit 592c6fe.",
          "createdAt": "2021-05-04T14:03:38Z",
          "updatedAt": "2021-05-04T14:03:38Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good, thanks!",
          "createdAt": "2021-05-04T14:38:28Z",
          "updatedAt": "2021-05-04T14:38:28Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": " @marco-tiloca-sics John made an update: 52b7490. \r\nStill good/ready to close the issue?",
          "createdAt": "2021-05-05T14:13:05Z",
          "updatedAt": "2021-05-05T14:13:05Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, and it looks even better now.",
          "createdAt": "2021-05-05T15:23:42Z",
          "updatedAt": "2021-05-05T15:23:42Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "MDU6SXNzdWU3OTYxMjUwMjc=",
      "title": "Max retransmissions of EDHOC messages",
      "url": "https://github.com/lake-wg/edhoc/issues/64",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Thinking of CoAP for transport:\r\n\r\n1. Let's say that the Initiator (Responder) trasmits Message_1 (Message_2) as a Confirmable message, does not receive an ACK from the other peer and retransmits the message. This happens again multiple times, until the maximum number of retransmissions is reached. Should the sender peer simply discontinue the protocol?\r\n\r\n2. Let's say that the same as above happens with the Initiator (Responder) transmitting Message_3 (Message_4). Should the sender peer delete PRK_4x3m, TH_4 and any possible application keys derived with the exporter, including the possible OSCORE Security Context?",
      "createdAt": "2021-01-28T15:47:09Z",
      "updatedAt": "2021-08-26T16:43:22Z",
      "closedAt": "2021-08-26T16:43:21Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics Can we close this?",
          "createdAt": "2021-04-22T08:49:05Z",
          "updatedAt": "2021-04-22T08:49:05Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "I understand that the details on retransmission and reliability are left to the used transport, but I couldn't find indications on what to do if a session \"gets stuck\" before completing.\r\n\r\nIf the next expected message does not come before a timeout possibly influenced by the used transport, I suppose this can be seen as a failure, followed by discontinuing the protocol as in other cases, so that memory and state can be freed up, and especially the allocated connection identifier can be made available again. When this involves message_3 or message_4, this possibly extends to deleting application key material already derived from PRK_4x3m and TH_4.\r\n\r\nI'm not sure if it's worth also sending an Error Message after that, but it would be at least consistent with what is done in other situations where the protocol is discontinued.",
          "createdAt": "2021-04-22T09:38:17Z",
          "updatedAt": "2021-04-22T09:38:17Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "It is not clear to me what the specification should write here. \r\n\r\nFailure in transport is out of scope for EDHOC. That the EDHOC implementation needs to get informed that transport failed to be able to free state is probably obvious?\r\n\r\nSimilarly, in order to free state of existing exporter secret or OSCORE security context, the EDHOC implementation need to get informed about it being obsolete. The OSCORE security context may expire because e.g. because exceeding the number of allowed encryptions, but there may also be  policies about lifetime out of scope of EDHOC.\r\n\r\nThe case that the endpoint sending the last message of the protocol does not know if it reached the other endpoint seems to belong to either of these two cases. \r\n",
          "createdAt": "2021-04-27T12:36:14Z",
          "updatedAt": "2021-04-27T12:36:31Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics Considering  the changes made -08, is there any further clarification needed in the specification, for EDHOC in general or for CoAP in particular?\r\n",
          "createdAt": "2021-07-15T20:04:57Z",
          "updatedAt": "2021-07-15T20:04:57Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Reading this with fresh eyes, now I think that my points are basically covered in Section 5.1 \"Message Processing Outline\", already before version -08, where:\r\n\r\n* > The protocol state is assumed to be associated to an applicability statement ... which provides the context for how messages are transported ...\r\n\r\n  explicitly involves the used transport, whatever it is and whatever the way it works.\r\n\r\n* > If the processing fails, then the protocol is discontinued, an error message sent, and the protocol state erased.\r\n\r\n  does mention the cleanup I had in mind.\r\n\r\n\r\nSo a \"processing failure\" can also be the result of a \"transport failure\", e.g., not receiving an expected next message by a certain timeout or exceeding the maximum number of admitted retransmissions.\r\n\r\nThe only possible clarification can be making this point explicit here, otherwise it seems to be already fine as is.",
          "createdAt": "2021-07-16T13:52:36Z",
          "updatedAt": "2021-07-16T13:52:36Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The text in Section 5.1 \"Message Processing Outline\" is quite general. I added \"for some reason\" to \"If the processing fails\" without going into the specific detail of that it may be lack of confirmation on transport layer.\r\n\r\n\r\n\r\n",
          "createdAt": "2021-08-13T09:44:04Z",
          "updatedAt": "2021-08-13T09:44:04Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks like this can be closed.",
          "createdAt": "2021-08-26T16:43:21Z",
          "updatedAt": "2021-08-26T16:43:21Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "MDU6SXNzdWU3OTYxMjY1ODk=",
      "title": "Loss of Message_4",
      "url": "https://github.com/lake-wg/edhoc/issues/65",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Thinking of CoAP for transport, let's say that the Responder sends Message_4 as a Non-Confirmable message, and this never reaches the Initiator.\r\n\r\nOne can expect the Initiator to eventually resend Message_3. When the Responder receives this Message_3, it has to resend the same Message_4 as above. However, it can come to understand what to do in two possible ways:\r\n\r\n1. It stores a full copy of Message_3 upon first receiving it, to check for a perfect match against the retransmitted one. This copy has to be stored until the first protected application-message is received from the Initiator.\r\n\r\n2. After having processed the first Message_3 for the first time, it keeps storing PRK_3e2m and TH_3 until the first protected application-message is received from the Initiator. Then, when receiving the retransmitted Message_3, the Responder can just process it again as it did when receiving it the first time.\r\n\r\nWhich is preferable? The first one costs more in terms of storage, but it still allows the Responder to delete the temporary PRK_3e2m and TH_3 as soon as possible, i.e. when it has completed the processing of the first received Message_3.",
      "createdAt": "2021-01-28T15:48:58Z",
      "updatedAt": "2021-05-21T19:04:29Z",
      "closedAt": "2021-05-21T19:04:28Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Good questions and points.\r\n\r\nFrom an pure EDHOC perspective, the lower layers does not really matter. After message_3 has been received and processed, the Responder should never process message_3 again and PRK_3e2m and TH_3 will have been deleted.\r\n\r\nI think 2. violated the EDHOC protocol.\r\n\r\nI think 1. is not needed. I dont think the responder needs to check message_3 again. The Initiator must not change message_3. If message_3 is changed things break, which is fine.\r\n",
          "createdAt": "2021-02-21T11:38:59Z",
          "updatedAt": "2021-02-21T11:38:59Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics Can we close this?",
          "createdAt": "2021-04-22T08:45:47Z",
          "updatedAt": "2021-04-22T08:45:47Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "I think so, thanks to the last paragraph in Section 5.2. For the case in question:\r\n\r\ni) the resent message_3 would not match the protocol state on the responder;\r\nii) in general and also thanks to (i), message_3 is not reprocessed;\r\niii) also because of (i), message_4 would not be resent either (the state on the responder has moved on).\r\n\r\nSide note, though. The text in Section 5.2 also says that if (i) happens (like in this case), the protocol fails, which means it is discontinued and an Error Message is sent. Isn't this excessive for this case and perhaps other ones? This is more related to discontinuing and sending an Error Message for every possible deviation or instead admitting justified exceptions.",
          "createdAt": "2021-04-22T09:36:50Z",
          "updatedAt": "2021-04-22T09:36:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Per the last paragraph in the previous comment, we keep this open pending the resolution of #101                                                                                                                                                                                                                                                   ",
          "createdAt": "2021-04-27T11:04:39Z",
          "updatedAt": "2021-04-27T11:04:39Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "#101 has been closed. Closing this as well",
          "createdAt": "2021-05-21T19:04:28Z",
          "updatedAt": "2021-05-21T19:04:28Z"
        }
      ]
    },
    {
      "number": 66,
      "id": "MDU6SXNzdWU4MDAxODE2MjA=",
      "title": "Information in test vectors",
      "url": "https://github.com/lake-wg/edhoc/issues/66",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It would help to have also the following information explicitly specified in the test vectors.\r\n\r\n1) When authentication with signatures is used, please include also the public authentication keys. They are not strictly needed to reproduce the test vectors as stand-alone test units, since they focus on producing outgoing messages. However, they are needed to reproduce the results in full-fledged EDHOC peers, that will have to do signature verification of incoming messages.\r\n\r\n2) When using a ciphersuite with ECDSA, please include also the Y coordinate of authentication public keys.",
      "createdAt": "2021-02-03T10:15:32Z",
      "updatedAt": "2021-02-21T06:55:38Z",
      "closedAt": "2021-02-21T06:55:38Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "1. I have added public authentication keys to my test vector code, which will used for -05\r\n2. We currently do not have any ECDSA test vectors. Maybe for -06",
          "createdAt": "2021-02-12T15:08:25Z",
          "updatedAt": "2021-02-12T15:08:25Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Updated #47 with this info. Will close this",
          "createdAt": "2021-02-21T06:55:38Z",
          "updatedAt": "2021-02-21T06:55:38Z"
        }
      ]
    },
    {
      "number": 67,
      "id": "MDU6SXNzdWU4MDAxOTY2MTI=",
      "title": "REST code for EDHOC Error Message as CoAP response",
      "url": "https://github.com/lake-wg/edhoc/issues/67",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The following is a possible exchange that might happen, if using the \"EDHOC-in-OSCORE\" optimization proposed in [1].\r\n\r\n1. The Initiator (as CoAP client) sends an OSCORE-protected request, embedding both EDHOC Message 3 and the actual request payload protected with the just-established Security Context, as per the proposed approach.\r\n\r\n2. The Responder (as CoAP server) processes EDHOC Message 3. If this processing fails, the Responder replies with an unprotected EDHOC error message. As of today, this would be a 2.04 response, hence a successful response for CoAP.\r\n\r\nHowever, as per [2], \"A successful response to a request with the OSCORE option SHALL contain the OSCORE option.\" Thus, when receiving the unprotected 2.04 response above, the Initiator would experience an OSCORE failure, which is fine and consistent per se.\r\n\r\nHowever, if the OSCORE processing happens before the EDHOC processing on the Initiator, it might become impossible to access and process the actual response content, i.e. the EDHOC Error Message. Whether which of the two processing comes first is implementation specific.\r\n\r\nAn easy way out would be to rather have the EDHOC Error Message sent as a CoAP error response. On the Initiator, the response would then be not discarded by OSCORE, and would ensure a correct processing of the EDHOC Error Message.\r\n\r\n[1] https://datatracker.ietf.org/doc/draft-palombini-core-oscore-edhoc/\r\n[2] https://tools.ietf.org/html/rfc8613#section-2",
      "createdAt": "2021-02-03T10:34:28Z",
      "updatedAt": "2021-05-07T14:41:45Z",
      "closedAt": "2021-05-07T14:41:45Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "First update of text on transport of error message, see 75d8dd7.\r\n@marco-tiloca-sics Please comment.",
          "createdAt": "2021-02-11T21:34:59Z",
          "updatedAt": "2021-02-11T21:34:59Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "In general, it would be good to better understand what issues are avoided when cross-protocol proxies are used.\r\n\r\nOtherwise, the new content can be split and rephrased as follows, i.e. part as general and part as specific to CoAP.\r\n\r\n[Section 6.1 - \"EDHOC Error Message]\r\n\r\nAn EDHOC error message can be sent by either endpoint as a reply to any non-error EDHOC message. How errors at the EDHOC layer are transported depends on lower layers, which need to enable error messages to be sent and processed as intended.\r\n\r\nEDHOC errors sent as transport-successful messages can avoid issues created by usage of cross protocol proxies (e.g. UDP to TCP).\r\n\r\n[Section 7.2 \"Transferring EDHOC in CoAP\"]\r\n\r\nEDHOC errors SHOULD be sent as POST requests and 2.04 (Changed) responses. An exception is the combined EDHOC-in-OSCORE case {{I-D.palombini-core-oscore-edhoc}}, where an error message response following a combined EDHOC message_3/OSCORE request needs to be sent with a CoAP error code.\r\n",
          "createdAt": "2021-02-12T10:19:02Z",
          "updatedAt": "2021-02-12T10:19:02Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Following on the original comment and building on more recent discussions, another advantage of having EDHOC Error Messages as CoAP error responses is that they would become cacheable.",
          "createdAt": "2021-03-11T15:42:50Z",
          "updatedAt": "2021-03-11T15:42:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we have addressed this issue. We have removed the statement about avoiding cross protocol proxies (92d9a98d) which wasn't clear, tuned down the requirement on transport (41cf0e9fe) and moved OSCORE processing to the CoRE draft. \r\n\r\nI close this issue now, we can always reopen if there is something we missed.",
          "createdAt": "2021-05-07T14:41:45Z",
          "updatedAt": "2021-05-07T14:41:45Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "MDU6SXNzdWU4MDU0NDUwOTQ=",
      "title": "More information about certificate transport",
      "url": "https://github.com/lake-wg/edhoc/issues/68",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Peter is requesting the specification to provide more information about transporting a certificate in ID_CRED_x, to support a BRSKI use case and to improve interoperability. \r\n",
      "createdAt": "2021-02-10T11:52:16Z",
      "updatedAt": "2021-02-22T17:45:36Z",
      "closedAt": "2021-02-22T17:45:36Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Are you sure the \"more infroamtion\" should be in EDHOC and not in COSE?",
          "createdAt": "2021-02-10T16:27:54Z",
          "updatedAt": "2021-02-10T16:27:54Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@petervanderstok Does this address your comment?",
          "createdAt": "2021-02-11T20:26:23Z",
          "updatedAt": "2021-02-11T20:26:23Z"
        },
        {
          "author": "petervanderstok",
          "authorAssociation": "NONE",
          "body": "I thought the issue was solved,\r\nby additionally specifying for ID_CREDx:  {5chain: DER} wher DER is a bstr containing a certificate in DER\r\n5chain to be defined in COSE registry",
          "createdAt": "2021-02-12T11:50:34Z",
          "updatedAt": "2021-02-12T11:50:34Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Both the commit and Peter's comment seem restricted to a single certificate, not a general chain.\r\n",
          "createdAt": "2021-02-12T12:03:02Z",
          "updatedAt": "2021-02-12T12:03:02Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@petervanderstok x5chain is already defined to be exactly this. See the last sentence of https://tools.ietf.org/html/draft-ietf-cose-x509-08#section-2\r\nThere is already a temporary label assigned, namely 33, see https://www.iana.org/assignments/cose/cose.xhtml#header-parameters\r\n",
          "createdAt": "2021-02-12T13:14:29Z",
          "updatedAt": "2021-02-12T13:14:29Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@emanjon Yes, this was just an example intended to clarify how to transport a credential. As you previously commented, it is not clear if this information should be in EDHOC or in some COSE draft, but since transport of credential was not sufficiently clear, at least one example like this was needed. This does not exclude that we add more information about credential transport, perhaps as a separate section?",
          "createdAt": "2021-02-12T13:26:22Z",
          "updatedAt": "2021-02-12T13:26:22Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@emanjon It was only a minor change to the text to also cover certificate chains, see aeaadb8",
          "createdAt": "2021-02-18T11:34:23Z",
          "updatedAt": "2021-02-18T11:34:23Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The latest text is also strange technically. Can be several values in ID_CRED_ID and Cred_X does not have to be one the values. I think this \"explanation\" makes things worse.",
          "createdAt": "2021-02-21T06:29:11Z",
          "updatedAt": "2021-02-21T06:29:11Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with b5346fb1",
          "createdAt": "2021-02-22T17:45:36Z",
          "updatedAt": "2021-02-22T17:45:36Z"
        }
      ]
    },
    {
      "number": 69,
      "id": "MDU6SXNzdWU4MDU2NzA4ODM=",
      "title": "Make clear that non-ECC signature algorithms are allowed.",
      "url": "https://github.com/lake-wg/edhoc/issues/69",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The specification that a cipher suite includes \"EDHOC signature algorithm curve\" make it seems like only ECC signature algorithms can be used. That is not the intension. PS256, HSS-LMS, and future PQC should be allowed.",
      "createdAt": "2021-02-10T16:30:42Z",
      "updatedAt": "2021-05-21T19:03:32Z",
      "closedAt": "2021-05-21T19:03:32Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a PR to begin to adress this problem #106. This was an old know issue that was not transfered from the old GitHub repository.\r\n\r\nIn the PR is it explained that algorithms might have parameters and that parameters need to be included so hat the algorithm is determined.\r\n\r\nWhile making the PR, it struck me that the signature algorithm curve is not needed at all and in COSE and X.509 terms this is determined by the public key algorithm. I think this needs to be addresses. Either we remove the signature curve from the cipher suite completely or we specify it as a profiling of the public key. Profiling the public key is however problematic as it is not a COSE key and may be any PKIX algorithm that may not even be standardized for COSE at all. I do not think there is any reason to restrict PKIX.\r\n\r\nMy suggestion is that we remove the public key parameters from the cipher suite.\r\n\r\n",
          "createdAt": "2021-04-25T09:20:35Z",
          "updatedAt": "2021-04-25T09:20:35Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #106 is merged with master. Any further comments on this?",
          "createdAt": "2021-05-07T14:30:42Z",
          "updatedAt": "2021-05-07T14:30:42Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The PR has been discussed and merged. Closing",
          "createdAt": "2021-05-21T19:03:32Z",
          "updatedAt": "2021-05-21T19:03:32Z"
        }
      ]
    },
    {
      "number": 70,
      "id": "MDU6SXNzdWU4MDc3MDgyNTk=",
      "title": "Message_4 ",
      "url": "https://github.com/lake-wg/edhoc/issues/70",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Making key confirmation or introducing signaling to indicate that message_4 should be seem to both introduce comlexity. I suggest that message_4 is moved to things that \"parameters to be agreed upon between Initiator and Responder\". This works well for example EAP-EDHOC (if message_4 would be included there).\r\n\r\nAny text on key confirmation should just be guidance.\r\n\r\nThe AEAD calculation in message_4 is not needed. We are taking the output from one PRF to generate output from a second (probablypu worse) PRF. I suggest that we just put the output from the exporter in message_4.\r\n\r\n\"Applicability Statement Template\"  -   Is it only me that do not understand at all what this appendix is about by reading the heading in the toc?\r\n",
      "createdAt": "2021-02-13T08:47:50Z",
      "updatedAt": "2021-02-22T17:56:19Z",
      "closedAt": "2021-02-22T17:56:19Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think a lot of the text in the message_4 section can be removed and replaced with\r\n\r\nMAC_4 is  EDHOC-Exporter( \"EDHOC_message_4_MAC\", length )",
          "createdAt": "2021-02-13T09:33:09Z",
          "updatedAt": "2021-02-13T09:33:09Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "\"Applicability Statement Template\" - I think it should be understood in the following way. This appendix lists the different protocol parameters and settings that the application needs to ensure are configured/agreed between the endpoints. An \"applicability statement\" corresponds to a configuration with certain settings. An applicability statement template is a template for what are the parameters and settings that needs to be specified and guidance for how to set them.\r\n\r\nOther proposals for title are welcome. \r\n",
          "createdAt": "2021-02-15T09:33:38Z",
          "updatedAt": "2021-02-15T09:33:38Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree that how the Initiator gets key confirmation needs to be left application dependent. But I would like to avoid to leave this completely open. Can we keep a statement that maintains this intent:\r\n\r\n\"In deployments where no protected application message is sent from the Responder to the Initiator, the Responder MUST send message_4.\"\r\n\r\n* One comment was that this is not possible to verify.\r\n* What if the applicability statement specifies R to send an OSCORE response, but R cannot enforce that, e.g. in case there is an error with the request?\r\n",
          "createdAt": "2021-02-15T09:53:52Z",
          "updatedAt": "2021-02-15T09:53:52Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "\"In deployments where no protected application message is sent from the Responder to the Initiator, the Responder MUST send message_4.\"\r\n\r\nThat sounds very good to me. I don't see any need for any more text.\r\n",
          "createdAt": "2021-02-15T16:44:31Z",
          "updatedAt": "2021-02-15T16:44:31Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The text is included in section 7.1",
          "createdAt": "2021-02-22T17:56:19Z",
          "updatedAt": "2021-02-22T17:56:19Z"
        }
      ]
    },
    {
      "number": 71,
      "id": "MDU6SXNzdWU4MTIwNDU0NTU=",
      "title": "Deterministic CBOR encoding of e.g. CBOR intergers",
      "url": "https://github.com/lake-wg/edhoc/issues/71",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Migth be a good idea that the method should be encoded as 01 instead of 0001, 00000001, 0000000000000001.\r\n\r\nWe should look through the drafy.",
      "createdAt": "2021-02-19T13:58:34Z",
      "updatedAt": "2021-04-20T05:51:06Z",
      "closedAt": "2021-04-20T05:51:06Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I will start adding a sentence or two regarding this to the draft for the next submission.",
          "createdAt": "2021-04-19T11:24:54Z",
          "updatedAt": "2021-04-19T11:24:54Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Commit in 31b338a",
          "createdAt": "2021-04-20T04:43:19Z",
          "updatedAt": "2021-04-20T04:43:19Z"
        }
      ]
    },
    {
      "number": 72,
      "id": "MDU6SXNzdWU4MTI3ODQ4MjA=",
      "title": "Strange places to mention draft-palombini-core-oscore-edhoc",
      "url": "https://github.com/lake-wg/edhoc/issues/72",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "draft-palombini-core-oscore-edhoc is mention several times in general places it should maybe not be mentioned.\r\n\r\ndraft-palombini-core-oscore-edhoc is not mention in \r\n7.2.  Transferring EDHOC in CoAP\r\nwhere it should absolutly be mentioned.\r\n",
      "createdAt": "2021-02-21T06:17:32Z",
      "updatedAt": "2021-04-19T14:05:27Z",
      "closedAt": "2021-04-19T14:05:27Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "draft-palombini-core-oscore-edhoc (now draft-ietf-core-oscore-edhoc) is now only mentioned in 7.2.2, so the issue is seemingly resolved.\r\n\r\nBut we probably want to make more changes here. draft-ietf-core-oscore-edhoc is already mentioning combined use of OSCORE and EDHOC, so we may want to move section 7.2.1. \"Deriving an OSCORE Context from EDHOC\" and the last part of section 7.2.2 to that draft.\r\n\r\nIn which case we would want to keep a reference of draft-ietf-core-oscore-edhoc in 7.2.0.\r\n\r\n(Note also changes proposed in 7.2.2: #91 )",
          "createdAt": "2021-04-09T09:45:06Z",
          "updatedAt": "2021-04-09T09:45:06Z"
        }
      ]
    },
    {
      "number": 73,
      "id": "MDU6SXNzdWU4MTI3OTE1Mjc=",
      "title": "Unclear which parts of the spec that are MTI",
      "url": "https://github.com/lake-wg/edhoc/issues/73",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The things that are Mandatory or optional to support or now spread out in various places.",
      "createdAt": "2021-02-21T07:07:26Z",
      "updatedAt": "2021-10-11T09:09:59Z",
      "closedAt": "2021-10-11T09:09:58Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This does not need to be a new section (like the MTI section in TLS 1.3) but it definitly needs to be clear what in the draft is mandatory to implement or not. Could be as simple as stating.\r\n\r\n- Everything is mandatory\r\n- Nothing is mandatory\r\n- Something in between\r\n\r\nCurrently is is undefined which is not good I think ",
          "createdAt": "2021-05-05T10:03:47Z",
          "updatedAt": "2021-05-05T10:03:47Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I started making an MTI section inspired by RFC 8446. I think this makes things clearer.\r\n\r\nI added some editorial notes in the section that needs to be discussed.",
          "createdAt": "2021-09-10T09:44:33Z",
          "updatedAt": "2021-09-10T09:44:33Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "MTI section now in place and no editor's notes left.",
          "createdAt": "2021-10-11T09:09:58Z",
          "updatedAt": "2021-10-11T09:09:58Z"
        }
      ]
    },
    {
      "number": 74,
      "id": "MDU6SXNzdWU4MTI4MjEyNjI=",
      "title": "Classes of Error messages.",
      "url": "https://github.com/lake-wg/edhoc/issues/74",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "At the last interim there was a suggestion to standardize classes of error messages and to ask the IoT groups in IETF about what classes of error messages that should be standardized.\r\n\r\n- The error message should then be augmented with a error message class. int? array of int?\r\n- Shoudl the optional text string remain. That cannot be used for any automation. But might be useful for loggging for later reading by a human. The initial classes or error message might not provide much info, e.g. \"authentication error\"\r\n",
      "createdAt": "2021-02-21T10:21:04Z",
      "updatedAt": "2021-05-21T19:03:14Z",
      "closedAt": "2021-05-21T19:03:14Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Mailthread in iotops:\r\nhttps://mailarchive.ietf.org/arch/msg/iotops/KcWcK19kACOYnimRqFNJDBu_MAk/\r\n",
          "createdAt": "2021-02-21T17:12:47Z",
          "updatedAt": "2021-02-21T17:12:47Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Proposal after discussion in Hackathon:\r\n\r\nerror = (\r\n\u00a0 ? C_x : bstr_identifier,\r\n\u00a0 \u00a0 DIAG_MSG : tstr,\r\n\u00a0\u00a0\u00a0 ERR_CODE : int / 2* int,\r\n\u00a0 ? SUITES_R : [ supported : 2* suite ] / suite,\r\n)\r\n\r\nTop-level ERR_CODEs:\r\n\r\n(0. Success)\r\n1. Message field error (syntax error or incorrect protocol field of expected message)\r\n2. Selected cipher suite not supported (include SUITES_R in message)\r\n3. Credential/context error (error related to establish certificate/raw public key context for processing message, including certificate expired, revoked, unsupported, corrupt, unknown CA, or other issue in processing the credential)\r\n4. Decrypt error (a cryptographic operation failed, including being unable to correctly verify a signature or a MAC in the protocol message)\r\n5. Auxiliary data error (unsupported or missing auxiliary data)\r\n6. Access denied (credential valid but peer not allowed access)\r\n7. Internal error (error not related to the protocol or the peer)\r\n\r\nSelected comments during Hackathon:\r\n- Relation to errors on other layer, e.g. CoAP errors or error in application. \r\n- - EDHOC does not require CoAP so could have use for specified own errors.\r\n- - Does \"5. AD error\" belong to EDHOC?  Perhaps, auxiliary data provides means for security applications to reuse EDHOC and this would be a channel to send errors in those applications. [Not sure if this helps but, alternatively, errors could be encoded as auxiliary data, which may require an AD-field in the error message]\r\n- - Does \"6. Access denied\" belong to EDHOC? Perhaps, it provides a suitable error to the requirement \"Verify that the identity of the Responder is an allowed identity for this connection\"\r\n\r\n\r\nFurther comments are welcome. Happy to make the list shorter if possible. ",
          "createdAt": "2021-03-02T15:29:50Z",
          "updatedAt": "2021-03-02T15:29:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Other thoughts:\r\n\r\n* We can put some of these error classes into an \"x. unspecified error\" bucket if we don't think they are not meaningful to act upon individually. \r\n\r\n* We can define a class of errors \"y. general error\" and allow implementations to use class y for any error, including those properly belonging to some class above. This would allow implementations to only support some of the specified errors above, potentially listed in the applicability statement. (That would render the list of classes above just a RECOMMENDATION.)\r\n\r\n\r\n\r\n",
          "createdAt": "2021-03-02T15:31:06Z",
          "updatedAt": "2021-03-02T15:31:06Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Many OSs, shells, and programming languages (e.g. C) use 0 for success and everthing non-zero (negative or positive) is considered an error. HTTP and Coap use postive numbers only where 2. or 2xx is considered success.\r\n\r\nI think we should probably follow one of these convensions instead of making a new one.\r\n\r\nThe specification should also probably define that everything else than whatever we decide for success is considered an error.\r\n",
          "createdAt": "2021-04-21T09:31:03Z",
          "updatedAt": "2021-04-21T09:31:03Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a PR #113 addressing all known issues regarding this.  ",
          "createdAt": "2021-05-05T09:58:00Z",
          "updatedAt": "2021-05-05T09:58:00Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This is ready to merge unless there are any objections.",
          "createdAt": "2021-05-07T13:36:56Z",
          "updatedAt": "2021-05-07T13:36:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The PR has been discussed and merged. Closing",
          "createdAt": "2021-05-21T19:03:14Z",
          "updatedAt": "2021-05-21T19:03:14Z"
        }
      ]
    },
    {
      "number": 75,
      "id": "MDU6SXNzdWU4MTI4MzA4MjE=",
      "title": "Move 7.2.  Transferring EDHOC in CoAP to draft-palombini?",
      "url": "https://github.com/lake-wg/edhoc/issues/75",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "7.2 was written before draft-palombini existed. Would it make sense to move all OSCORE specific informaiton to draft-palombini and make that draft more general. Right now you probably have to read both. A lot of the new issues and discussion are concerning the OSCORE EDHOC interaction.",
      "createdAt": "2021-02-21T11:18:13Z",
      "updatedAt": "2021-07-16T08:15:29Z",
      "closedAt": "2021-07-16T08:15:29Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "As there has been no comment on this issue, we now plan for moving out section 7.2.1 and second half of 7.2.2 to draft-ietf-core-oscore-edhoc (former draft-palombini- ...)",
          "createdAt": "2021-04-23T13:12:29Z",
          "updatedAt": "2021-04-23T13:12:29Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "This makes sense for me.",
          "createdAt": "2021-04-23T14:10:13Z",
          "updatedAt": "2021-04-23T14:10:13Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, that makes sense.",
          "createdAt": "2021-04-24T08:46:40Z",
          "updatedAt": "2021-04-24T08:46:40Z"
        },
        {
          "author": "rikard-sics",
          "authorAssociation": "NONE",
          "body": "Sounds good to me also.",
          "createdAt": "2021-04-27T12:46:31Z",
          "updatedAt": "2021-04-27T12:46:31Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As discussed during the last interim, I do not believe removing the link of draft-ietf-lake-edhoc with OSCORE is a good idea from the charter point of view of the LAKE WG.\r\n\r\nI just went through the editor's version of draft-ietf-core-oscore-edhoc and here is my proposal forward:\r\n\r\n* Create a new appendix in draft-ietf-lake-edhoc named \"Use with OSCORE\", say Appendix A.\r\n* Move the content of Section 4 of draft-ietf-core-oscore-edhoc back to draft-ietf-lake-edhoc, to Appendix A.1.\r\n* Merge the content of Section 3 of draft-ietf-core-oscore-edhoc with the content in Section 7.2 of draft-ietf-lake-edhoc. Move the result to Appendix A.2.\r\n\r\nWith that, draft-ietf-lake-edhoc contains all the information to implement EDHOC and use it to key OSCORE. draft-ietf-core-oscore-edhoc becomes streamlined and focuses on optimizing the specific use case when message_3 and OSCORE request are sent in the same CoAP message for performance reasons.",
          "createdAt": "2021-06-24T13:30:50Z",
          "updatedAt": "2021-06-24T13:30:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@malishav @mcr I believe -08 does exactly what you requested. Can we close this?",
          "createdAt": "2021-07-15T20:07:30Z",
          "updatedAt": "2021-07-15T20:07:30Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "WFM, closing",
          "createdAt": "2021-07-16T08:15:29Z",
          "updatedAt": "2021-07-16T08:15:29Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "MDU6SXNzdWU4MTMyNjc3MDk=",
      "title": "appendix b.1.1",
      "url": "https://github.com/lake-wg/edhoc/issues/76",
      "state": "CLOSED",
      "author": "petervanderstok",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Some typos in appendix B.1\r\npage 51,\r\n G_X (Initiator\u2019s ephemeral public key) (32 bytes)\r\n 89 8f f7 9a 02 06 7a 16 ea 1e cc b9 0f a5 22 46 f5 aa 4d d6 ec 07 6b ba\r\n 02 59 d9 04 b7 ec 8b 0c\r\nprobably a typo in the key value because not accepted by mbedtls \r\n\r\nGS: Seems identical to test-vector.txt. Perhaps someone else can confirm this?\r\n\r\npage 57,\r\nMAC_2 (8 bytes) mention that this is the length of the tag.\r\n\r\nGS: Using \"CBOR unencoded\". See new text in appendix.\r\n\r\npage 58\r\nK_2e = HKDF-Expand( PRK, info, length )\r\nPRK relaced by prk_3e2m\r\n\r\n-> GS: Replaced with PRK_2e. (As of -04 formulated in terms of KEYSTREAM_2)\r\n\r\npage 62,\r\nMAC_3 (8 bytes) mention that this is tag length\r\n\r\n-> GS: Using \"CBOR unencoded\".\r\n\r\npage 63\r\nThe Plaintext is the following CBOR Sequence: plaintext = ( ID_CRED_I\r\n , Signature_or_MAC_3 )\r\nshould this not be h'Signature_or_MAC_3'\r\n\r\n-> GS: Using \"CBOR unencoded\".\r\n\r\npage 64,\r\nNonce IV_3ae is the output of HKDF-Expand(PRK_3e2m, info, L).\r\nI had understood that PRK_4x3m should be used.\r\n\r\n-> No this is actually correct. See section 4.0: \"K_3ae and IV_3ae are derived using the transcript hash TH_3 and the pseudorandom key PRK_3e2m. \"\r\n\r\npage 65\r\nmessage_3 =\r\n (\r\n h\u201913\u2019,\r\n h\u2019\u2019\r\n )\r\nshould be :\r\n\r\nmessage_3 =\r\n (\r\n h\u201913\u2019,\r\n h'CIPHERTEXT_3\u2019\r\n )\r\n\r\n-> GS: Using \"CBOR unencoded\".",
      "createdAt": "2021-02-22T08:29:48Z",
      "updatedAt": "2021-03-02T14:55:13Z",
      "closedAt": "2021-03-02T14:55:13Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@petervanderstok Edited previous comment. Please let me know if there are further comments.",
          "createdAt": "2021-02-22T17:54:27Z",
          "updatedAt": "2021-02-22T17:54:27Z"
        },
        {
          "author": "petervanderstok",
          "authorAssociation": "NONE",
          "body": "the mbedtls library only support a basic curve25519 set.\r\nFor that reason many ecdh ephemeral keys are refused in my impementation.\r\n\r\nIs it posible to only support the basic set in edhoc?",
          "createdAt": "2021-03-02T11:27:21Z",
          "updatedAt": "2021-03-02T11:27:21Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed as discussed during Hackathon.",
          "createdAt": "2021-03-02T14:55:13Z",
          "updatedAt": "2021-03-02T14:55:13Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "MDU6SXNzdWU4MTMyNjk5NzY=",
      "title": "use of 5chain",
      "url": "https://github.com/lake-wg/edhoc/issues/77",
      "state": "CLOSED",
      "author": "petervanderstok",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "on page 14 would it not be suitable to add that\r\nID_CRED_x = { x5chain : certificate in DER }, for x = I or R,",
      "createdAt": "2021-02-22T08:32:29Z",
      "updatedAt": "2021-02-22T17:43:18Z",
      "closedAt": "2021-02-22T17:43:18Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Very timely comment. I just made an update to this effect, see b5346fb. I didn't want to include this kind of notation as it requires explanation. Is it good enough?\r\n",
          "createdAt": "2021-02-22T10:26:24Z",
          "updatedAt": "2021-02-22T10:26:24Z"
        },
        {
          "author": "petervanderstok",
          "authorAssociation": "NONE",
          "body": "Suggest to give it a bullet as well.\nG\u00f6ran Selander schreef op 2021-02-22 11:26:\n\n> Very timely comment. I just made an update to this effect, see b5346fb [1]. I didn't want to include this kind of notation as it requires explanation. Is it good enough? \n> \n> --\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub [2], or unsubscribe [3].\n \n\nLinks:\n------\n[1]\nhttps://github.com/lake-wg/edhoc/commit/b5346fb15acba5116b97808415e77bf91d044e74\n[2] https://github.com/lake-wg/edhoc/issues/77#issuecomment-783268938\n[3]\nhttps://github.com/notifications/unsubscribe-auth/ADCZGQLVOZUOR4WZG2V3ZPTTAIWN5ANCNFSM4YACBI2A",
          "createdAt": "2021-02-22T10:41:04Z",
          "updatedAt": "2021-02-22T10:41:04Z"
        }
      ]
    },
    {
      "number": 78,
      "id": "MDU6SXNzdWU4MTYyOTg1OTY=",
      "title": "JSON test vector format for automatic parsing",
      "url": "https://github.com/lake-wg/edhoc/issues/78",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "We have gotten feedback that the test vectors should be in JSON intead (or in addition) of a text file. I plan to fix this. ",
      "createdAt": "2021-02-25T10:22:57Z",
      "updatedAt": "2021-09-12T08:49:05Z",
      "closedAt": "2021-09-12T08:49:05Z",
      "comments": [
        {
          "author": "TimothyClaeys",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1\r\n\r\nI think this would make it a lot easier to create unit tests for the implementations.\r\n\r\nI've provided an example how I have structured the test vectors in JSON format.\r\n\r\nhttps://github.com/TimothyClaeys/EDHOC-C/blob/master/test/test_vectors/vector1.json\r\n\r\nAll data that is needed and computed by both sides is combined under the key 'S (shared)'. Input that is only required by one of the peers is put under the keys 'I' and 'R', respectively.",
          "createdAt": "2021-03-09T10:53:15Z",
          "updatedAt": "2021-03-09T10:55:26Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @TimothyClaeys !\r\n\r\nComments on the proposal are welcome!\r\n\r\nIn the interest of increasing the number of test vectors we should also set up how people can input their results using this template, when we have agreed on it. \r\n\r\nFor that we also need to have a well defined input in JSON, any proposal?",
          "createdAt": "2021-04-16T14:58:07Z",
          "updatedAt": "2021-04-16T14:58:07Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for this, it looks good!\r\n\r\nAs a general comment, I would have to produce new output for several sub-elements and in this particular format (which is fine).\r\n\r\nMore specific comments:\r\n\r\n* To fully cover the considered configuration, 'auth_key' in the \"I\" and \"R\" objects should also include the string to use as subject name when building CRED_x.\r\n\r\n* 'secret' can be better renamed to 'g_xy'.\r\n\r\n* Why including 'p_2m' and 'p_3m' in the \"S\" object? They are always the empty byte string.\r\n\r\n* As to 'a_2m', 'a_3m' and 'a_3ae in the \"S\" object, they are available for me to print only deep in the COSE library I use, so not really in my actual implementation. That's why now I'm easily printing only the actual external data (i.e. << TH_2, CRED_R, ? AD_2 >>, << TH_3, CRED_I, ? AD_3 >> and  << TH_3, CRED_I, ? AD_3 >>). So, I would have to manually (re-)build the AAD array just for printing it, considering also the \"Encrypt0\" context string and << ID_CRED_X >>.\r\n\r\n* The \"S\" object may include the further elements related to message_4 when this is used.",
          "createdAt": "2021-04-24T10:30:07Z",
          "updatedAt": "2021-04-24T10:30:07Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we need to compile somewhere the CBOR used to create this data? For example, that \"eph_key\" = {1: 1, -1: 4, -2: h' ... ', -4: h' ... '} in this case?\r\n\r\n(Section 3.5 already says:\r\n\"The ECDH ephemeral public keys are formatted as a COSE_Key of type EC2 or OKP according to Sections 7.1 and 7.2 of [I-D.ietf-cose-rfc8152bis-algs] \" but may not be obvious on first encounter with the test vector.)\r\n\r\n",
          "createdAt": "2021-04-27T12:59:18Z",
          "updatedAt": "2021-04-27T12:59:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I very quickly transformed my -10 test vectors to JSON (or almost JSON as JSON forbids a trailing comma.....)\r\n\r\nhttps://github.com/lake-wg/edhoc/tree/master/test-vectors-10-json\r\n\r\nI just quickly tried to convert my test vecors to JSON. I tried to somewhat align with Timothy, but there are differences. In my test vectors, names ending with _raw and not CBOR and everything else are CBOR sequences. \r\n\r\nHappy to change my JSON test vectors to any format implementors would want.",
          "createdAt": "2021-09-06T13:41:25Z",
          "updatedAt": "2021-09-06T14:46:38Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I merged my two cpp files. JSON can now be found in\r\n\r\nhttps://github.com/lake-wg/edhoc/tree/master/test-vectors-10\r\n\r\n@TimothyClaeys and @marco-tiloca-sics if you agree on a JSON format, I'll update my output to match that. I don't have any opinions about the JSON format. Now I just made something very quick that aligned with the draft out that is used in the draft.\r\n",
          "createdAt": "2021-09-09T12:02:59Z",
          "updatedAt": "2021-09-09T12:02:59Z"
        },
        {
          "author": "TimothyClaeys",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @emanjon,\r\n\r\nI think this looks good. Maybe a small remark: for automatic parsing purposes, I might be useful to put each test case in a parent JSON structure. Something like this:\r\n\r\n`\r\n{\r\n    \"test_vector_1\": {\r\n        \"method\": 0,\r\n        \"suites_i\": \"00\",\r\n        ...\r\n     },\r\n     \"test_vector_2\": {\r\n        \"method\": 1,\r\n        \"suites_i\": \"01\",\r\n        ...\r\n      }\r\n}\r\n`",
          "createdAt": "2021-09-09T12:34:24Z",
          "updatedAt": "2021-09-09T12:34:24Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me too; I agree with Timothy's point.",
          "createdAt": "2021-09-09T15:15:59Z",
          "updatedAt": "2021-09-09T15:15:59Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi, I added a parent map as suggested by Timothy. I also removed the extra commas to make the output correct JSON.",
          "createdAt": "2021-09-09T15:44:12Z",
          "updatedAt": "2021-09-09T15:44:12Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "If we are happy enough the current format, I plan to close this issue soon. Any future changes can be discussed in the general #47 or in new issues. ",
          "createdAt": "2021-09-11T06:36:00Z",
          "updatedAt": "2021-09-11T06:36:00Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "MDU6SXNzdWU4MTg5NDMwODk=",
      "title": "Coding density for bstr_identifier",
      "url": "https://github.com/lake-wg/edhoc/issues/79",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "We could increase (by a factor of about 3) the number of identifier values encodable in 2-byte bstr_identifier -- if rather than treating them as a byte string toward the application, we treat them as distinct integer and bytes values.\r\n\r\nAs before, the same 1-byte values could be encoded (-24 to 23). Of the 2-byte long encodings, there there would be ~3x256 inhabited ones (unlike now, ~256): We could use the 256 `18 xx` (for xx > 24 as those would be encoded in a single byte), `38 xx` (again, xx < 24 staying uninhabited) and the `41 xx` (1-long byte strings) values.\r\n\r\nWhether this makes implementation harder or easier is IMO dependent on the programming style; for me it'd make things easier. (Implementers can't store the value as a length-delimited bytestring with a custom encoder any more, but can still store the CBOR encoded item in an opaque string).\r\n\r\nThis would also allow applications that find it easier to work with small numbers to just use numeric identifiers for everything they mint themselves, and use these in lookup. (These then lose some of the benefits of identifier compression.)",
      "createdAt": "2021-03-01T14:52:52Z",
      "updatedAt": "2021-07-16T12:26:27Z",
      "closedAt": "2021-07-16T12:26:27Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Considering how the OSCORE extractor uses C_I and C_R, this would be problematic.\r\n\r\nOptions are:\r\n1. Leave it as is -- with only ~256 2-byte C_x available\r\n2. Allow arbitrary int / bstr as bstr_identifier, but move the text over to the OSCORE extraction to say that this mapping is applied between C_x and `kid`. That would leave the general applications with the wide possibilities, while OSCORE would have the 0-length KID in a 1-byte bstd_identifier, a few selected KIDs (00 to 18) also in the 1-byte bstr_identifier, and all the others in len+1 bstr_identifier slots.\r\n3. Go for even more efficiency (but that has minimal returns at great complexity so is almost certainly not worth it)\r\n\r\nI have a soft preference for 2, but 1 is probably fine as well -- given that OSCORE will be a main user of EDHOC and couldn't use the optimization.",
          "createdAt": "2021-03-04T17:02:31Z",
          "updatedAt": "2021-03-04T17:02:31Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think 2 is the right way to go. I think we should do that. I think the current specification of bstr_identifier is a bit complex. We have gotten several comment and questions regarding this. I think 2 make things simpler. ",
          "createdAt": "2021-04-19T11:23:45Z",
          "updatedAt": "2021-04-19T11:23:45Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a pull request for this issue. @chrysn check that the transformation between C_x and OSCORE ID is what you wanted. I did not see any point in making it more complex.\r\n\r\nI just realized that we could expand the number of 1 byte excodings with almost 50 % by also allowing major type seven I.e.\r\n\r\nC_x : bstr / int / #7 \r\n\r\n(null is reserved for used by C_1)",
          "createdAt": "2021-04-22T11:30:10Z",
          "updatedAt": "2021-04-22T11:30:10Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Even with this change the bstr_identifier stays for its use in compressing ID_CRED_x when kid is used i.e. { 4 : kid_R }. ",
          "createdAt": "2021-04-22T11:39:51Z",
          "updatedAt": "2021-04-22T11:39:51Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Or maybe we can not use #7 as the values 0..19 are unassigned",
          "createdAt": "2021-04-22T13:33:05Z",
          "updatedAt": "2021-04-22T13:33:05Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue needs to wait until we have decided what to do with correlation. Suggestions on the table are diverse\r\n- to leave it to lower layers\r\n- make all C_x mandatory ",
          "createdAt": "2021-05-04T10:41:52Z",
          "updatedAt": "2021-05-04T10:41:52Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Next step (from current discussion): provide PR, and describe (explicitly and locally) how an integer can encode for a `{4: x}` value. Then we can discuss further based on that.\r\n\r\nAlternative: explain bstr_identifier better.\r\n\r\nOther alternative: just let a bstr encode for `{4: x}` -- that allows having a single one-byte value still (rather than ~48), and 256 two-byte values. Good enough for the cases where there *is* one distinct to-be-optimized-for peer, and in how many cases is 48 enough?",
          "createdAt": "2021-05-17T14:15:07Z",
          "updatedAt": "2021-05-17T14:28:57Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": ">Other alternative: just let a bstr encode for {4: x} -- that allows having a single one-byte value still (rather than ~48), >and 256 two-byte values. Good enough for the cases where there is one distinct to-be-optimized-for peer, and in how >many cases is 48 enough?\r\n\r\nThat is a good observation. Might be useful with two values when the distinct to-be-optimized-for peer updates its key.\r\n\r\n\r\nIf bstr_identifier is not used for connection id, maybe the bstr_identifier section could be removed and replaced by:\r\n\r\n* plaintext = ( ID_CRED_R / bstr / int, Signature_or_MAC_2, ? AD_2 )\r\n\r\n* If ID_CRED_R contains a single 'kid' parameter, i.e., ID_CRED_R = { 4 : kid_R }, only the kid_R is conveyed in the plaintext. If \u2018kid\u2019 is in the interval h'00' to h'2f\u2019, it is encoded as the corresponding integer minus 24, instead. I.e. { 4 : h\u20192a\u2019 } is encoded as the integer 18, while { 4 : h'' } is encoded as h\u2019\u2019.\r\n\r\n",
          "createdAt": "2021-05-18T07:15:53Z",
          "updatedAt": "2021-05-18T07:15:53Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Specifically for the 'kid' use of bstr_identifier, how about registering a new CBOR Header Parameter  (https://www.iana.org/assignments/cose/cose.xhtml) called, say, 'kid-int' with same function as 'kid' but where the value is a CBOR int instead of a CBOR bstr.\r\n\r\n~~~~~~~~~~\r\n   +-----------+-------+----------------+-------------+----------------+-------------------+\r\n   | Name      | Label | Value Type     | Value       | Description    | Reference         |\r\n   |           |       |                | Reference   |                |                   |\r\n   +-----------+-------+----------------+-------------+----------------+-------------------+\r\n   | kid-int   | TBD   | int            |             | Key identifier | [[This document]] |\r\n   +-----------+-------+----------------+-------------+----------------+-------------------+\r\n~~~~~~~~~~~",
          "createdAt": "2021-05-19T12:19:05Z",
          "updatedAt": "2021-05-19T12:19:05Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "That is an interesting idea. Another alternative would be to expand the existing 'kid' in COSE to be bstr / int. ",
          "createdAt": "2021-05-19T12:26:43Z",
          "updatedAt": "2021-05-19T12:26:43Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Both sound practical, and would make the WIP PR more readable. In an\necosystem where thins are passed around as COSE objects, having\nidentifiers bstr/int does make sense. (Among other things, it allows\nconfiguration storages to save their values in their pre-encoded compact\nform).\n",
          "createdAt": "2021-05-19T13:07:50Z",
          "updatedAt": "2021-05-19T13:07:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree a single key identifier with value bstr / int is a better idea. In practice, how would we redefine 'kid' to be bstr / int? I assume it is too late to make the change in draft-ietf-cose-rfc8152bis-struct, so this would be a draft updating that RFC. Any compatibility issues with old and new implementations of 'kid'? \r\n\r\nWould it be an alternative to define a new key identifier:\r\n\r\n~~~~~~~~~~\r\n   +-----------+-------+----------------+-------------+----------------+-------------------+\r\n   | Name      | Label | Value Type     | Value       | Description    | Reference         |\r\n   |           |       |                | Reference   |                |                   |\r\n   +-----------+-------+----------------+-------------+----------------+-------------------+\r\n   | kid2      | TBD   | bstr / int     |             | Key identifier | [[This document]] |\r\n   +-----------+-------+----------------+-------------+----------------+-------------------+\r\n~~~~~~~~~~~",
          "createdAt": "2021-05-20T06:17:54Z",
          "updatedAt": "2021-05-20T06:17:54Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "> Any compatibility issues with old and new implementations of 'kid'? \n\nEither way (kid2 or kid redefinition), a peer needs to know in advance\nwhat the other can accept; KIDs are (AFAICT) currently not exchanged\nin-band. Whoever knows enough of their peer to use a kid2 could use the\nsame knowledge to know that they support int-valued KIDs.\n\nTrouble is where implementers come in anew and use numeric KIDs without\nknowing that some peers may not support them -- that's a bit more\nobvious with a kid2, but in the end I think in both cases it should fail\nclearly at the KID distribution step (and if that's only \"Sorry, I can't\nenter that into my system, it expects a byte string and you gave me an\ninteger\").\n\nWith an eye on code point usage (of 1..23, 10 are already assigned), I'd\nprefer opening up kid, but ultimately that's something that ultimately\nwill need to be decided in COSE.\n",
          "createdAt": "2021-05-20T07:59:55Z",
          "updatedAt": "2021-05-20T07:59:55Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "kid2 or kid redefinition seems cleaner than kid_int, at least for EDHOC. It must be specified that the int is encoded with deterministic CBOR.\r\n\r\nIn EDHOC we could mandate support of of  numeric kids.\r\n\r\nIt would have been easier if there was only deterministic CBOR, then you could do kid = any\r\n",
          "createdAt": "2021-05-20T08:51:12Z",
          "updatedAt": "2021-05-20T08:51:12Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "kid = any would be hard on parsers (any could be tags the receiver does not support), and it'd switch disambiguation between raw kid and actual COSE object (now it's \"bstr or int are special\", then it'd be \"it's a kid to pack in {4:x} unless it's a map in which case treat it's the map itself).\n",
          "createdAt": "2021-05-20T08:58:56Z",
          "updatedAt": "2021-05-20T08:58:56Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "How about we introduce kid2 in the draft, with the assumption of deterministic CBOR, and an editorial note that it may be changed to kid later.  Then we can carry out the changes in the PRs to be able to better evaluate them. In parallel we bring up the discussion in COSE. If COSE accepts the redefinition of kid then we simply replace kid2 with kid, otherwise we keep it.",
          "createdAt": "2021-05-20T09:57:15Z",
          "updatedAt": "2021-05-20T09:57:15Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": " bstr_identifier is now removed and replaced with bstr / int. The mapping to OSCORE Sender/Recipient ID is described in A.1. kid2 is defined as above pending discussion in COSE.\r\n\r\n@chrysn Can we close this?",
          "createdAt": "2021-07-15T20:11:06Z",
          "updatedAt": "2021-07-15T20:11:06Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Yes. From the quick glance I had so far I think that still some enhancements can be made to the conversion described now, but I'll need some time to propose anything concrete there, and at any rate, the original concern is addressed. Thanks, closing.",
          "createdAt": "2021-07-16T12:26:27Z",
          "updatedAt": "2021-07-16T12:26:27Z"
        }
      ]
    },
    {
      "number": 80,
      "id": "MDU6SXNzdWU4MjAxNDE4MDI=",
      "title": "Applicability statement can depend on conditions during EDHOC execution",
      "url": "https://github.com/lake-wg/edhoc/issues/80",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The applicability statement is agreed out of band, but the policy can depend on information gained during the protocol run, e.g. ~~the identity of the peer,~~ the RESTful resource being called, CoAP options being used or other transport parameters.",
      "createdAt": "2021-03-02T15:46:25Z",
      "updatedAt": "2021-07-19T07:37:12Z",
      "closedAt": "2021-07-19T07:37:12Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "One step back: The applicability statement needs to be understood already at reception of message_1 to be able to verify supported method/corr etc. so cannot depend on identity of the peer.",
          "createdAt": "2021-03-03T13:55:05Z",
          "updatedAt": "2021-03-03T13:55:05Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The type of ID_CRED_I can definitly depend on message_2.\r\n\r\nNot sure I like the suggestion to make the applicability statement normative text in the body.....",
          "createdAt": "2021-04-19T08:01:23Z",
          "updatedAt": "2021-04-19T08:01:23Z"
        }
      ]
    },
    {
      "number": 81,
      "id": "MDU6SXNzdWU4MjEwOTg3ODQ=",
      "title": "Effects of limited amounts of randomness",
      "url": "https://github.com/lake-wg/edhoc/issues/81",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?",
        "PR exists"
      ],
      "body": "Randomness can be limited in constrained devices, and that can affect EDHOC.\r\n\r\n8.2. Cryptographic Considerations does talk about the necessity of randomness, but it did not become apparent to me from reading that alone that without a new fresh key I not only lose liveness and open up to interleaving, but also run into loss of all security properties when deriving an OSCORE secret from it and neither party has any randomness to put in.\r\n\r\nIf one of the involved parties of EDHOC is just scraping together a few bits of entropy (which is as good as having none), is there a direction in which EDHOC can be used with limited loss of properties? (Gut feeling says no because an attacker can replay a previous EDHOC exchange with them).\r\n\r\nIt may be helpful to also outline how a monotonous counter (similar to that of OSCORE B.1.1) can be used together with a private secret to obtain sufficient randomness. (That may follow from RFC 8937 already, not sure).",
      "createdAt": "2021-03-03T13:14:20Z",
      "updatedAt": "2022-01-19T09:51:24Z",
      "closedAt": "2022-01-19T09:51:23Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Now having read a more recent version of the draft:\r\n\r\nLooking further into the B.1.1 applicability, one way that'd to me gut-feeling-sounds like it might be OK is that the initiator only saves-to-disk its counter between receiving M2 and before sending M3.\r\n\r\nThus, an initiator might use the same ephemeral key twice, but before it completes the exchange, it ensures it will \"never\" use the same ephemeral key again.\r\n\r\n---\r\n\r\nThe reason this would be useful is that it'd defer the point where the B.1.1 process performs a kind-of-destructive operation (writing to flash that has a finite number of duty cycles) to a point in time when it has good reason to believe that there is actually a peer that makes it worth it. (The response could still be replayed from an adversary that intercepted message_1 in an earlier iteration of this, stopped message_2 from reaching the device and then injected it now -- but that only gives the attacker one flash write for one time the attacker intercepts messages, and doesn't put the attacker in any better a position than other replays do).",
          "createdAt": "2021-03-06T18:41:42Z",
          "updatedAt": "2021-03-06T18:41:42Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@chrysn  What remains of this issue? Is there anything you want to add to the text?",
          "createdAt": "2021-07-19T06:20:17Z",
          "updatedAt": "2021-07-19T06:20:17Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "> outline how a monotonous counter (similar to that of OSCORE B.1.1) can be used together with a private secret to obtain sufficient randomness.\r\n\r\nThis part is not explicitly covered and may be worth mentioning or referencing other source.\r\n\r\n> the initiator only saves-to-disk its counter between receiving M2 and before sending M3.\r\n\r\n> The reason this would be useful is that it'd defer the point where the B.1.1 process performs a kind-of-destructive operation (writing to flash that has a finite number of duty cycles) to a point in time when it has good reason to believe that there is actually a peer that makes it worth it. \r\n\r\nIn B.1.1. write to flash is done every k, or when cache is lost. Why write a counter to flash happen every time EDHOC is run?",
          "createdAt": "2021-09-29T15:35:31Z",
          "updatedAt": "2021-09-29T15:35:31Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "NONE",
          "body": "@gselander @emanjon Check out [RFC 4086](https://datatracker.ietf.org/doc/rfc4086/). There is a section on mixing.",
          "createdAt": "2021-10-05T15:52:29Z",
          "updatedAt": "2021-10-05T15:52:29Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@seanturner @sftcd Thanks for good input here and during the interim! I did not do a good job in explaining what I think remains to do about this issue. Let me try again. \r\n\r\nAssume for the sake of the argument that there is no randomness contribution at all to the device during operation. The only source of randomness is an initial seed, denoted \"private secret\" above, which we require to have a good amount of randomness, generated or provisioned during manufacture. We also assume that the device can keep state by writing to non-volatile memory, but this write operation has a cost. In particular the number of write operations are limited. \r\n\r\nWe can now generate pseudo random numbers using the private secret and, say a counter, but we must ensure that each counter value is different and we can't afford storing the counter each time.\r\n\r\nSection B.1.1 in RFC 8613 describes a procedure with write to flash every K:th step of the counter, where K is set by the application. If the device reboots, it sets counter to K + the value read from flash. More details in the section.\r\n\r\nNow for potential updates of the draft. \r\n\r\n1. Section 8.6 outlines the above. Should we also (in an appendix) give an example (like in RFC 8613 B.1.1.) how to generate random numbers using  a secure PRF, the private secret, and sequence numbers, including a procedure for how to read/write from/to flash? Or is that obvious from the references?\r\n\r\n2. Section 8.6 says \"A good amount of randomness is important for the key generation, to provide liveness, and to protect against interleavin attacks.\"  Should we add something like  \"and to guard against deriving the same keys twice\"?\r\n\r\n3. @chrysn also mentions another optimization whereby the write to flash operation by I is deferred to after R is authenticated. The purpose being to reduce potential write operations. This optimization is contradicting \"the ephemeral keys MUST NOT be used in more than one EHDOC message\", but could potentially be made secure by aborting after message 2 if the ephemeral key is not fresh.\r\n\r\nI think we should do 1, neutral about 2, and hesitant to 3. It is not clear to me that not making this optimization will cause a lot of write to flash.\r\n\r\n",
          "createdAt": "2021-10-07T07:22:34Z",
          "updatedAt": "2021-10-07T07:22:34Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The text above speaks about section 8.6  (Implementation Considerations) which  in -12 to corresponds to section 8.7.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-11-07T12:37:55Z",
          "updatedAt": "2021-11-07T12:37:55Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Comparing the randomness considerations in section 8.7 and the example use of non-volatile memory in B.1.1 of RFC 8613, I don't think we need make a separate appendix as suggested in item 1 above. It should be sufficient to add some more hints to section 8.7, a proposal in #197.",
          "createdAt": "2021-11-07T16:10:16Z",
          "updatedAt": "2021-11-07T16:10:16Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "The new text looks good to me.\r\n\r\nIt does not give permission to do the very special case I wanted to do (allow reusing a G_X if and only if the initializer commits to not ever using it again as soon as it has acted on a message 2), but from earlier discussion I conclude that opening up for that would be excessive in this document, and anyone who chooses to not go with what is described best practice will need to make very good own security analyses anyway.",
          "createdAt": "2021-12-16T12:58:38Z",
          "updatedAt": "2021-12-16T12:58:38Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as #197 is now merged.",
          "createdAt": "2022-01-19T09:51:23Z",
          "updatedAt": "2022-01-19T09:51:23Z"
        }
      ]
    },
    {
      "number": 82,
      "id": "MDU6SXNzdWU4MjExNDMzMjA=",
      "title": "COSE header map for public key",
      "url": "https://github.com/lake-wg/edhoc/issues/82",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This issue needs to be resolved in COSE, but I didn't find this listed anywhere so I put a placeholder here. There is no COSE header map defined for transport of public key in ID_CRED_x. Needed for opportunistic settings, also required by draft-selander-ace-ake-authz.\r\n\r\n",
      "createdAt": "2021-03-03T14:08:42Z",
      "updatedAt": "2021-07-24T11:48:37Z",
      "closedAt": "2021-07-24T11:48:37Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Also, the type of public key needs to be specified. It could be different COSE header maps for different COSE key types:\r\nhttps://www.iana.org/assignments/cose/cose.xhtml#key-type\r\n\r\nEC types OKP and EC2 could have the same COSE header map label (TBD) but differ in content, like CRED_x as in EDHOC Section 3.3.3.\r\n\r\n{ TBD :  CRED_x }\r\n\r\n* For type OKP the CBOR map SHALL, except for subject name, only include the parameters 1 (kty), -1 (crv), and -2 (x-coordinate).\r\n\r\n* For type EC2 the CBOR map SHALL, except for subject name, only include the parameters 1 (kty), -1 (crv), -2 (x-coordinate), and -3 (y-coordinate).\r\n\r\nFor example, for OKP\r\n\r\nCRED_x = {\r\n  1:  1,\r\n -1:  4,\r\n -2:  h'b1a3e89460e88d3a8d54211dc95f0b90\r\n        3ff205eb71912d6db8f4af980d2db83a',\r\n \"subject name\" : \"42-50-31-FF-EF-37-32-39\"\r\n}\r\n\r\nThe corresponding text in 3.3.3 could be moved to a COSE draft which is normatively referenced from EDHOC.",
          "createdAt": "2021-04-16T14:50:50Z",
          "updatedAt": "2021-04-16T14:50:50Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "COSE should probably specify how to transfer a COSE_KEY without any further restrictions. Alternatively the c5c header could be used without much overhead. It might be better to do a new type of C509 without signature that is a RPK. COSE_KEYs are not efficiently encoded at all. ",
          "createdAt": "2021-04-19T07:58:42Z",
          "updatedAt": "2021-04-19T07:58:42Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The \r\n\r\nCRED_x = {\r\n1: 1,\r\n-1: 4,\r\n-2: h'b1a3e89460e88d3a8d54211dc95f0b90\r\n3ff205eb71912d6db8f4af980d2db83a',\r\n\"subject name\" : \"42-50-31-FF-EF-37-32-39\"\r\n}\r\n\r\nShould probably  be replaced by CWT or C509",
          "createdAt": "2021-05-12T20:34:57Z",
          "updatedAt": "2021-05-12T20:34:57Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this: COSE header map for CWT/UCCS is now defined, and the example of CRED_X is replaced. ",
          "createdAt": "2021-07-24T11:48:36Z",
          "updatedAt": "2021-07-24T11:48:36Z"
        }
      ]
    },
    {
      "number": 83,
      "id": "MDU6SXNzdWU4MjEyMjc2Njc=",
      "title": "Summarize all CDDL in one appendix",
      "url": "https://github.com/lake-wg/edhoc/issues/83",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Request from Christian",
      "createdAt": "2021-03-03T15:40:25Z",
      "updatedAt": "2021-04-22T08:37:22Z",
      "closedAt": "2021-04-22T08:37:22Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "info is also CDDL. But info is a bit different as it is not sent on the wire. ",
          "createdAt": "2021-04-19T07:31:47Z",
          "updatedAt": "2021-04-19T07:31:47Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Done in -06",
          "createdAt": "2021-04-22T08:37:22Z",
          "updatedAt": "2021-04-22T08:37:22Z"
        }
      ]
    },
    {
      "number": 84,
      "id": "MDU6SXNzdWU4MjIyODkzMzY=",
      "title": "Make .well-known/edhoc specific to OSCORE",
      "url": "https://github.com/lake-wg/edhoc/issues/84",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "Given we're now moving towards that EDHOC needs to know the application (with its applicability statement), it would make sense to move the definition of the .well-known/edhoc resource over to @fpalombini's draft on EDHOC/OSCORE.\r\n\r\nThe general mechanisms of EDHOC-over-CoAP could stay here (which eg. say which corr to use, and which content format), but using it for OSCORE key extraction could be the exclusive user of .well-known/edhoc (which may get a different name in the course of this). Other applications would then be indicated with different paths.",
      "createdAt": "2021-03-04T16:23:53Z",
      "updatedAt": "2021-12-16T08:38:19Z",
      "closedAt": "2021-12-16T08:38:18Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "I put this badly: it should be about \"getting OSCORE contexts from EDHOC\" and not generic for \"EDHOC over CoAP\" -- but not necessarily limited to the particular way in Francesca's draft.",
          "createdAt": "2021-03-05T12:30:39Z",
          "updatedAt": "2021-03-05T12:30:39Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think moving everything OSCORE related to Francesca's draft is a good idea.",
          "createdAt": "2021-04-19T07:28:50Z",
          "updatedAt": "2021-04-19T07:28:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@chrysn @marco-tiloca-sics Given how the content is now distrbuted in lake-edhoc-08 and core-oscore-edhoc-01, is this still relevant. Should we replace this issue with a draft-core-oscore-edhoc github issue? Anything that remains to do here?",
          "createdAt": "2021-07-15T20:26:34Z",
          "updatedAt": "2021-07-15T20:26:34Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, it makes sense, let's take is as a first step and see where it leads to.\r\n\r\nThe text in Appendix A.3 of draft-ietf-lake-edhoc-08 says:\r\n\r\n> According to this specification, EDHOC is transferred in POST requests ... to the Uri-Path: \"/.well-known/edhoc\". An application may define its own path ...\r\n\r\nThen maybe this can be further generalized to mention \"/.well-known/edhoc\" as nothing more than an example used in the following figures.",
          "createdAt": "2021-07-16T14:31:07Z",
          "updatedAt": "2021-07-16T14:31:07Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "If I understand the current distribution right (applying-to-coap-oscore is described here, oscore-edhoc is only about msg3 in an option), I think it should stay here (both tracker- and document-wise).\r\n\r\n@marco-tiloca-sics, if it were really just an example for use in the figures, it wouldn't need to be well-known (when would there be the justification for even registering it), and as a reader I'd be missing a way to discover the path. I'd expect applications (either defined by downstream standards or just application behavior) to say no more than \"EDHOC and OSCORE are used all the time with keys exchanged through X\", so this is an actual default and not an example. (And frankly the only reason I'd see for any application to not use .well-known/edhoc is if they use any of the AD, don't know if that can be multiplexed onto .wk/e or not).",
          "createdAt": "2021-07-16T14:39:33Z",
          "updatedAt": "2021-07-16T14:39:33Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, that's the current distribution and I see your points. Ok to keep it here then",
          "createdAt": "2021-07-16T14:52:34Z",
          "updatedAt": "2021-07-16T14:52:34Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this?",
          "createdAt": "2021-08-26T16:44:39Z",
          "updatedAt": "2021-08-26T16:44:39Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Yeah, the current placement within the EDHOC-for-OSCORE section provides the requested clarification.",
          "createdAt": "2021-12-16T08:38:18Z",
          "updatedAt": "2021-12-16T08:38:18Z"
        }
      ]
    },
    {
      "number": 85,
      "id": "MDU6SXNzdWU4MjIyOTIzODY=",
      "title": "State idempotency",
      "url": "https://github.com/lake-wg/edhoc/issues/85",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "When setting EDHOC up on a constrained CoAP library, it'd help a lot if there'd be a statement that the EDHOC operations must be idempotent, ie. tolerate that retransmissions of a request are passed on to EDHOC multiple times (ie. the CoAP library may forego request deduplication). Ideally, all these requests should lead to identical responses.\r\n\r\nI think that these properties are already there (possibly necessitating that messages 2 and 4 are distinguishable by a server in initiator mode, if message 4 ever happens there); having a statement would make it possible to justify using EDHOC on a library like, say, RIOT's gcoap, in the first place.",
      "createdAt": "2021-03-04T16:27:19Z",
      "updatedAt": "2021-05-21T19:08:08Z",
      "closedAt": "2021-05-21T19:08:08Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Tying this to the draft: \"The transport is responsible to handle message loss, *reordering, message duplication*, fragmentation, and denial of service protection, where necessary\". I think that EDHOC can do without the highlighted ones already.",
          "createdAt": "2021-03-05T21:01:06Z",
          "updatedAt": "2021-03-05T21:01:06Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "(Summarizing otherwise not-yet-written-down developments for chronology): It looks like it won't be \"idempotency\", but more something \"the CoAP stack may forego message deduplication, because the EDHOC implementation needs to report back the last message when requested again\".\r\n\r\n",
          "createdAt": "2021-03-23T09:24:37Z",
          "updatedAt": "2021-03-23T09:24:37Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Looking at [I-D.ietf-ace-wg-coap-eap](https://tools.ietf.org/html/draft-ietf-ace-wg-coap-eap-00), they face a similar situation -- but EAP expresses as a requirement for the lower layer that it must have ordered message transmission. I disagree with the mechanism they use (introducing a sequence number option; discussion ongoing), but maybe something comes out of the discussions there that'd help here as well; will keep this updated.",
          "createdAt": "2021-03-23T09:29:37Z",
          "updatedAt": "2021-03-23T09:29:37Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@chrysn Could you please comment on the new text?",
          "createdAt": "2021-04-09T09:29:43Z",
          "updatedAt": "2021-04-09T09:29:43Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Sounds good, and well implementable. Two notes:\r\n\r\n* Why does this need to be part of the applicability statement? Whether deduplication happens on CoAP level or on EDHOC level should be transparent to a well-behaved peer. (Plus, in the presence of proxies, even if one party does EDHOC level deduplication, there may actually happen CoAP level deduplication on the path -- but no well-behaved party would see the difference).\r\n\r\n* On wording, it took me a bit to parse the \"Note that if a different instance\" sentence; suggested alternative to mix and match (with an addition of when this happens):\r\n\r\n> Note that if two different versions of EDHOC message_x are received (message_x1 and message_x2, in that sequence), then the \"processing\" described above of message_x2 will produce the response to message_x1. That will correctly result in a failure in integrity verification due to difference in transcript hashes between the message_x instances. The situation can only arise when the peer violates the requirements of not processing a message twice, or when the messages are tampered with.",
          "createdAt": "2021-04-09T09:41:30Z",
          "updatedAt": "2021-04-09T09:41:30Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "About applicability statement: I believe you are right. I was thinking that if only one endpoint supports EDHOC message deduplication, the other endpoint would fail in case duplicate message appears. But actually, the other endpoint do need to support **some kind** of deduplication, it just doesn't matter which kind. So I'll remove that part.\r\n\r\nOn wording: I'll make another attempt.",
          "createdAt": "2021-04-09T13:06:24Z",
          "updatedAt": "2021-04-09T13:06:24Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Not sure that this should be an appendix. If it is an appendix it should not be hidden behind the test vectors.\r\n\r\nThe suggested text states \"duplication due to re-transmissions\". What about other duplications? Duplication can happen anywhere in the network path. Or by an attacker.\r\n\r\n\"but the received message must not be processed more than once by the EDHOCimplementation. \"\r\n\r\nThis is true for 2,3,4, not true for 1 and error. Needs to make clear that this is per instance.\r\n",
          "createdAt": "2021-04-19T07:27:19Z",
          "updatedAt": "2021-04-19T07:27:19Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The PR has been discussed and merged. Closing",
          "createdAt": "2021-05-21T19:08:08Z",
          "updatedAt": "2021-05-21T19:08:08Z"
        }
      ]
    },
    {
      "number": 86,
      "id": "MDU6SXNzdWU4MjIyOTM3MzQ=",
      "title": "Change log",
      "url": "https://github.com/lake-wg/edhoc/issues/86",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Please introduce a change log in the document in the next version, eg. in a \"This section is to be removed before publication\" appendix.\r\n\r\nFor purpose of the implementers it'd suffice to list mechanical changes there, and helpful if they were distinct (if only in sequence) from editorial changes if they are listed at all.",
      "createdAt": "2021-03-04T16:28:55Z",
      "updatedAt": "2021-04-19T07:23:21Z",
      "closedAt": "2021-04-19T07:23:21Z",
      "comments": [
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "Hi all,\r\nI went through the last few drafts and made a changelog, which may be helpful for someone else too\r\n\r\n`\r\n# EDHOC Changes\r\n\r\n### July 06, 2020   draft-selander-lake-edhoc-01 ->  draft-ietf-lake-edhoc-00\r\n* in the test vector - connection identifier chosen by Responder (1 bytes) changed form 2b to 13. -> No action required since data_2 (CBOR Sequence) remains the same\r\n* Text improvements \r\n\r\n### August 02, 2020   draft-ietf-lake-edhoc-00.txt \t-> draft-ietf-lake-edhoc-01.txt \r\n* PSK mode removed\r\n* Message size example changed to have only kid and x5t \r\n* x5bag and x5chain identifiers for public keys removed\r\n* Text improvements \r\n\r\n### November 02, 2020   draft-ietf-lake-edhoc-01.txt\t-> draft-ietf-lake-edhoc-02.txt \r\n* Added test vector for static DH autthentication\r\n* Clarification regarding bstr_identifier\r\n* Text improvements \r\n\r\n \r\n### December 18, 2020  draft-ietf-lake-edhoc-02.txt \t->  draft-ietf-lake-edhoc-03.txt\r\n* added Appendix C.  Applicability Statement Template\r\n* Clarifications regarding Authentication Credentials\r\n* Cipher Suites 4 and 5 added \r\n* EDHOC-EXPORTER-FS - generate a new PRK_4x3m from a old one\r\n* Changes in CPHERTEXT_2 calculation -> No changes in the test vector\r\n* Error message clarifications\r\n* Text improvements\r\n\r\n### January 27, 2021  draft-ietf-lake-edhoc-03.txt \t->   draft-ietf-lake-edhoc-04.txt \r\n* Added message 4\r\n* \"K_2e\", \"IV_2e\" -> KEYSTREAM_2\r\n* EDHOC-Exporter-FS -> EDHOC-Rekey-FS\r\n* Changes in CPHERTEXT_2 calculation -> CIPHERTEXT_2 = plaintext XOR KEYSTREAM_2\r\n* less constrained devices SHOULD implement both suite 0 and 2\r\n* Exporter interface test vector added\r\n* Text improvements\r\n\r\n### 22 February, 2021 draft-ietf-lake-edhoc-04.txt \t->  draft-ietf-lake-edhoc-05.txt \r\n* EDHOC-Rekey-FS -> EDHOC-KeyUpdate\r\n* Text improvements\r\n* Appendix B.1.1\r\n\t* last byte of message 1 0x40 -> 0x2e \r\n\t* C_R im data_2 13 -> 37 -> different TH_2\r\n\t* Different CRED_R -> many following differences in B.1.1\r\n\t* KEYSTREAM_2 used\r\n* Appendix B.2.1\r\n\t* different C_R -> many following differences\r\n\t* KEYSTREAM_2 used`",
          "createdAt": "2021-03-29T12:23:16Z",
          "updatedAt": "2021-03-29T12:23:16Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Stefan! We can use this as a basis for the new appendix.",
          "createdAt": "2021-03-29T13:01:59Z",
          "updatedAt": "2021-03-29T13:01:59Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a very good idea. I think we can close this now",
          "createdAt": "2021-04-19T07:23:21Z",
          "updatedAt": "2021-04-19T07:23:21Z"
        }
      ]
    },
    {
      "number": 87,
      "id": "MDU6SXNzdWU4MjIzOTgxNjU=",
      "title": "Compressing \".well-known/edhoc\"",
      "url": "https://github.com/lake-wg/edhoc/issues/87",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "If the 18 bytes of the \".well-known\" \"edhoc\" get in the way anywhere, there is always the possibility to register an option that expands to that. For example, Someone (probably not in this document; it'd be a short CoRE draft) could ask for an option in the <269 range that is uint valued, and whose uints expand to a TBD IANA registry where 0 is mapped to Uri-Paths \".well-known\" \"core\" and 1 is mapped to \".well-known\" \"edhoc\".\r\n\r\nThat'd save 15 bytes in messages 1 and 3, provided the .well-known/edhoc resource is really used. (Is it at all, with the most critical applications?)",
      "createdAt": "2021-03-04T18:39:58Z",
      "updatedAt": "2021-07-16T14:44:16Z",
      "closedAt": "2021-07-16T14:44:16Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This proposal has been brought up in CoRE and is not really in the scope of LAKE. Can we close it?\r\n\r\n@marco-tiloca-sics Perhaps better to have a placeholder as a github issue related to draft-ietf-core-oscore-edhoc?",
          "createdAt": "2021-07-15T20:18:55Z",
          "updatedAt": "2021-07-15T20:18:55Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, it makes sense, let's take is as a first step and see where it leads to.",
          "createdAt": "2021-07-16T14:30:28Z",
          "updatedAt": "2021-07-16T14:30:28Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Yes, can close; I have a note to start a short document on draft-amsuess-core-common-option-compression based on the 2021-05-12 interim presentation.",
          "createdAt": "2021-07-16T14:44:16Z",
          "updatedAt": "2021-07-16T14:44:16Z"
        }
      ]
    },
    {
      "number": 88,
      "id": "MDU6SXNzdWU4MjM2OTM5NTg=",
      "title": "Opportunistic use",
      "url": "https://github.com/lake-wg/edhoc/issues/88",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "EDHOC looks to me like it should be usable in situations where one party has no need (or intention) to authenticate, but still wants to authenticate the other party or just use opportunistic encryption.\r\n\r\nOne use case might be a constrained device A obtaining the certificate indicated by device B in the A-B EDHOC exchange from the certificate URI at C indicated by B. A has no need to present credentials (C hosts the certs publicly), but doesn't want to reveal to passive evesdroppers that it's talking to B. It doesn't need to authenticate C, but that might still be a good idea to lock out active MITMs.\r\n\r\nMy impression is that this is possible with EDHOC as it is and that EDHOC is suitable for the task (if not, stop reading and tell me).\r\n\r\nIf it is suitable, would both of these work?\r\n* Create (in COSE) a key ID type where a RPK that is CRED_x can be transported in ID_CRED_x (useful where you want to come back w/o having any original claims on first use)\r\n* Have a key where your ID_CRED_x says \"just what my ephemeral key is\". That'd make exchanges just as compact as short-ID'd RPKs, and still be good-enough for unilateral authentication.",
      "createdAt": "2021-03-06T16:53:55Z",
      "updatedAt": "2021-08-26T16:42:22Z",
      "closedAt": "2021-08-26T16:42:22Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "From just in the WG meeting: RPK-by-value sounds doable in COSE and would be good enough for a start.\r\n\r\nThe extended case is probably exceeding the LAKE requirements and is to be postponed.\r\n\r\n(Personally I'd like to keep looking into it, if only to influence any left-over decisions that don't have any other influencing factors and one would rule this out -- but that can happen outside WG activity).",
          "createdAt": "2021-03-09T13:41:44Z",
          "updatedAt": "2021-03-09T13:41:44Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Covered by #82 ",
          "createdAt": "2021-03-31T12:08:28Z",
          "updatedAt": "2021-03-31T12:08:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The more I think about this, the more I think that specifying a new type in the C509 draft is the right way to go.\r\n\r\n- COSE_Key was not meant to be sent over the wire. It does not have a order and it is not very optimized.\r\n- When working on issue #69 and PR #106 I realized that the singature curve has nothing to do with the signature alg and is completely detemined by the public key. It would be messy to have to types of public key formation and algorithms. Only using X.509 / C509 seems simpler in my view.\r\n- A new type in C509 naturally allows optional sending of parameters like key usage, subject name, and life time, which might be useful in a RPK setting as well. \r\n\r\nBelow is an example using the example certificate in the C509 draft. The type is changed to 2, the signature is removed, and all parameters are set to there minimum size. This PRK has key usage digital signature. Could be discussed if fields should be removed or have a non-present value.\r\n\r\nThe RPK has size 43 bytes:\r\n\r\n2,\r\nh'',\r\n[],\r\nnull,\r\nnull,\r\n[],\r\n1,\r\nh'02B1216AB96E5B3B3340F5BDF02E693F16213A04525ED44450\r\n       B1019C2DFD3838AB',\r\n1\r\n\r\nBelow is another example where a serial number, expiery time, and subject name (EUI-64) is provided, size 55 bytes.\r\n\r\n2,\r\nh'01f5',\r\n[],\r\nnull,\r\n1612224000,\r\nh'0123456789AB',\r\n1,\r\nh'02B1216AB96E5B3B3340F5BDF02E693F16213A04525ED44450B1019C2DFD3838AB',\r\n1\r\n\r\n\r\n",
          "createdAt": "2021-04-25T10:04:39Z",
          "updatedAt": "2021-04-25T10:04:39Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is important to define, I will start to make some more concrete suggestion and analysis.",
          "createdAt": "2021-05-05T10:05:21Z",
          "updatedAt": "2021-05-05T10:05:21Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The use of UCCS for trust-on-first-use is now included in the master branch, see a1b25ba and commits in its vicinity.\r\n\r\nCan we close the issue?",
          "createdAt": "2021-07-24T11:47:15Z",
          "updatedAt": "2021-07-24T11:47:15Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this can be closed.",
          "createdAt": "2021-08-26T16:42:22Z",
          "updatedAt": "2021-08-26T16:42:22Z"
        }
      ]
    },
    {
      "number": 89,
      "id": "MDU6SXNzdWU4MjM3MDIyOTY=",
      "title": "editorial / usability: corr and C_x omission",
      "url": "https://github.com/lake-wg/edhoc/issues/89",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Both while trying to understand an implementation and in discussions of transport considerations, I was repeatedly had by the correlation numbers. It's convenient in the serialization to look into bits of a 2-bit number, but for talking about it, I always had to look things up.\r\n\r\nConcrete proposal:\r\n\r\nIn the Message Correlation subsection, state after each bullet the respective one of \"There is a C_x in the first message position\", \"In the first message position, C_I is sent and C_R is omitted\", ..., \"In the first message position, no C_x is sent\". If phrased more concisely (\"C_I is sent, C_R is omitted\"), it'd need a paragraph that states that \"The above statements about sending or omitting C_x only refer to the first positions in the messages; the C_I in Message 1 and C_R in Message 2 are always sent\". Ideally, this could be put in a table.\r\n\r\nThen, in the descriptions of Responder Processing of Message 2 and following, it can just say \"C_x is sent depending on the correlation from {{}}\".\r\n\r\nIMO having these in one place and not baking the bit extraction in every step would make it easier to read.",
      "createdAt": "2021-03-06T17:32:58Z",
      "updatedAt": "2021-07-15T20:38:00Z",
      "closedAt": "2021-07-15T20:38:00Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I am not understanding exactly what you sugest, but it is probably a good idea. Could you make a pull request?",
          "createdAt": "2021-04-19T07:21:28Z",
          "updatedAt": "2021-04-19T07:21:28Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "As @chrysn noted in #105, a solution to that issue (which is included in -08) solves this issue.",
          "createdAt": "2021-07-15T20:38:00Z",
          "updatedAt": "2021-07-15T20:38:00Z"
        }
      ]
    },
    {
      "number": 90,
      "id": "MDU6SXNzdWU4NTMyMTAzODM=",
      "title": "Clarify \"auxiliary data\"",
      "url": "https://github.com/lake-wg/edhoc/issues/90",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It is too easy to confuse \"application data\" with \"auxiliary data\". The former is the data which is protected with keys obtained through the use of EDHOC, i.e. a straightforward application of EDHOC so the name \"application data\" is fairly intuitive. The latter is an extension point for use with security applications during EDHOC execution, like third party assisted authorization or certificate enrolment. \r\n\r\nPerhaps we should rename \"auxiliary data\" something with \"extension\"?",
      "createdAt": "2021-04-08T08:23:29Z",
      "updatedAt": "2021-07-19T09:12:01Z",
      "closedAt": "2021-07-19T09:12:00Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think extension is a bad word choice as it is easy to think about TLS extensions, which this is not similar to at all.\r\n\r\nMaybe \"external data\" ",
          "createdAt": "2021-04-19T07:19:23Z",
          "updatedAt": "2021-04-19T07:19:23Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I suggest \"external authorization data\" EAD. I think it is good to point out that the data is external to EDHOC and to give a hint of what it is used for.",
          "createdAt": "2021-05-04T08:29:36Z",
          "updatedAt": "2021-05-04T08:29:36Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Doing a pull request for this, I stumbled upon several things:\r\n\r\n? AD_1 : bstr,\r\n\r\nWhy is this bstr instead of any. If the data is CBOR encoded in the first place, wrapping it in a bstr adds two bytes without any benefit I suggest we change this to\r\n\r\n? AD_1 : any,\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-05-04T08:40:25Z",
          "updatedAt": "2021-05-04T08:40:25Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Specifying bstr also makes it harder to put any structure to the data in a formal way later as was discussed.\r\n",
          "createdAt": "2021-05-04T08:41:07Z",
          "updatedAt": "2021-05-04T08:41:07Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": ">The Responder MUST finish the verification step of message_3 before passing AD_3 to the application.\r\n\r\nWhy is this stated? I don't understand at all. The reason for AD_3 to exist is to send things like access tokens that are processed before message_3 is completely processed.\r\n\r\nThe current text makes it sound like AD_3 is application data which the agreement is that it is not.....\r\n\r\n",
          "createdAt": "2021-05-04T08:43:00Z",
          "updatedAt": "2021-05-04T08:43:00Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a PR #111 addressing all the issue mentioned with aux data.\r\n\r\nThe PR addresses issue #110 ",
          "createdAt": "2021-05-04T10:38:53Z",
          "updatedAt": "2021-05-04T10:38:53Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Any comments on #111?",
          "createdAt": "2021-05-07T13:37:59Z",
          "updatedAt": "2021-05-07T13:37:59Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "An earlier version of EDHOC stated that was then called EXT and is now called EAD \"could be used for authorization tokens that are protected outside of EDHOC.\" The intention with that text was CWT. The text has since been removed without being being replaced with any other way to transfer CWT. CWT can in the current version not be transfered in EAD_2 or EAD_3",
          "createdAt": "2021-05-12T20:33:43Z",
          "updatedAt": "2021-05-12T20:33:43Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Why can't CWT can be transferred in EAD_2 or EAD_3? As I recall the statement about \"protected outside of EDHOC\" that allowed protection within as well as outside of EDHOC.",
          "createdAt": "2021-05-24T06:56:52Z",
          "updatedAt": "2021-05-24T06:56:52Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "It can, but it creates more overhead. Treating CWT differently than X509 seems a bit strange, especially in the opportunistic RPK case.\r\n\r\nI don't think the question is why can't. It is more why should it. Are there any benefits with sending it in EAD? ",
          "createdAt": "2021-05-24T07:13:51Z",
          "updatedAt": "2021-05-24T07:13:51Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue: The discussion above was a misunderstanding between John and myself on authentication vs. authorization related information. Meanwhile, in addition to PR #111, IANA registration of COSE header parameter for CWT and for EAD types have been requested. With this, CWT can be transported in ID_CRED_x and in EAD (as soon as the accompanying EAD type has been registered).",
          "createdAt": "2021-07-19T09:12:00Z",
          "updatedAt": "2021-07-19T09:12:00Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "MDU6SXNzdWU4NTM0Nzk4MTA=",
      "title": "Implementation guidance for CoAP",
      "url": "https://github.com/lake-wg/edhoc/issues/91",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A request for more implementation guidance for CoAP. E.g. in section 7.2.2, add\r\n\r\n\"Since CoAP Token correlates responses to requests, connection identifiers can be left out of responses (if specified in the applicability template). In this case can the error messages ({{error}}) be identified in the following way:\r\n\r\n* if it is a request with 3 elements and the second is an int\r\n* if it is a response with 2 elements and the first is an int\"\r\n\r\nIs this the right place for such text?",
      "createdAt": "2021-04-08T13:33:48Z",
      "updatedAt": "2021-07-19T06:11:10Z",
      "closedAt": "2021-07-19T06:11:09Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The bullets has nothing to do with CoAP. Might be good to have an appendix on how to differentiate between different messages. But I don't think the CoAP section is the right place for the bullet. The first suggested sentence could be added to the CoAP section. ",
          "createdAt": "2021-04-19T07:17:46Z",
          "updatedAt": "2021-04-19T07:17:46Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "The above bullet points hold if `corr` is `1` or `2`. This may not apply to CoAP only, but it comes from having assumed so far that using CoAP implies `corr` `1` or `2` (relates to #95).\r\n\r\nIt would be *very good* to have an Appendix with a sequence of steps describing how a recipient can determine the message type when receiving a message, in the most general case.\r\n\r\nIf CoAP cannot imply `corr` `1` or `2` anymore (relates to #95), it may become pretty challenging to distinguish message types and especially identify Error Messages.",
          "createdAt": "2021-04-20T09:51:41Z",
          "updatedAt": "2021-04-20T09:51:41Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This is not an issue anymore;  corr is now removed, the CoAP section describes how to correlate messages.",
          "createdAt": "2021-07-19T06:11:09Z",
          "updatedAt": "2021-07-19T06:11:09Z"
        }
      ]
    },
    {
      "number": 92,
      "id": "MDU6SXNzdWU4NTQzNjYwODc=",
      "title": "Remove section 8.7?",
      "url": "https://github.com/lake-wg/edhoc/issues/92",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Section 8.7  \"Other Documents Referencing EDHOC\" is not up to date. We are not making use of any of the referenced documents in the specification. Do we really need this section?\r\n\r\nEdit: Or only keep references to security analyses made?",
      "createdAt": "2021-04-09T09:50:14Z",
      "updatedAt": "2021-04-19T07:15:10Z",
      "closedAt": "2021-04-19T07:15:09Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes",
          "createdAt": "2021-04-19T07:15:09Z",
          "updatedAt": "2021-04-19T07:15:09Z"
        }
      ]
    },
    {
      "number": 93,
      "id": "MDU6SXNzdWU4NTk5MTQ3NDM=",
      "title": "Selected hash alg. vs hash alg in x5t",
      "url": "https://github.com/lake-wg/edhoc/issues/93",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "x5t is parametrized with the hash function it uses. (x5t mandates support for SHA-256, but not its use.)\r\n\r\nThe spec doesn't state that the hash function in x5t (when used) needs to be the same as the hash alg in the selected cipher suite.\r\n\r\n* If it doesn't, then the endpoint may not be able to verify the hash of the certificate because it does not support the hash algorithm used in x5t.\r\n\r\n* If it does, then there are redundant bytes in x5t, since the hash alg is known from the selected cipher suite. Is it worth doing anything about that?\r\n\r\n",
      "createdAt": "2021-04-16T15:23:41Z",
      "updatedAt": "2021-05-21T18:59:59Z",
      "closedAt": "2021-05-21T18:59:59Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This is covered by the applicability statement of ID_CRED_x. I don't see any need for change. ",
          "createdAt": "2021-04-19T07:14:56Z",
          "updatedAt": "2021-04-19T07:14:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Clossing this as there was no further comments",
          "createdAt": "2021-05-21T18:59:59Z",
          "updatedAt": "2021-05-21T18:59:59Z"
        }
      ]
    },
    {
      "number": 94,
      "id": "MDU6SXNzdWU4NTk5MjgyMjk=",
      "title": "Action in case of early error",
      "url": "https://github.com/lake-wg/edhoc/issues/94",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Current specification mandates sending error messages upon certain failures. But in cases when message processing fails when no state has been allocated or when no connection identifier has been found or then a more appropriate action would be to just silently drop the message. ",
      "createdAt": "2021-04-16T15:32:33Z",
      "updatedAt": "2021-05-21T19:01:09Z",
      "closedAt": "2021-05-21T19:01:09Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the MUST (if possible) is good. Debugging without any error messages is not nice. We now other protocols that it is good to mandate error messages. It is kind of obvious that can not send an error if you don't now where/how to send it. Don't know if that has to be pointed out....",
          "createdAt": "2021-04-19T07:13:13Z",
          "updatedAt": "2021-04-19T07:13:13Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Migth be good to not sent error if you are under a DoS attack.",
          "createdAt": "2021-04-19T13:20:13Z",
          "updatedAt": "2021-04-19T13:20:13Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue is addressed by pull request #109 that also address availability",
          "createdAt": "2021-05-05T09:52:49Z",
          "updatedAt": "2021-05-05T09:52:49Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The PR has been discussed and merged. Closing",
          "createdAt": "2021-05-21T19:01:09Z",
          "updatedAt": "2021-05-21T19:01:09Z"
        }
      ]
    },
    {
      "number": 95,
      "id": "MDU6SXNzdWU4NTk5NTczMTQ=",
      "title": "Dependency between corr and transport",
      "url": "https://github.com/lake-wg/edhoc/issues/95",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There has been an off-list/off-git discussion about correlation and transport. The specification does not normatively specify that a certain transport is associated to a certain corr.\r\n\r\nSection 3.2.4: \r\n\r\n\"If the transport provides a mechanism for correlating messages received with messages previously sent, then some of the connection identifiers **may** be omitted.\"\r\n\r\n\"For example, if the key exchange is transported over CoAP, the CoAP Token **can** be used to correlate messages, see Section 7.2.\"\r\n\r\nIn the case of CoAP, two examples are shown and corr factors stated in those cases.\r\n\r\nSection 7.2:\r\n\r\n\"An example of a successful EDHOC exchange using CoAP is shown in Figure 9. In this case the CoAP Token enables the Initiator to correlate message_1 and message_2 so the correlation parameter corr = 1.\"\r\n\r\n\"An alternative exchange that protects the server identity against active attackers and the client identity against passive attackers is shown in Figure 10. In this case the CoAP Token enables the Responder to correlate message_2 and message_3 so the correlation parameter corr = 2. \"\r\n\r\n\r\nA question raised is if this dependency between CoAP transport and corr is in fact mandatory, and that corr is redundant to send since it is determined by transport.\r\n\r\nOn the other hand, if EDHOC is used over interchanging transports between the endpoint and not all transports support the same correlation, then it is not possible to deduce corr from transport. Just because that last hop is over CoAP, the Initiator may still not be able to correlate a received message_2 to a sent message_1. With this in mind, it must be allowed to set corr = 0 also for CoAP transport.\r\n\r\nDoes it make sense? Is this an issue? \r\n\r\nin any case we need to clarify this. \r\n\r\n",
      "createdAt": "2021-04-16T16:10:07Z",
      "updatedAt": "2021-07-19T06:08:31Z",
      "closedAt": "2021-07-19T06:08:30Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see what the problem is. ",
          "createdAt": "2021-04-19T07:09:24Z",
          "updatedAt": "2021-04-19T07:09:24Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Corr is included in message_1 so that it is covered by the integrity protection. This was a comment from the CFRG review. So I do not think Corr is redundant.",
          "createdAt": "2021-04-19T13:15:43Z",
          "updatedAt": "2021-04-19T13:15:43Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@emanjon My understanding is that a mere reception of `message_1` over a given transport determines the `corr` value. E.g. if the responder receives `message_1` over CoAP and the responder plays a CoAP server, the Responder knows that the value of `corr` is `1`. If the CoAP server receives a POST trigger as in Fig. 8 in EDHOC-05, and then sends `message_1` in the 2.04 response, the EDHOC Responder-CoAP client knows that the value of `corr` is `2`. That said, my question is why do you need to transport `corr` on the wire? Is there any counter example where `corr` is not uniquely determined from the transport itself? Could you not integrity-protect `corr` without transporting it on the wire?",
          "createdAt": "2021-04-19T16:45:49Z",
          "updatedAt": "2021-04-19T16:45:49Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe the following case can be the counter example. Think of this setup:\r\n\r\n* An initiator talking only a protocol PROT that requires `corr` `0`.\r\n* An intermediary acting as PROT-to-CoAP forward proxy.\r\n* A responder talking CoAP.\r\n\r\nThe initiator has to use `corr` `0`. The responder will receive CoAP messages but cannot imply `corr` `1` or `2` from that; rather, it has to follow `corr` as indicated in `message_1`, and talk CoAP with the proxy while using `corr` `0` in the EDHOC session.\r\n\r\nFrom then on, this should work just fine from an EDHOC and transport point of view, but CoAP itself would not be taken by the responder as an indication of `corr` `1` or `2`.\r\n\r\nAs a consequence, especially for the responder it may become pretty challenging to distinguish message types of received messages and identify Error Messages (relates to #91). That is, the responder has to consider the \"union\" of possible message formats putting together the alternatives from `corr` `0`, `1` and `2`, which would yield interpretation ambiguities.\r\n\r\nPossibly considering this too, it would help anyway to have an Appendix with a sequence of steps describing how a recipient can determine the message type when receiving a message (relates to #91).",
          "createdAt": "2021-04-20T10:18:46Z",
          "updatedAt": "2021-04-20T10:18:46Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "More generally, when receiving an EDHOC message, a correlation cannot be implied from the message itself. This can make the message parsing difficult and ambiguous (see previous comment), while it may still be needed to be done --- and in a certain way --- also to retrieve the right session in question.\r\n\r\nA safe way to address this kind of situation can work as follows.\r\n\r\n1. Associate the received EDHOC message with the pertinent applicability statement. As discussed in the document, this can be done, e.g., through a specific URI, port number, etc.\r\n\r\n2. If the applicability statement does not indicate a correlation to use, assume `corr` is `0` by default. Otherwise, consider the indicated correlation(s).\r\n\r\n3. Parse the message according to what determined at the previous step.\r\n\r\nFor an applicability statement to prevent the original problem to come back, it is fine that it indicates correlation = 0, or correlation = (1, 2) coexisting, or correlation = 3, but not e.g. correlation = (0, 1, 2) coexisting.\r\n",
          "createdAt": "2021-04-21T14:39:18Z",
          "updatedAt": "2021-04-21T14:39:18Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just reading `-06` so I would like to take a step back: the point of `corr` is to allow us to omit `C_I` in `message_2`, which is typically 1 byte, and to omit `C_R` in `message_3`, again typically 1 byte. Do we have consensus that the complexity introduced by `corr` is worth saving that byte?",
          "createdAt": "2021-04-22T09:31:02Z",
          "updatedAt": "2021-04-22T09:31:02Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@malishav Yes, that is the question. And that goes back to the requirements on message sizes, in particular 45 bytes of message_2  coming from the 6tisch estimate. Are we making the right trade-off here?\r\n\r\nThis also depends on other potential optimizations, see #103, which also adds complexity but reduces overhead.",
          "createdAt": "2021-04-22T09:36:58Z",
          "updatedAt": "2021-04-22T09:36:58Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "There is also the option that we say that corr = 0 by default, say, mandatory unless the Initiator and Responder agrees beforehand what corr value is used. \r\n\r\n(We still need to decide what other optimizations to make.)",
          "createdAt": "2021-04-22T09:50:07Z",
          "updatedAt": "2021-04-22T09:50:07Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this since corr is now removed.",
          "createdAt": "2021-07-19T06:08:30Z",
          "updatedAt": "2021-07-19T06:08:30Z"
        }
      ]
    },
    {
      "number": 96,
      "id": "MDU6SXNzdWU4NjEzMzM0MDk=",
      "title": "Computation of transcript hashes",
      "url": "https://github.com/lake-wg/edhoc/issues/96",
      "state": "CLOSED",
      "author": "malishav",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "While working on the EDHOC hacspec with @karthikbhargavan and @TimothyClaeys, a following issue was discussed:\r\n\r\n`TH_2` in `edhoc-05` is computed as:\r\n\r\n`TH_2 = H(message_1, data_2 )`\r\n\r\nThis requires the Initiator to preserve the entire `message_1` in memory in order to calculate `TH_2` once `message_2` is received.  In order to simplify the implementations, wouldn't it make more sense to compute `TH_2` as `H(TH_1, data_2)`, where `TH_1 = H(message_1)`?\r\n\r\nSimilarly, `TH_3` is computed as:\r\n\r\n`TH_3 = H(TH_2 , CIPHERTEXT_2, data_3)`,\r\n\r\nwhich requires the Responder to preserve `CIPHERTEXT_2` in memory while waiting for `message_3` to arrive, in order to compute `TH_3`. `CIPHERTEXT_2` has a dynamic and potentially significant length: removing the need to preserve `CIPHERTEXT_2` in memory would simplify the embedded implementations.\r\n\r\nA proposal is to define:\r\n\r\n`TH_2' = H(TH_2, CIPHERTEXT_2)`, computed at the end of the creation process of message_2, and to finally calculate `TH_3` as:\r\n\r\n`TH_3 = H(TH_2', data_3)`.\r\n\r\n",
      "createdAt": "2021-04-19T13:51:24Z",
      "updatedAt": "2021-05-03T09:14:56Z",
      "closedAt": "2021-05-03T09:14:56Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Great to get some feedback and discussion on these things:\r\n\r\n\r\n-- I am not sure that the first suggestion always simplifies or use less memory.\r\n\r\nTH_2 = H(message_1, data_2 )\r\nvs\r\nTH_1 = H(message_1), TH_2 = H(TH_1, data_2)\r\n\r\nThe example size of message_1 is 37 bytes so a 32 byte TH_1 would not be much smaller. With a larger message_1 (AD_1 could be arbitrary large) is saves memory. But would not the implementation need to store a lot of the information in message_1 anyway to be able to process message_2? \r\n\r\n\r\n-- The second suggestion make a lot of sense to me, it seems to strictly improve memory use.\r\n\r\nTH_3 = H(TH_2 , CIPHERTEXT_2, data_3),\r\nvs\r\nTH_2' = H(TH_2, CIPHERTEXT_2)\r\nTH_3 = H(TH_2', data_3)\r\n\r\nWould be good with some more detailed calculation as well as feedback from more implementors.\r\n",
          "createdAt": "2021-04-21T06:23:55Z",
          "updatedAt": "2021-04-21T06:23:55Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My take on the proposed `TH_1` is that it does simplify the implementation as you are dealing with a fixed size and do not need to worry how large `message_1` may grow. I see the value in doing this for embedded implementations. While I understand that the implementation needs to remember certain elements from message_1 after sending it, I do not see why it would need to save the serialized version of it after sending. Implementers feedback very welcome! @TimothyClaeys @marco-tiloca-sics @StefanHri",
          "createdAt": "2021-04-21T08:25:04Z",
          "updatedAt": "2021-04-21T08:25:04Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "For me to use the approach proposed by malishav is a good idea. Fixed-length fields are easier to handle on constrained devices without dynamic memory allocation where only stack memory can be used. ",
          "createdAt": "2021-04-21T09:40:30Z",
          "updatedAt": "2021-04-21T09:40:30Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Good and quick input. Semms like we should do both of these changes then.\r\n\r\n(If I remember correctly having a running transcript hash like TLS 1.3 is not optimal for some IoT devices)",
          "createdAt": "2021-04-21T09:45:11Z",
          "updatedAt": "2021-04-21T09:45:11Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me.",
          "createdAt": "2021-04-21T15:43:29Z",
          "updatedAt": "2021-04-21T15:43:29Z"
        },
        {
          "author": "TimothyClaeys",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 \r\n\r\nCurrently I'm saving intermediate hashing contexts in between different message processing methods so I don't have to store the individual parts that go into the transcript hash. My current way of implementing this is kind of hacky so I would be nice to see this properly defined in the specification.\r\n\r\nhttps://github.com/openwsn-berkeley/EDHOC-C/blob/7da0b54d85dabaa1100d3404193014630e7f9123/src/process.c#L118",
          "createdAt": "2021-04-22T09:15:53Z",
          "updatedAt": "2021-04-22T09:16:26Z"
        }
      ]
    },
    {
      "number": 97,
      "id": "MDU6SXNzdWU4NjEzMzg3ODk=",
      "title": "Forbidding multiple calls to EDHOC-Exporter with the same label",
      "url": "https://github.com/lake-wg/edhoc/issues/97",
      "state": "CLOSED",
      "author": "malishav",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The spec should likely forbid multiple calls to the EDHOC-Exporter interface with the same label, in order to prevent the same key being reused.\r\n\r\nDiscussed with @karthikbhargavan and @TimothyClaeys.",
      "createdAt": "2021-04-19T13:56:41Z",
      "updatedAt": "2021-05-24T13:20:26Z",
      "closedAt": "2021-05-24T13:20:26Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Good catch. Yes, we should have some text about that, but it should probably more be a requirement on the application using EDHOC that on EDHOC itself. Two different application should defintly not use the same label. The same application might rederive the same key several times as long as it keep track of its AEAD nonces and replay window.\r\n\r\n- I thought that we had already IANA registry proposed for this, but that is not the case. We should probably have one.\r\n- If we have a IANA registry the labels get more fixed and it might be that we need a context input parameter as well.",
          "createdAt": "2021-04-20T14:58:10Z",
          "updatedAt": "2021-04-20T14:58:10Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "If we make a IANA registrer for labels, I think we need to let the application add additional information in some way. Two alternatives:\r\n\r\n1. We make an IANA register for label prefixes, and let the application append information to the label prefix. This was recently planned for EAP-TLS (and methods built on EAP-TLS) but was changes because the TLS export labels are not really ment to be labels. This would not change the current exporter interface.\r\n\r\n2. We expand the interface with a context parameter. This is similar to the TLS exporter. A problem with the TLS exporter is that some implementations decided to not even support context.",
          "createdAt": "2021-04-21T10:01:31Z",
          "updatedAt": "2021-04-21T10:01:31Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@emanjon how is the context parameter intended to be used? Could you give an example? Would this be some sort of \"salt\" when deriving the key?",
          "createdAt": "2021-04-22T09:47:25Z",
          "updatedAt": "2021-04-22T09:47:25Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Don't register labels, register label prefixes.",
          "createdAt": "2021-04-22T14:57:47Z",
          "updatedAt": "2021-04-22T14:57:47Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The motivation for \"context\" or \"label postfixes\" is to increase the flexibility for the application. Restricting the application to IANA registered labels is very limiting. An application might want to use the EDHOC exporter to derive a number of keys and we should encourage that. The alternative is that the application needs to implement its own key derivation, which might be less secure and might be outside of the TEE. I called it \"context\" just because TLS calls the paramater in its exporter context. ",
          "createdAt": "2021-04-22T15:13:55Z",
          "updatedAt": "2021-04-22T15:13:55Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"Be like TLS\" is of course a good motivation.\r\nTechnically, a label prefix is not different from a context, it just saves the need to separate prefix and suffix.\r\n",
          "createdAt": "2021-04-22T15:30:20Z",
          "updatedAt": "2021-04-22T15:30:20Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(And of course there is nothing wrong with multiple calls with the same label; the application has a \"right to forget\" :-)",
          "createdAt": "2021-04-22T15:36:46Z",
          "updatedAt": "2021-04-22T15:36:46Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The solutions should be equal when it comes to security. The choice should be made based on what is easiest for implementators and apllications using EDHOC.\r\n\r\nAlt 1.\r\n--------------------------\r\n\r\nWe make an IANA register for label prefixes:\r\n\r\n  \"OSCORE Master Secret\"\r\n  \"OSCORE Master Salt\"\r\n\r\nThe Export function stays the same:\r\n\r\n      EDHOC-Exporter(label, length)\r\n        = EDHOC-KDF(PRK_4x3m, TH_4, label, length)\r\n\r\nAn application is allowed to append things to the label prefix:\r\n\r\n  \"OSCORE Master Secret\"\r\n  \"OSCORE Master Secret PickleRick\"\r\n\r\nAlt 2.\r\n--------------------------\r\n\r\nWe make an IANA register for labels:\r\n\r\n  label = \"OSCORE Master Secret\"\r\n  label = \"OSCORE Master Salt\"\r\n\r\nThe Export function needs to change:\r\n\r\n      EDHOC-Exporter(label, ctx, length)\r\n        = EDHOC-KDF(PRK_4x3m, TH_4, [label, ctx] , length)\r\n\r\nAn application is not allowed to append things to the label and uses the ctx instead:\r\n\r\n  label = \"OSCORE Master Secret\"\r\n  ctx = \"\"\r\n\r\n  label = \"OSCORE Master Secret\"\r\n  ctx = \"PickleRick\"\r\n\r\n",
          "createdAt": "2021-04-23T10:10:56Z",
          "updatedAt": "2021-04-23T10:10:56Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "No major opinion. Alt 2 breaks the test vector for the OSCORE security context.\r\nIt would be good to get more input.",
          "createdAt": "2021-05-03T09:14:09Z",
          "updatedAt": "2021-05-03T09:14:09Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Any preference @mcr, @pbtgit, @chrysn ?",
          "createdAt": "2021-05-04T14:21:50Z",
          "updatedAt": "2021-05-04T14:21:50Z"
        },
        {
          "author": "pbt-lab",
          "authorAssociation": "NONE",
          "body": "If desired the CTX is more convenient it can always be added in a wrapper on top of EDHOC-Exporter().\r\n(I assume re-use of label+ctx in Alt 2 is equivalent to  re-use of label in Alt 1?)\r\n",
          "createdAt": "2021-05-05T07:20:18Z",
          "updatedAt": "2021-05-05T07:20:18Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I prefer to have `ctx` explicitly specified. We can pass to `EDHOC-KDF` the concatenation of `label` and `ctx`. When `ctx` is undefined/empty, test vectors are not affected. I guess this is what @pbt-lab is referring to?",
          "createdAt": "2021-05-05T08:45:29Z",
          "updatedAt": "2021-05-05T08:45:29Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> I assume re-use of label+ctx in Alt 2 is equivalent to re-use of label in Alt 1?)\r\n\r\nlabel is a CBOR byte string. While alt 2 use an CBOR array. Definging alt2 as a wrapper seems more complication in my view.\r\n",
          "createdAt": "2021-05-05T09:31:41Z",
          "updatedAt": "2021-05-05T09:31:41Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Would be good if people stated alt 1. or alt 2. or made a concrete suggestion for alt 3.",
          "createdAt": "2021-05-05T09:32:42Z",
          "updatedAt": "2021-05-05T09:32:42Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Alt 3 (CBOR sequence)\r\n--------------------------\r\n\r\nWe make an IANA register for labels:\r\n\r\n  label = \"OSCORE Master Secret\"\r\n  label = \"OSCORE Master Salt\"\r\n\r\nThe Export function needs to change:\r\n\r\n      EDHOC-Exporter(label, ctx, length)\r\n        = EDHOC-KDF(PRK_4x3m, TH_4, label_context, length)\r\n        \r\nwhere `label_context` is a CBOR sequence:\r\n\r\n```\r\nlabel_context = (\r\n      label : tstr,\r\n      ctx : bstr,   (edited per suggestion below)\r\n)\r\n```\r\n\r\nIf you want to keep the test vectors intact, then you could make `ctx` optional in the CDDL, but not sure how to specify an optional parameter in the `EDHOC-Exporter` interface definition.",
          "createdAt": "2021-05-05T09:53:31Z",
          "updatedAt": "2021-05-05T14:05:44Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks. That is a valid alt 3. but ctx should probably be a bstr ",
          "createdAt": "2021-05-05T09:57:08Z",
          "updatedAt": "2021-05-05T09:57:08Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think keeping the test vectors intact is an important goal at all. Let's decide on what is simplest for a user of the exporter interface. ",
          "createdAt": "2021-05-05T09:59:38Z",
          "updatedAt": "2021-05-05T09:59:38Z"
        },
        {
          "author": "pbt-lab",
          "authorAssociation": "NONE",
          "body": "> I prefer to have `ctx` explicitly specified. We can pass to `EDHOC-KDF` the concatenation of `label` and `ctx`. When `ctx` is undefined/empty, test vectors are not affected. I guess this is what @pbt-lab is referring to?\r\nSomething like that, yes. Later post do differentiate the type of \"label\" and \"ctx\" and in light of that and changing test vectors Alt3 seems clean.   \r\n",
          "createdAt": "2021-05-05T20:43:37Z",
          "updatedAt": "2021-05-05T20:43:37Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I am fine with alt 3. I can start making PR for that unless somebody has different ideas.\r\n\r\nI don't alt 1 is a good alternative anymore as is restricts context to being a unicode string. Which would require some base64 encoding or similar for a general context.",
          "createdAt": "2021-05-06T06:43:23Z",
          "updatedAt": "2021-05-06T06:43:23Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Please review alt. 3 as specified in #114. Unless there are any comments we would like to merge this.",
          "createdAt": "2021-05-07T13:35:57Z",
          "updatedAt": "2021-05-07T13:35:57Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This is included in -07 so I close the issue.",
          "createdAt": "2021-05-24T13:20:23Z",
          "updatedAt": "2021-05-24T13:20:23Z"
        }
      ]
    },
    {
      "number": 99,
      "id": "MDU6SXNzdWU4NjI3MzUxMDg=",
      "title": "TEE security consideration",
      "url": "https://github.com/lake-wg/edhoc/issues/99",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "Section 8.6 in -05 states:\r\n\r\n  \"Typically an \r\n    adversary with physical access to a device can be assumed to gain \r\n    access to all information outside of the TEE, but none of the \r\n    information inside the TEE.\"\r\n\r\nStefan Hristozov commented:\r\n\r\n    \"A TEE does not provide protection against physical adversary, since the same CPU with the same physical memory executes both the operations in the TEE and in the non-TEE domains. It provides protection only against remote adversary exploiting, e.g., a buffer overflow for conducting code injection or return oriented attacks.\"\r\n\r\nFollowing the description in [1] I replaced the text with:\r\n\r\n\"The use of a TEE enforces that code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by code outside that environment.\"\r\n\r\nhttps://github.com/lake-wg/edhoc/commit/665d60c\r\n\r\nAny objections to this?\r\n\r\n\r\n[1] https://tools.ietf.org/html/draft-ietf-teep-architecture-14\r\n",
      "createdAt": "2021-04-20T11:51:03Z",
      "updatedAt": "2021-09-24T15:15:52Z",
      "closedAt": "2021-09-24T15:15:52Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Good to talk about attacks from code outside of the TEE, but not good to remove everything about physical attacks. The original text was written only thinking about physical attacks using the TEE definition from [1]. That definition in [1]states: \"The TEE resists against all software attacks as well as the physical attacks performedon the main memory of the system.\" so I don't think \"A TEE does not provide protection against physical adversary\" is completely correct. I would prefer the definition of TEE in [1] but I guess I have to accept the that current commercialy avilable TEEs does not enforce does not enforce memory encryption and also only provides a single zone inside the TEE.\r\n\r\nI think the suggested new text is ok, but I think it needs to be augmented with a sentence about memory encryption as well as attacks from non-EDHOC code inside the TEE.\r\n",
          "createdAt": "2021-04-20T15:21:40Z",
          "updatedAt": "2021-04-20T15:21:40Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I added some additional text on additional attacks and how to protect. I think the new is very good. The TEE definition taken from TEEP describe a quite basic TEE which is good.\r\n\r\nIf you agree with the updated text we can close this issue.",
          "createdAt": "2021-04-29T09:31:51Z",
          "updatedAt": "2021-04-29T09:31:51Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "@StefanHri are you ok with the suggested update?\r\n\r\nhttps://github.com/lake-wg/edhoc/commit/57ac5116f91b81a1e9ada0d157d896eca814d331\r\n\r\n",
          "createdAt": "2021-04-30T12:06:05Z",
          "updatedAt": "2021-04-30T12:06:05Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "Hi,\r\nI don't understand what you want to say with the sentence \"The TEE can also be used to protect the EDHOC and application protocol (e.g. OSCORE) implementation using some form of \"secure boot\", memory protection etc.\" Secure boot and TEE are different things. I think both make sense but they are not necessarily related to each other. \r\n\r\nI also think the sentence \"To provide better protection against physical attacks, memory encryption needs to be enforced.\"\r\nis incorrect since physical attacks are a very broad topic and memory encryption certainly does not protect against some common form of physical attacks such as (deferential) power analysis and fault injections.\r\n\r\n",
          "createdAt": "2021-05-03T07:53:40Z",
          "updatedAt": "2021-05-03T07:53:40Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The \"secure boot\" text was old, I don't know where it came from. I wrote a new sentence about secure boot and REE.\r\n\r\nRegarding physical attacks. bus encryption seems to be recommended to protect against some physical attacks. I agree that this does not protect against all physical attacks.\r\n\r\nhttps://www.usenix.org/system/files/raid2019-zhao.pdf\r\nhttps://people.dsv.su.se/~icss-jpc/exjobb/interesting/2004_vlsid_invited.pdf\r\n\r\nI changed the text to say \"some forms of physical attacks\" and rewrote the text a bit.\r\n\r\n\"If supported by the device, it is RECOMMENDED that at least the long-term private keys is stored in a Trusted Execution Environment (TEE) and that sensitive operations using these keys are performed inside the TEE. To achieve even higher security it is RECOMMENDED that additional operations such as ephemeral key generation, all computations of shared secrets, and storage of the PRK keys can be done inside the TEE. The use of a TEE enforces that code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by code outside that environment. Note that non-EDHOC code inside the TEE might still be able to read EDHOC data and tamper with EDHOC code, to protect against such attacks EDHOC needs to be in its own zone. **To provide better protection against some forms of physical attacks, sensitive EDHOC data should be stored inside the SoC or encrypted and integrity protected when send on a data bus (e.g. between the CPU and RAM or Flash). Secure boot can be used to increase the security of code and data in the Rich Execution Environment (REE) by validating the REE image.**\"\r\n\r\n\r\n\r\n",
          "createdAt": "2021-05-05T21:20:51Z",
          "updatedAt": "2021-05-05T21:20:51Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "There are many different attacks and different countermeasures which depend a lot on the hardware platform. To give an in-depth analysis of different attacks and countermeasures is certainly outside the scope of the standard. I will suggest keeping it short and reference relevant papers where more concrete analysis is done. Moreover, this is a general problem that every security protocol has. ",
          "createdAt": "2021-05-06T18:06:26Z",
          "updatedAt": "2021-05-06T18:06:26Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree, lets not talk about memory, data buses, and secure boot at all. I removed all the old and new text regarding these things. I don't know where they came from originally. After the last commit the text equal to the -06 version but with the sentence on secure boot and memory protection deleted.",
          "createdAt": "2021-09-12T21:06:18Z",
          "updatedAt": "2021-09-12T21:06:18Z"
        }
      ]
    },
    {
      "number": 100,
      "id": "MDU6SXNzdWU4NjI5NDQ0MDg=",
      "title": "Scope of the applicability statement.",
      "url": "https://github.com/lake-wg/edhoc/issues/100",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "My view of the applicability statement appendix was that is was a simple list of things that I and R needs to make sure that they both support because otherwise the protocol will end in error. Now the appendix has been move into the body, been made normative, and to my understanding changed scope.\r\n\r\n\"In order to ensure that EDHOC is used for the intended purpose, each message needs to be verified against an applicability statement associated to the protocol instance. If the message does not comply with the applicability statement, the protocol needs to be discontinued.\"\r\n\r\nI don't think this is a good idea. This seems to unesicarily increase complexity and make implementations bigger. Comparing with TLS this would be like stating that you need to check the every cipher suite, extension, certificate format etc has been pre-approved for use with a certain endpoint. Are any of the checks strictly needed for security reasons? Otherwise I think these kind of checks should be part of an optional policy mechanism outside of EDHOC.",
      "createdAt": "2021-04-20T15:30:44Z",
      "updatedAt": "2021-09-11T20:22:55Z",
      "closedAt": "2021-09-11T20:22:55Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I am fine with the new text",
          "createdAt": "2021-09-11T20:22:55Z",
          "updatedAt": "2021-09-11T20:22:55Z"
        }
      ]
    },
    {
      "number": 101,
      "id": "MDU6SXNzdWU4NjM2ODQ1MjU=",
      "title": "EDHOC and Availability",
      "url": "https://github.com/lake-wg/edhoc/issues/101",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current draft has the following text in several places:\r\n\r\n\"If any verification step fails, the Responder MUST send an EDHOC error message back, formatted as defined in {{error}}, and the protocol MUST be discontinued.\"\r\n\r\nI am not sure this is a good idea. This means that the availability of EDHOC will be low. An attacker can e.g. send a single byte as message_4 and it would make EDHOC shut down imidiatly. I think we need to soften this and give the implementation some more choice here.\r\n\r\nAre there constrained radio protocols where noice could be mistaken for an actual message and forwarded to EDHOC or do all constrained radio have strong enough CRC to make sure that that more or less never happens? ",
      "createdAt": "2021-04-21T09:49:35Z",
      "updatedAt": "2021-05-21T19:04:02Z",
      "closedAt": "2021-05-21T19:04:02Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I just changed the following text\r\n\r\nOLD:\r\nIf the Initiator previously received from the Responder an error message with error code 1 (see Section 6.3) indicating cipher suites supported by the Responder which also are supported by the Initiator, then the Initiator SHALL select the most preferred cipher suite of those.\r\n\r\nNEW:\r\nIf the Initiator previously received from the Responder an error message with error code 1 (see Section 6.3) indicating cipher suites supported by the Responder which also are supported by the Initiator, then the Initiator SHOULD select the most preferred cipher suite of those (note that error messages are not authenticated and may be forged).\r\n\r\nMade me think about that I don't think the group has discussed if some error messages should be authenticated.\r\n\r\nSome error messages to message_2 could include a MAC to prove that the error was sent by the same party that sent message_3. error messages to message_3 and message_4 could be authenticated.\r\n\r\nI am uncertain if this is worth specifying. At least not as long as there are easier ways to an attacker to end the protocol. I think what needs to be done is to specify that\r\n- a processing error does not need to discontinue the protocol, the received message can have been an attack.\r\n- receiveing an error does not need to discontinue the protocol, the received error can have been an attack.",
          "createdAt": "2021-04-21T18:20:56Z",
          "updatedAt": "2021-04-21T18:20:56Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "COLLABORATOR",
          "body": "from 20210422 interim: CB perhaps wisely said: \"Use cases exist for multiplexing over same port/URI, so applications should normally sort/demultiplex traffic before start interpreting as EDHOC, which implies treating invalid messages that get to EDHOC code as an error or attack\"\r\n",
          "createdAt": "2021-04-22T14:46:43Z",
          "updatedAt": "2021-04-22T14:46:43Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, my understanding is that we only need to be concerned about attacks where an attacker sends a packet crafted so that it will be processed by EDHOC (which is not hard). ",
          "createdAt": "2021-04-25T09:40:15Z",
          "updatedAt": "2021-04-25T09:40:15Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a pull request #109 addressing this issue\r\n- Added text on demultiplexing.\r\n- Changed procession so implementation are not mandated to shut down the session if an attacker sends a few bytes to the EDHOC resource / port..\r\n- Added more security consideration on Denial of service.",
          "createdAt": "2021-04-30T11:35:24Z",
          "updatedAt": "2021-04-30T11:35:24Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Writing this PR made me think about whether we want to mandate that error messages are always fatal as well as downgrade protection.\r\n\r\n- The \"\"Wrong selected cipher suite\" error is fatal because it is sent in repsponse to message_1. You could consider similar types of error sent in response to message_2 and message_3. E.g. ID_CRED format not supported or CRED format not supported or X.509 public key algorithm not supported.\r\n\r\n[BBFGKZ16] defines the following theoretical downgrade protection for a session: The cryptographic parameters should be the same on both sides and should be the same as if the peers had been communicating in the absence of an attack. But this definition has very little to do with practical security. In practice it does not matter if an attacker can influence the chosen parameter in the current session or a following session.\r\n\r\nI am still confused regarding the purpose of the applicability statement. Is it a informal section describing things the parties need to both support to make the protocol work or is a normative security section relevant for policy and downgrade.\r\n\r\nIf we want downgrade protection over multiple sessions, the parties need to agree or securely negotiate everything. Downgrade protection for a session does not make much sense to me if an attacker can force the parties to set up a second session with lower security.\r\n\r\n       \r\n",
          "createdAt": "2021-04-30T11:59:12Z",
          "updatedAt": "2021-04-30T11:59:12Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we need to align the terminology, we use both \"session\" and \"instance\" in the draft?",
          "createdAt": "2021-04-30T13:19:47Z",
          "updatedAt": "2021-04-30T13:19:47Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I just changed \"protocol\" to \"session\" not remembering that the draft use instance in other places.",
          "createdAt": "2021-04-30T13:27:42Z",
          "updatedAt": "2021-04-30T13:27:42Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "We can resolve this later, I opened #112.\r\n\r\nUnless there are other comments we will soon merge this.",
          "createdAt": "2021-05-04T15:04:31Z",
          "updatedAt": "2021-05-04T15:04:31Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The PR has been discussed and merged. Closing",
          "createdAt": "2021-05-21T19:04:01Z",
          "updatedAt": "2021-05-21T19:04:01Z"
        }
      ]
    },
    {
      "number": 103,
      "id": "MDU6SXNzdWU4NjQ3Mzg2NDQ=",
      "title": "Optimization of message size",
      "url": "https://github.com/lake-wg/edhoc/issues/103",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We need to nail down what optimizations to make in the final message format. \r\n\r\nKnown lengths of byte strings can be used as discussed in the old issue tracker:\r\nhttps://github.com/EricssonResearch/EDHOC/issues/95\r\n",
      "createdAt": "2021-04-22T09:27:34Z",
      "updatedAt": "2021-08-26T16:41:12Z",
      "closedAt": "2021-08-26T16:41:12Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "We should confirm the values from the rewuirement phase. If I remember correctly 45 bytes for message_2 in 5-hop 6TiSCH was the strictest requirement. We can reasch that but before we optimize for that, we should confirm that the group wants to optimize for 5-hop 6TiSCH (or is 4-hop godd enough) and also double check and verify that 45 bytes is the correct number to optimize for.\r\n\r\nIf I remember correctly Lorawan was a little bit less demanding than 5-hop 6TiSCH wih 48 bytes?.\r\n\r\nEvery single byte can make a large difference if you suddenly have to fragment and send two frames instead of one. On the other hand there has been discusssions that is would be nice to mandate C_R in message_2 and to skip the bstr_identifier optimization of ID_CRED_R. ",
          "createdAt": "2021-04-23T09:56:11Z",
          "updatedAt": "2021-04-23T09:56:11Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "John added a comment on an issue in the old repo which probably was intended to be on this issue: \r\nhttps://github.com/EricssonResearch/EDHOC/issues/95",
          "createdAt": "2021-05-17T15:23:14Z",
          "updatedAt": "2021-05-17T15:23:14Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Several things have been discussed regarding optimisations (or simplifications adding bytes).\r\n\r\nMessage_2 is the largest message and it is sent over downlink in 6TiSCH which is more constrained than uplink in 6TiSCH. Therefore only message_2 is discussed below.\r\n\r\n- Connection IDs - It has been discussed to make conection IDs mandatory (or default). Given the current connection id encoding this would add 1 byte to message_2 when sent in CoAP response. Note that there has also been suggested to move connection ids to a shim layer. This would not affect the total overhead, just move bytes from EDHOC to lower layers. If connection ids are kept in EHOC I think EDHOC should adopt Christians suggestion for encoding.\r\n\r\n- bstr_identifier - Is has been pointed out that the bstr_identifier is complicated and looks like overopimization, adding complexity to spec and implementations. Christian has some excellent suggestions on how to encode the connection identifiers. Then the bstr_identifier is only use to encode ID_CRED containing kid. This optimisations could maybe be skipped. This would add 1 byte to message_2 when certain 1 byte KIDs are used. I think this should be done unless the byte saving is very much needed.\r\n\r\n- Known lengths - There are several bstr whose length is known. E.g. G_Y and Signature_or_MAC_2. Concatenating G_Y and CIPHERTEXT_2 would save 1-2 bytes. The known length of Signature_or_MAC_2 is harder to use as a change would mean that the plaintext is no longer a CBOR sequance. Changing plaintext to be a CBOR SEQUENCE concatenated with the value of Signature_or_MAC_2 would save an additional 1-2 bytes. I don't think any of these optimizations should be done unless the byte savings are essential.\r\n\r\nThe above addition/removal of optimizations needs to be discussed together with a renewed discussion of the limits in 6TiSCH. In the end it is a tradeoff between complexity and how many deployments should be supported with unfragmented message_2.",
          "createdAt": "2021-05-17T15:25:27Z",
          "updatedAt": "2021-05-17T15:25:55Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As discussed during the design team meeting, the new \"6TiSCH Overhead Estimator\" is available at: https://docs.google.com/spreadsheets/d/1FjlGrgVu6ZSw2bt1KxAS9O5gtGXxBoGnqK3QeVFGx1Q/edit?usp=sharing\r\n\r\nThis estimator obsoletes the old Google document by updating the overhead numbers to the latest RFCs that are used in 6TiSCH, fixes an erratum present in the old doc, and adds new features such as short addressing support and UDP overhead compression.",
          "createdAt": "2021-05-26T09:33:05Z",
          "updatedAt": "2021-05-26T09:33:05Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "As discussed in the recent interim meeting, we postpone the resolution of this issue until the draft is ready for WGLC.",
          "createdAt": "2021-07-15T20:41:33Z",
          "updatedAt": "2021-07-15T20:41:33Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this can be closed now. We have discussed and done the agreed optimizations. ",
          "createdAt": "2021-08-26T16:41:11Z",
          "updatedAt": "2021-08-26T16:41:11Z"
        }
      ]
    },
    {
      "number": 104,
      "id": "MDU6SXNzdWU4NjU4Mjg0MjE=",
      "title": "distinguishing different certificates types/encoding within x5chain",
      "url": "https://github.com/lake-wg/edhoc/issues/104",
      "state": "CLOSED",
      "author": "StefanHri",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "We can use EDHOC with DER/PEM x509 certificates as well as re-encoded x509 and native CBOR certificates. How certificate type and encoding can be distinguished when x5chain is used?  ",
      "createdAt": "2021-04-23T07:24:54Z",
      "updatedAt": "2021-05-05T14:15:55Z",
      "closedAt": "2021-05-05T14:15:55Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "For C509 certificates (working name for what was previously called CBOR certificates) other CBOR labels are requested, see\r\nhttps://tools.ietf.org/html/draft-mattsson-cose-cbor-cert-compress-08#section-8.8\r\n\r\nc5c correspond to x5chain\r\nc5b correspond to x5bag\r\nc5t correspond to x5t\r\nc5u correspond to x5u\r\n\r\nThe two types of C509 certificates, re-encoded X.509 and natively signed C509, can be distinguished by the first bit. ",
          "createdAt": "2021-04-23T07:45:00Z",
          "updatedAt": "2021-04-23T07:45:00Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": ">  first bit\r\n\r\nfirst byte right now, but formally the first CBOR item\r\n\r\n>We can use EDHOC with DER/PEM x509\r\n\r\nI do not think you can use COSE/EDHOC with PEM encoding. x5chain/x5bag/x5t is always DER encoding as far as I know. I don't know about how x5u and pplication/pkcs7-mime is encoded. ",
          "createdAt": "2021-04-23T09:49:03Z",
          "updatedAt": "2021-04-23T11:24:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "@StefanHri does this answer you questions? Seems mostly like a COSE question. Do you think any clarifications are needed to the EDHOC document?\r\n",
          "createdAt": "2021-04-30T12:07:10Z",
          "updatedAt": "2021-04-30T12:07:10Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "Yes, I think this is now clear for me. However, I noticed now something more in this section namely: \r\n\r\nThe section starts with:\r\n\"ID_CRED_I and ID_CRED_R are identifiers of the public authentication\r\n   keys of the Initiator and the Responder, respectively.  ID_CRED_I and\r\n   ID_CRED_R do not have any cryptographic purpose in EDHOC.\"\r\n\r\nand then a bit later:\r\n\"ID_CRED_x MAY contain the actual credential used for\r\n      authentication, CRED_x.  For example, a certificate chain can be\r\n      transported in ID_CRED_x with COSE header parameter c5c or\r\n      x5chain, defined in [I-D.mattsson-cose-cbor-cert-compress] and\r\n      [I-D.ietf-cose-x509].\" \r\n\r\nBoth sentences are contradictory. I will suggest changing the first sentence to something like: \"ID_CRED_x MAY contain an identifier or a certificate ...\" ",
          "createdAt": "2021-05-03T08:10:29Z",
          "updatedAt": "2021-05-03T08:10:29Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@StefanHri I suppose the use of the term \"identifier\" is confusing. How about changing the beginning: \r\n\r\nOLD\r\n\"ID_CRED_I and ID_CRED_R are identifiers of the public authentication\r\nkeys of the Initiator and the Responder, respectively. \r\n\r\nNEW\r\n\"ID_CRED_I and ID_CRED_R are used to identify the public authentication\r\nkeys of the Initiator and the Responder, respectively. \r\n\r\n\r\n",
          "createdAt": "2021-05-04T12:53:25Z",
          "updatedAt": "2021-05-04T12:53:25Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "I am confused. ID_CRED_I and ID_CRED_R can contain a certificate right? When ID_CRED_I and ID_CRED_R contain a certificate they are not used to identify the public authentication but carry it?\r\n",
          "createdAt": "2021-05-04T16:25:21Z",
          "updatedAt": "2021-05-04T16:25:21Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@StefanHri I didn't see a contradiction between a piece of data identifying a credential and containing the credential. But if it is confusing it is perhaps better to be explicit. How about this:\r\n\r\nOLD\r\n\"ID_CRED_I and ID_CRED_R are identifiers of the public authentication\r\nkeys of the Initiator and the Responder, respectively.\r\n\r\nNEW\r\n\"ID_CRED_I and ID_CRED_R are used to identify and optionally transport the public authentication keys of the Initiator and the Responder, respectively.",
          "createdAt": "2021-05-05T13:59:34Z",
          "updatedAt": "2021-05-05T13:59:34Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "This is way more clear for me. Thank you!",
          "createdAt": "2021-05-05T14:06:29Z",
          "updatedAt": "2021-05-05T14:06:29Z"
        }
      ]
    },
    {
      "number": 105,
      "id": "MDU6SXNzdWU4NjU5ODUxMzg=",
      "title": "Simplifying the correlation",
      "url": "https://github.com/lake-wg/edhoc/issues/105",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "So here's something that may sound a bit intrusive on the whole specification, but from two discussions today it may be worth it:\r\n\r\n*What If we take the topic of correlation out of EDHOC completely (like, make corr=3 the only mode it has) and in exchange make it a requirement on the transport to provide method correlation all the time?*\r\n\r\nThe goal of that exercise would be to reduce over-all complexity. It would take complexity out of EDHOC itself, move it to the EDHOC-over-foo layers -- but it seems to me that all those correlation topics are easier to describe there, reducing over-all complexity.\r\n\r\nConcrete changes would be:\r\n\r\n* Mentions of the corr parameter would go away from everywhere thy are now; METHOD_CORR would just become METHOD (2 bits rather than 4).\r\n* All the data_x items that now have leading `? C_x` would drop them.\r\n* \"Message correlation\" would be added to the transport (applicability statement) requirements.\r\n* The CoAP applicability statement would grow by text like this:\r\n\r\n> Whenever an EDHOC message is sent from a client to a server in the payload, the EDHOC message is prefixed with the CBOR serialization of the C_x the server picked; in a message_1 (as the server has not picked the C_x), a `null` (encoded as `f6`) is sent there instead. The server uses this first CBOR item to identify the ongoing exchange, and uses the remainder of the payload as an EDHOC message.\r\n>\r\n> As a side note, this means that while responses in an exchange of EDHOC over CoAP are of media type application/edhoc, the requests are not, and there is currently no media type that describes \"application/edhoc with an identifier prefixed\". This is more of a theoretical concern, as EDHOC exchanges are not typically accompanied by explicit content formats.\r\n\r\nThese two paragraphs (of which only one is essential) can be much shorter as the stripped-out text, because not only does all the talk about encoding and naming the correlations gets dropped, but also the roles are clearer: We don't have to talk of \"C_I in this case, C_R in that case\", but (now that we have the terminology of server and client provided by CoAP) can talk of \"the C_x picked by the server\".\r\n\r\n(A side effect of this phrasing \"in the payload\" is that it'd trivially ensure that the EDHOC option from draft-palombini-core-oscore-edhoc-02 would be sent without the C_i which was considered for manual stripping-out anyway as it'd be redundant with the kid from the OSCORE option).",
      "createdAt": "2021-04-23T10:37:09Z",
      "updatedAt": "2021-07-16T12:20:18Z",
      "closedAt": "2021-07-16T12:20:18Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Note that this would trivially resolve #89.",
          "createdAt": "2021-04-23T10:41:52Z",
          "updatedAt": "2021-04-23T10:41:52Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The current spec (-08) essentially incorporated this proposal. \r\n\r\n@chrysn Anything missing?",
          "createdAt": "2021-07-15T20:36:44Z",
          "updatedAt": "2021-07-15T20:36:44Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "I've just only had a short glance at -08, and what I've seen resolves this issue; in particlar, I like how appendix turned out.\r\n\r\nI'll read (and maybe implement -- no promises) the changed document until the IETF111, but if anything *is* missing I'd open a separate issue; closing this.\r\n\r\nThanks!",
          "createdAt": "2021-07-16T12:20:18Z",
          "updatedAt": "2021-07-16T12:20:18Z"
        }
      ]
    },
    {
      "number": 107,
      "id": "MDU6SXNzdWU4NzA4MDI0Mzc=",
      "title": "CFRG suggestion for make the EDHOC Elliptic-Curve-Point-to-Octet-String Conversion a bit more formal so that it can be refered by other specifications.",
      "url": "https://github.com/lake-wg/edhoc/issues/107",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This was suggested in CFRG during the discussion on HPKE Elliptic-Curve-Point-to-Octet-String Conversion. The compact representation used in EDHOC can be used whenever compact output is used in ECDH (which it almost always is).\r\n\r\nImportant to differenctiate between the wire format, the validation done, and the algorithm for multiplication. EDHOC only touch the wire format, and do not loosen any validation requirements or recommend any particular algorithms form multiplication.\r\n\r\nSuggestion oflline that it might be better to specify that the \"y-bit\" is set to 0 instead of giving the implementor an option.\r\n\r\nSuggestion offline that the draft should refer to SECG in addition or instead of NIST.\r\n ",
      "createdAt": "2021-04-29T09:20:34Z",
      "updatedAt": "2021-05-04T14:55:54Z",
      "closedAt": "2021-05-04T14:55:54Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a PR #108 trying to capture the suggestion from CFRG. I think the PR is ready to merge.",
          "createdAt": "2021-05-04T10:39:57Z",
          "updatedAt": "2021-05-04T10:39:57Z"
        }
      ]
    },
    {
      "number": 110,
      "id": "MDU6SXNzdWU4NzQzOTMyNTQ=",
      "title": "Add AD_4",
      "url": "https://github.com/lake-wg/edhoc/issues/110",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Has been suggestion to add AD_4 to message 4.",
      "createdAt": "2021-05-03T09:18:19Z",
      "updatedAt": "2021-05-24T13:17:44Z",
      "closedAt": "2021-05-24T13:17:44Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a PR #111 addressing all the issue mentioned with aux data.\r\n\r\nThe PR addresses issue #90 ",
          "createdAt": "2021-05-04T10:39:09Z",
          "updatedAt": "2021-05-04T10:39:09Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "EAD_4 is added to message_4 in -07 so I close this issue.",
          "createdAt": "2021-05-24T13:17:44Z",
          "updatedAt": "2021-05-24T13:17:44Z"
        }
      ]
    },
    {
      "number": 112,
      "id": "MDU6SXNzdWU4NzU1NTM0NjU=",
      "title": "Align \"session\" and \"protocol instance\"",
      "url": "https://github.com/lake-wg/edhoc/issues/112",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The text use both the terms \"session\" and \"protocol instance\", would be good to settle for one term.",
      "createdAt": "2021-05-04T15:00:58Z",
      "updatedAt": "2021-05-07T14:24:11Z",
      "closedAt": "2021-05-07T14:24:11Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Just chose one, I don't think this needs an issue",
          "createdAt": "2021-05-05T09:33:33Z",
          "updatedAt": "2021-05-05T09:33:33Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "In the security considerations \"session\" makes most sense to me. There is also the term \"connection\". I will make a proposal.",
          "createdAt": "2021-05-05T14:02:52Z",
          "updatedAt": "2021-05-05T14:02:52Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "MDU6SXNzdWU4OTA0NTc2OTg=",
      "title": "Transfer CWT",
      "url": "https://github.com/lake-wg/edhoc/issues/115",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Discussion today in COSE on how to do RPK by value in EDHOC. Suggestions to send a COSE_Key or a C509. Additional suggestion from Carsten to use CWT. Several issues in the old GitHub on CWTs, that were not transfered to the new GitHub:\r\n\r\nhttps://github.com/EricssonResearch/EDHOC/issues/5\r\nhttps://github.com/EricssonResearch/EDHOC/issues/33\r\nhttps://github.com/EricssonResearch/EDHOC/issues/37\r\n\r\nDiscussion to transfer CWT in kid, in Auxilery data, and as COSE header parameter.\r\n\r\nTransfering CWT is related to issues #88, #62,  #90, #82",
      "createdAt": "2021-05-12T20:26:17Z",
      "updatedAt": "2021-08-26T16:45:14Z",
      "closedAt": "2021-08-26T16:45:14Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a pull request for this\r\n\r\nhttps://github.com/lake-wg/edhoc/pull/116\r\n\r\nI think it is essential that EDHOC supports CWT. CWTs are much more flexible than X.509 / C.509. I think both are needed. The need for CWT has been discussed since 2016. I think it was decided clear quite early that transporting CWT is needed but was a discussion on how to transfer them. In Aux Data, in COSE header parameter, or in the kid bstr. For some reason nothing was ever specified. \r\n\r\nTLS WG is discussing to add support for CWT. \r\n\r\nhttps://datatracker.ietf.org/doc/html/draft-tschofenig-tls-cwt-02\r\n\r\nI think certificates and CWT needs to be included, I am not sure that we need a different format for RPK. Likely CWT or C509 can be used for this purpose.",
          "createdAt": "2021-05-13T12:31:10Z",
          "updatedAt": "2021-05-13T12:31:10Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it should be discussed if CWT is good enough for the #88. My initial understanding is that it is but this needs to be analyzed and discussed. My current thoughts.\r\n\r\n- CWT needs to be supported in EDHOC.\r\n- Most things in CWT is optional, it is likely an optimized enough format for the oportunistic / TOFU use case of \"RPK\". CWT is also very flexible.\r\n- When CWT exist it would be strange to standardize a new format for transfereing a COSE_Key unless it is really really needed to save bytes.\r\n- CWT + Deterministic CBOR could maybe replace the discussion on how to integrity protect COSE_Keys. We should at least remove the new subject_name from the COSE_Key part in the EDHOC document. CWT and C509 can be used when subject name is needed. Does \"Raw\" COSE_Keys that are not CWT even need to be supported? Or would CWT / C509 / X.509 be enough",
          "createdAt": "2021-05-17T08:48:52Z",
          "updatedAt": "2021-05-17T08:48:52Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This change has now been done in the master branch, see a1b25ba and commits in its vicinity.\r\n\r\nCan we close the issue?",
          "createdAt": "2021-07-24T11:45:51Z",
          "updatedAt": "2021-07-24T11:45:51Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This has now been addressed.",
          "createdAt": "2021-08-26T16:45:14Z",
          "updatedAt": "2021-08-26T16:45:14Z"
        }
      ]
    },
    {
      "number": 118,
      "id": "MDU6SXNzdWU4OTQwOTU2MTA=",
      "title": "C_1: use \"nil\" instead of \"null\"",
      "url": "https://github.com/lake-wg/edhoc/issues/118",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "CDDL knows both names for \"null\" and \"nil\", but (especially with #117) a careless reader could read the \"prepending a null\" as \"prepend the byte zero\", which is not what is meant (given that the prepending is introduced as \"prepend the CBOR serialization of C_x\").\r\n\r\nA downside is that in CBOR itself, the value is always called \"Null\" -- but unlike CDDL (and COSE), it does not introduce much of terminology for the simple types (it just describes it as meaning \"null\"; most of the remaining use of the term is in the context of a JSON null).\r\n\r\nI suggest this change in an issue rather than in a PR, as doing any change now while #117 is in the air would just create more work later anyway.\r\n\r\nIf this is accepted (and \"let's better stick to plain CBOR terminology\" is still a plausible outcome), I can PR this once #117's fate is decided.",
      "createdAt": "2021-05-18T08:01:25Z",
      "updatedAt": "2021-08-21T15:21:34Z",
      "closedAt": "2021-08-21T15:21:34Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I am personally fine with both. ",
          "createdAt": "2021-05-18T14:20:05Z",
          "updatedAt": "2021-05-18T14:20:05Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree \"null\" is confusing. Not sure \"nil\" is less confusing. The fact that RFC8610 defines null as nil may result in the same interpretation, and most people don't read beyond RFC8949 where the term \"nil\" is not used. \r\n\r\nWould it be less ambiguous to pick another CBOR Simple Value, like \"true\" (0xf5)?\r\n\r\n",
          "createdAt": "2021-05-21T07:18:56Z",
          "updatedAt": "2021-05-21T07:18:56Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "OTOH, if it just a matter of disambiguating the word \"null\", then we could use \"nil\" instead. Given that we stick to the simple CBOR value 0xf6, as in -08, then making the change is an improvement.",
          "createdAt": "2021-07-15T20:47:35Z",
          "updatedAt": "2021-07-15T20:47:35Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Given the usefulness to implementers of CBOR tools like cbor.me,  I  think there is a good reason to stick to the diagnostic notation in RFC 8949. For this reason I reopen this issue.",
          "createdAt": "2021-08-18T17:07:11Z",
          "updatedAt": "2021-08-18T17:07:11Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "We should thus replace the current 'nil' with some 1-byte value with  RFC 8949 diagnostic notation. Instead of reverting to 'null' I propose we pick another simple value. I did not note any objection to the proposal above to use 'true' and will therefore make that change now.",
          "createdAt": "2021-08-18T17:43:23Z",
          "updatedAt": "2021-08-18T17:43:23Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Change made in 31f2ce58d",
          "createdAt": "2021-08-18T17:58:47Z",
          "updatedAt": "2021-08-18T17:58:47Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This has now been changes to true. Which make this issue outdated",
          "createdAt": "2021-08-21T15:21:34Z",
          "updatedAt": "2021-08-21T15:21:34Z"
        }
      ]
    },
    {
      "number": 120,
      "id": "MDU6SXNzdWU4OTQ0NjA5MjU=",
      "title": "Initial set of cipher suites",
      "url": "https://github.com/lake-wg/edhoc/issues/120",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Is it worth having 4 diiference CCM based ciphser suites. And are they the correct 4?\r\n\r\n- EDHOC should probably have a ChaCha20-Poly1305 cipher suite from start. Probably with SHA-256. X25519 and EdDSA.\r\n\r\n- The CNSA cipher suite does not really need a 1 byte value. Could live with 2 byte value.",
      "createdAt": "2021-05-18T14:42:11Z",
      "updatedAt": "2021-07-15T20:48:40Z",
      "closedAt": "2021-07-15T20:48:40Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "-Agreement during interim is that the 4 different CCM are all needed and that they are the correct ones.\r\n-ChaCha20 should be combined with both P-256 and X25519\r\n-CNSA suite can have two bytes.\r\n",
          "createdAt": "2021-06-02T10:37:58Z",
          "updatedAt": "2021-06-02T10:37:58Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should specify a X448/SHAKE256 suite to complement the CNSA suite.",
          "createdAt": "2021-06-02T10:39:15Z",
          "updatedAt": "2021-06-02T10:39:15Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The GCM suite is chosen to match what is currently used on the web which is X25519 combined with P-256 ECDSA. Not sure we need to specify anything else here. IoT community seems more interested in ChaCha20 than GCM.\r\n\r\n~~~~~~~~~~~\r\n   6. ( 1, -16, 4, -7, 1, -16 )\r\n      (A128GCM, SHA-256, X25519, ES256,\r\n       A128GCM, SHA-256)\r\n~~~~~~~~~~~",
          "createdAt": "2021-06-02T10:41:13Z",
          "updatedAt": "2021-06-02T10:41:13Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/lake-wg/edhoc/pull/127",
          "createdAt": "2021-06-02T10:43:00Z",
          "updatedAt": "2021-06-02T10:43:00Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolved  with #127.",
          "createdAt": "2021-07-15T20:48:40Z",
          "updatedAt": "2021-07-15T20:48:40Z"
        }
      ]
    },
    {
      "number": 121,
      "id": "MDU6SXNzdWU4OTQ5ODQ1MjI=",
      "title": "Simpler more secure MAC calculation",
      "url": "https://github.com/lake-wg/edhoc/issues/121",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "COSE has discussed and are are planning to standardize new encryption algorithms for the AEAD interface after a request from FIDO. The new algorithms would not provide any integrity protection.\r\n\r\nThe current version of the Group OSCORE draft would not be secure at all with these new algorithms due to the unusual design choice to let the sender countersign it's own AEAD. This could easily be addressed by using a traditional MAC-then-Sign approach.\r\n\r\nEDHOC currently uses the inner COSE_Encrypt as a MAC function, this would of course be unsecure if the encryption function is AES-CTR.",
      "createdAt": "2021-05-19T04:44:50Z",
      "updatedAt": "2021-08-21T15:20:50Z",
      "closedAt": "2021-08-21T15:20:50Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Might actually be a very good idea to change the inner COSE_Encrypt0 to just a simple single invocation of the EDHOC-KDF(). As pointed out in [1] the short MAC length is probably the weakest point in the EDHOC design.\r\n\r\n[1] https://github.com/lake-wg/edhoc/blob/master/Security%20Level/Security%20Levels%20and%20Design%20Goals%20of%20EDHOC.txt\r\n\r\nChaning inner COSE_Encrypt0 to EDHOC-KDF() would significantly simplify the specification\r\n\r\nNEW\r\n```\r\nCompute MAC_3 = EDHOC-KDF( PRK_4x3m, TH_3, ( ID_CRED_I, CRED_I, ? AD_3 ), length )\r\n```\r\n\r\nOLD\r\n```\r\nCompute an inner COSE_Encrypt0 as defined in Section 5.3 of {{I-D.ietf-cose-rfc8152bis-struct}}, with the EDHOC AEAD algorithm in the selected cipher suite, K_3m, IV_3m, and the following parameters:\r\n\r\n    protected = << ID_CRED_I >>\r\n        ID_CRED_I - identifier to facilitate retrieval of CRED_I, see {{id_cred}}\r\n\r\n    external_aad = << TH_3, CRED_I, ? AD_3 >>\r\n\r\n        CRED_I - bstr containing the credential of the Initiator, see {{id_cred}}.\r\n\r\n        AD_3 = bstr containing opaque protected auxiliary data\r\n\r\n    plaintext = h''\r\n\r\nCOSE constructs the input to the AEAD {{RFC5116}} as follows:\r\n\r\n    Key K = EDHOC-KDF( PRK_4x3m, TH_3, \"K_3m\", length )\r\n\r\n    Nonce N = EDHOC-KDF( PRK_4x3m, TH_3, \"IV_3m\", length )\r\n\r\n    Plaintext P = 0x (the empty string)\r\n\r\n    Associated data A =\r\n\r\n    [ \"Encrypt0\", << ID_CRED_I >>, << TH_3, CRED_I, ? AD_3 >> ]\r\n\r\nMAC_3 is the 'ciphertext' of the inner COSE_Encrypt0.\r\n```\r\n\r\n\r\n",
          "createdAt": "2021-05-19T04:52:00Z",
          "updatedAt": "2021-05-19T05:13:42Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "\"K_2m\", \"K_3m\", \"IV_2m\", \"IV_3m\" could then be removed from the specification.",
          "createdAt": "2021-05-19T04:55:38Z",
          "updatedAt": "2021-05-19T04:55:38Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is a significant simplification that also saves memory. The CPU saving are likely minimal compared to the asymmetric operations. Additional benefits are that the MAC length becomes flexible. We could then define a full MAC length for the Signature modes. I don't see any disadvantages.\r\n\r\nI will make a PR during next week.",
          "createdAt": "2021-05-19T09:26:51Z",
          "updatedAt": "2021-05-19T09:26:51Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This is the PR: #123 ",
          "createdAt": "2021-05-26T12:07:16Z",
          "updatedAt": "2021-05-26T12:07:16Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "If we merge this PR we should remove the following sentence from 3.5.1.\r\n\"The MAC is implemented with an AEAD algorithm.\"",
          "createdAt": "2021-07-24T10:51:44Z",
          "updatedAt": "2021-07-24T10:51:44Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Made two new PRs and deleted the old ones. Began implementing #136 with a CBOR sequence. I then modified #136 to #137 where an array is used instead of a sequence. \r\n\r\n#137 is likely the better choice. I think somebody expressed that it was good if context is explicit. #137 also seems simpler.",
          "createdAt": "2021-07-26T12:59:12Z",
          "updatedAt": "2021-07-26T12:59:12Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Thinking more maybe CBOR bstr for context is the best\r\n\r\n```\r\nEDHOC-Exporter(label, context, length)\r\n     = EDHOC-KDF(PRK_4x3m, TH_4, label, context, length) \r\n\r\ninfo = [\r\n   edhoc_aead_id : int / tstr,\r\n   transcript_hash : bstr,\r\n   label : tstr,\r\n   context : bstr,\r\n   length : uint\r\n]\r\n\r\n```     \r\nIf so, should the context for MAC_2 be ?\r\n\r\n```\r\nbytes .cborseq [ ID_CRED_I, CRED_I, ? AD_3 ]\r\nbytes .cbor [ ID_CRED_I, CRED_I, ? AD_3 ]\r\n\r\n```\r\nI don't think the following definition in the current draft is correct: \r\n\r\n` Key K = EDHOC-Exporter( \"EDHOC_message_4_Key\", h'', length )\r\n`\r\n\r\nThe exporter takes an byte string and calls the the EDHOC-KDF. The caller of the exporter does not need to do any CBOR encoding.",
          "createdAt": "2021-07-28T09:24:05Z",
          "updatedAt": "2021-07-28T09:24:05Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The last point, empty byte string representation, relates to #133.",
          "createdAt": "2021-07-28T11:13:07Z",
          "updatedAt": "2021-07-28T11:13:07Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The input to the exporter should likely be a byte string (not a CBOR encoded bstr)\r\nThe input to the KDF could be something different e.g. a sequence.\r\n```\r\n\r\nEDHOC-Exporter(label, context, length)\r\n     = EDHOC-KDF(PRK_4x3m, TH_4, label, context, length) \r\n\r\nwhere context is a bstr,\r\n\r\n\r\n\r\nEDHOC-KDF( PRK, transcript_hash, label, context_seq, length )\r\n      = Expand( PRK, info, length )\r\n\r\ninfo = [\r\n   edhoc_aead_id : int / tstr,\r\n   transcript_hash : bstr,\r\n   label : tstr,\r\n   length : uint\r\n   context_seq : * any,\r\n]\r\n\r\n\r\n\r\nMAC_3 = EDHOC-KDF( PRK_4x3m, TH_3, \"MAC_3\", (ID_CRED_I, CRED_I, ? AD_3 ), mac_length )\r\n\r\n```",
          "createdAt": "2021-07-28T17:06:33Z",
          "updatedAt": "2021-07-28T17:08:50Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe mac_length and AEAD should be decoupled. They are independent things with different purposes. Maybe the Static DH mac length should be added to the cipher suite instead.",
          "createdAt": "2021-07-29T17:16:44Z",
          "updatedAt": "2021-07-29T17:16:44Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Comments from Christian during IETF 111 is that sequence is better than array for EDHOC-KDF",
          "createdAt": "2021-07-29T19:46:15Z",
          "updatedAt": "2021-07-29T19:46:15Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on Christian comments I would say that the current plan is to merge #136 with the byte string change above for the exporter:\r\n- Exporter context is a byte string (not CBOR)\r\n- EDHOC-KDF context is a CBOR sequence",
          "createdAt": "2021-07-29T19:50:23Z",
          "updatedAt": "2021-07-29T19:50:23Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I suggest merging #136 as is. That seems like the best and most flexible solution",
          "createdAt": "2021-08-02T08:06:42Z",
          "updatedAt": "2021-08-02T08:06:42Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "We could make context a separate parameter without changing anything else in #136\r\n\r\nEDHOC-Exporter(label, context, length)\r\n     = EDHOC-KDF(PRK_4x3m, TH_4, label, context, length) \r\n\r\nCompute MAC_2 = EDHOC-KDF( PRK_3x2m, TH_2, \"MAC_2\", ( ID_CRED_R, CRED_R, ? AD_2 ), mac_length )\r\nMaster Secret = EDHOC-Exporter( \"OSCORE Master Secret\", , key_length )\r\n",
          "createdAt": "2021-08-03T10:59:20Z",
          "updatedAt": "2021-08-03T10:59:20Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The agreed solution with a sequnece that Christian preferred has been merged. Closing this",
          "createdAt": "2021-08-21T15:20:50Z",
          "updatedAt": "2021-08-21T15:20:50Z"
        }
      ]
    },
    {
      "number": 124,
      "id": "MDU6SXNzdWU4OTc3Njc4NTE=",
      "title": "Make C_1 mandatory",
      "url": "https://github.com/lake-wg/edhoc/issues/124",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Comment from >1 implementer to make the initial byte C_1 of message_1 mandatory rather than optional. This simplifies the disambiguation of messages significantly (relates to #39). The byte budget for message_1 is less severe than message_2 and can afford another byte.",
      "createdAt": "2021-05-21T07:23:08Z",
      "updatedAt": "2021-05-21T18:58:26Z",
      "closedAt": "2021-05-21T18:58:26Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "If #117 is merged, this issue applies instead to  draft-ietf-core-oscore-edhoc:\r\nhttps://github.com/core-wg/oscore-edhoc/pull/2\r\n",
          "createdAt": "2021-05-21T07:41:49Z",
          "updatedAt": "2021-05-21T07:41:49Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems like something that should be discussed in #105. Close?",
          "createdAt": "2021-05-21T18:56:55Z",
          "updatedAt": "2021-05-21T18:56:55Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This is also discuss in #95 ",
          "createdAt": "2021-05-21T18:58:11Z",
          "updatedAt": "2021-05-21T18:58:11Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "MDU6SXNzdWU4OTc5MDA5ODA=",
      "title": "CRED_x in CWT format ",
      "url": "https://github.com/lake-wg/edhoc/issues/125",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In the example of CRED_x in 3.3.3, consider to replace own construct with CWT:\r\n\r\nOLD:\r\n\r\n~~~~~~~~~~\r\nCRED_x = {\r\n  1:  1,\r\n -1:  4,\r\n -2:  h'b1a3e89460e88d3a8d54211dc95f0b90\r\n        3ff205eb71912d6db8f4af980d2db83a',\r\n \"subject name\" : \"42-50-31-FF-EF-37-32-39\"\r\n}\r\n~~~~~~~~~~\r\n\r\nNEW:\r\n~~~~~~~~~~\r\nCRED_x = {     /CWT/\r\n 2 : \"42-50-31-FF-EF-37-32-39\",    /sub/\r\n 8 : {    /cnf/\r\n       1 : {     /COSE_Key/\r\n              1:  1,\r\n             -1:  4,\r\n             -2:  h'b1a3e89460e88d3a8d54211dc95f0b90\r\n                      3ff205eb71912d6db8f4af980d2db83a',\r\n             }\r\n       }\r\n}\r\n~~~~~~~~~~~",
      "createdAt": "2021-05-21T10:13:32Z",
      "updatedAt": "2021-08-26T16:40:22Z",
      "closedAt": "2021-08-26T16:40:22Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "That is, a CWT without COSE signature/encrypt/MAC, i.e. an UCCS\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-rats-uccs",
          "createdAt": "2021-05-21T10:15:25Z",
          "updatedAt": "2021-07-15T07:40:50Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes. I bit related to #115\r\n\r\nWith this change, I don't think EDHOC does maybe not need to support any \"raw\" COSE key. ",
          "createdAt": "2021-05-21T19:35:10Z",
          "updatedAt": "2021-05-21T19:35:10Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This change has now been done in the master branch, see a1b25ba9 and commits in its vicinity.\r\n\r\nCan we close the issue?",
          "createdAt": "2021-07-24T11:44:28Z",
          "updatedAt": "2021-07-24T11:44:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems like this can be closed",
          "createdAt": "2021-08-26T16:40:22Z",
          "updatedAt": "2021-08-26T16:40:22Z"
        }
      ]
    },
    {
      "number": 126,
      "id": "MDU6SXNzdWU4OTk2MDI1NDI=",
      "title": "IANA register for EAD types",
      "url": "https://github.com/lake-wg/edhoc/issues/126",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In PR #111 the type of external authorization data is defined in separate specification. For better interoperability EAD types should be registered in an IANA register. \r\n\r\nTemplate for new IANA subsection:\r\n\r\n~~~~~~~~~~~\r\n## EDHOC External Authorization Data {#iana-ead}\r\n\r\nIANA has created a new registry entitled \"EDHOC External Authorization Data\" \r\nunder the new heading \"EDHOC\". The registration procedure is \"Expert Review\". \r\nThe columns of the registry are Value, Description, and Reference, where Value is \r\nan integer and the other columns are text strings. \r\n~~~~~~~~~~~\r\n",
      "createdAt": "2021-05-24T12:09:54Z",
      "updatedAt": "2021-07-15T20:49:11Z",
      "closedAt": "2021-07-15T20:49:10Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes",
          "createdAt": "2021-06-02T10:36:09Z",
          "updatedAt": "2021-06-02T10:36:09Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Included in -08.",
          "createdAt": "2021-07-15T20:49:10Z",
          "updatedAt": "2021-07-15T20:49:10Z"
        }
      ]
    },
    {
      "number": 128,
      "id": "MDU6SXNzdWU5MDk1ODk4Njc=",
      "title": "Determining CRED_x from ID_CRED_x",
      "url": "https://github.com/lake-wg/edhoc/issues/128",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Current draft (-07) describe the purpose of ID_CRED_x as something that facilitate the retrieval of the public authentication key:\r\n\r\n    \"ID_CRED_R is intended to facilitate for the Initiator to retrieve\r\n      the Responder's public authentication key.\"\r\n\r\nCan another purpose be to determine the format of CRED_R (in case it is not transported)? x5t, c5u etc. reveal not only how to retrieve the public key but also the expected format of the credential (X.509, C509). \r\n\r\n-07 says this is part of the applicability statement, but at least in some cases information about this is actually transported.",
      "createdAt": "2021-06-02T14:52:50Z",
      "updatedAt": "2021-07-19T05:42:59Z",
      "closedAt": "2021-07-19T05:42:59Z",
      "comments": []
    },
    {
      "number": 132,
      "id": "MDU6SXNzdWU5NDIwMzA3MzY=",
      "title": "Recommended transport of EDHOC",
      "url": "https://github.com/lake-wg/edhoc/issues/132",
      "state": "CLOSED",
      "author": "malishav",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "PR #117 added a following statement recommending CoAP as a transport for EDHOC:\r\n\r\n> DELETED:  For example, if the key exchange is transported over CoAP, the CoAP Token can be used to correlate messages, see {{coap}}. \r\n\r\n> ADDED: The Initiator and the Responder need to have agreed on a transport to be used for EDHOC, see {{applicability}}. It is recommended to transport EDHOC in CoAP payloads, see {{coap}}.\r\n\r\nWhile doing the review of the PR, I commented:\r\n\r\n> How come it is \"recommended\" to transport EDHOC in CoAP? The fact that CoAP is the most frequent use case for transporting EDHOC does not make it a \"recommended\" transport IMO.",
      "createdAt": "2021-07-12T12:53:20Z",
      "updatedAt": "2021-07-19T05:31:03Z",
      "closedAt": "2021-07-19T05:31:03Z",
      "comments": []
    },
    {
      "number": 133,
      "id": "MDU6SXNzdWU5NDcyOTY3OTc=",
      "title": "\"Empty byte string\"",
      "url": "https://github.com/lake-wg/edhoc/issues/133",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "Where necessary, clarify distinction between empty byte string (0x) and CBOR empty byte string (0xf6)",
      "createdAt": "2021-07-19T06:03:52Z",
      "updatedAt": "2021-09-24T15:15:37Z",
      "closedAt": "2021-09-24T15:15:37Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "If anything need to be done, lets fix it asap and close this issue. ",
          "createdAt": "2021-09-11T10:11:27Z",
          "updatedAt": "2021-09-11T10:11:27Z"
        }
      ]
    },
    {
      "number": 134,
      "id": "MDU6SXNzdWU5NDk5NTYzODA=",
      "title": "Detailing EDHOC error in CoAP error",
      "url": "https://github.com/lake-wg/edhoc/issues/134",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "New section A.3.1 (see below) has this requirement:\r\n\r\n\"EDHOC error messages sent as CoAP responses MUST be error\r\n   responses\"\r\n\r\n1. Does all CoAP error responses support payload? \r\n2. Should it not be stated that they MUST contain the EDHOC message as payload? \r\n3. Should Content-Format be included in those messages?\r\n\r\n\r\n\"  When using EDHOC over CoAP for establishing an OSCORE Security\r\n   Context, EDHOC error messages sent as CoAP responses MUST be error\r\n   responses, i.e., they MUST specify a CoAP error response code.  In\r\n   particular, it is RECOMMENDED that such error responses have response\r\n   code either 4.00 (Bad Request) in case of client error (e.g., due to\r\n   a malformed EDHOC message), or 5.00 (Internal Server Error) in case\r\n   of server error (e.g., due to failure in deriving EDHOC key\r\n   material).\"\r\n\r\n\r\n\r\n",
      "createdAt": "2021-07-21T17:48:18Z",
      "updatedAt": "2021-08-26T16:39:38Z",
      "closedAt": "2021-08-26T16:39:38Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics Maybe you have a proposal?",
          "createdAt": "2021-07-21T18:00:09Z",
          "updatedAt": "2021-07-21T18:00:09Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "> Does all CoAP error responses support payload?\r\n\r\nYes, see https://datatracker.ietf.org/doc/html/rfc7252/#section-5.9.2  and https://datatracker.ietf.org/doc/html/rfc7252/#section-5.9.3 . Then, if content-format is not specified, the possible payload is a diagnostic payload encoded in UTF-8 --- see https://datatracker.ietf.org/doc/html/rfc7252/#section-5.5.2 --- which leads to the following point.\r\n\r\n> Should it not be stated that they MUST contain the EDHOC message as payload?\r\n\r\nYes, for consistency with the text earlier in Appendix A.3, e.g., \"EDHOC message_2 or the EDHOC error message is sent from the server to the client in the payload of ...\".\r\n\r\n> Should Content-Format be included in those messages?\r\n\r\nActually yes, as an explicit hint to the client that the payload is not a generic diagnostic payload encoded in UTF-8, or any other payload originated by an error source different than EDHOC processing.\r\n\r\nIf this is phrased using \"MUST\", then the second from last paragraph in https://datatracker.ietf.org/doc/html/draft-ietf-core-oscore-edhoc-01#section-3.3  can be shortened, since that document would inherit also this behavior as already defined in the EDHOC document.",
          "createdAt": "2021-07-22T13:24:15Z",
          "updatedAt": "2021-07-22T13:24:15Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems to me that this can be closed now",
          "createdAt": "2021-08-21T15:19:37Z",
          "updatedAt": "2021-08-21T15:19:37Z"
        }
      ]
    },
    {
      "number": 138,
      "id": "MDU6SXNzdWU5NTYxMzg3MTQ=",
      "title": "Nit on draft: Forward Secrecy. Lose the \"Perfect\" claim.",
      "url": "https://github.com/lake-wg/edhoc/issues/138",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Comment by Robert Moskowitz",
      "createdAt": "2021-07-29T19:22:09Z",
      "updatedAt": "2021-08-05T11:36:33Z",
      "closedAt": "2021-08-05T11:36:33Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the forward secrecy could use some more text. Right know we are using the definition according to the IETF security dictionary, but as the security dictionary states, a lot of different definitions is used. The draft that the KeyUpdate gives much better security than using a single key, but that the KeyUpdate method gives a lower security level than frequently running ephemeral diffie-hellman",
          "createdAt": "2021-07-29T19:36:00Z",
          "updatedAt": "2021-07-29T19:36:00Z"
        }
      ]
    },
    {
      "number": 139,
      "id": "MDU6SXNzdWU5NTYxNDI4Njg=",
      "title": "Maybe align with https://datatracker.ietf.org/doc/draft-harkins-cfrg-dnhpke/",
      "url": "https://github.com/lake-wg/edhoc/issues/139",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "Close?"
      ],
      "body": "The EDHOC compact representation was formalized after a comment in CFRG on HPKE. Now Dan Harkins has submitted a new draft. We should maybe consider aligning with this draft. Note that the draft is still an individual draft and will likely not be published before EDHOC. ",
      "createdAt": "2021-07-29T19:28:21Z",
      "updatedAt": "2022-01-21T09:25:03Z",
      "closedAt": "2022-01-21T09:25:03Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I sent a mail to CFRG about this. Let's see if there is any discussion and/or suggestions.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/cfrg/Mr8fe3C5idnbFnfi01bdve4sF0o/",
          "createdAt": "2021-11-04T18:04:58Z",
          "updatedAt": "2021-11-04T18:05:07Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "There has not been any response to this and the CFRG draft might be dead. Closing this for now. Can reopen if there are any future comments.",
          "createdAt": "2022-01-21T09:25:03Z",
          "updatedAt": "2022-01-21T09:25:03Z"
        }
      ]
    },
    {
      "number": 140,
      "id": "MDU6SXNzdWU5NTYxNDM5NTE=",
      "title": "IETF 111 comments on EAD",
      "url": "https://github.com/lake-wg/edhoc/issues/140",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Christian Ams\u00fcss\r\nquick question on EAD: it now says \"consideration [...] it does not violate the security properties of EDHOC\". how would it do that?\r\n21:24:13\r\n(not directly for mic because probably excessive)\r\n21:24:29\r\n(can also put that into a \"please elaborate\" issue if that's sutiable)\r\n\r\n\r\n\r\nRobert Moskowitz\r\nChange sec 3.8 title to: External Authorization Data (EAD)\r\n21:27:16\r\nProbably no need to add EAD to definitions section.",
      "createdAt": "2021-07-29T19:30:01Z",
      "updatedAt": "2021-08-05T06:56:54Z",
      "closedAt": "2021-08-05T06:56:54Z",
      "comments": []
    },
    {
      "number": 141,
      "id": "MDU6SXNzdWU5NTYxNDUxMTI=",
      "title": "How can EAD violate security properties?",
      "url": "https://github.com/lake-wg/edhoc/issues/141",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "Quoting main branch:\r\n\r\n> The EAD fields [...] special considerations need to be made such that a) it does not violate security, privacy etc. requirements of the service which uses this data, and b) it does not violate the security properties of EDHOC.\r\n\r\nI see how an application developer would take a into account, but I think that for b, it'd help to give concrete pointers on what not to do. (Right now, other than \"putting anything in there that's picked out of the EDHOC engine\", I don't have any clue as to what could endanger EDHOC here).",
      "createdAt": "2021-07-29T19:31:44Z",
      "updatedAt": "2022-05-23T12:57:11Z",
      "closedAt": "2021-09-27T09:39:47Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This needs to be rephrased. The security/privacy requirements of the security application using EAD may be other than EDHOC. The text should make clear that: \r\n1. the content of EAD may impact the security properties provided by EDHOC\r\n2. the security properties of EDHOC carrying specific EAD types need to be matched against the requirements of the security application",
          "createdAt": "2021-08-10T07:21:39Z",
          "updatedAt": "2021-08-10T07:21:39Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this now or is more text needed?",
          "createdAt": "2021-08-26T16:38:11Z",
          "updatedAt": "2021-08-26T16:38:11Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "I'm sorry to have missed the questions around here; the [changes](https://github.com/lake-wg/edhoc/commit/d36118c413ffb410e2badcf4556670a398a31530) clarify how it is used but not what is good or bad content for EAD.\r\n\r\nNot proposing that for actual addition in this form yet, but just so that I get the meaning of the section, would this be correct?\r\n\r\n> The EAD might impact the security properties provided by EDHOC in two ways: a) it might reveal data about the peers that EDHOC does not reveal, and b) it might build on internals of EDHOC (e.g. any secret keys). In case a), the security analysis is typically \"just\" about whether it is acceptable to reveal said information, and no worse than if the information were passed out-of-band from EDHOC's point of view. In case b), thorough cryptographic analysis is necessary, for any misuse of the EDHOC internals might render properties of the EDHOC exchange void.",
          "createdAt": "2022-03-29T07:13:39Z",
          "updatedAt": "2022-03-29T07:13:39Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "With the \"make available ... available to the application\" terminology of -14, maybe there is a good criterion now: An EAD construction will need to take care of not violating security properties if it uses internals of EDHOC that are *not* made available to the application?",
          "createdAt": "2022-05-23T12:57:11Z",
          "updatedAt": "2022-05-23T12:57:11Z"
        }
      ]
    },
    {
      "number": 142,
      "id": "MDU6SXNzdWU5NTYxNjE5Mjk=",
      "title": "is 101 pages too many words?",
      "url": "https://github.com/lake-wg/edhoc/issues/142",
      "state": "CLOSED",
      "author": "sftcd",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [],
      "body": "At some point we should think about the length of the spec.",
      "createdAt": "2021-07-29T19:57:48Z",
      "updatedAt": "2022-10-11T09:49:14Z",
      "closedAt": "2022-10-11T09:49:14Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "As was mentioned in IETF 111 jabber, we have thought about moving out the test vectors.  That would remove 30+ pages in -08. Either to a file in the Github or to another draft. ",
          "createdAt": "2021-07-30T00:34:48Z",
          "updatedAt": "2021-07-30T00:34:48Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think breaking out the test vectors into a separate informational draft like RFC 8448 is a good idea.",
          "createdAt": "2021-07-30T11:32:51Z",
          "updatedAt": "2021-07-30T11:32:51Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "COLLABORATOR",
          "body": "\n\nOn 30/07/2021 12:33, John Mattsson wrote:\n> I think breaking out the test vectors into a separate informational draft like RFC 8448 is a good idea.\n> \n\nI'd say that's probably correct, but maybe best to wait\nuntil we think the test vectors are baked before doing\nthe split? Just to avoid two drafts that get out of whack.\n\nS.\n",
          "createdAt": "2021-07-30T11:49:47Z",
          "updatedAt": "2021-07-30T11:49:47Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "sftcd ***@***.***> wrote:\n    > On 30/07/2021 12:33, John Mattsson wrote:\n    >> I think breaking out the test vectors into a separate informational draft like RFC 8448 is a good idea.\n    >>\n\n    > I'd say that's probably correct, but maybe best to wait\n    > until we think the test vectors are baked before doing\n    > the split? Just to avoid two drafts that get out of whack.\n\n+0.5.\n\nTwo drafts in the same github would solve that problem.\n\n--\n]               Never tell me the odds!                 | ipv6 mesh networks [\n]   Michael Richardson, Sandelman Software Works        |    IoT architect   [\n]     ***@***.***  http://www.sandelman.ca/        |   ruby on rails    [\n\n",
          "createdAt": "2021-07-31T00:01:07Z",
          "updatedAt": "2021-07-31T00:01:07Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "At a later stage I think we can go through the document and try to cut out some duplicate information.",
          "createdAt": "2021-08-05T07:00:39Z",
          "updatedAt": "2021-08-05T07:00:39Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Test vectors are now moved from Appendix D to a separate draft:\r\n\r\nhttps://datatracker.ietf.org/doc/html/draft-selander-lake-traces",
          "createdAt": "2021-09-10T14:41:23Z",
          "updatedAt": "2021-09-10T14:41:23Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I assume we upload draft-selander-lake-traces-00.md to GitHub next to draft-ietf-lake-edhoc.md as suggested by mcr",
          "createdAt": "2021-09-11T10:02:19Z",
          "updatedAt": "2021-09-11T10:02:19Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "@sftcd Does this close this issue? There might be some trimming possible, but a lot of requests from people implementing have been more example and guidance related to COSE, CBOR and CDDL.\r\n\r\nWithout change log the document is 70 pages.",
          "createdAt": "2021-09-11T10:10:05Z",
          "updatedAt": "2021-09-11T10:10:05Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Some of the text is explanation of COSE, e.g.\r\n\r\n```\r\n   o  by a hash value;\r\n\r\n      *  x5t : ID_CRED_x, for x = U or V,\r\n\r\n   o  by a URL;\r\n\r\n      *  x5u : ID_CRED_x, for x = U or V,\r\n\r\n   o  by a certificate chain;\r\n\r\n      *  x5chain : ID_CRED_x, for x = U or V,\r\n\r\n   o  or by a bag of certificates.\r\n\r\n      *  x5bag : ID_CRED_x, for x = U or V.\r\n\r\n```\r\n\r\n\r\n```\r\n      COSE constructs the input to the AEAD [RFC5116] as follows:\r\n\r\n      -  Key K = EDHOC-KDF( PRK_3e2m, TH_3, \"K_3ae\", h'', length )\r\n\r\n      -  Nonce N = EDHOC-KDF( PRK_3e2m, TH_3, \"IV_3ae\", h'', length )\r\n\r\n      -  Plaintext P = ( ID_CRED_I / bstr / int, Signature_or_MAC_3, ?\r\n         EAD_3 )\r\n\r\n      -  Associated data A = [ \"Encrypt0\", h'', TH_3 ]\r\n\r\n```\r\n\r\nBut the addition and the integration in the main body of the document has been requested by implementors.",
          "createdAt": "2021-09-12T08:54:55Z",
          "updatedAt": "2021-09-12T08:54:55Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Some of the IANA section is duplicating earlier chapters. Might be possible to shave 1-2 pages there.",
          "createdAt": "2021-09-12T08:55:57Z",
          "updatedAt": "2021-09-12T08:55:57Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe we keep this open as a reminder to try to reduce any duplicaiton at a later point in time",
          "createdAt": "2021-09-12T20:50:53Z",
          "updatedAt": "2021-09-12T20:50:53Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as agreed in the interim.",
          "createdAt": "2022-10-11T09:49:14Z",
          "updatedAt": "2022-10-11T09:49:14Z"
        }
      ]
    },
    {
      "number": 144,
      "id": "MDU6SXNzdWU5NTkwMzM5OTc=",
      "title": "CDDL section is outdated",
      "url": "https://github.com/lake-wg/edhoc/issues/144",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-03T11:48:37Z",
      "updatedAt": "2021-08-04T15:25:52Z",
      "closedAt": "2021-08-04T15:25:52Z",
      "comments": []
    },
    {
      "number": 145,
      "id": "MDU6SXNzdWU5NTk5NzA4MDk=",
      "title": "Describe in a sentence or two why psk is not supported",
      "url": "https://github.com/lake-wg/edhoc/issues/145",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We have gotten questions from other SDOs why PSK is not supported. There is an unfortunate myth that PSK is needed for small messages. When told that public keys with static DH gives the same size and much easier key management they agree that this was a good choice.",
      "createdAt": "2021-08-04T06:55:27Z",
      "updatedAt": "2021-08-04T07:11:01Z",
      "closedAt": "2021-08-04T07:11:01Z",
      "comments": []
    },
    {
      "number": 146,
      "id": "MDU6SXNzdWU5NTk5NzE2NzI=",
      "title": "Describe the nonce use in KeyUpdate with a few words",
      "url": "https://github.com/lake-wg/edhoc/issues/146",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-04T06:56:28Z",
      "updatedAt": "2021-08-05T07:13:17Z",
      "closedAt": "2021-08-05T07:13:17Z",
      "comments": []
    },
    {
      "number": 147,
      "id": "MDU6SXNzdWU5NjA1ODU4NDg=",
      "title": "CRED_R may not be a bstr",
      "url": "https://github.com/lake-wg/edhoc/issues/147",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "CRED_R - bstr containing the credential\r\n\r\nThis is not true for C509 which is an CBOR array",
      "createdAt": "2021-08-04T14:58:00Z",
      "updatedAt": "2021-08-05T07:14:17Z",
      "closedAt": "2021-08-05T07:14:17Z",
      "comments": []
    },
    {
      "number": 149,
      "id": "MDU6SXNzdWU5NjE1MTU2NjY=",
      "title": "EAD is underspecified",
      "url": "https://github.com/lake-wg/edhoc/issues/149",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "```\r\nead = (\r\n  type : int,\r\n  1* ext_authz_data : any,\r\n)\r\n```\r\n\r\nWhat is type? Is that the the external security application or the content, i.e., the sequence of ext_authz_data?\r\n\r\nIf type is the external security application, is the same type supposed to be used in message_1, 2, 3, and 4?\r\n\r\nIf type referes to the ext_authz_data, would it be better with:\r\n\r\n`\r\nead = + ( type : int, ext_authz_data : any )\r\n`",
      "createdAt": "2021-08-05T07:08:40Z",
      "updatedAt": "2022-03-15T14:50:43Z",
      "closedAt": "2022-03-15T14:50:43Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The intent with type is to identify the ext_authz_data object to allow an external security application to define processing with respect to well defined input and output. While defining type per message and per external security application would work, it would not enable reuse of already defined data structures; e.g. would not allow the use of a certain constrained voucher type in more than one message or external security application. \r\n\r\nA modular approach, as in ead = + ... above, does makes sense. For example, depending on if certificate enrollment is performed, a token may be passed with or without a csr in the same ead of one message. The former case can be realized with multiple types of ext_authz_data in one message.",
          "createdAt": "2021-08-09T20:02:47Z",
          "updatedAt": "2021-08-09T20:02:47Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Perhaps better use more intuitive notation:\r\n\r\nead = 1* ( type : int, ext_authz_data : any )",
          "createdAt": "2021-08-12T13:26:09Z",
          "updatedAt": "2021-08-12T13:26:09Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This looks good to me. Now EAD is well-specified. I think we can close this unless there are any further comments.\r\n\r\nQuestion if we should have two CDDL indicators. Probably not\r\n\r\nCurrently the CDDL is:\r\n\r\n```\r\n? EAD_1 : ead\r\nead = 1* ( type : int, ext_authz_data : any )\r\n```\r\n\r\nThis can be written as\r\n\r\n```\r\nEAD_1 : ead\r\nead = * ( type : int, ext_authz_data : any )\r\n```\r\n\r\nor\r\n\r\n```\r\n* EAD_1 : ead\r\nead = ( type : int, ext_authz_data : any )\r\n\r\n```\r\n\r\n\r\n\r\n",
          "createdAt": "2021-08-17T13:45:12Z",
          "updatedAt": "2021-08-17T13:45:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "When I read these I make slightly different interpretations:\r\n\r\nThe current says EAD_1 is optional, i.e. need not be present.\r\nThe second says EAD_1 is a fixed field in the protocol but it may be empty.\r\nThe third says there may be zero or more EAD_1 fields.\r\n\r\nThe first is mostly inline with my intuition of EAD. I'm fine with the second. I'm not in favour of the third.\r\n\r\n",
          "createdAt": "2021-08-17T14:02:37Z",
          "updatedAt": "2021-08-17T14:02:37Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Lets keep it as is.",
          "createdAt": "2021-08-21T15:18:50Z",
          "updatedAt": "2021-08-21T15:18:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #240 updates the EAD text \r\n\r\n* Section 3.8 is shortened\r\n* Updates on EAD processing in section 5\r\n* New Appendix E with more details and clarifications\r\n\r\nPlease review",
          "createdAt": "2022-02-18T10:14:28Z",
          "updatedAt": "2022-02-18T10:14:28Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "#240 is now merged.",
          "createdAt": "2022-02-23T13:23:29Z",
          "updatedAt": "2022-02-23T13:23:29Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "draft-selander-ace-ake-authz now includes IANA registration of EAD and updated text.\r\n\r\nThe commit is here:\r\nhttps://github.com/EricssonResearch/ace-ake-authz/commit/c0eb180\r\n\r\nEditor's copy is here (IANA is section 7.1): \r\nhttps://ericssonresearch.github.io/ace-ake-authz/draft-selander-ace-ake-authz.html\r\n\r\n@emanjon @malishav Please review",
          "createdAt": "2022-02-24T12:21:12Z",
          "updatedAt": "2022-02-24T12:21:12Z"
        }
      ]
    },
    {
      "number": 151,
      "id": "MDU6SXNzdWU5ODM0NjQxMzM=",
      "title": "Simpler and shorter SUITES_I",
      "url": "https://github.com/lake-wg/edhoc/issues/151",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "The current definition of SUITES_I is that the Initiator can chose any truncation of the list of supported cipher suites as long as the selected cipher suite is included. This works and allows the Initiator to give the Responder information about the full list. This is however a bit complex and has led to misunderstandings of the test vectors where several people thought the test vectors were wrong.\r\n\r\ni.e. the following are all valid\r\n\r\n```\r\nSUITES_I = [6, 5, 6]\r\nSUITES_I = [6, 5, 6, 7]\r\nSUITES_I = [6, 5, 6, 7, 8]\r\n```\r\n\r\nI think we should simplify SUITES_I by mandating that the last suite in the list is the selected. This makes SUITES_I much easier to understand and lowers message size when an array is used. Giving the Responder info is not so important.\r\n\r\n`SUITES_I = [5, 6] `\r\n\r\nCDDL\r\n\r\n`SUITES_I : [ 2* suite ] / suite`",
      "createdAt": "2021-08-31T05:39:55Z",
      "updatedAt": "2021-09-09T07:39:41Z",
      "closedAt": "2021-09-09T07:39:41Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe a recommendation that SUITES_R SHOULD contain all cipher suites that R supports.",
          "createdAt": "2021-08-31T09:01:06Z",
          "updatedAt": "2021-08-31T09:01:06Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Currently\r\nSUITES_R : [ supported : 2* suite ] / suite\r\n\r\nWe may keep that, or remove \"supported\"\r\nSUITES_R : [ 2* suite ] / suite\r\n\r\nAlternatively, we may define\r\nSUITES_I : [ supported : 2* suite ] / suite\r\n\r\nAny preference?",
          "createdAt": "2021-08-31T09:49:23Z",
          "updatedAt": "2021-08-31T09:49:23Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "They should be the same:\r\n\r\n`suites = [ 2* suite ] / suite`\r\n\r\nor \r\n\r\n`suites = [ supported : 2* suite ] / suite`\r\n\r\n\r\nAnd then\r\n\r\n```\r\nSUITES_I : suites,\r\nSUITES_R : suites,\r\n```",
          "createdAt": "2021-08-31T11:03:48Z",
          "updatedAt": "2021-08-31T11:03:48Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This needs to be defined as a CDDL type.\r\n`\r\nsuites = [ 2* suite ] / suite`\r\n\r\nSee #155 \r\n",
          "createdAt": "2021-09-01T15:19:43Z",
          "updatedAt": "2021-09-01T15:19:43Z"
        }
      ]
    },
    {
      "number": 153,
      "id": "MDU6SXNzdWU5ODM5NjQ4NzQ=",
      "title": "There are two different mac_length ",
      "url": "https://github.com/lake-wg/edhoc/issues/153",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "Current specification could give the impression that there is a single mac_length. But the mac length in message_2 and message_3 may be different.",
      "createdAt": "2021-08-31T15:00:31Z",
      "updatedAt": "2021-09-09T07:39:41Z",
      "closedAt": "2021-09-09T07:39:41Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "One fix is to update to\r\n\r\n```\r\nCompute MAC_2 = EDHOC-KDF( PRK_3e2m, TH_2, \"MAC_2\", ( ID_CRED_R,\r\n      CRED_R, ? EAD_2 ), mac_length_2 )\r\n\r\nCompute MAC_3 = EDHOC-KDF( PRK_4x3m, TH_3, \"MAC_3\", ( ID_CRED_I,\r\n      CRED_I, ? EAD_3 ), mac_length_3 )\r\n```",
          "createdAt": "2021-09-03T07:04:16Z",
          "updatedAt": "2021-09-03T07:04:16Z"
        }
      ]
    },
    {
      "number": 154,
      "id": "MDU6SXNzdWU5ODUxMDkwMTQ=",
      "title": "Definition of info in the key derivation",
      "url": "https://github.com/lake-wg/edhoc/issues/154",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "The new definition of info in th ecurrent specification is.\r\n\r\n```\r\n   OKM = EDHOC-KDF( PRK, transcript_hash, label, context, length )\r\n       = Expand( PRK, info, length )\r\n\r\nwhere info is the CBOR encoding of\r\n\r\ninfo = [\r\n   edhoc_aead_id : int / tstr,\r\n   transcript_hash : bstr,\r\n   label : tstr,\r\n   * context : any,\r\n   length : uint,\r\n]\r\n```\r\n\r\nI noticed two problems with this while implementing.\r\n1. To create the array you need to parse context to see how many items it contains. \r\n2. Unless context is validated, length is not strictly defined (an attacker could create collisions)\r\n\r\nI suggest that info is changed to:\r\n\r\n```\r\ninfo = (\r\n   edhoc_aead_id : int / tstr,\r\n   transcript_hash : bstr,\r\n   label : tstr,\r\n   length : uint,\r\n   * context : any,\r\n)\r\n\r\n```\r\n\r\n",
      "createdAt": "2021-09-01T12:47:05Z",
      "updatedAt": "2021-09-09T07:39:41Z",
      "closedAt": "2021-09-09T07:39:41Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "In the exporter, the application using EDHOC could input a context (a encoded CBOR sequence) that is not valid CBOR. That is not a big problem, but might lead to security issues in the future, if is assumed that info is valid CBOR. Chri.stian prefered sequence to array. I don't think bstr wrapping the sequence has the same problems as array wrapping the sequence.\r\n\r\nArray wrapping the info sequence seems like an unesasary step. I suggest.\r\n\r\n```\r\ninfo = (\r\n   edhoc_aead_id : int / tstr,\r\n   transcript_hash : bstr,\r\n   label : tstr,\r\n   context : bsrt,\r\n   length : uint,\r\n)\r\n```\r\n\r\n",
          "createdAt": "2021-09-03T07:09:19Z",
          "updatedAt": "2021-09-03T07:09:19Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "We have also gotten comments disliking the use of any",
          "createdAt": "2021-09-03T09:42:39Z",
          "updatedAt": "2021-09-03T09:42:39Z"
        }
      ]
    },
    {
      "number": 155,
      "id": "MDU6SXNzdWU5ODUyODI2MDU=",
      "title": "ERR_TYPE for ERR_CODE = 2 is a name instead of type.",
      "url": "https://github.com/lake-wg/edhoc/issues/155",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "SUITES_R is a name. The type needs to be defined and the table changed. This can be done in PR #152 \r\n\r\n`suites = [ 2* suite ] / suite,`\r\n\r\n```\r\n   +----------+---------------+----------------------------------------+\r\n   | ERR_CODE | ERR_INFO Type | Description                            |\r\n   +==========+===============+========================================+\r\n   |        0 | any           | Success                                |\r\n   +----------+---------------+----------------------------------------+\r\n   |        1 | tstr          | Unspecified                            |\r\n   +----------+---------------+----------------------------------------+\r\n   |        2 | suites        | Wrong selected cipher suite            |\r\n   +----------+---------------+----------------------------------------+\r\n```",
      "createdAt": "2021-09-01T15:17:41Z",
      "updatedAt": "2021-09-09T07:39:41Z",
      "closedAt": "2021-09-09T07:39:41Z",
      "comments": []
    },
    {
      "number": 156,
      "id": "MDU6SXNzdWU5ODY1ODE5NTQ=",
      "title": "CRED_x for 'kid' is not specified",
      "url": "https://github.com/lake-wg/edhoc/issues/156",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "-08 contained a definition of CRED_x including an example when kid is used. -09 removed that example and replaces it with a RPK by value example.\r\n\r\nNow it seems like the most important use case `ID_CRED_x = { 4 : key_id_x }` is not well specified. This is the use case that leads to message_2 being 45 bytes. ",
      "createdAt": "2021-09-02T11:28:01Z",
      "updatedAt": "2021-09-09T07:39:41Z",
      "closedAt": "2021-09-09T07:39:41Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "In addition the TOFU use case should likely also have a kid. Otherwise the UCCS has to be sent by value every time.\r\n\r\n```\r\n   {                                              /UCCS/\r\n     2 : \"42-50-31-FF-EF-37-32-39\",               /sub/\r\n     8 : {                                        /cnf/\r\n       1 : {                                      /COSE_Key/\r\n         1 : 1,                                   /kty/\r\n        -1 : 4,                                   /crv/\r\n        -2 : h'b1a3e89460e88d3a8d54211dc95f0b90   /x/\r\n               3ff205eb71912d6db8f4af980d2db83a'\r\n       }\r\n     }\r\n   }\r\n```\r\n",
          "createdAt": "2021-09-02T11:32:27Z",
          "updatedAt": "2021-09-02T11:33:21Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This is solved by just adding a 'kid' in the COSE_Key map",
          "createdAt": "2021-09-03T06:11:20Z",
          "updatedAt": "2021-09-03T06:11:20Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The document should say someting more about COSE_Key. If ID_CRED_x = { 4 : key_id_x } identifies a raw COSE_Key, is that an error or is CRED_x then the COSE_Key wrapped in a UCCS without any parameters like sub?\r\n\r\n```\r\n   COSE_Key is omitted from the list above because of limitations to\r\n   represent the identity (see Section 3.5.3) and because it can easily\r\n   be embedded in a UCCS.\r\n```",
          "createdAt": "2021-09-03T07:02:51Z",
          "updatedAt": "2021-09-03T07:02:51Z"
        }
      ]
    },
    {
      "number": 157,
      "id": "MDU6SXNzdWU5ODY2MTg1ODE=",
      "title": "The CWT Confirmation Method 'kid' should also be updated to bstr / int",
      "url": "https://github.com/lake-wg/edhoc/issues/157",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "https://www.iana.org/assignments/cwt/cwt.xhtml",
      "createdAt": "2021-09-02T12:01:01Z",
      "updatedAt": "2021-09-09T07:39:42Z",
      "closedAt": "2021-09-09T07:39:42Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The specification updating 'kid' to bstr / int should likely formally update draft-ietf-cose-rfc8152bis-struct and RFC8747\r\n\r\n\r\n\r\n",
          "createdAt": "2021-09-03T06:58:43Z",
          "updatedAt": "2021-09-03T06:58:43Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "In this mail [1] it is considered an option to make the update without formally updating draft-ietf-cose-rfc8152bis-struct. The same applies to RFC 8747.\r\n\r\n\r\n[1] https://mailarchive.ietf.org/arch/msg/lake/zLWEBG1fV6wI1WT6gaI3TpiYjS4/\r\n",
          "createdAt": "2021-09-03T10:29:16Z",
          "updatedAt": "2021-09-03T10:29:41Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "RFC 8747 defines 'kid' to be of type value \"binary string\" which is not the name of a CBOR type. Should presumably be \"byte string\", i.e. CBOR major type 2.",
          "createdAt": "2021-09-03T14:46:36Z",
          "updatedAt": "2021-09-03T14:46:36Z"
        }
      ]
    },
    {
      "number": 158,
      "id": "MDU6SXNzdWU5ODY5MzU0ODQ=",
      "title": "Registration of a CoRE Resource Type",
      "url": "https://github.com/lake-wg/edhoc/issues/158",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A new Resource Type (rt=) Link Target attribute like \"core.edhoc\" may be registered in the \"Resource Type (rt=) Link Target Attribute Values\" subregistry under the \"Constrained RESTful Environments (CoRE) Parameters\" registry.",
      "createdAt": "2021-09-02T16:24:35Z",
      "updatedAt": "2021-09-09T13:26:29Z",
      "closedAt": "2021-09-09T13:26:29Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "That seems like a good idea.",
          "createdAt": "2021-09-03T06:55:56Z",
          "updatedAt": "2021-09-03T06:55:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Marco, do you want to provide a PR? Then we could merge that for -11",
          "createdAt": "2021-09-09T07:38:34Z",
          "updatedAt": "2021-09-09T07:38:34Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Done, see https://github.com/lake-wg/edhoc/pull/164\r\n\r\nNote that the first commit is just about removing trailing whitespace to avoid compiling errors.\r\n\r\nThe content you need is in the commit https://github.com/lake-wg/edhoc/pull/164/commits/3b0f225aa1f35182126bb96abfd2e8be8c187e9f",
          "createdAt": "2021-09-09T10:33:43Z",
          "updatedAt": "2021-09-09T10:33:43Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good. I tried to align the whole IANA section with RFC 8126. Then I merged.",
          "createdAt": "2021-09-09T13:26:29Z",
          "updatedAt": "2021-09-09T13:26:29Z"
        }
      ]
    },
    {
      "number": 159,
      "id": "MDU6SXNzdWU5ODc0MzI5MzY=",
      "title": "Should CWT and UCCS have different COSE header parameters?",
      "url": "https://github.com/lake-wg/edhoc/issues/159",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I don't think this has been discussed (but I might be wrong).\r\n\r\nThe draft currently specifies:\r\n\r\n```\r\n   +-----------+-------+----------------+------------------------------+\r\n   | Name      | Label | Value Type     | Description                  |\r\n   +===========+=======+================+==============================+\r\n   | cwt       |  TBD1 | COSE_Messages  | A CBOR Web Token (CWT) or an |\r\n   |           |       | / map          | Unprotected CWT Claims Set   |\r\n   +-----------+-------+----------------+------------------------------+\r\n```\r\n\r\nAlternative would be to define two different 'cwt' and 'uccs' COSE header parameters",
      "createdAt": "2021-09-03T06:10:18Z",
      "updatedAt": "2021-09-03T16:08:27Z",
      "closedAt": "2021-09-03T16:08:27Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "While there are similar in one way, they have very different security properties and use cases. I think a have a slight preference to standardize two parameters. ",
          "createdAt": "2021-09-03T06:55:08Z",
          "updatedAt": "2021-09-03T06:55:08Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "I also tend to prefer two distinct parameters. That would also simplify the initial parsing of credentials, since a dedicated COSE header parameter (rather than the type of the CBOR item) tells you the exact credential format.\r\n\r\nThis applies also beyond EDHOC, in case these formats are generally used to upload/distribute public keys, e.g. in the ACE Group Manager for Group OSCORE [1]. In that particular case, the same exact format has to be used by all the members of a same group for their public keys. Thus, having two distinct parameters \"cwt\" and \"uccs\" prevents possible ambiguity/misunderstanding to handle if there is only one parameter meaning \"cwt or uccs\".\r\n\r\n[1] https://datatracker.ietf.org/doc/draft-ietf-ace-key-groupcomm-oscore/",
          "createdAt": "2021-09-03T09:00:08Z",
          "updatedAt": "2021-09-03T09:00:08Z"
        }
      ]
    },
    {
      "number": 161,
      "id": "MDU6SXNzdWU5ODgyNDI0OTA=",
      "title": "Make it clear that ID_CRED_x are COSE header maps",
      "url": "https://github.com/lake-wg/edhoc/issues/161",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "ID_CRED_x are COSE header maps and everything with them follows from COSE. The only thing EDHOC adds is to define the format of CRED_x.\r\n\r\nThis is not clear in the current version of the draft. The term \"COSE header map\" has disappeared and it is not clear that the quite long section on ID_CRED_x are just examples of COSE and not new specification.\r\n\r\nCDDL for ID_CRED_x should be added. They are of type header_map defined in the COSE RFC.\r\n",
      "createdAt": "2021-09-04T08:24:45Z",
      "updatedAt": "2021-11-06T11:21:09Z",
      "closedAt": "2021-11-06T11:21:09Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "We should probably add CDDL for CRED_R as well. CRED_R is in general any as it needs to support any future header parameters COSE defined for header_map.\r\n\r\nFor the currently defined credentials\r\n\r\n```\r\nCRED_x = bstr / map / COSE_Messages / C509Certificate\r\n```\r\n\r\n```\r\nx509      bstr\r\nuccs      map\r\ncwt        COSE_Messages\r\nc509     C509Certificate\r\n```\r\n\r\nThe draft need to say something about tags. Is both tagged and untagged allowed in CRED_X?\r\n\r\nCOSE_Messages = COSE_Untagged_Message / COSE_Tagged_Message\r\n\r\n",
          "createdAt": "2021-09-04T08:47:12Z",
          "updatedAt": "2021-09-04T08:47:12Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The mapping from a a COSE header map to a credential or set of credentials is handled by COSE. Note that a COSE header map can contain several header parameters\r\n\r\n```\r\n{ x5u, x5t }\r\n{ kid, kid_context }\r\n{ crit [ c5u ] }\r\n{ kid, c5t }\r\n```\r\n\r\nEDHOC needs to provide a mapping from the credential or set of credentials (e.g. chain, bag, etc. ) to CRED_R. The mapping needs to be equal on both sides. We would like EDHOC to as automatically as posibly support new header parameters and credential types.\r\n\r\nCurrently the COSE header parameters can identify the following credentials.\r\n\r\nBy reference\r\n\r\n```\r\nCOSE_Key\r\nCOSE_Key in an UCCS\r\nCOSE_Key in an CWT\r\nx509 single certificate\r\nx509 chain or bag\r\nc509 single certificate\r\nc509 chain or bag\r\n```\r\n\r\nBy value\r\n\r\n```\r\nUCCS\r\nCWT\r\nx509 single certificate\r\nx509 chain or bag\r\nc509 single certificate\r\nc509 chain or bag\r\n```\r\n\r\nMost of the mapping to CRED_R is currently soft or not existing. It need to be specified exactly. If the parties to different mapping EDHOC will fail.\r\n\r\n- For x509 the solution is to wrap the end-entity DER certificate in a bstr.\r\n- For c509 the solution is to take the end-entity C509Certificate structure\r\n- CWT and UCCS can be tagged and untagged. This might be fine for \"by value\" but might create problems for \"by reference\" which is the main focus of EDHOC. Should EDHOC leave this to the application? Or do we need to handle situation where one of the parties have stored a CWT with an added tag.....\r\n- \"Raw\" COSE_Keys (not inside a CWT or UCSS). Are they supported or not or is UCCS only the way to go? Most if not all COSE implementations have support for raw COSE keys.\r\n- Raw COSE_Keys and UCCS where not really designed to be MACed. Can we expect that one of the parties to add things to the CBOR map?\r\n\r\n```\r\n       {                                      /COSE_Key/\r\n         1 : 1,                                   /kty/\r\n         2 : 0,                                   /kid/\r\n        -1 : 4,                                   /crv/\r\n        -2 : h'b1a3e89460e88d3a8d54211dc95f0b90   /x/\r\n               3ff205eb71912d6db8f4af980d2db83a',\r\n        -65537 : \"Note to self: This is the key to my connected toaster\"\r\n       }\r\n\r\n```\r\n\r\n\r\n",
          "createdAt": "2021-09-08T06:26:00Z",
          "updatedAt": "2021-09-08T06:30:48Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "While we have working interop for the many of the use cases. I think it is clear that ID_CRED_x and CRED_x need to be specified a bit more in detail.\r\n\r\nFor ID_CRED_x I think EDHOC should rely on COSE as much as possible. Formatting of CRED_x is outside of COSE and needs to be specified in EDHOC.\r\n\r\nMy suggestions: \r\n\r\n- I think ID_CRED_x and CRED_x should be defined with CDDL\r\n- I think EDHOC should specify that ID_CRED_x is a COSE header_map but acknoledge that some of the COSE header parameters do not make sense to use in EDHOC. This way EDHOC automatically support new COSE header parameters.\r\n- I think EDHOC should support all COSE header parameters that can be used to identity a cryptographic key.\r\n- In addition there is a need of a map between the object the key is stored in and CRED_x. I think this should maybe be done with a table. An IANA registry might not be wrong.\r\n\r\n```\r\nID_CRED_x = header_map\r\n\r\nCRED_x = any    (where any is determined by the key cryptographic key object)\r\n\r\n```\r\n```\r\n===========================================\r\nCredential type            CRED_x CDDL type\r\n-------------------------------------------\r\nCOSE_Key                   COSE_Key\r\nUCCS                       map\r\nCWT                        COSE_Untagged_Message\r\nX509                       bstr (end-entity)\r\nC509                       C509Certificate (end-entity)\r\n===========================================\r\n\r\n```\r\nThe table above use untagged CWS and UCSS. This avoids problems if of the parties tag their UCCS or CWT for storage. The three options are:\r\n\r\n1. Forcing untagged CRED_x.\r\n2. Forcing tagged CRED_x.\r\n3. Forcing I and R to agree on the format.\r\n\r\n3. does not seem optimal as the parties need to remember if the credential was tagged or untagged when they got it. The coice between 1. and 2. depends on what creates the least work for implementations.\r\n\r\nFurther discussion points are content and order, which the parties need to agree on.\r\n\r\n- EDHOC should state that the parties cannot add private headers to COSE_Key and UCCS\r\n\r\n- Regarding order, the choices are\r\n\r\n   a. force lexiographical order\r\n   b. force the parties to agree on the order.\r\n  \r\n   I don't really understand why the order is unspecified in the first place, but given that is is and that COSE assumes that entities can and will reorder it seems like forcing lexiographic order might be the best. That should probably be recommended in general.\r\n",
          "createdAt": "2021-09-09T08:57:49Z",
          "updatedAt": "2021-09-09T08:58:55Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Some input on some of the points above:\r\n\r\n* I think it's good to exclude \"Raw\" COSE Keys altogether, like it recently seemed to be the plan.\r\n   - As a main limitation, they don't allow to express additional metadata, including peer identity and credential expiration, that might be important to have around as part of an authenticated credential. As another limitation, they can't currently be transported by value, because there is no COSE Header Parameter for that.\r\n   - On the other hand, it's pretty cheap and easy to build a UCCS around a COSE Key. If COSE Keys are already supported in one's implementation, the additional step to take for \"dressing-up\" a \"Raw\" COSE Key as a UCCS is really small (trivial?), and might of course be limited to including only the 'cnf' claim, with no further metadata if that's appropriate/desired. Hence I think it's worthwhile and justifiable to have UCCS as a better substitute without the limitations above.\r\n\r\n* For the inner COSE Key structure, I believe forcing the lexicographical order of its elements is best and most viable.\r\n\r\n* If I understand correctly, there is no need to integrity-protect also the possible CBOR tags. Then, I'd propose to generally admit both tagged and untagged objects. However, possible CBOR tags must be stripped away when building CRED_X --- Relates to https://github.com/lake-wg/edhoc/issues/162\r\n\r\n",
          "createdAt": "2021-09-10T07:18:14Z",
          "updatedAt": "2021-09-10T07:18:14Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Marco. My understandanding of the the current suggestion from Marco is:\r\n\r\n**COSE:** The COSE header parameters for CWT and ECCS allow bot tagged and untagged and do not enforce any specific order in the map.\r\n\r\n**EDHOC:** When CWT and UCCS is used in EDHOC, then CRED_x is the untagged CWT or UCCS sorted\r\nin lexigraphical order as defined by deterministic CBOR.\r\n\r\nThat works for me. ",
          "createdAt": "2021-09-10T07:49:52Z",
          "updatedAt": "2021-09-10T07:49:52Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "UCCS are great, they are clearly a more flexible format for RPKs than \"raw\" COSE_Keys. I think\r\nthe important thing is that EHDOC support UCCS as \"raw\" COSE_Keys has clear limitations. It\r\nwould be good to enourage use of UCCS, but from a design perspective it would be\r\nnice to say that EDHOC relies on COSE and support all credentials that can be identified\r\nwith COSE.\r\n\r\nIt is certainly trivial to dress up a COSE_Key as a UCCS.\r\n\r\n```\r\nNaked:     COSE_Key \r\nDressed:   { 8 : { 1 : COSE_Key } }\r\n```\r\n\r\nThis is done by prefixing the COSE_Key with 0xA108A101. I like the idea of dressing up\r\na COSE_Key as a UCCS. This needs to be specified a bit more in the document.",
          "createdAt": "2021-09-10T09:15:25Z",
          "updatedAt": "2021-09-10T09:15:25Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "So the current suggestion would be something like:\r\n\r\n```\r\n===========================================\r\nCredential type                       CRED_x CDDL type\r\n-------------------------------------------\r\nUCCS / COSE_Key                   map (UCCS map sorted in lexiographical order)\r\nCWT                                       COSE_Untagged_Message (Outer layer in lexiographical order)\r\nX509                                      bstr (end-entity)\r\nC509                                     C509Certificate (end-entity)\r\n===========================================\r\n```\r\n\r\nThe parties need to agree on the content in the CRED_x UCCS map.\r\n\r\nDo we need to specify lexiographical ordering for the CWT as well? If I understand correctly, some parts of the outher layer are formally unordered.\r\n\r\n",
          "createdAt": "2021-09-10T09:22:37Z",
          "updatedAt": "2021-09-10T09:23:13Z"
        }
      ]
    },
    {
      "number": 162,
      "id": "MDU6SXNzdWU5OTA3NDcxNzI=",
      "title": "COSE CWT and UCCS header parameters - tagged, untagged, or both",
      "url": "https://github.com/lake-wg/edhoc/issues/162",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "The IANA section currectly specified that CWT can be sent tagged or untagged while UCCS can only be sent untagged. That is probably not how it should be.",
      "createdAt": "2021-09-08T06:04:04Z",
      "updatedAt": "2021-11-06T11:20:21Z",
      "closedAt": "2021-11-06T11:20:21Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Only untagged:\r\n\r\n```\r\ncwt               COSE_Untagged_Message\r\nuccs             map\r\n\r\n```\r\n\r\nUntagged or tagged:\r\n\r\n```\r\ncwt               COSE_Messages\r\nuccs             #TBD601(map) / map\r\n\r\n```\r\n\r\nOnly tagged\r\n\r\n```\r\ncwt               COSE_Tagged_Message\r\nuccs             #TBD601(map)\r\n```\r\n",
          "createdAt": "2021-09-09T07:35:18Z",
          "updatedAt": "2021-09-09T07:35:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Tagged add bytes that are not required. The COSE header parameter alredady gives this information.\r\n\r\nExcept that I don't have a strong opinion between allowing both and only allowing untagged.\r\n\r\nNote that this is mostly a COSE question, rather than LAKE",
          "createdAt": "2021-09-09T07:36:54Z",
          "updatedAt": "2021-09-09T07:36:54Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The UCCS tag numer has not been assigned yet. \r\n\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-rats-uccs\r\n\r\n",
          "createdAt": "2021-09-09T07:37:37Z",
          "updatedAt": "2021-09-09T07:37:37Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "If I understand correctly, there is no need to integrity-protect also the possible CBOR tags. Then, I'd propose to generally admit both tagged and untagged objects. However, possible CBOR tags must be stripped away when building CRED_X --- Relates to https://github.com/lake-wg/edhoc/issues/161",
          "createdAt": "2021-09-10T07:18:46Z",
          "updatedAt": "2021-09-10T07:18:46Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": ">If I understand correctly, there is no need to integrity-protect also the possible CBOR tags.\r\n\r\nThere is no need, but if used in the protected header as in EDHOC they will be integrity protected. That however not a problem as the protected header_map is sent on the wire, so both parties will have the same formatting.",
          "createdAt": "2021-09-10T07:43:05Z",
          "updatedAt": "2021-09-10T07:43:05Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Marco. My understandanding of the the current suggestion from Marco is:\r\n\r\n**COSE:** The COSE header parameters for CWT and ECCS allow bot tagged and untagged and do not enforce any specific order in the map.\r\n\r\n**EDHOC:** When CWT and UCCS is used in EDHOC, then CRED_x is the untagged CWT or UCCS sorted\r\nin lexigraphical order as defined by deterministic CBOR.\r\n\r\nThat works for me. ",
          "createdAt": "2021-09-10T07:48:42Z",
          "updatedAt": "2021-09-10T07:50:36Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Do CWT and UCCS need several header parameter each similar to x5u x5t x5chain x5bag? ",
          "createdAt": "2021-09-12T17:40:36Z",
          "updatedAt": "2021-09-12T17:40:36Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "New name (kcwt/kccs) and description: 4910a42f",
          "createdAt": "2021-09-20T07:36:53Z",
          "updatedAt": "2021-09-20T07:36:53Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": ">  When the authentication credential is a X.509 certificate, CRED_x\r\n>  SHALL be the end-entity DER encoded certificate wrapped in a bstr\r\n>  [I-D.ietf-cose-x509].\r\n\r\n@cabo commented in the interim on \"wrapped in a bstr\" needs to be clarified.\r\n\r\n",
          "createdAt": "2021-10-07T08:36:54Z",
          "updatedAt": "2021-10-07T08:36:54Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@cabo: Is this following minor change (in #182) sufficient, or do we need to provide more details?\r\n\r\nOLD\r\nWhen the authentication credential is a X.509 certificate, CRED_x SHALL be the end-entity DER encoded certificate wrapped in a bstr {{I-D.ietf-cose-x509}}.\r\n\r\nNEW\r\nWhen the authentication credential is an X.509 certificate, CRED_x SHALL be the end-entity DER encoded certificate, encoded as a bstr {{I-D.ietf-cose-x509}}.",
          "createdAt": "2021-10-08T06:51:58Z",
          "updatedAt": "2021-10-08T06:51:58Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Do you have a nested encoding step or *is* this just a byte string with the encoded X.509 certificate?",
          "createdAt": "2021-10-08T06:55:45Z",
          "updatedAt": "2021-10-08T06:55:45Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "As this is referring to the *end-entity* certificate I would say the latter. \r\n\r\n@emanjon?",
          "createdAt": "2021-10-08T06:58:25Z",
          "updatedAt": "2021-10-08T06:58:25Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Or in other words, we need to make sure we don't use terminology that implies nested encoding steps in cases where we simply have a plain data item in the CBOR. \r\n\r\nIn CBOR diagnostic, if 'foo' is the encoded foreign data:\r\n\r\n## Plain:\r\n\r\n'foo'\r\n\r\nInside the overall encoded data item:\r\n\r\n``` \r\n43        # bytes(3)\r\n   666f6f # \"foo\"\r\n``` \r\n\r\n## Wrapped/nested/whatever:\r\n\r\n<< 'foo' >>\r\n\r\nInside the overall encoded data item:\r\n\r\n``` \r\n44          # bytes(4)\r\n   43666f6f # \"Cfoo\"\r\n``` ",
          "createdAt": "2021-10-08T09:44:01Z",
          "updatedAt": "2021-10-08T09:44:37Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "As I read it\r\n\r\n\"end-entity DER encoded certificate, encoded as a bstr\"\r\n\r\nindicates a \"plain\" CBOR encoding of the non-CBOR X.509 certificate data. \r\n\r\nAny objection / disagreement to this definition / interpretation?\r\n\r\n",
          "createdAt": "2021-10-08T13:06:48Z",
          "updatedAt": "2021-10-08T13:06:48Z"
        }
      ]
    },
    {
      "number": 163,
      "id": "MDU6SXNzdWU5OTA5OTU5MTg=",
      "title": "Align exporter labels",
      "url": "https://github.com/lake-wg/edhoc/issues/163",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "The 4 labels use different styles. Should probably align them in -11.\r\n\r\n```\r\n   Label: EDHOC_message_4_Key\r\n   Label: EDHOC_message_4_Nonce\r\n   Label: OSCORE Master Secret\r\n   Label: OSCORE Master Salt\r\n\r\n```",
      "createdAt": "2021-09-08T10:43:56Z",
      "updatedAt": "2021-09-24T11:39:56Z",
      "closedAt": "2021-09-24T11:39:56Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "1. Should they be aligned?\r\n\r\n2. If yes, how should they be aligned?\r\n\r\n```\r\na)\r\nEDHOC message 4 Key\r\nOSCORE Master Secret\r\n\r\nb)\r\nEDHOC_message_4_Key\r\nOSCORE_Master_Secret\r\n```",
          "createdAt": "2021-09-09T07:29:52Z",
          "updatedAt": "2021-09-09T07:30:15Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "For information, the labels used directly with the internal EDHOC-KDF (together with TH_2 and TH_3) are\r\n\r\nKEYSTREAM_2\r\nMAC_2\r\nK_3ae\r\nIV_3ae\r\nMAC_3\r\n\r\n",
          "createdAt": "2021-09-14T07:38:32Z",
          "updatedAt": "2021-09-14T07:38:32Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The newly registered TLS exporter labels seem to avoid blank space and most labels use '-' or '_' instead. That might point to b) being a good approach if we want to do alignment.",
          "createdAt": "2021-09-16T14:50:18Z",
          "updatedAt": "2021-09-16T14:56:07Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in dad40e5",
          "createdAt": "2021-09-16T17:58:31Z",
          "updatedAt": "2021-09-16T17:58:31Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Good that you fixed the structure in message_4 so the key is defined for COSE_Encrypt and not only for the underlying AEAD. Good with a name change to IV which is what COSE calls the input.\r\n\r\nBased on the new names K_4 and IV_4 we should maybe rename to K_3 and IV_3 as well.\r\n\r\n\r\nGS: fixed in 1798445",
          "createdAt": "2021-09-16T18:56:07Z",
          "updatedAt": "2021-09-17T05:28:16Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe just\r\n \r\n   * Key K_4 = EDHOC-Exporter( \"EDHOC_K_4\", h'', length )\r\n   * IV IV_4 = EDHOC-Exporter( \"EDHOC_IV_4\", h'', length )\r\n\r\n\r\n\r\nGS: fixed in 33f0fbf",
          "createdAt": "2021-09-16T18:59:10Z",
          "updatedAt": "2021-09-17T05:27:42Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Some ideas from the TLS exporter that could be used.\r\n\r\n```\r\nThe label is a string consisting of the printable ASCII characters \r\n\r\nLabel values beginning with \"EXPERIMENTAL\" MAY be used for private use without registration. All other label values MUST be registered.\r\n\r\n```\r\n\r\nEDHOC could specify exactly what a label consists of:\r\n\r\n`The label is a string consisting of the printable ASCII characters 0x21 - 0x7e\r\n`",
          "createdAt": "2021-09-16T19:16:46Z",
          "updatedAt": "2021-09-17T08:16:40Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been merged to master. ",
          "createdAt": "2021-09-24T11:39:56Z",
          "updatedAt": "2021-09-24T11:39:56Z"
        }
      ]
    },
    {
      "number": 165,
      "id": "MDU6SXNzdWU5OTI5NjM2MTY=",
      "title": "Possible collision of credential identifiers after credential transport by value",
      "url": "https://github.com/lake-wg/edhoc/issues/165",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "Think of this scenario. An Initiator C1 offers its (self-generated) UCCS credential by value in ID_CRED_I with inner 'kid'=42, and EDHOC completes correctly by accepting the UCCS as Trust On First Use (TOFU). Later on, a different Initiator C2 also offers to the same Responder its (self-generated) UCCS credential by value in ID_CRED_I with inner 'kid'=42 again, and EDHOC completes correctly, again by accepting the UCCS as TOFU. You can think of the same scenario applied to two Responders' credential transported by value in ID_CRED_R just as well.\r\n\r\nIt's probably up to a peer's policies --- possibly reflected in the applicability statement for servers --- to determine whether it is fine or not to accept a UCCS/CWT credential that has a 'kid' equal to another credential already stored.\r\n\r\nIf the policy allows to accept multiple credentials with the same 'kid', later on in the following executions of EDHOC those will likely be referred by their 'kid' in ID_CRED_X, and something needs to be adapted in the EDHOC engine. That is, failing to verify an EDHOC message with one of those peer credential must not discontinue the protocol and send an Error Message right away. Instead, the next credential with that 'kid' should be tried. Only if the message processing fails with all of those credentials, an Error Message is sent.",
      "createdAt": "2021-09-10T07:24:48Z",
      "updatedAt": "2021-09-12T08:47:52Z",
      "closedAt": "2021-09-12T08:47:52Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Marco,\r\n\r\nI think this is a general problem not really related to CTW or UCSS by value. It exists as long as\r\nmore that one entity determines the kid values. I also think it is not really an EDHOC problem. For\r\nidentification of cryptogrphic keys EDHOC relies purely on COSE by using COSE header maps.\r\n\r\nCOSE writes:\r\n\r\n```\r\n      Applications MUST NOT assume\r\n      that 'kid' values are unique.  There may be more than one key with\r\n      the same 'kid' value, so all of the keys associated with this\r\n      'kid' may need to be checked.\r\n```\r\n\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-cose-rfc8152bis-struct-15\r\n\r\nI don't know if there is need for more guidance from a COSE perspective.\r\n\r\n\r\nIn EDHOC the following sentence should maybe be reformulated.\r\n\r\n```\r\n   It is RECOMMENDED that ID_CRED_x uniquely identify the public\r\n   authentication key as the recipient may otherwise have to try several\r\n   keys.\r\n```\r\n\r\nMight be good to remind readers that applications MUST NOT assume that 'kid' values are unique\r\n\r\n",
          "createdAt": "2021-09-10T08:16:37Z",
          "updatedAt": "2021-09-10T08:16:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics I made a commit with a reference to COSE and some rephrasing. If you are happy with that we can close this. Otherwise feel free to suggest improvements.",
          "createdAt": "2021-09-11T09:59:30Z",
          "updatedAt": "2021-09-11T09:59:30Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me, thanks! Just a small typo and editorial fix:\r\n\r\ns/as unique as possible to as the/as unique as possible, since the\r\n",
          "createdAt": "2021-09-11T10:51:00Z",
          "updatedAt": "2021-09-11T10:51:00Z"
        }
      ]
    },
    {
      "number": 166,
      "id": "MDU6SXNzdWU5OTMxNTY1Njg=",
      "title": "Should EAD IANA registry contain CDDL",
      "url": "https://github.com/lake-wg/edhoc/issues/166",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "EAD is currently an (int, any) pair where the specification registering ead is supposed to say what any is for each int. Shold this CDDL information be in the IANA table as well. That forces specification to do this and makes it easier to get an overview.\r\n\r\nI would say yes. COSE and CWT does this.",
      "createdAt": "2021-09-10T11:44:43Z",
      "updatedAt": "2021-09-12T08:49:05Z",
      "closedAt": "2021-09-12T08:49:05Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "After discussing with G\u00f6ran this seems like a good thing to do. To make the ead terms work with \"value type\" I renamed them to ead_label and ead_value. This aligns with some of the COSE and CWT registries.\r\n\r\nThe change is merged to master and is planned for -11. \r\n",
          "createdAt": "2021-09-11T06:55:54Z",
          "updatedAt": "2021-09-11T06:55:54Z"
        }
      ]
    },
    {
      "number": 167,
      "id": "MDU6SXNzdWU5OTMyMDkxODM=",
      "title": "Registration procedures for the new EDHOC registries",
      "url": "https://github.com/lake-wg/edhoc/issues/167",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "PR exists"
      ],
      "body": "Currently a mixture of:\r\nThe registration procedure is \"Expert Review\".\r\nThe registration procedure is \"Specification Required\". \r\n",
      "createdAt": "2021-09-10T12:55:40Z",
      "updatedAt": "2022-05-10T13:24:02Z",
      "closedAt": "2022-05-10T13:24:02Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I changed EDHOC Error Code Registry to \"Expert Review\" to align with the others. It makes no sense that the Error registry has harder requirements than the methods or cipher suite registry,\r\n\r\nWe should maybe discuss Registration procedures for the new EDHOC registries at IETF 112. Right now they are all expert review without any differentiation between small and big numbers. We should discuss what is the right approach.\r\n",
          "createdAt": "2021-09-11T06:49:44Z",
          "updatedAt": "2021-09-11T07:49:38Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The registries was aligned in -12 and the topic was discussed at the Oct 5 interim without any suggestions for change. The expert instructions seem to cover all the aspects discussed during the interim",
          "createdAt": "2021-10-11T11:08:55Z",
          "updatedAt": "2021-11-06T11:14:58Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Reopen based on the comment by Kathleen. At least new EDHOC method types would typically require specification.",
          "createdAt": "2021-12-14T10:27:14Z",
          "updatedAt": "2021-12-14T14:00:19Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> At least new EDHOC method types would typically require specification.\r\n\r\nMakes sense to me",
          "createdAt": "2021-12-15T06:38:04Z",
          "updatedAt": "2021-12-15T06:38:04Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Was is the status of this? This should be quick and easy to fix and close.",
          "createdAt": "2022-01-25T11:07:15Z",
          "updatedAt": "2022-01-25T11:07:15Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The plan is to update Section 9.4 and replace \"Expert Review\" with \"Specification Required\". \r\n\r\nI noted now that in that section the columns of the registry are: \r\n\r\n> \"Value, Description, and Reference\" \r\n\r\nbut the table with the referred initial contents (Figure 4) has columns:\r\n\r\n> Method Type Value, Initiator Authentication Key, Responder Authentication Key, and Reference.",
          "createdAt": "2022-01-25T11:36:45Z",
          "updatedAt": "2022-01-25T11:36:45Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "It should be 9.4\r\n\r\nI think \"Value, Description, and Reference\" is correct, but just referencing Figure 4 does not work.\r\n",
          "createdAt": "2022-01-25T14:50:34Z",
          "updatedAt": "2022-01-25T14:50:34Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "We may need two tables. \r\n* Figure 4 doesn't need to have a Reference column. \r\n* We can make another table in 9.4 with \"Value, Description, and Reference\", where Description is \"Initiator and Responder uses signature key for authentication\" etc.\r\n",
          "createdAt": "2022-01-25T15:01:26Z",
          "updatedAt": "2022-01-25T15:01:47Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> Figure 4 doesn't need to have a Reference column.\r\n\r\nA reference column is never needed. I would suggest to remove it from all the Tables in Section 9. That column is needed on the IANA homepage but does not help anybody in the EDHOC specification. IANA is smart enough to use the correct reference without us giving them a column.\r\n",
          "createdAt": "2022-01-25T15:06:26Z",
          "updatedAt": "2022-01-25T15:06:26Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe Description should be separated into Initiator Authentication Key, Responder Authentication Key,",
          "createdAt": "2022-01-26T16:44:29Z",
          "updatedAt": "2022-01-26T16:44:29Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The comments above about section 9.4 refers to 9.3 [EDHOC Method Type Registry] in the current master branch.",
          "createdAt": "2022-03-16T09:18:57Z",
          "updatedAt": "2022-03-16T09:18:57Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "An attempt to address all comments in PR #260.\r\n\r\nI kept the column for References for the registries where a specification is required, method (9.3) and EAD (9.5).\r\n",
          "createdAt": "2022-03-16T10:16:33Z",
          "updatedAt": "2022-03-16T10:16:33Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "References column removed also in cases where spec. is required in #260, which is now merged.",
          "createdAt": "2022-05-10T13:24:02Z",
          "updatedAt": "2022-05-10T13:24:02Z"
        }
      ]
    },
    {
      "number": 169,
      "id": "MDU6SXNzdWU5OTQ1NzA0NjY=",
      "title": "Content of draft-selander-lake-traces",
      "url": "https://github.com/lake-wg/edhoc/issues/169",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?",
        "traces and test vectors"
      ],
      "body": "We should discuss how many test vectors draft-selander-lake-traces should contain and what the content should be.\r\n\r\nThis applied to the old appendix as well, but is now even more obvious that we need to use a real X509 certificate. E.g. the example one from https://datatracker.ietf.org/doc/draft-ietf-cose-cbor-encoded-cert/ The cipher suite should probably be one with ECDSA, e.g. cipher suite 2.\r\n\r\n   CRED_R (CBOR Data Item) (113 bytes)\r\n   58 6f 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14\r\n   15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27 28 29 2a 2b\r\n   2c 2d 2e 2f 30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f 40 41 42\r\n   43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58 59\r\n   5a 5b 5c 5d 5e 5f 60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e\r\n\r\n",
      "createdAt": "2021-09-13T07:54:02Z",
      "updatedAt": "2022-10-11T09:51:00Z",
      "closedAt": "2022-10-11T09:50:59Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the document need to talk about the authentication key algorithms in the credentials.\r\n\r\nIn \"Authentication with static DH, UCCS identified by 'kid'\" The algorithm has to be \r\nX25519\r\n\r\nIn \"Authentication with signatures, X.509 identified by 'x5t'\" the algorithm could have been\r\nEd25519 or Ed448\r\n\r\nThat is is Ed25519 is only visible in the size of the key and the signature.\r\n",
          "createdAt": "2021-09-13T09:34:07Z",
          "updatedAt": "2021-09-13T11:53:57Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Mention which version early",
          "createdAt": "2021-09-19T04:23:22Z",
          "updatedAt": "2021-09-19T04:23:22Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Next version should mention all versions it apply to. Will likely apply to both -12 and -13",
          "createdAt": "2021-10-12T11:53:12Z",
          "updatedAt": "2021-10-12T11:53:12Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The document should probably write out the raw values for C_I and C_R\r\n\r\n```\r\nC_I (CBOR Data Item) (Connection identifier chosen by I) (1 bytes)\r\n0c\r\n \r\nC_R (CBOR Data Item) (Connection identifier chosen by R) (1 bytes)\r\n40\r\n \r\nC_I (CBOR Data Item) (Connection identifier chosen by I) (1 bytes)\r\n0e\r\n \r\nC_R (CBOR Data Item) (Connection identifier chosen by R) (1 bytes)\r\n32\r\n\r\n``` \r\nThe exact API for an implementation to use is out-of-scope. But the test vectors could show the raw values.\r\n \r\n```\r\n12\r\n \r\n\"\"\r\n \r\n14\r\n \r\n-19\r\n```",
          "createdAt": "2021-10-12T11:54:07Z",
          "updatedAt": "2021-10-12T11:54:07Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made commits to print out the raw connection identifiers. This was already done in text form, but the bstr h'' gave the impression that the input to EDHOC is CBOR. The API is out-of-scope for the EDHOC spec and the API would probably not take CBOR encoded strings but rather its and byte strings. A deployment could also EDHOC handle the connection database or fetch the information from somewhere meaning there would not even be an API.",
          "createdAt": "2021-10-14T07:35:30Z",
          "updatedAt": "2021-10-14T07:35:30Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe the points raised here are addressed in the test vectors in the -traces draft, so this issue can be closed.",
          "createdAt": "2022-03-17T17:57:41Z",
          "updatedAt": "2022-03-17T17:57:41Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as there were no comments.",
          "createdAt": "2022-10-11T09:50:59Z",
          "updatedAt": "2022-10-11T09:50:59Z"
        }
      ]
    },
    {
      "number": 170,
      "id": "I_kwDOEItXAM47gJg5",
      "title": "Traces document - New note on connection identifiers",
      "url": "https://github.com/lake-wg/edhoc/issues/170",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "In Section 2 of the EDHOC traces document [1], I suggest to add the note below (or something similar):\r\n\r\nNOTE 3.  Remember that an EDHOC message never starts with a connection identifier or with an analogous sentinel value like the CBOR simple value \"true\" (0xf5). These are possibly prepended to an EDHOC message as the transport protocol needs, but are not part of the EDHOC message.\r\n\r\n[1] https://datatracker.ietf.org/doc/html/draft-selander-lake-traces-00#section-2",
      "createdAt": "2021-09-16T14:29:39Z",
      "updatedAt": "2021-09-24T11:39:41Z",
      "closedAt": "2021-09-24T11:39:41Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree it is good to point out in this draft that a real world EDHOC trace would typically contain connection identifiers. Perhaps we can formulate it as follows:\r\n\r\nNOTE 3. When the protocol transporting EDHOC messages does not inherently provide correlation across all messages, like CoAP (see 3.4.1 and A.3 of {{EDHOC}}), then some messages typically are prepended with connection identifiers and  message_1 indicator. Those bytes are omitted from the traces in this draft.\r\n",
          "createdAt": "2021-09-17T05:57:55Z",
          "updatedAt": "2021-09-17T05:57:55Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks good.",
          "createdAt": "2021-09-17T06:23:38Z",
          "updatedAt": "2021-09-17T06:23:38Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been merged to master. Let's close",
          "createdAt": "2021-09-24T11:39:41Z",
          "updatedAt": "2021-09-24T11:39:41Z"
        }
      ]
    },
    {
      "number": 171,
      "id": "I_kwDOEItXAM47jFj1",
      "title": "Make it clearer what is explanations of COSE.",
      "url": "https://github.com/lake-wg/edhoc/issues/171",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "Several things in the document is not specification but rather clarification of how COSE works. The additon of this and the integration in the main body was requested by several implementors. It should be more clearly marked that these parts just explain COSE and does not define anything. If soemthing would be wrong. The COSE specification apply.\r\n\r\nE.g.\r\n\r\n```\r\n\r\n\r\n   COSE constructs the input to the Signature Algorithm as:\r\n\r\n      -  The key is the private authentication key of the Responder.\r\n\r\n      -  The message M to be signed =\r\n\r\n         [ \"Signature1\", << ID_CRED_R >>, << TH_2, CRED_R, ? EAD_2 >>,\r\n         MAC_2 ]\r\n\r\n\r\n\r\n\r\n\r\n  COSE constructs the input to the AEAD [RFC5116] as follows:\r\n\r\n      -  Key K = EDHOC-KDF( PRK_3e2m, TH_3, \"K_3ae\", h'', length )\r\n\r\n      -  Nonce N = EDHOC-KDF( PRK_3e2m, TH_3, \"IV_3ae\", h'', length )\r\n\r\n      -  Plaintext P = ( ID_CRED_I / bstr / int, Signature_or_MAC_3, ?\r\n         EAD_3 )\r\n\r\n      -  Associated data A = [ \"Encrypt0\", h'', TH_3 ]\r\n\r\n\r\n\r\n *  by a hash value with the 'x5t' or 'c5t' parameters, respectively:\r\n\r\n      -  ID_CRED_x = { 34 : COSE_CertHash }, for x = I or R,\r\n\r\n      -  ID_CRED_x = { TBD3 : COSE_CertHash }, for x = I or R;\r\n\r\n   *  or by a URI with the 'x5u' or 'c5u' parameters, respectively:\r\n\r\n      -  ID_CRED_x = { 35 : uri }, for x = I or R,\r\n\r\n      -  ID_CRED_x = { TBD4 : uri }, for x = I or R.\r\n\r\n\r\n\r\n\r\n```\r\n\r\n",
      "createdAt": "2021-09-17T07:47:57Z",
      "updatedAt": "2021-10-22T08:37:36Z",
      "closedAt": "2021-10-22T08:37:36Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The explanations of COSE are moved to C.3 in PR #179.",
          "createdAt": "2021-10-07T19:49:52Z",
          "updatedAt": "2021-10-07T19:49:52Z"
        }
      ]
    },
    {
      "number": 172,
      "id": "I_kwDOEItXAM47jdIC",
      "title": "  Change edhoc_aead_id to selected cipher suite in info structure",
      "url": "https://github.com/lake-wg/edhoc/issues/172",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "The selected cipher suite covers the aead and more.",
      "createdAt": "2021-09-17T09:33:56Z",
      "updatedAt": "2021-09-24T11:39:13Z",
      "closedAt": "2021-09-24T11:39:13Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "selected_suite is always included in transcript_hash and could be removed. I.e. an equally secure info would be\r\n\r\ninfo = (\r\n  transcript_hash : bstr,\r\n  label : tstr,\r\n  context : bstr,\r\n  length : uint,\r\n)",
          "createdAt": "2021-09-17T21:22:00Z",
          "updatedAt": "2021-09-17T21:22:00Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree, we can close this.",
          "createdAt": "2021-09-20T06:40:30Z",
          "updatedAt": "2021-09-20T06:40:30Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been merged to master.",
          "createdAt": "2021-09-24T11:39:13Z",
          "updatedAt": "2021-09-24T11:39:13Z"
        }
      ]
    },
    {
      "number": 174,
      "id": "I_kwDOEItXAM47lH8i",
      "title": "Use of confirmable messages in CoAP",
      "url": "https://github.com/lake-wg/edhoc/issues/174",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "Following a discussion recently had with Carsten and the CoAP-EAP authors, I stumbled upon this sentence:\r\n\r\n> According to this specification, EDHOC messages are carried in Confirmable messages, which is beneficial especially if fragmentation is used.\r\n\r\nNo other part of the spec mentions CONs (apart from the deduplication part where it does fit well), so maybe this is not intended anyway. At most, it could say:\r\n\r\n> To avoid that the EDHOC exchange gets stuck (especially when fragmentation is used), the underlying CoAP transport should be used in reliable mode.",
      "createdAt": "2021-09-17T17:46:55Z",
      "updatedAt": "2021-11-06T11:19:23Z",
      "closedAt": "2021-11-06T11:19:23Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "How about this:\r\n\r\n\"The underlying CoAP transport should be used in reliable mode, in particular when fragmentation is used, to avoid, e.g.,  situations with hanging endpoints waiting for each other.\"",
          "createdAt": "2021-09-24T07:20:05Z",
          "updatedAt": "2021-09-24T07:20:05Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "I like it, that'd work fine.\n",
          "createdAt": "2021-09-24T07:43:11Z",
          "updatedAt": "2021-09-24T07:43:11Z"
        }
      ]
    },
    {
      "number": 175,
      "id": "I_kwDOEItXAM47pGrV",
      "title": "Replace UCCS with CCS",
      "url": "https://github.com/lake-wg/edhoc/issues/175",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "UCCS refers to a CWT claims set. \"Unprotected\" is redundant. That change would makes the CBOR header 'kccs' more natural.\r\n\r\n",
      "createdAt": "2021-09-20T06:58:21Z",
      "updatedAt": "2021-09-20T15:54:10Z",
      "closedAt": "2021-09-20T15:54:10Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "It is, but draft-birkholz-rats-uccs defines the tag for an UCCS. Not sure EDHOC and draft-birkholz-rats-uccs having different terminology would be good.\r\n\r\nTBD601 | map       | Unprotected CWT Claims Set [RFCthis] \r\n\r\nMaybe discuss with the authors of draft-birkholz-rats-uccs",
          "createdAt": "2021-09-20T13:35:25Z",
          "updatedAt": "2021-09-20T13:35:25Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "CWT Claims Set seems like the correct term following RFC 8392.\r\n\r\n```\r\nA.1.  Example CWT Claims Set\r\n\r\n   The CWT Claims Set used for the different examples displays usage of\r\n   all the defined claims.  For signed and MACed examples, the CWT\r\n   Claims Set is the CBOR encoding as a byte string.\r\n```",
          "createdAt": "2021-09-20T13:38:19Z",
          "updatedAt": "2021-09-20T13:38:19Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Perhaps closed this too quick, reopening to allow alignment with draft-birkholz-rats-uccs",
          "createdAt": "2021-09-20T14:01:16Z",
          "updatedAt": "2021-09-20T14:01:16Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "It is actually no problem if draft-ietf-rats-uccs has a different abbreviation since we both refer to RFC 8392, so the term is well defined. Closing. ",
          "createdAt": "2021-09-20T15:54:10Z",
          "updatedAt": "2021-09-20T15:54:10Z"
        }
      ]
    },
    {
      "number": 177,
      "id": "I_kwDOEItXAM47-PcX",
      "title": "Explanation of COSE processing",
      "url": "https://github.com/lake-wg/edhoc/issues/177",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [],
      "body": "@emanjon In #176 you added \"Explanation:\" to COSE processing description of Section 5. I removed that as out context for that PR and instead opened this issue as placeholder.",
      "createdAt": "2021-09-24T07:34:03Z",
      "updatedAt": "2021-10-11T09:04:40Z",
      "closedAt": "2021-10-11T09:04:40Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Essential that something like that need to be added to -11. It is very important to point out that this is not specification at all. The COSE RFC specifies these things. If the EDHOC spec makes anything incorrect or COSE makes updates in the future, that apply and NOT the EHDOC spec. ",
          "createdAt": "2021-09-24T11:23:43Z",
          "updatedAt": "2021-09-24T11:23:43Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "@gselander Unless you have a better suggestion than \"Explanation:\" I think \"Explanation:\" should stay, but I can live with basically any formulation here. Whether it is out of the context of the PR is not very important. The important thing is that it is merged to master. The important thing is to make it very clear that these parts is not normative specification.",
          "createdAt": "2021-09-24T11:32:24Z",
          "updatedAt": "2021-09-24T11:32:24Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "There was already an issue regarding this #171",
          "createdAt": "2021-09-24T11:38:31Z",
          "updatedAt": "2021-09-24T11:38:31Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "OK. Just adding \"Explanation:\" was not sufficient explanation, at least not for me. So now we have two issues and surely won't forget adding it to the master. ",
          "createdAt": "2021-09-24T12:30:07Z",
          "updatedAt": "2021-09-24T13:08:25Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I see now that you already submitted -11. \"Essential\"  was maybe a bit strong, but I it would have been good to clearly distinguish between COSE and EDHOC before more formal verfication. Let's try to do that for -12.\r\n\r\n- Might be good to add that the separaration between signature algorithm and key authentication algorithm (where the key authentication algorithm might not be a COSE algorithm) comes from COSE. TLS chose a different approach than COSE where the curve (but not RSA key lenght) is integrated into the \"signature algorithm\". So also in TLS the security level and exact parameters are determined by the signature algorithm and the key algorithm together. COSE is flexible and allows ECDSA with Brainpool as long as Brainpool is stored in a X509 even if Brainpool is not registered in the COSE IANA registry.\r\n\r\n- The security consideration section in EDHOC should maybe consider refering to the section in COSE section discussion external_aad.",
          "createdAt": "2021-09-24T15:14:25Z",
          "updatedAt": "2021-09-24T15:14:25Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe something like\r\n\r\n- COSE recap:\r\n- COSE summary:\r\n- COSE explanation:\r\n- Informal COSE recap:\r\n- Informal COSE summary:\r\n- Informal COSE explanation:\r\n",
          "createdAt": "2021-09-25T13:49:23Z",
          "updatedAt": "2021-09-25T13:49:23Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Current text says:\r\n\r\n\"\r\nCOSE constructs the input to the Signature Algorithm as:\r\n* The key is the private authentication key of the Responder.\r\n* The message M to be signed =\r\n[ \"Signature1\", << ID_CRED_R >>, << TH_2, CRED_R, ? EAD_2 >>, MAC_2 ]\r\n\"\r\n\r\nIf this is not clear, then I think a prefix is not enough. A potential confusion is  where the COSE processing stops and EDHOC processing restarts. More clear is to separate the explanation from the processing and put this text in some other section. The purpose of appendix C.3 is to explain COSE, so that section could be used. At least a reference to the explanation should be put in that section.",
          "createdAt": "2021-09-27T09:14:46Z",
          "updatedAt": "2021-09-27T09:14:46Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's make subsections for the \"COSE constructs\".\r\n\r\nLets discuss how COSE works with signature algorithms and public keys.",
          "createdAt": "2021-09-27T09:49:47Z",
          "updatedAt": "2021-09-27T09:49:47Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I went through the processing steps and removed the COSE constructs part, see #179. We may want to add to C.3 if something was lost in the process.",
          "createdAt": "2021-09-28T08:04:09Z",
          "updatedAt": "2021-09-28T08:04:09Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "In C.3. we may e.g. describe how Sig_structure and Enc_structure are used ",
          "createdAt": "2021-09-28T08:55:24Z",
          "updatedAt": "2021-09-28T08:55:24Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "C.3 used to contain the \"COSE constructs\" parts. I.e. explanation of how COSE takes the input to its API and transform them to input to the AEAD/Signature interfaces. Some implementor a long time ago suggested to integrate this into the body, but maybe it is better to have it in the appendix to make it clearer what is EDHOC and what is COSE",
          "createdAt": "2021-10-07T11:02:02Z",
          "updatedAt": "2021-10-07T11:02:02Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "in PR #179 the \"COSE constructs\" explanations for COSE_Sign1 and COSE_Encrypt0 are now back in C.3, with reference to it from the message processing sections 5.3-5.5.",
          "createdAt": "2021-10-07T19:45:52Z",
          "updatedAt": "2021-10-07T19:45:52Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #179",
          "createdAt": "2021-10-11T09:04:37Z",
          "updatedAt": "2021-10-11T09:04:37Z"
        }
      ]
    },
    {
      "number": 178,
      "id": "I_kwDOEItXAM48E9fi",
      "title": "Security considerations of TOFU",
      "url": "https://github.com/lake-wg/edhoc/issues/178",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [],
      "body": "The current text is not really explaining how TOFU works and the security considerations. Would be good with some more text. TOFU might also go agains requirements in other parts of the document that says that \"EDHOC is mutually authenticated.",
      "createdAt": "2021-09-27T09:47:52Z",
      "updatedAt": "2022-06-28T09:39:38Z",
      "closedAt": "2022-06-28T09:39:38Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This is conflicting with present use of COSE. Requires a separate section in the draft, preferably an appendix. We need to describe the use case, trust model, how to use EDHOC and the security properties. Can we reference some other RFC?\r\n\r\n",
          "createdAt": "2021-12-03T08:32:02Z",
          "updatedAt": "2021-12-03T08:32:02Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Looking at adding text on TOFU I think there is some more work to do. I don't TOFU should require anything specicial.\r\n\r\nThe Section \"Identities and trust anchors {#identities}\" is fluffy. It is not clear that this is just general recommendations that is outside the scope of the EDHOC protocol and the reposability of the application. EDHOC provides proof-of-possesion and transfers a credential that enables authentication. Thats it. An EDHOC implementation might implemend Authentication for a specific use case, but that is still outside the EDHOC protocol.\r\n\r\nAny description of the interface between EDHOC and the application when it comes to credential is missing. In general EDHOC provides proof-of-possesion of the private key and then gives CRED_x to the application that says YES/NO. How the application does chain validation and identity validation (or the lack of it like in TOFU) is outside of EDHOC.\r\n\r\n",
          "createdAt": "2021-12-25T20:02:25Z",
          "updatedAt": "2021-12-25T20:02:25Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Status: This issue is waiting on a restructure, shortening, clarification on the responsibility of the EDHOC protocol and the application.\r\n\r\n#212 and #223",
          "createdAt": "2022-01-22T10:18:47Z",
          "updatedAt": "2022-01-22T10:18:47Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The restructuring is done and merged with the master. Appendix D.5 is placeholder for TOFU.",
          "createdAt": "2022-02-23T13:25:32Z",
          "updatedAt": "2022-02-23T13:25:32Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": " I made PR #307 for TOFU. As Marco pointed out this should be more general than TOFU. I changed the heading to \"unauthenticated opearation\" which is the term used by TLS 1.3",
          "createdAt": "2022-06-27T08:09:31Z",
          "updatedAt": "2022-06-27T08:09:31Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged #307 adding text to the empty TOFU section. Closing",
          "createdAt": "2022-06-28T09:39:38Z",
          "updatedAt": "2022-06-28T09:39:38Z"
        }
      ]
    },
    {
      "number": 180,
      "id": "I_kwDOEItXAM48UN8u",
      "title": "EDHOC with Post-Quantum Cryptography ",
      "url": "https://github.com/lake-wg/edhoc/issues/180",
      "state": "CLOSED",
      "author": "StefanHri",
      "authorAssociation": "NONE",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "Close?"
      ],
      "body": "Is it relevant to have post-quantum cipher suites see https://csrc.nist.gov/Projects/post-quantum-cryptography/round-3-submissions",
      "createdAt": "2021-09-30T09:19:12Z",
      "updatedAt": "2021-10-22T08:37:02Z",
      "closedAt": "2021-10-22T08:37:02Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "EDHOC already supports PQC signatures in the form of LMS. Any PQC signatures added to COSE will also be supported by EDHOC. For Key Exchange it is a bit more complex. Supporting KEMs will likely require some changes.\r\n\r\nThe conslusion in the requirement document was that:\r\n\r\n\"PAKE, post-quantum and \"hybrid\" (simultaneously more than one) key exchange is out of scope, but may be supported in a later version.\"\r\n",
          "createdAt": "2021-10-02T20:50:33Z",
          "updatedAt": "2021-10-02T20:50:33Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "We also looked into if EDHOC with ECC should be moved to KEMs to be able to (more or less) automatically support PQC Kems, but the resulting protocol would have been more heavy as some properties of ECC could not be used in a strict KEM design.\r\n\r\nI think both PAKEs and KEMs would require new methods. Each PAKE might require its own method while all KEMs could likely be supported together. Unclear if 3x PQX KEM is better than 1 PQC KEM and 2 PQC Signatures, that requires some analysis.",
          "createdAt": "2021-10-06T13:42:28Z",
          "updatedAt": "2021-10-06T13:42:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe we looked a bit to much on the Static DH mode when KEM was discussed last. Mehtod 0 will automatically work with PQC KEMs.\r\n\r\nG_X is the public key and G_Y is an key encapsulation / ciphertext. We should likely describe that in the text. Good that you brought this up again @StefanHri \r\n\r\nThis would not be a technical change at all for method 0. The other methods would not work for general KEMs.",
          "createdAt": "2021-10-07T07:21:43Z",
          "updatedAt": "2021-10-07T07:21:43Z"
        },
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "Although I'm not convinced all aspects of \"PQ\" can be solved in EDHOC timeframe, I still think it makes sense to put this in the document already.   ",
          "createdAt": "2021-10-07T07:47:28Z",
          "updatedAt": "2021-10-07T07:47:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "My current plan would be to point out that the Key Exchange in method 0 is already following the KEM interface and can be replaced by any KEM including PQC KEMs. Might also be good to point out that method works with any signature algorithm including the PQC signature algorithm LMS that COSE has already specified. ",
          "createdAt": "2021-10-07T08:39:25Z",
          "updatedAt": "2021-10-07T08:39:25Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "@pbtgit that for raising the issue earlier in #17\r\n\r\n@pbtgit and @StefanHri please review the new PR #182\r\n\r\nMethod 0 is well-prepared for PQC algorithms, you can just replace the current KEM and Signature algorithms with PQC algorithms. Many of the PQC algorithms are very fast. Note that using PQC algorithms _significantly_ increases the message sizes. Signatures, public keys, and encapsulations would be around 800 bytes instead of the current 32-64 bytes.\r\n  ",
          "createdAt": "2021-10-07T12:35:55Z",
          "updatedAt": "2021-10-07T12:35:55Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "Does it make sense to specify a suite?",
          "createdAt": "2021-10-07T17:37:42Z",
          "updatedAt": "2021-10-07T17:37:42Z"
        },
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "Regarding increased size, it does not meet the charter objective/fragmentation limit of 6TiSCH, but it still fits the MTU 6lowpan and may be a price to pay to reach PQC. \r\n\r\nCan the OSCORE re-keying proposals also meet PQC requirements? If so, and a  \"relatively expensive\" key-exchange can be done very infrequently - the overhead is less of an issue. ",
          "createdAt": "2021-10-07T19:42:39Z",
          "updatedAt": "2021-10-07T19:42:39Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> Does it make sense to specify a suite?\r\n\r\nNot right now I think. I think EDHOC needs to wait until COSE has registered PQC Key exchange algorithms. Which will probable happen after NIST standards. I don't think combining LMS signatures with ECC key exchange makes sense. NIST stated that round 3 will end close to the end of 2021. Draft standards will be available 2022-2023 and final standards hopefully 2024.\r\n\r\nNSA has stated that will update their CNSA suite at the end of NIST round 3. I think that makes a lot of sense for US TOP SECRET that requires protection for maybe 50-100 years. For many other use cases I think the quantum threat might bw a bit exagerated. It is unclear if CRQC will ever be built. If the number of qubits double every 18 months like transistor based chips did it will take 25-30 years. ",
          "createdAt": "2021-10-07T23:08:48Z",
          "updatedAt": "2021-10-07T23:08:48Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": ">Regarding increased size, it does not meet the charter objective/fragmentation limit of 6TiSCH, but it still fits the MTU 6lowpan and may be a price to pay to reach PQC.\r\n\r\nCOSE/EDHOC will definitly have PQC algorithms in a few years. A big US company asked for a CNSA compliant suite which was added. CNSA will be updated to PQC is just a few months, but I think EDHOC should wait for COSE when it comes to PQC.\r\n\r\n>Can the OSCORE re-keying proposals also meet PQC requirements? If so, and a \"relatively expensive\" key-exchange can be done very infrequently - the overhead is less of an issue.\r\n\r\nBasically any symmetric construction will be PQC. The current It is unclear if CRQC breaking RSA will ever be built. If such CRQC are ever built, it would take millions of such CRQC hundreds of years to break AES-128. SHA-256 is more quantum resistant then AES-128 and HMAC-SHA-256 is more resistant than SHA-256. NIST currently draft documents label AES-128 and SHA-256 as quantum resistant which make a lot of sense to me. The EDHOC Key-Update use HMAC-SHA-256 and the OSOCRE key update use HKDF-SHA-256. They would both be highly resistant to quantum computers. \r\n",
          "createdAt": "2021-10-07T23:19:37Z",
          "updatedAt": "2021-10-07T23:19:37Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "#182 is now merged into master. Any further comments?",
          "createdAt": "2021-10-11T09:06:21Z",
          "updatedAt": "2021-10-11T09:06:21Z"
        },
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "> #182 is now merged into master. Any further comments?\r\nIt looks good to me, and i appreciate the progress moving forward.",
          "createdAt": "2021-10-11T09:16:24Z",
          "updatedAt": "2021-10-11T09:16:24Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "All good from my side too. Thanks!",
          "createdAt": "2021-10-11T09:29:07Z",
          "updatedAt": "2021-10-11T09:29:07Z"
        }
      ]
    },
    {
      "number": 183,
      "id": "I_kwDOEItXAM49Jzfw",
      "title": "How to handle x5t-sender etc.",
      "url": "https://github.com/lake-wg/edhoc/issues/183",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "For a bit unclear reasons. COSE specifies different x5t header parameters for SS-ECDH sender and recipient, e.g., x5t and x5t-sender. When kid is used for SS-ECDH, the same header parameter is used for both sender and recipient...\r\n\r\nUnless this is changed in COSE. EDHOC need to add some additional specification or clarification.\r\n\r\n1. When used in EDHOC all header parameters always refer to sender.\r\n2. x5t-sender is not used etc.\r\n3. x5t is not used etc.\r\n",
      "createdAt": "2021-10-14T05:53:34Z",
      "updatedAt": "2021-11-06T11:18:43Z",
      "closedAt": "2021-11-06T11:18:43Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "For EDHOC, the header parameter is either transported in ID_CRED_I or ID_CRED_R. So it is clear whether the header parameter refers to I or R, i.e. always to the sender. \r\n\r\nIf we want to allow x5t-sender etc, then we need to provide an interpretation of the listing of algorithms associated to x5t-sender (but not x5t) in relation to the EDHOC cipher suite. Does this list limit the EDHOC cipher suite or can it be ignored? In the former case, the list may need to be updated when new EDHOC cipher suites are defined. This seems like an unnecessary complication when the objective of the header parameter in EDHOC is just to identify the credential and for that purpose x5t etc. seems sufficient. \r\n\r\nI propose we state:\r\n\r\n* header parameter in ID_CRED_x refers to x (i.e. sender)\r\n* x5*-sender MUST NOT be used",
          "createdAt": "2021-10-14T06:53:17Z",
          "updatedAt": "2021-10-14T06:53:17Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": ">For EDHOC, the header parameter is either transported in ID_CRED_I or ID_CRED_R. So it is clear whether the header parameter refers to I or R, i.e. always to the sender.\r\n\r\nI think the same could be said for COSE where the recipient structure makes the separation clear.\r\n\r\n>If we want to allow x5t-sender etc, then we need to provide an interpretation of the listing of algorithms associated to x5t-sender (but not x5t) in relation to the EDHOC cipher suite. Does this list limit the EDHOC cipher suite or can it be ignored? In the former case, the list may need to be updated when new EDHOC cipher suites are defined. This seems like an unnecessary complication when the objective of the header parameter in EDHOC is just to identify the credential and for that purpose x5t etc. seems sufficient.\r\n\r\nI don't undestand this part. EDHOC does not use COSE header parameters to detemine algorithms.\r\n\r\n>I propose we state:\r\n\r\nThat sounds great.",
          "createdAt": "2021-10-14T13:38:24Z",
          "updatedAt": "2021-10-14T13:38:24Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n>> For EDHOC, the header parameter is either transported in ID_CRED_I or ID_CRED_R. So it is clear whether the header parameter refers to I or R, i.e. always to the sender.\r\n>\r\n> I think the same could be said for COSE where the recipient structure makes the separation clear.\r\n\r\nFrom the joint effort in the recent COSE interim, to the best of our knowledge, we think this is all about making distinctions between certificates for different endpoints, although it was stated that this is probably not strictly necessary, so, e.g. two instances of x5t would do the job. There may perhaps be situations where this is not the case, maybe Jim was aware of one. All I'm saying is that *at least* in EDHOC it is possible to make the distinction.\r\n\r\n",
          "createdAt": "2021-10-14T14:19:01Z",
          "updatedAt": "2021-10-14T14:19:01Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": ">> If we want to allow x5t-sender etc, then we need to provide an interpretation of the listing of algorithms associated to x5t-sender (but not x5t) in relation to the EDHOC cipher suite. Does this list limit the EDHOC cipher suite or can it be ignored? In the former case, the list may need to be updated when new EDHOC cipher suites are defined. This seems like an unnecessary complication when the objective of the header parameter in EDHOC is just to identify the credential and for that purpose x5t etc. seems sufficient.\r\n>>\r\n>I don't undestand this part. EDHOC does not use COSE header parameters to detemine algorithms.\r\n\r\nExactly. So what is the significance of the algorithms in table 2 if these COSE header parameters would be used in EDHOC? I'm trying to argue that it may be confusing to use in EDHOC a COSE header parameter which has associated algorithms if those algorithms are not relevant in EDHOC.",
          "createdAt": "2021-10-14T14:24:36Z",
          "updatedAt": "2021-10-14T14:32:55Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": ">> I propose we state:\r\n>>\r\n> That sounds great.\r\n\r\nIn the recent PR I did instead:\r\n\r\n * header parameter in ID_CRED_x refers to x (i.e. sender)\r\n * x5*-sender SHOULD NOT be used\r\n\r\nI think there is a value in allowing applications to apply any COSE header parameter with ID_CRED_x as long as they can identify the credential. But at the same time discourage the use \"-sender\" for those who don't see any use for it.",
          "createdAt": "2021-10-14T14:31:36Z",
          "updatedAt": "2021-10-14T14:33:44Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "I read John's original issue, and I couldn't understand the issue.\r\nI don't think we need x5*-sender ever.\r\n",
          "createdAt": "2021-10-14T20:20:31Z",
          "updatedAt": "2021-10-14T20:20:31Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The problem is that COSE says the following about x5t, x5u, x5chain, x5bag:\r\n\r\n\"The header parameters defined in the previous section are used to\r\nidentify the recipient certificates for the ECDH key agreement\"\r\n\r\nEDHOC needs to state that this is not the case when they are used in EDHOC.",
          "createdAt": "2021-10-15T06:29:49Z",
          "updatedAt": "2021-10-15T06:29:49Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolved in #184, now merged.",
          "createdAt": "2021-10-20T11:55:40Z",
          "updatedAt": "2021-10-20T11:55:40Z"
        }
      ]
    },
    {
      "number": 185,
      "id": "I_kwDOEItXAM49aoQI",
      "title": "Test Vectors - more suits",
      "url": "https://github.com/lake-wg/edhoc/issues/185",
      "state": "CLOSED",
      "author": "stoprocent",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "traces and test vectors"
      ],
      "body": "Hi Guys\r\n\r\nI needed to generate test vectors for more suits ... in particular suit 2 and 3 and I have switched libsodium in my fork to mbedtls but use generic PSA crypto interface API: https://github.com/stoprocent/edhoc/tree/feature/mbedtls/test-vectors-11\r\n\r\nTest vectors generator code in the current format isn't the most cutting edge :) I would be happy to contribute here to improve it but would you consider changing c++ to something like python, nodejs or swift maybe?\r\n\r\nLibsodium as crypto backend does not have support for all required suits. mbedtls (which I have used) with PSA has an interface to define such calls but has no implementation to support EdDSA. \r\n\r\nAlso, JSON and Text handling in the current generator add tons of boilerplate code that makes the generator more complicated.\r\n\r\nI would be nice to narrow down language and crypto lib that covers all the required cipher suits and removes JSON/TXT and CBOR boilerplate code.\r\n\r\nIn the meantime If someone have a time and will to have a look here https://github.com/stoprocent/edhoc/tree/feature/mbedtls/test-vectors-11 it would be nice.",
      "createdAt": "2021-10-19T14:35:54Z",
      "updatedAt": "2023-04-20T07:39:20Z",
      "closedAt": "2023-04-20T07:39:20Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi,\r\n\r\nThanks for working on this!\r\n\r\n>I needed to generate test vectors for more suits ... in particular suit 2 and 3 and I have switched libsodium in my fork to mbedtls but use generic PSA crypto interface API: https://github.com/stoprocent/edhoc/tree/feature/mbedtls/test-vectors-11\r\n\r\nYes, there is definitly a need for more suits, in particular the ECDSA suites 2 and 3. Getting ECDSA test vectors has been identified as a must for draft-selander-lake-traces,  #169.\r\n\r\nIf I understand correct correctly, your updated code is already producing ECDSA test vectors. That is great, then we could include your test vectors in draft-selander-lake-traces.\r\n\r\n>Test vectors generator code in the current format isn't the most cutting edge :) I would be happy to contribute here to improve it but would you consider changing c++ to something like python, nodejs or swift maybe?\r\n\r\nThat is a nice way to put it :) Yes, the current code has an experiment platform to develop the encoding of the protocol. That is the reason it implements CBOR and COSE by it self. It would be nice with a rewrite that use more external libraries for CBOR, COSE, JSON, crypto etc. \r\n\r\nI would be fine with any of python, nodejs or swift. \r\n\r\n>Libsodium as crypto backend does not have support for all required suits. mbedtls (which I have used) with PSA has an interface to define such calls but has no implementation to support EdDSA.\r\n\r\nLibsodium is obviously not the the answer, it is very limiting. \r\n\r\n>Also, JSON and Text handling in the current generator add tons of boilerplate code that makes the generator more complicated.\r\n\r\n>I would be nice to narrow down language and crypto lib that covers all the required cipher suits and removes JSON/TXT and CBOR boilerplate code.\r\n\r\nYes and yes.\r\n\r\n>In the meantime If someone have a time and will to have a look here https://github.com/stoprocent/edhoc/tree/feature/mbedtls/test-vectors-11 it would be nice.\r\n\r\nI will",
          "createdAt": "2021-10-20T08:28:41Z",
          "updatedAt": "2021-10-20T08:28:41Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "I am as well interested in test vectors with more suites",
          "createdAt": "2021-10-22T09:07:29Z",
          "updatedAt": "2021-10-22T09:07:29Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@StefanHri have a look at what I did. You can change algorithms pretty easy with what is supported by mbedtls",
          "createdAt": "2021-10-25T07:28:35Z",
          "updatedAt": "2021-10-25T07:28:35Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@stoprocent @StefanHri \r\n\r\nCould I invite you to comment on the adoption call of the traces draft on the LAKE mailing list? The thread is at: https://mailarchive.ietf.org/arch/msg/lake/cV6a7mc_Y-wfjWEjun14A0cHiRo/\r\n\r\nThanks!",
          "createdAt": "2021-10-25T13:15:41Z",
          "updatedAt": "2021-10-25T13:15:41Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The authors proposed in LAKE interim Dec 15 that -traces should include 4 traces:\r\n\r\n1.\r\n> method 3 (stat-stat)\r\n> suite 0 (X25519)\r\n> I CCS\r\n> R CCS\r\n> ID_CRED_I kid\r\n> ID_CRED_R kid \r\n\r\n2.\r\n> method 0 (sig-sig)\r\n> suite 2 (ECDSA) \r\n> I Cert X.509\r\n> R Cert X.509\r\n> ID_CRED_I x5t\r\n> ID_CRED_R x5t\r\n\r\n3.\r\n> wrong selected cipher suite (ERR-CODE 2)\r\n> method 1 (sig-stat)\r\n> suite 1 (EdDSA, X25519)\r\n> I Cert X.509\r\n> R CCS\r\n> ID_CRED_I x5t\r\n> ID_CRED_R kid\r\n\r\n4.\r\n> method 2 (stat-sig)\r\n> suite 3 (P-256, ECDSA)\r\n> I Cert X.509\r\n> R CCS\r\n> ID_CRED_I x5chain\r\n> ID_CRED_R kccs\u00a0\u00a0\r\n",
          "createdAt": "2021-12-17T07:49:17Z",
          "updatedAt": "2021-12-20T14:41:15Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Marco previously (can't find the reference) proposed 4 traces, but only using methods 0 and 3, and each with cipher suites 0 and 2. Arguments in favor:\r\n * Then there would be traces for all methods with recommended suites \r\n      * Mixed methods are easy to check given details of un-mixed (sig-sig/ stat-stat)\r\n      * Difference between cipher suites 0 and 1 (2 and 3) are too small to merit separate trace\r\n   \r\n",
          "createdAt": "2021-12-17T07:50:31Z",
          "updatedAt": "2021-12-17T07:50:31Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "```\r\nMarco previously (can't find the reference) proposed 4 traces, but only using methods 0 and 3, and each with cipher suites 0 and 2. Arguments in favor:\r\n\r\n    Then there would be traces for all methods with recommended suites\r\n        Mixed methods are easy to check given details of un-mixed (sig-sig/ stat-stat)\r\n        Difference between cipher suites 0 and 1 (2 and 3) are too small to merit separate trace\r\n\r\n```\r\n\r\nWhy was this worth mentioning? I agree with Marco about the methods. But this just seems like an argument that 2 methods and 2 cipher suites would be acceptable, not that it would better or preferred. If we are making 4 traces, making 4 methods and 4 cipher suites is trivial....\r\n\r\n```\r\n\r\n[GS] This was mentioned here because we forgot to acknowledge it at the interim.",
          "createdAt": "2021-12-17T08:16:28Z",
          "updatedAt": "2021-12-17T09:23:52Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think 1 and 3 should definitely be in the traces. They should probably be recommended for transports that can handle 53 byte payloads without significant performance degradation.",
          "createdAt": "2021-12-17T09:05:22Z",
          "updatedAt": "2021-12-17T09:05:22Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Here's the references [1][2].\r\n\r\nFrom [2]: \"Compromise between TC and JM. I see appropriate to have both methods 0 and 3 for both ciphersuites 0 and 2.\"\r\n\r\n[1] https://mailarchive.ietf.org/arch/msg/lake/0N2-CzE-hRQjXNZfUw8edDHZhto/\r\n[2] https://datatracker.ietf.org/meeting/112/materials/minutes-112-lake-01.md",
          "createdAt": "2021-12-19T09:32:43Z",
          "updatedAt": "2021-12-19T09:32:43Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Guys \r\n\r\nI have a crazy end of the year in terms of the amount of work. We had a few rounds of revisions of test vectors. We have fixed some tiny problems like double CBOR bstr in `CRED` when X509 is used. We are working with `Stefan\u00a0Hristozov` with `uEDHOC` and the vectors we have seems to be complete. The main set we work with is exactly like you have specified in the 4th trace. The upcoming week will be a little bit better so I will send you our final set.",
          "createdAt": "2021-12-19T19:33:48Z",
          "updatedAt": "2021-12-19T19:33:48Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@stoprocent Thx for the update!",
          "createdAt": "2021-12-20T07:24:12Z",
          "updatedAt": "2021-12-20T07:24:12Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "About what methods and suites in -traces. I understand the argument provided by @marco-tiloca-sics as follows:\r\n\r\nEDHOC presents two different kinds of authentication, signatures or static DH, and recommends (since Jan 2020 although this is currently discussed) two different curves, ECDSA or EdDSA. In order to test any recommended implementation there is a need to be able to verify against one of the four combinations (SIG, STAT) x (ECDSA, EdDSA). \r\n\r\nThe proposal presented at the LAKE interim (see above) allows this, assuming you can test against another implementation supporting the other side of the test vector in the mixed cases. However, if this is not the case and we want to enable any recommended implementation to be tested against itself, then we should support ECDSA and EdDSA for both SIG-only (method 3) and STAT-only (method 0), which I believe is Marco's proposal.\r\n\r\n@TimothyClaeys You proposed 8 traces in the LAKE interim. If you were to select 4 would you go for Marco's proposal or the proposal at the LAKE interim?\r\n\r\n(As a minor variant suite 0 could be replaced by suite 1, and suite 2 by suite 3. This is independent of the above choice of method x curve.)\r\n",
          "createdAt": "2021-12-20T15:05:05Z",
          "updatedAt": "2021-12-20T15:05:05Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Marco's comments are old. There are also I lot of other old comments. The current proposal took all these into account. A lot of the comments during the past meetings seemed to confuse traces (which is aimed to increse understanding for a human reader) to the test vectors in JSON which are intended to actually test an implementation.\r\n\r\nI see no reason to bring up any of the old comments. If people have comments on the current proposal that would be good, but such comments should also motivation why the change increases understanding for a human reader and why the large number of test vectors in JSON format would not be enough.",
          "createdAt": "2021-12-20T15:55:23Z",
          "updatedAt": "2021-12-20T15:55:23Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "[1] https://mailarchive.ietf.org/arch/msg/lake/0N2-CzE-hRQjXNZfUw8edDHZhto/\r\n[2] https://datatracker.ietf.org/meeting/112/materials/minutes-112-lake-01.md\r\nProvides no motivation whatsover. \r\n\r\nInstead of @gselander speculating maybe @marco-tiloca-sics can expand on why he would like these changes and how they would inprove the traces document compared to current suggestion.\r\n\r\nNote that there has been several people requesting all four methods.... Right now I think the next step will be to just change the SIG-SIG trace to ECDSA and have a real X509 certificate. It seems like everybody agrees that this is an improvement. I think the traces document will stay at 2 traces until there is consensus on how to expand the number of traces. Right now there seems to not be consensus on how to proceed. G\u00f6ran has promised to do 2 traces, and has stated can consider 4 if that makes people significantly more happy. I think more than 4 is not relalistic given the work it would require.\r\n\r\n- Independently, the 13 X25519 JSON test vectors should be merged with equally many P-256 test vectors. An Table of contents should be added. These JSON test vectors are meant for verifying implementations. The traces document is just a small documented subset of the JSON test vectors for a human reader providing a bridge between the spec and the JSON test vectors.",
          "createdAt": "2021-12-20T19:51:58Z",
          "updatedAt": "2021-12-20T19:51:58Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Just like G\u00f6ran phrased it above, I can imagine someone implementing only ciphersuite 0 (or only ciphersuite 2) and hoping to have annotated walkthrough traces for both SIG-SIG and Stat-Stat for conveniently self-testing with that ciphsersuite.\r\n\r\nLimited to ciphersuite 0, that was the case until EDHOC v -08, where the traces still in the EDHOC draft covered methods 0 and 3. At that time, I could imagine as a natural follow-up having two equivalent traces for ciphersuite 2, still without excluding the possible addition or further traces.\r\n\r\nI can surely live without the above and I understand the intent of not having too many traces in a draft. If the idea is to add only 2 new ones, I agree that the additions presented at the latest LAKE interim are preferable as bringing more added value, while the JSON test vectors are still meant for the main verification process.",
          "createdAt": "2021-12-20T22:04:04Z",
          "updatedAt": "2021-12-20T22:04:04Z"
        }
      ]
    },
    {
      "number": 186,
      "id": "I_kwDOEItXAM49ltsR",
      "title": "EAD internal structure and the EAD API",
      "url": "https://github.com/lake-wg/edhoc/issues/186",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander",
        "emanjon"
      ],
      "labels": [
        "PR exists"
      ],
      "body": "Looking at how EAD is used ace-ake-authz, I am not sure that the\r\n\r\n```\r\n   ead = 1* (\r\n     ead_label : int,\r\n     ead_value : any,\r\n   )\r\n```\r\n\r\nwhere ead_label identifies a single ead_value is optimal. The structure above enables reuse of ead_label between protocols but give no information about the context that ead_value should be used in like ace-ake-authz. From an random order of data elements it might be hard to figure out what to do with the data. Alternatives would be\r\n\r\n```\r\n   ead = (\r\n     ead_label : int,\r\n     *ead_value : any,\r\n   )\r\n```\r\n\r\nWhere ead_label a specific message of ace-ake-authz or just identifies ace-ake-authz (the message number is known anyway). As far as I know there several protocols planning to use EAD. I think we need to look at how these protocols use EAD and if any reuse between different protocols seem likely. If reuse does not seem to be likely, the second structure with the same ead_label being used in all of the ace-ake-authz messages seems to be the most simple solution. Using a single int saves some bytes, and using a single int for a protocol like ace-ake-authz will likely use less of the code points. \r\n\r\nAnother question is the EAD API. For larger object like CWT, the EDHOC EAD API needs to accept a encoded form. It should not reencode the CWT. This opens up the problem of what happens if somebody inputs wrongly encoded CBOR. This was identified as a problem in the EDHOC-KDF. It is less of a problem here but still not nice. This would point to a byte string as input being the way to go. \r\n\r\n```\r\n   ead = (\r\n     ead_label : int,\r\n     ead_value : bytes,\r\n   )\r\n```\r\n\r\nThis would make the API simple, make sure that everything is correcly encoded CBOR, but likely increase the message size (compared to a CBOR sequence). However applications like ace-ake-authz might then be able to do internal optimizations inside the byte string.\r\n\r\n(Note that the internal encoding of EAD does not affect anything else in EDHOC, it is more a topic for the protocols wanting to use EAD)",
      "createdAt": "2021-10-22T08:05:24Z",
      "updatedAt": "2021-12-14T10:47:42Z",
      "closedAt": "2021-12-14T10:47:42Z",
      "comments": [
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "How is that now done e.g. in test vector 10 https://github.com/lake-wg/edhoc/blob/62586170c39150cc9f30665b5489a454fc429fc6/test-vectors-11/vectors-json.txt#L829?",
          "createdAt": "2021-10-22T08:28:18Z",
          "updatedAt": "2021-10-22T08:28:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Right now in the test vectors, \"183ba1f646000102030405\" is an encoding of a CBOR sequence following the structure \r\n\r\n```\r\n   ead = 1* (\r\n     ead_label : int,\r\n     ead_value : any,\r\n   )\r\n```\r\n\r\nThe actual content is just made up data to show the formating. The actual data has no meaning. Nobody has registered any ead_label values.\r\n",
          "createdAt": "2021-10-22T08:33:22Z",
          "updatedAt": "2021-10-22T08:33:22Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "An alternative is to keep the current high structure but change any to bytes\r\n\r\n```\r\n   ead = 1* (\r\n     ead_label : int,\r\n     ead_value : bytes,\r\n   )\r\n\r\n```\r\nWhat ead_label is supposed to identify is not described in the EDHOC document. It would be good with some guidance to protocols wanting to use EAD. For example that they should register a single int for the protocol.",
          "createdAt": "2021-10-22T08:35:59Z",
          "updatedAt": "2021-10-22T08:36:16Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "I think the question is: should the EAD be consumed by the EDHOC implementation always encoded or sometimes encoded and how to differentiate that?",
          "createdAt": "2021-10-22T08:58:24Z",
          "updatedAt": "2021-10-22T08:58:24Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": ">I think the question is: should the EAD be consumed by the EDHOC implementation always encoded or sometimes encoded and how to differentiate that?\r\n\r\nBased on your comments on API and that we likely want to ensure that ead is correct CBOR, the answer is likely that the input to the API should always be non-CBOR int and byte strings. The input byte string does then not need to be CBOR.",
          "createdAt": "2021-10-22T09:32:44Z",
          "updatedAt": "2021-10-22T09:32:44Z"
        }
      ]
    },
    {
      "number": 187,
      "id": "I_kwDOEItXAM49l-2H",
      "title": "Test vector documentation",
      "url": "https://github.com/lake-wg/edhoc/issues/187",
      "state": "CLOSED",
      "author": "StefanHri",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "traces and test vectors"
      ],
      "body": "The test vectors demonstrate how EDHOC can be used with different: methods, with/without EAD, with different kinds of ID_CREDs, etc. Can you provide documentation, e.g., a table showing what each test vector is testing?\r\n```\r\n| Vector | method | ID_CRED_R | ID_CRED_I | ..   |\r\n| ------ | ------ | --------- | --------- | ---- |\r\n| 1      | 1      | kid       | kid       |      |\r\n| 2      | 2      | x5t       | x5t       |      |\r\n\r\n```",
      "createdAt": "2021-10-22T09:21:02Z",
      "updatedAt": "2023-04-20T07:42:22Z",
      "closedAt": "2023-04-20T07:42:21Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "That seems reasonable",
          "createdAt": "2021-10-22T09:35:27Z",
          "updatedAt": "2021-10-22T09:35:27Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The -traces draft seems to fulfil the needs for test vectors. Closing this as there has not been any more discussion.",
          "createdAt": "2023-04-20T07:42:21Z",
          "updatedAt": "2023-04-20T07:42:21Z"
        }
      ]
    },
    {
      "number": 188,
      "id": "I_kwDOEItXAM49xdkS",
      "title": "Missing SUITES_R in the test vectors ",
      "url": "https://github.com/lake-wg/edhoc/issues/188",
      "state": "CLOSED",
      "author": "StefanHri",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "traces and test vectors"
      ],
      "body": "Currently, the test vectors do not include SUITES_R. For my tests, I am assuming that SUITES_R contains the selected suite by the initiator. However, it will be better to provide SUITES_R in the test vectors since this will make automated testing easier.\r\n\r\nAdditionally, it will be nice if SUITES_R and SUITES_I are provided unencoded as well.",
      "createdAt": "2021-10-26T14:31:17Z",
      "updatedAt": "2023-04-20T07:42:04Z",
      "closedAt": "2023-04-20T07:42:04Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that SUITES_R only exist as part of a specific error message. SUITES_I also only exist as part of  a specific message_1. There are no general SUITES_I and SUITES_R outside of these messages.\r\n\r\nAre you looking for list of the the cipher suites that I and R supports? ",
          "createdAt": "2021-10-31T17:49:09Z",
          "updatedAt": "2021-10-31T17:49:09Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "yes exactly.",
          "createdAt": "2021-10-31T17:57:50Z",
          "updatedAt": "2021-10-31T17:57:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The traces draft now includes an example of the use of SUITES_R. There could be more examples in the test vectors on the github repo. \r\n\r\nNote, however, that the procedure for how I selects and R proposes cipher suites in error messages is out of scope of EDHOC, it only specifies how I and R must act to avoid being tricked into using a cipher suite which is not the most preferred by I which is supported by both. ",
          "createdAt": "2022-03-17T18:05:57Z",
          "updatedAt": "2022-03-17T18:05:57Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> The traces draft now includes an example of the use of SUITES_R.\r\n\r\nThis closes the issue",
          "createdAt": "2023-04-20T07:42:04Z",
          "updatedAt": "2023-04-20T07:42:04Z"
        }
      ]
    },
    {
      "number": 189,
      "id": "I_kwDOEItXAM498ozB",
      "title": "Optional padding to hide length of ID_CRED_I and ID_CRED_R?",
      "url": "https://github.com/lake-wg/edhoc/issues/189",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "Close?",
        "PR exists"
      ],
      "body": "The confidentiality protection in EDHOC does not conceal the length of the identifiers ID_CRED_I and ID_CRED_R. We should maybe add OPTIONAL padding for deployments wanting to give eavesdroppers less information regarding the length of these identifiers. This could quite easily be achieved by allowign 0 or more simple values (e.g. true) in the beginning of the plaintexts.\r\n\r\n```\r\nOLD:\r\nplaintext = ( ID_CRED_R / bstr / int, Signature_or_MAC_2, ? EAD_2 )\r\n\r\nNEW:\r\nplaintext = ( *true, ID_CRED_R / bstr / int, Signature_or_MAC_2, ? EAD_2 )\r\n\r\n```",
      "createdAt": "2021-10-29T08:23:18Z",
      "updatedAt": "2022-01-21T16:06:55Z",
      "closedAt": "2022-01-21T16:06:55Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Having optional padding is getting quite common. It was part of ESP (but not IKEv2 as far as I know) where it is called traffic flow confidentiality. It is part of the TLS 1.3 record layer.\r\n\r\nI recently wrote a paper about identity padding\r\n\r\nhttps://arxiv.org/abs/2105.10440\r\n\r\nBased on this work I commented on HPKE which then added guidance on padding. \r\n ",
          "createdAt": "2021-10-29T08:29:00Z",
          "updatedAt": "2021-10-29T08:29:00Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "ESP can pad out to 254 bytes, but not more.\r\nIKEv2 has the same format for the encrypted payload, and can do the same, but can also pad within using empty blocks.  Nobody does that, AFAIK.\r\n",
          "createdAt": "2021-10-29T14:01:56Z",
          "updatedAt": "2021-10-29T14:01:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a PR. https://github.com/lake-wg/edhoc/pull/190\r\n\r\nThe document definitly need to information on that the length of identities can be leaked and that this can be mitigated by e.g., chosing fixed length identifier for all the Initiators.\r\n\r\nI think OPTIONAL padding should be added for use cases like certificates. I am not sure it will be used very much, but if feels like a feature a security protocol is expected to have.",
          "createdAt": "2021-11-03T08:58:56Z",
          "updatedAt": "2021-11-03T08:58:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on Carsten's comment in COSE about failure from kid with int,\r\n\r\n- My initial proposal was to make padding support for both sending and receiving optional.\r\n- Marco commented on the PR and wanted mandatory support on the receiving side.\r\n- Marco commented during the interim that he also wanted mandatory support on the sending side.\r\n\r\nBefore I update the PR, I think this should be discussed a bit more. There has earlier been comments from @chrysn and @StefanHri to not increase code size. I agree with Marco that mandatory to support for receiver makes sense. I am not sure about mandatory support for sender. My understanding that code for adding and removing padding would be different pieces of code. \r\n\r\n\r\n\r\n",
          "createdAt": "2021-12-16T14:23:44Z",
          "updatedAt": "2021-12-16T14:23:44Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "I proposed:\r\n\r\n- For the receiver, mandatory to support, since a padded message might legitimately come at any time.\r\n- For the sender, optional to use, on a per-message basis. If the sender is surely never going to pad an outgoing message, no need for it to support padding as a sender at all, of course.",
          "createdAt": "2021-12-19T09:29:47Z",
          "updatedAt": "2021-12-19T09:29:47Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": ">For the sender, optional to use\r\n\r\nI think the important question is if it is mandatory to implement.",
          "createdAt": "2021-12-20T15:48:51Z",
          "updatedAt": "2021-12-20T15:48:51Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Currently the spec says\r\n\"Padding is OPTIONAL to support.\"\r\n\r\nWe proposed in the interim \r\n\r\n\u201dOPTIONAL to support when sending \r\nMANDATORY to support when received\"\r\n\r\nWhat is the preferred text?\r\n",
          "createdAt": "2021-12-20T16:58:41Z",
          "updatedAt": "2021-12-20T16:58:41Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics \r\n\r\nThe optional to use per message is already in the PR I think as \"may be used\".\r\n\r\nReading \"For the sender, optional to use, on a per-message basis. If the sender is surely never going to pad an outgoing message, no need for it to support padding as a sender at all, of course.\" It seem like you agree with the suggestion proposed at the interim. We understood it as you proposed changes.\r\n\r\nThe \"may be used\" could be changes to \"optional....\" if that is better.",
          "createdAt": "2021-12-20T19:33:07Z",
          "updatedAt": "2021-12-20T19:33:07Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I updated the PR based on the suggestion from Marco and G\u00f6ran. I also align the text with the other text in the section. New suggested text is\r\n\r\n`Implementations MAY support padding when sending messages. Removal of padding is MANDATORY to support when receiving messages.`\r\n\r\nAs discussed with kid of type int, I don't think mandatory support when recieving is strictly necesary, but might be a good approach anyway.",
          "createdAt": "2021-12-20T20:10:39Z",
          "updatedAt": "2021-12-20T20:10:39Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "tl;dr : Thanks, the commit at https://github.com/lake-wg/edhoc/commit/1d0e09a2ca3f701a46e55337d17c16f8e7f8f6dc looks good :-)\r\n\r\n> The optional to use per message is already in the PR I think as \"may be used\".\r\n\r\nYes and that's fine, but that's when describing the message processing from the point of view of the sender.\r\n\r\n> Reading \"For the sender, optional to use, on a per-message basis. If the sender is surely never going to pad an outgoing message, no need for it to support padding as a sender at all, of course.\" It seem like you agree with the suggestion proposed at the interim. We understood it as you proposed changes.\r\n\r\nThe comment referred to Section 7 \"Mandatory-to-Implement Compliance Requirements\", for which the new text in PR #190 used to say \"OPTIONAL to support\". The proposed change was to limit that to the sender side (consistent with the above), but mandatory to the recipient side, to ensure it's able to parse the padding if that was included.\r\n\r\n> The \"may be used\" could be changes to \"optional....\" if that is better.\r\n\r\nI think that \"may be used\" is also fine in those sections about message processing from the point-of-view of the sender.",
          "createdAt": "2021-12-20T22:06:29Z",
          "updatedAt": "2021-12-20T22:06:29Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems like we agree on the high level stuff. Me and G\u00f6ran spotted that \"remove\" and \"discard\" might be the wrong words. The requirement should be on being able to parse. G\u00f6ran will improve the text. After that we are likely ready to merge\r\n\r\n",
          "createdAt": "2022-01-12T14:38:35Z",
          "updatedAt": "2022-01-12T14:38:35Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I made another commit: 4ee9fc02\r\n\r\nMTI section now says:\r\n\r\n> Implementations MAY support padding of plaintext when sending messages. Implementations MUST support padding of plaintext when receiving messages, i.e. MUST be able to parse padded messages.\r\n\r\nAlso some editorials. A difficulty to express what length is hidden since \"plaintext\" is defined as plain text + padding. This lead to the wording \"unpadded plaintext\":\r\n\r\n> PAD = 1*true is padding that may be used to hide the length of the unpadded plaintext\r\n\r\nI kept \"discard\" in the other parts because I didn't find any good word to substitute for. I didn't like \"ignore\" or similar as that action seemed to indicate \"do nothing\". So now it says:\r\n\r\n> Decrypt CIPHERTEXT_2, see {{asym-msg2-proc}}, and discard padding, if present.\r\n\r\n\r\n",
          "createdAt": "2022-01-13T10:25:47Z",
          "updatedAt": "2022-01-13T10:25:47Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been merged. Closing",
          "createdAt": "2022-01-21T16:06:55Z",
          "updatedAt": "2022-01-21T16:06:55Z"
        }
      ]
    },
    {
      "number": 191,
      "id": "I_kwDOEItXAM4-Lo6Q",
      "title": "Correct the information about non-repudiation.",
      "url": "https://github.com/lake-wg/edhoc/issues/191",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?",
        "Merged to master"
      ],
      "body": "The current text talks about saving the ephemeral key. The text should talk about saving all the input to the signature algorithm. These are not send on the wire, but they are also not as secret at the private key.",
      "createdAt": "2021-11-03T09:00:19Z",
      "updatedAt": "2022-01-21T09:27:42Z",
      "closedAt": "2022-01-21T09:27:41Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The repudiation text is fine now, but it is formulated as if both parties have signature keys or both parties have static DH keys. We may want to cover methods 2 and 3 as well.",
          "createdAt": "2021-11-06T11:31:42Z",
          "updatedAt": "2021-11-06T11:31:42Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "G\u00f6ran's comments above was handled and there has not been any further comment. Seems to be agreement regarding the current non-repudiation text. Closing this",
          "createdAt": "2022-01-21T09:27:41Z",
          "updatedAt": "2022-01-21T09:27:41Z"
        }
      ]
    },
    {
      "number": 192,
      "id": "I_kwDOEItXAM4-RFaJ",
      "title": "Marco Tiloca's review of -12",
      "url": "https://github.com/lake-wg/edhoc/issues/192",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/H9VmTuS5XUL4H72NF6jpVtQ40yQ/\r\n\r\n=============\r\n\r\n[Section 1.1]\r\n\r\n* \"This specification focuses on referencing instead of transporting \r\ncredentials to reduce message overhead.\"\r\n\r\n    It is possible to transport credentials both by reference and by \r\nvalue. What suggests the case of transport by reference to be the \r\n\"focus\"? Perhaps you mean that it is possible and preferable/recommended \r\nto transport credentials by reference?\r\n\r\n* \"future algorithms and credentials targeting IoT\"\r\n\r\n    This probably means \"future algorithms and identity credential types \r\ntargeting IoT\".\r\n\r\n* s/compromise of the long-term keys/compromise of the long-term \r\nidentity keys\r\n\r\n\r\n[Section 1.3]\r\n\r\n* s/the number of bytes in EDHOC + CoAP can be/the EDHOC message size in \r\nbytes when transferred in CoAP can be\r\n\r\n\r\n[Section 1.5]\r\n\r\n* \"and CDDL [RFC8610]. The Concise Data Definition Language (CDDL) is \r\nused to express CBOR data structures [RFC8949]\"\r\n\r\n    can be rephrased as:\r\n\r\n    \"and the Concise Data Definition Language (CDDL) [RFC8610], which is \r\nused to express CBOR data structures [RFC8949]\"\r\n\r\n\r\n[Section 2]\r\n\r\n* \"Verification of a common preferred cipher suite\"\r\n\r\n    Shouldn't this say: \"Verification of a commonly supported cipher \r\nsuite which is most preferred by the Initiator\" ?\r\n\r\n\r\n[Section 3.2]\r\n\r\n* In Figure 4, the second and third column can rather have labels \r\n\"Initiator Authentication Key\" and \"Responder Authentication Key\".\r\n\r\n\r\n[Section 3.3]\r\n\r\n* \"or in a subsequent application protocol\"\r\n\r\n    can be expanded as:\r\n\r\n    \"or of an application/security context in a subsequent application \r\nprotocol\"\r\n\r\n\r\n[Section 3.4.1]\r\n\r\n* \"EDHOC transports that do not inherently provide correlation across \r\nall messages of an exchange\"\r\n\r\n    can be rephrased as:\r\n\r\n    \"Transports that do not inherently provide correlation across all \r\nEDHOC messages of an exchange\"\r\n\r\n\r\n[Section 3.5.1]\r\n\r\n* \"The EDHOC implementation or the application must enforce information \r\nabout ...\"\r\n\r\n    can be rephrased as:\r\n\r\n    \"The EDHOC implementation or the application must take a decision on \r\nallowing or not a connection based on information about ...\"\r\n\r\n* s/if it is allowed to communicate with/if it is allowed to communicate \r\nwith those\r\n\r\n\r\n[Section 4.3]\r\n\r\n* The context can for example be the empty (zero-length) sequence or a \r\nsingle CBOR byte string.\r\n\r\n    Isn't the context supposed to be just a single CBOR byte string? See \r\nhow it is defined in Section 4.2 when introducing Expand.\r\n\r\n* s/where H() is the hash function/where H() is the EDHOC hash algorithm\r\n\r\n\r\n[Section 5.1]\r\n\r\n* s/a second time for EDHOC processing/a second time for EDHOC \r\nprocessing within the same ongoing session\r\n\r\n\r\n[Section 5.2.3]\r\n\r\n* \"If an error message is sent, the session MUST be discontinued.\"\r\n\r\n    Is this sentence actually required? Regardless sending an error \r\nmessage or not, the session is discontinued if any processing step \r\nfails, which is the reason for possibly sending an error message. Or are \r\nthere situations where an error message is sent even if no processing \r\nstep fails?\r\n\r\n\r\n[Section 5.3.1]\r\n\r\n* \"G_Y, the ephemeral public key of the Responder, and ...\"\r\n\r\n    Just to avoid any risk to interpret this as the concatenation of \r\nthree elements, I suggest to rephrase as:\r\n\r\n    \"G_Y (i.e., the ephemeral public key of the Responder) and ...\"\r\n\r\n\r\n[Section 5.3.2]\r\n\r\n* s/H() is the hash function in/H() is the EDHOC hash algorithm in\r\n\r\n* \"is the 'signature' field of a COSE_Sign1 object as defined in Section \r\n4.4 of [I-D.ietf-cose-rfc8152bis-struct] using the signature algorithm ...\"\r\n\r\n    should be rephrased as:\r\n\r\n    \"is the 'signature' field of a COSE_Sign1 object as defined in \r\nSection 4.2 of [I-D.ietf-cose-rfc8152bis-struct], computed as defined in \r\nSection 4.4 of [I-D.ietf-cose-rfc8152bis-struct] by using the signature \r\nalgorithm ...\"\r\n\r\n\r\n[Section 5.3.3]\r\n\r\n* \"If an error message is sent, the session MUST be discontinued.\"\r\n\r\n    Is this sentence actually required? Regardless sending an error \r\nmessage or not, the session is discontinued if any processing step \r\nfails, which is the reason for possibly sending an error message. Or are \r\nthere situations where an error message is sent even if no processing \r\nstep fails?\r\n\r\n\r\n[Section 5.4.2]\r\n\r\n* s/H() is the hash function in/H() is the EDHOC hash algorithm in\r\n\r\n* \"is the 'signature' field of a COSE_Sign1 object as defined in Section \r\n4.4 of [I-D.ietf-cose-rfc8152bis-struct] using the signature algorithm ...\"\r\n\r\n    should be rephrased as:\r\n\r\n    \"is the 'signature' field of a COSE_Sign1 object as defined in \r\nSection 4.4 of [I-D.ietf-cose-rfc8152bis-struct], computed as defined in \r\nSection 4.4 of [I-D.ietf-cose-rfc8152bis-struct] by using the signature \r\nalgorithm ...\"\r\n\r\n* s/as defined in Section 5.3 of [I-D.ietf-cose-rfc8152bis-struct]/as \r\ndefined in Sections 5.2 and 5.3 of [I-D.ietf-cose-rfc8152bis-struct]\r\n\r\n\r\n[Section 5.4.3]\r\n\r\n* s/or the prepended C_I/or the prepended C_R\r\n\r\n* s/as defined in Section 5.3 of [I-D.ietf-cose-rfc8152bis-struct]/as \r\ndefined in Sections 5.2 and 5.3 of [I-D.ietf-cose-rfc8152bis-struct]\r\n\r\n* \"If an error message is sent, the session MUST be discontinued.\"\r\n\r\n    Is this sentence actually required? Regardless sending an error \r\nmessage or not, the session is discontinued if any processing step \r\nfails, which is the reason for possibly sending an error message. Or are \r\nthere situations where an error message is sent even if no processing \r\nstep fails?\r\n\r\n* s/no other party than the Responder/no other party than the Initiator\r\n\r\n\r\n[Section 5.5]\r\n\r\n* \"In deployments where no protected application message is sent from \r\nthe Responder to the Initiator, the Responder MUST send message_4.\"\r\n\r\n    Consider to rephrase as:\r\n\r\n    \"In deployments where no protected application message is sent from \r\nthe Responder to the Initiator, message_4 MUST be supported and the \r\nResponder MUST send message_4\"\r\n\r\n\r\n[Section 5.5.2]\r\n\r\n* s/as defined in Section 5.3 of [I-D.ietf-cose-rfc8152bis-struct]/as \r\ndefined in Sections 5.2 and 5.3 of [I-D.ietf-cose-rfc8152bis-struct]\r\n\r\n\r\n[Section 5.5.3]\r\n\r\n* s/as defined in Section 5.3 of [I-D.ietf-cose-rfc8152bis-struct]/as \r\ndefined in Sections 5.2 and 5.3 of [I-D.ietf-cose-rfc8152bis-struct]\r\n\r\n* \"If an error message is sent, the session MUST be discontinued.\"\r\n\r\n    Is this sentence actually required? Regardless sending an error \r\nmessage or not, the session is discontinued if any processing step \r\nfails, which is the reason for possibly sending an error message. Or are \r\nthere situations where an error message is sent even if no processing \r\nstep fails?\r\n\r\n\r\n[Section 6]\r\n\r\n* s/error SHALL be/An error message SHALL be\r\n\r\n\r\n[Section 6.3]\r\n\r\n* \"Error code 2 MUST only be used in a response to message_1 ...\"\r\n\r\n    can be rephrased as:\r\n\r\n    \"Error code 2 MUST only be used when replying to message_1\" , \r\navoiding to use words like \"request\" and \"response\".\r\n\r\n\r\n[Section 6.3.2]\r\n\r\n* s/the Responder shall only accept message_1 if/the Responder SHALL \r\naccept message_1 only if\r\n\r\n* The last two paragraph are not further comments on the examples, but \r\nare rather related to the cipher suite negotiation. I think they better \r\nfit as last paragraphs of Section 6.3.1.\r\n\r\n\r\n[Section 8]\r\n\r\n* \"Compromise of PRK_4x3m leads to compromise of all exported keying \r\nmaterial derived after the last invocation of the EDHOC-KeyUpdate function.\"\r\n\r\n    I suggest to expand as follows:\r\n\r\n    \"Compromise of PRK_4x3m leads to compromise of all exported keying \r\nmaterial derived from that key through the EDHOC-Exporter function. If \r\nthe EDHOC-KeyUpdate function has been used to renew PRK_4x3m, the \r\ncompromise is limited to the exported keying material derived from the \r\nPRK_4x3m installed after the last invocation of the EDHOC-KeyUpdate \r\nfunction.\"\r\n\r\n\r\n[Section 8.6]\r\n\r\n* The way the first paragraph starts is probably a remnant of when CoAP \r\nwas still part of the document body rather than in Appendix A. Also, as \r\nlater discussed in Appendix A.3, the Echo exchange is started by a CoAP \r\nserver, regardless if it acts exactly as Responder. I suggest to \r\nrephrase the paragraph as follows.\r\n\r\n    \"EDHOC itself does not provide countermeasures against \r\nDenial-of-Service attacks. In particular, by sending a number of new or \r\nreplayed message_1 an attacker may cause the Responder to allocate \r\nstate, perform cryptographic operations, and amplify messages. To \r\nmitigate such attacks, an implementation SHOULD rely on lower layer \r\nmechanisms. For instance, when EDHOC is transferred  as an exchange of \r\nCoAP messages, the CoAP server can use the Echo option defined in \r\n[I-D.ietf-core-echo-request-tag], which forces the CoAP client to \r\ndemonstrate its reachability at its apparent network address.\"\r\n\r\n\r\n[Section 8.7]\r\n\r\n* \"... but intended to simplify ...\"\r\n\r\n    Since \"security context\" is mentioned in the following sentences, it \r\nis better to explicitly mention that they are referring to the \r\napplication protocol and not to EDHOC anymore.\r\n\r\n\r\n[Appendix A.3]\r\n\r\n* \"EDHOC message_2 or the EDHOC error message is sent from the server to \r\nthe client in the payload of a 2.04 (Changed) response. EDHOC message_3 \r\nor the EDHOC error message is sent from the client to the server's \r\nresource in the payload of a POST request. If needed, an EDHOC error \r\nmessage is sent from the server to the client in the payload of a 2.04 \r\n(Changed) response.\"\r\n\r\n    This text should also be a remnant of old versions. When using EDHOC \r\nfor OSCORE, EDHOC error messages as CoAP responses are sent as error \r\nresponses, see the first paragraph in Appendix A.3.1. The text above can \r\nrather, more generically, be:\r\n\r\n    \"The server sends to the client EDHOC message_2 in the payload of a \r\n2.04 (Changed) response, or an EDHOC error message in the payload of a \r\nresponse. If needed, the client sends to the server an EDHOC error \r\nmessage in the payload of a POST request. Otherwise, the client sends to \r\nthe server EDHOC message_3 in the payload of a POST request. If needed, \r\nthe server sends to the client an EDHOC error message in the payload of \r\na response.\"\r\n\r\n\r\n[Appendix A.3.1]\r\n\r\n* The last sentence can be extended, to mention what additionally is \r\ndefined in draft-ietf-core-oscore-edhoc, besides the EDHOC+OSCORE \r\nrequest. This includes especially: a deterministic and efficient \r\nconversion from OSCORE Sender/Recipient IDs to EDHOC connection \r\nidentifiers; web-linking and target attributes for discovering of EDHOC \r\nresources.\r\n\r\n\r\n[Nits]\r\n\r\n* Three instances of \"key material\" should be \"keying material\" for \r\nconsistency.\r\n\r\n* Section 3.3.1, s/and sends in message_2/and sends it in message_2\r\n\r\n* Section 3.3.2, s/and a EDHOC connection/and an EDHOC connection\r\n\r\n* Section 3.6\r\n--- s/pre-defined int label/pre-defined integer label\r\n--- s/Implementation can either use/Implementations can either use\r\n\r\n* Section 3.7, s/requires an 'y' parameter/requires a 'y' parameter\r\n\r\n* Section 3.8, s/protected out of scope of EDHOC/whose protection is out \r\nof the scope of EDHOC\r\n\r\n* Section 3.9\r\n--- s/verifying cipher suite/verifying a cipher suite\r\n--- s/know identity of Responder/know identity of the Responder\r\n--- s/know identity of Initiator/know identity of the Initiator\r\n\r\n* Section 4.3, s/same key kan be/same key can be\r\n\r\n* Section 5.1, s/then process according to Section 6, else process \r\nas/then process it according to Section 6, else process it as\r\n\r\n* Section 5.3.2, s/facilitate retrieval of/facilitate the retrieval of\r\n\r\n* Section 5.4.2\r\n--- s/facilitate retrieval of/facilitate the retrieval of\r\n--- s/intialization vector/initialization vector\r\n--- s/or derived application keys/or derive application keys\r\n\r\n* Section 5.4.2, s/intialization vector/initialization vector\r\n\r\n* Section 6.3.2, s/then Responder MUST discontinue/then the Responder \r\nMUST discontinue\r\n\r\n* Section 8, s/protection is provided/protection are provided\r\n\r\n* Section 8.2\r\n--- s/and instead rely/and instead relies\r\n--- s/the Responders identity/the Responder's identity\r\n--- s/Requirement for how/Requirements for how\r\n\r\n* Section 8.6\r\n--- s/forces the initiator/forces the Initiator\r\n\r\n* Section 9.6, s/an CWT Claims Set/a CWT Claims Set\r\n\r\n* Section 9.14, s/is defined as/are defined as\r\n\r\n* Appendix A.3, s/using resource directory/using a resource directory\r\n\r\n* Appendix B, s/compatibily/compatibility\r\n\r\n* Appendix C.1, s/dignostic/diagnostic\r\n\r\n* Appendix E\r\n--- s/which does not handle/which do not handle\r\n--- s/with respect the current/with respect to the current\r\n\r\n* Appendix F, s/for message 1/for message_1\r\n",
      "createdAt": "2021-11-04T11:27:34Z",
      "updatedAt": "2021-12-14T09:31:21Z",
      "closedAt": "2021-12-14T09:31:21Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "[Nits] fixed in #199",
          "createdAt": "2021-11-10T07:03:09Z",
          "updatedAt": "2021-11-10T07:03:32Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "review comments with small changes fixed in #199. The following was fixed:\r\n\r\n=============\r\n\r\n[Section 1.3]\r\n\r\n* s/the number of bytes in EDHOC + CoAP can be/the EDHOC message size in \r\nbytes when transferred in CoAP can be\r\n\r\nNEW\r\nthe EDHOC message size when transferred in CoAP can be\r\n\r\n[Section 1.5]\r\n\r\n* \"and CDDL [RFC8610]. The Concise Data Definition Language (CDDL) is \r\nused to express CBOR data structures [RFC8949]\"\r\n\r\n \u00a0\u00a0 can be rephrased as:\r\n\r\n \u00a0\u00a0 \"and the Concise Data Definition Language (CDDL) [RFC8610], which is \r\nused to express CBOR data structures [RFC8949]\"\r\n\r\nNEW\r\nand the Concise Data Definition Language (CDDL, {{RFC8610}}), which is used to express CBOR data structures.\r\n\r\n[Section 2]\r\n\r\n* \"Verification of a common preferred cipher suite\"\r\n\r\n \u00a0\u00a0 Shouldn't this say: \"Verification of a commonly supported cipher \r\nsuite which is most preferred by the Initiator\" ?\r\n\r\nNEW \r\nVerification of the selected cipher suite.\r\n\r\n\r\n\r\n\r\n\r\n[Section 3.2]\r\n\r\n* In Figure 4, the second and third column can rather have labels \r\n\"Initiator Authentication Key\" and \"Responder Authentication Key\".\r\n\r\n\r\nNEW\r\n~~~~~~~~~~~\r\n+--------+------------------+------------------+-------------------+\r\n| Method | Initiator        | Responder        | Reference         |\r\n|   Type | Authentication   | Authentication   |                   |\r\n|  Value | Key              | Key              |                   |\r\n+--------+------------------+------------------+-------------------+\r\n|      0 | Signature Key    | Signature Key    | [[this document]] |\r\n|      1 | Signature Key    | Static DH Key    | [[this document]] |\r\n|      2 | Static DH Key    | Signature Key    | [[this document]] |\r\n|      3 | Static DH Key    | Static DH Key    | [[this document]] |\r\n+--------+------------------+------------------+-------------------+\r\n~~~~~~~~~~~\r\n{: #fig-method-types title=\"Authentication Keys for Method Types\"}\r\n{: artwork-align=\"center\"}\r\n\r\n[Section 3.3]\r\n\r\n* \"or in a subsequent application protocol\"\r\n\r\n \u00a0\u00a0 can be expanded as:\r\n\r\n \u00a0\u00a0 \"or of an application/security context in a subsequent application \r\nprotocol\"\r\n\r\n\r\nNEW\r\n<not done, did not see any reason to change this>\r\n\r\n\r\n[Section 3.4.1]\r\n\r\n* \"EDHOC transports that do not inherently provide correlation across \r\nall messages of an exchange\"\r\n\r\n \u00a0\u00a0 can be rephrased as:\r\n\r\n \u00a0\u00a0 \"Transports that do not inherently provide correlation across all \r\nEDHOC messages of an exchange\"\r\n\r\nNEW\r\n<changed as proposed>\r\n\r\n\r\n\r\n[Section 3.5.1]\r\n\r\n\r\n\r\n* s/if it is allowed to communicate with/if it is allowed to communicate \r\nwith those\r\n\r\nOLD\r\neach party needs to have a trusted third party public key as trust anchor to verify the end-entity CWTs, and a specific identity or set of identities in the 'sub' (subject) claim of the CWT to determine if it is allowed to communicate with.\r\nNEW\r\neach party needs to have a trusted third party public key as trust anchor to verify the end-entity CWTs, and a specific identity or set of identities to verify the 'sub' (subject) claim of the CWT.\r\n\r\n\r\n[Section 4.3], [Section 5.3.2], [Section 5.4.2]\r\n\r\n* s/where H() is the hash function/where H() is the EDHOC hash algorithm\r\n\r\nNEW\r\n<changed as proposed>\r\n\r\n[Section 5.1]\r\n\r\n* s/a second time for EDHOC processing/a second time for EDHOC \r\nprocessing within the same ongoing session\r\n\r\nNEW\r\n<changed as proposed>\r\n\r\n\r\n[Section 5.3.1]\r\n\r\n* \"G_Y, the ephemeral public key of the Responder, and ...\"\r\n\r\n \u00a0\u00a0 Just to avoid any risk to interpret this as the concatenation of \r\nthree elements, I suggest to rephrase as:\r\n\r\n \u00a0\u00a0 \"G_Y (i.e., the ephemeral public key of the Responder) and ...\"\r\n\r\nNEW\r\n<changed as proposed>\r\n\r\n\r\n[Section 5.3.2]\r\n\r\n* \"is the 'signature' field of a COSE_Sign1 object as defined in Section \r\n4.4 of [I-D.ietf-cose-rfc8152bis-struct] using the signature algorithm ...\"\r\n\r\n \u00a0\u00a0 should be rephrased as:\r\n\r\n \u00a0\u00a0 \"is the 'signature' field of a COSE_Sign1 object as defined in \r\nSection 4.2 of [I-D.ietf-cose-rfc8152bis-struct], computed as defined in \r\nSection 4.4 of [I-D.ietf-cose-rfc8152bis-struct] by using the signature \r\nalgorithm ...\"\r\n\r\nNEW\r\nis the 'signature' field of a COSE_Sign1 object, computed as specified in Section 4.4 of [I-D.ietf-cose-rfc8152bis-struct] by using the signature \r\nalgorithm ...\r\n\r\n\r\n[Section 5.4.2]\r\n\r\n* \"is the 'signature' field of a COSE_Sign1 object as defined in Section \r\n4.4 of [I-D.ietf-cose-rfc8152bis-struct] using the signature algorithm ...\"\r\n\r\n \u00a0\u00a0 should be rephrased as:\r\n\r\n \u00a0\u00a0 \"is the 'signature' field of a COSE_Sign1 object as defined in \r\nSection 4.4 of [I-D.ietf-cose-rfc8152bis-struct], computed as defined in \r\nSection 4.4 of [I-D.ietf-cose-rfc8152bis-struct] by using the signature \r\nalgorithm ...\"\r\n\r\n* s/as defined in Section 5.3 of [I-D.ietf-cose-rfc8152bis-struct]/as \r\ndefined in Sections 5.2 and 5.3 of [I-D.ietf-cose-rfc8152bis-struct]\r\n\r\nNEW\r\nis the 'signature' field of a COSE_Sign1 object, computed as specified in Section 4.4 of [I-D.ietf-cose-rfc8152bis-struct] by using the signature \r\nalgorithm ...\r\n\r\n\r\n\r\n\r\n\r\n[Section 5.4.3]\r\n\r\n* s/or the prepended C_I/or the prepended C_R\r\n\r\nNEW\r\n<changed as proposed>\r\n\r\n\r\n* s/as defined in Section 5.3 of [I-D.ietf-cose-rfc8152bis-struct]/as \r\ndefined in Sections 5.2 and 5.3 of [I-D.ietf-cose-rfc8152bis-struct]\r\n\r\nNEW\r\n<changed as proposed>\r\n\r\n[Section 5.5.2]\r\n\r\n* s/as defined in Section 5.3 of [I-D.ietf-cose-rfc8152bis-struct]/as \r\ndefined in Sections 5.2 and 5.3 of [I-D.ietf-cose-rfc8152bis-struct]\r\n\r\nNEW\r\n<changed as proposed>\r\n\r\n\r\n\r\n[Section 5.5]\r\n\r\n* \"In deployments where no protected application message is sent from \r\nthe Responder to the Initiator, the Responder MUST send message_4.\"\r\n\r\n \u00a0\u00a0 Consider to rephrase as:\r\n\r\n \u00a0\u00a0 \"In deployments where no protected application message is sent from \r\nthe Responder to the Initiator, message_4 MUST be supported and the \r\nResponder MUST send message_4\"\r\n\r\nNEW\r\n<changed as proposed>\r\n\r\n\r\n[Section 5.5.3]\r\n\r\n* s/as defined in Section 5.3 of [I-D.ietf-cose-rfc8152bis-struct]/as \r\ndefined in Sections 5.2 and 5.3 of [I-D.ietf-cose-rfc8152bis-struct]\r\n\r\nNEW\r\n<changed as proposed>\r\n\r\n\r\n[Section 6]\r\n\r\n* s/error SHALL be/An error message SHALL be\r\n\r\nNEW\r\n<no change, 'error' refers to name of data structure>\r\n\r\n\r\n[Section 6.3]\r\n\r\n* \"Error code 2 MUST only be used in a response to message_1 ...\"\r\n\r\n \u00a0\u00a0 can be rephrased as:\r\n\r\n \u00a0\u00a0 \"Error code 2 MUST only be used when replying to message_1\" , \r\navoiding to use words like \"request\" and \"response\".\r\n\r\nNEW\r\n<changed as proposed>\r\n\r\n\r\n[Section 6.3.2]\r\n\r\n* s/the Responder shall only accept message_1 if/the Responder SHALL \r\naccept message_1 only if\r\n\r\nNEW\r\n<changed as proposed>\r\n\r\n* The last two paragraph are not further comments on the examples, but \r\nare rather related to the cipher suite negotiation. I think they better \r\nfit as last paragraphs of Section 6.3.1.\r\n\r\nNEW\r\n<changed as proposed>\r\n\r\n\r\n\r\n[Section 8.6]\r\n\r\n* The way the first paragraph starts is probably a remnant of when CoAP \r\nwas still part of the document body rather than in Appendix A. Also, as \r\nlater discussed in Appendix A.3, the Echo exchange is started by a CoAP \r\nserver, regardless if it acts exactly as Responder. I suggest to \r\nrephrase the paragraph as follows.\r\n\r\n \u00a0\u00a0 \"EDHOC itself does not provide countermeasures against \r\nDenial-of-Service attacks. In particular, by sending a number of new or \r\nreplayed message_1 an attacker may cause the Responder to allocate \r\nstate, perform cryptographic operations, and amplify messages. To \r\nmitigate such attacks, an implementation SHOULD rely on lower layer \r\nmechanisms. For instance, when EDHOC is transferred\u00a0 as an exchange of \r\nCoAP messages, the CoAP server can use the Echo option defined in \r\n[I-D.ietf-core-echo-request-tag], which forces the CoAP client to \r\ndemonstrate its reachability at its apparent network address.\"\r\n\r\nNEW\r\n<changed as proposed> minus one instance of \"its\"\r\n\r\n\r\n[Appendix A.3]\r\n\r\n* \"EDHOC message_2 or the EDHOC error message is sent from the server to \r\nthe client in the payload of a 2.04 (Changed) response. EDHOC message_3 \r\nor the EDHOC error message is sent from the client to the server's \r\nresource in the payload of a POST request. If needed, an EDHOC error \r\nmessage is sent from the server to the client in the payload of a 2.04 \r\n(Changed) response.\"\r\n\r\n \u00a0\u00a0 This text should also be a remnant of old versions. When using EDHOC \r\nfor OSCORE, EDHOC error messages as CoAP responses are sent as error \r\nresponses, see the first paragraph in Appendix A.3.1. The text above can \r\nrather, more generically, be:\r\n\r\n \u00a0\u00a0 \"The server sends to the client EDHOC message_2 in the payload of a \r\n2.04 (Changed) response, or an EDHOC error message in the payload of a \r\nresponse. If needed, the client sends to the server an EDHOC error \r\nmessage in the payload of a POST request. Otherwise, the client sends to \r\nthe server EDHOC message_3 in the payload of a POST request. If needed, \r\nthe server sends to the client an EDHOC error message in the payload of \r\na response.\"\r\n\r\nNEW\r\nThe server sends to the client EDHOC message_2 in the payload of a 2.04 (Changed) response, or an EDHOC error message in the payload of a response. If there is an error, then the client sends to the server an EDHOC error message in the payload of a POST request. Otherwise, the client sends to the server EDHOC message_3 in the payload of a POST request. If there is an error, then the server sends to the client an EDHOC error message in the payload of a response. \r\n\r\n\r\n\r\n[Appendix A.3.1]\r\n\r\n* The last sentence can be extended, to mention what additionally is \r\ndefined in draft-ietf-core-oscore-edhoc, besides the EDHOC+OSCORE \r\nrequest. This includes especially: a deterministic and efficient \r\nconversion from OSCORE Sender/Recipient IDs to EDHOC connection \r\nidentifiers; web-linking and target attributes for discovering of EDHOC \r\nresources.\r\n\r\nNEW\r\nThat specification also contains conversion from OSCORE Sender/Recipient IDs to EDHOC connection identifiers, web-linking and target attributes for discovering of EDHOC resources.\r\n\r\n",
          "createdAt": "2021-11-10T12:28:39Z",
          "updatedAt": "2021-11-10T12:28:39Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Remaining comments not addressed.\r\n\r\n=============\r\n\r\n[Section 1.1]\r\n\r\n* \"This specification focuses on referencing instead of transporting \r\ncredentials to reduce message overhead.\"\r\n\r\n \u00a0\u00a0 It is possible to transport credentials both by reference and by \r\nvalue. What suggests the case of transport by reference to be the \r\n\"focus\"? Perhaps you mean that it is possible and preferable/recommended \r\nto transport credentials by reference?\r\n\r\n* \"future algorithms and credentials targeting IoT\"\r\n\r\n \u00a0\u00a0 This probably means \"future algorithms and identity credential types \r\ntargeting IoT\".\r\n\r\n* s/compromise of the long-term keys/compromise of the long-term \r\nidentity keys\r\n\r\n\r\n\r\n[Section 3.5.1]\r\n\r\n* \"The EDHOC implementation or the application must enforce information \r\nabout ...\"\r\n\r\n \u00a0\u00a0 can be rephrased as:\r\n\r\n \u00a0\u00a0 \"The EDHOC implementation or the application must take a decision on \r\nallowing or not a connection based on information about ...\"\r\n\r\n\r\n\r\n[Section 4.3]\r\n\r\n* The context can for example be the empty (zero-length) sequence or a \r\nsingle CBOR byte string.\r\n\r\n \u00a0\u00a0 Isn't the context supposed to be just a single CBOR byte string? See \r\nhow it is defined in Section 4.2 when introducing Expand.\r\n\r\n\r\n\r\n[Section 5.2.3]\r\n\r\n* \"If an error message is sent, the session MUST be discontinued.\"\r\n\r\n \u00a0\u00a0 Is this sentence actually required? Regardless sending an error \r\nmessage or not, the session is discontinued if any processing step \r\nfails, which is the reason for possibly sending an error message. Or are \r\nthere situations where an error message is sent even if no processing \r\nstep fails?\r\n\r\n\r\n\r\n\r\n\r\n\r\n[Section 5.3.3]\r\n\r\n* \"If an error message is sent, the session MUST be discontinued.\"\r\n\r\n \u00a0\u00a0 Is this sentence actually required? Regardless sending an error \r\nmessage or not, the session is discontinued if any processing step \r\nfails, which is the reason for possibly sending an error message. Or are \r\nthere situations where an error message is sent even if no processing \r\nstep fails?\r\n\r\n\r\n\r\n\r\n[Section 5.4.3]\r\n\r\n* \"If an error message is sent, the session MUST be discontinued.\"\r\n\r\n \u00a0\u00a0 Is this sentence actually required? Regardless sending an error \r\nmessage or not, the session is discontinued if any processing step \r\nfails, which is the reason for possibly sending an error message. Or are \r\nthere situations where an error message is sent even if no processing \r\nstep fails?\r\n\r\n* s/no other party than the Responder/no other party than the Initiator\r\n\r\n\r\n\r\n[Section 5.5.3]\r\n\r\n\r\n* \"If an error message is sent, the session MUST be discontinued.\"\r\n\r\n \u00a0\u00a0 Is this sentence actually required? Regardless sending an error \r\nmessage or not, the session is discontinued if any processing step \r\nfails, which is the reason for possibly sending an error message. Or are \r\nthere situations where an error message is sent even if no processing \r\nstep fails?\r\n\r\n\r\n\r\n\r\n[Section 8]\r\n\r\n* \"Compromise of PRK_4x3m leads to compromise of all exported keying \r\nmaterial derived after the last invocation of the EDHOC-KeyUpdate function.\"\r\n\r\n \u00a0\u00a0 I suggest to expand as follows:\r\n\r\n \u00a0\u00a0 \"Compromise of PRK_4x3m leads to compromise of all exported keying \r\nmaterial derived from that key through the EDHOC-Exporter function. If \r\nthe EDHOC-KeyUpdate function has been used to renew PRK_4x3m, the \r\ncompromise is limited to the exported keying material derived from the \r\nPRK_4x3m installed after the last invocation of the EDHOC-KeyUpdate \r\nfunction.\"\r\n\r\n\r\n[Section 8.7]\r\n\r\n* \"... but intended to simplify ...\"\r\n\r\n \u00a0\u00a0 Since \"security context\" is mentioned in the following sentences, it \r\nis better to explicitly mention that they are referring to the \r\napplication protocol and not to EDHOC anymore.\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-11-10T12:30:14Z",
          "updatedAt": "2021-11-10T12:30:14Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Marco confirmed that comments are addressed",
          "createdAt": "2021-12-14T09:31:21Z",
          "updatedAt": "2021-12-14T09:31:21Z"
        }
      ]
    },
    {
      "number": 193,
      "id": "I_kwDOEItXAM4-RIgF",
      "title": "Allow COSE HPKE algorithms for method 0?",
      "url": "https://github.com/lake-wg/edhoc/issues/193",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "COSE is discussing to register HPKE (KEM) agorithms.\r\n\r\nhttps://datatracker.ietf.org/doc/draft-tschofenig-cose-hpke/\r\nhttps://mailarchive.ietf.org/arch/msg/cose/KbuVtBk5vcxrTOzi2TWTUZiikmk/\r\n\r\nThere does not seem to be any current advantages to use these HPKE algorithms in EDHOC. In the future several people have expressed that they would like EDHOC method 0 to support PQC KEMs when they are registered to COSE. If the belief is that COSE will rely on HPKE for PQC KEMs, then EDHOC should consider supporting COSE HPKE KEMs already now. (This would be a quite trivial change).\r\n\r\nNote that method 1,2,3 cannot use KEMs without modifications. Building an AKE with KEMs instead of ECDH makes things less efficient as you need more roundtrip. For an example how an SIGMA like AKE with KEMs could look like, see e.g. KEMTLS. https://eprint.iacr.org/2020/534.pdf",
      "createdAt": "2021-11-04T11:45:09Z",
      "updatedAt": "2021-12-16T14:13:22Z",
      "closedAt": "2021-12-16T14:13:22Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Considering we don't know how COSE will define PQC KEMs, perhaps it is too early to make the change now? Instead introduce it in an update together with a new cipher suite when available from COSE.",
          "createdAt": "2021-11-05T14:22:45Z",
          "updatedAt": "2021-11-05T14:22:45Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "If I were going to attempt to do challenged-networks and PQC, then what I'd be doing it figuring out a model where long-term AES256 Kerberos tickets are installed into the devices at manufacturing time.  I'd be setting up federated kerberos with operational networks.\r\n\r\nFor COSE and EDHOC, what this means is: doing authentication with this long-term key, and some PQC KEM magic instead of ECDH.  I don't really believe in that magic, btw.\r\n",
          "createdAt": "2021-11-05T19:59:10Z",
          "updatedAt": "2021-11-05T19:59:10Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": ">Considering we don't know how COSE will define PQC KEMs, perhaps it is too early to make the change now?\r\n\r\nWe don't but we might get an idea quite soon. \r\n\r\n>Instead introduce it in an update together with a new cipher suite when available from COSE.\r\n\r\nIt is definitly to early to introduce any cipher suites. What could potentially be done right now is to define use of COSE HPKE algorithms in EDHOC, allowing people to use them with the private cipher suites.\r\n\r\nA future draft with ciphersuites might be preferable, but the PQC train is moving fast right now as the NIST will announce the winners and NSA will update the CNSA suite in just a few months. I would not be suprised at all to see a draft with HPKE PQC algorithms in CFRG in time for IETF 113.",
          "createdAt": "2021-11-09T21:24:58Z",
          "updatedAt": "2021-11-09T21:24:58Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Close this for now. Current plan is to do this in a separate draft at a later stage that can also introduce cipher suites.\r\n\r\nFor things that are not US CNSA TOP SECRET with data lifetimes of many decades, there might be more urgent things that attacks from quantum computers.\r\n\r\n\"There is however a huge gap between today\u2019s noisy small quantum computers and the large-scale fault-tolerant quantum computers that could threaten today\u2019s public key cryptography. ASD (Australia) recently told the Australian senate that they believe quantum computing poses no immediate threat to the current cryptographic methods used to encrypt data across the federal government. ASD is not convinced quantum computing is moving fast enough. Currently stored encrypted data holdings will remain secure from decryption for lengths of time appropriate to the sensitivity of the data. ASD does not expect it will be possible within these lengths of time to build a quantum computer that can break the current algorithms and key sizes. NSA has suggested that for things not requiring more than 10 years of protection, malware and supply chain security is likely more pressing issues.\u201d\r\n ",
          "createdAt": "2021-12-16T14:13:22Z",
          "updatedAt": "2021-12-16T14:13:22Z"
        }
      ]
    },
    {
      "number": 194,
      "id": "I_kwDOEItXAM4-RIxq",
      "title": "Stefan Hristozov's review of -12",
      "url": "https://github.com/lake-wg/edhoc/issues/194",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/Od5HG1M9TtOytpJ4Iblsc_2xsE0/\r\n\r\n========\r\n\r\n2. Outline\r\n\"ID_CRED_I and ID_CRED_R are credential identifiers enabling the recipient party to retrieve the credential of I and R, respectively.\"\r\nI will replace this definition with something like:\r\nID_CRED_I and ID_CRED_R are used to identify and optionally transport the authentication keys of the Initiator and the Responder, respectively.\r\n\r\n\r\n\r\n\r\n3.8 EAD\r\nIs EAD data generated by the application or data that is pre-provisioned or obtained from somewhere. If the former is true I would like to suggest that the specification allows for implementations where all inputs and output that are generated at run time by the application are provided in non-encoded form to the EDHOC implementation. In this way, the interface to the application will be simpler and CBOR encoding and decoding can be completely hidden from the application developer. This applies especially for EAD, see issue #186. The general question is who is supposed to encode/decode EAD? The application or the EDHOC implementation? As far I understand the specification now only the application knows how to encode and decode EAD.\r\n\r\n\r\n\r\n5.2.1\r\n\"If the most preferred cipher suite is selected then SUITES_I is encoded as that cipher suite, i.e., as an int.\"\r\nAm I understanding that correctly: If other suites are supported in addition they are not sent, e.g., if the initiator supports suites 1,2,3, where 1 is preferred and selected, 1 is sent as int and 2,3 are not sent? If so I will suggest making this sentence more clear.\r\n\r\n\r\n\r\n\r\n6 Error Handling\r\nWhat is the use case for a success error code? Probably it is good to give some example or reference why it is useful to log successes using a predefined error code and encoding. Is logging the only use case for the success error code? For example, my implementation logs many things for debugging purposes. However, I never needed a success error code.\r\n\r\nThe spec says that success error code must not be sent, therefore the sentence \"Error code 0 MAY be used internally..\" needs to be \"Error code 0 MAY be used _only_ internally..\"?\r\n\r\n\"ERR_INFO can contain any type of CBOR item\", see figure 7. Who decides what is the type of the CBOR item? Is this the EDHOC implementation developer?\r\n\r\n\r\n\r\n\r\n7 Mandatory-to-Implement Compliance Requirements\r\n\"Constrained endpoints SHOULD implement cipher suite 0 or cipher suite 2.\"\r\nThe difference between 0 and 1 and between 2 and 3 is only the size of the tag, i.e. the used algorithms are the same. -> I will suggest changing to \"...suite 0/1 or cipher suite 2/3\" or similar.\r\n\r\nError messages with which error codes are mandatory to implement? Is only an error message with ERR_CODE 2 mandatory to implement?\r\n\r\n\r\n\r\n\r\n8.7 Implementation consideration\r\n\"The selection of trusted CAs should be done very carefully and certificate revocation should be supported.\"\r\n\r\nIs OCSP (RFC6960) what should be used for certificate revocation checking? How revocation can be accomplished with C509? How OCSP and EDHOC interact? Can OCSP stapling be used with EDHOC? Can we combine OCSP stapling with EAD?\r\n\r\nAdditionally, to verify a certificate the device should be aware of the time, which is often problematic on constrained devices, i.e. when certificates are used the device must have a Real-Time Clock (RTC).\r\n",
      "createdAt": "2021-11-04T11:46:45Z",
      "updatedAt": "2021-12-14T14:21:17Z",
      "closedAt": "2021-12-14T14:21:17Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "#200 opened to address this review.",
          "createdAt": "2021-11-10T14:03:30Z",
          "updatedAt": "2021-11-10T14:03:30Z"
        }
      ]
    },
    {
      "number": 195,
      "id": "I_kwDOEItXAM4-RbpN",
      "title": "Compact Representation Apendinx",
      "url": "https://github.com/lake-wg/edhoc/issues/195",
      "state": "CLOSED",
      "author": "stoprocent",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hi Guys\r\n\r\nI think there is a mistake in:\r\nCompact Representation - https://github.com/lake-wg/edhoc/blob/master/draft-ietf-lake-edhoc.md#compact-representation-comrep\r\n\r\n> The encoding of the point at infinity is not supported. Compact representation does not change any requirements on validation. If a y-coordinate is required for validation or compatibily with APIs the value ~yp SHALL be set to zero. For such use, the compact representation can be transformed into the SECG point compressed format by prepending it with the single byte 0x02 (i.e., M = 0x02 || X).\r\n\r\n\r\nI think single byte prefix will depend if `y` is odd or even. From above paragraph it looks like it will always be `single byte 0x02`\r\n",
      "createdAt": "2021-11-04T13:21:50Z",
      "updatedAt": "2021-11-06T10:45:16Z",
      "closedAt": "2021-11-05T14:42:38Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> \"it looks like it will always be single byte 0x02\"\r\n\r\nThat is the intention. Always using 0x03 does also work, as does flipping a coin. The sign of y does not affect the output when the ECDH function only depends on the x value of G_XY, so called \"compact output\" (basically all modern DH functions work like this). Maybe we should add a sentence describing this.\r\n\r\nFor some more information see the following drafts:\r\n\r\nhttps://datatracker.ietf.org/doc/draft-harkins-cfrg-dnhpke/\r\nhttps://datatracker.ietf.org/doc/html/rfc6090",
          "createdAt": "2021-11-04T18:03:31Z",
          "updatedAt": "2021-11-04T18:03:31Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@emanjon ECDH is not the only operation. If the `METHOD` is set to signature this will not work if the private key is not generated in the way to support compact mode. I did some testing with multiple crypto libraries and if the private key is not generated in a particular way signature validation will not succeed. In my opinion we should either have the correct prefix or have a clear instructions about private key generation which I would not be a huge fan of :P",
          "createdAt": "2021-11-05T10:35:38Z",
          "updatedAt": "2021-11-05T10:35:38Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Appendix B is only intended for the ephermeral ECDH keys sent on the wire. The generation and format of the authentication keys (Signatures or static ECDH) are given by other specifications such as COSE, X509, C509....\r\n\r\nI agree that the following sentence is not good and should be updated.\r\n\r\n```\r\n3.7. Ephemeral Public Keys\r\nEDHOC always uses compact representation of elliptic curve points, see Appendix B.\r\n\r\n```\r\n\r\n(FYI, the private keys are not elliptic curve points at all, they are just scalars).\r\n",
          "createdAt": "2021-11-05T12:50:51Z",
          "updatedAt": "2021-11-05T12:50:51Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm sorry I had a brain fog :) Of course, we are taking about `G_XY` ECDH process. I've mixed it up with message authentication.",
          "createdAt": "2021-11-05T14:42:31Z",
          "updatedAt": "2021-11-05T14:42:31Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue is closed but just to keep track, here is the clarification made following the discussion in this issue: a5fde0e9",
          "createdAt": "2021-11-06T10:45:15Z",
          "updatedAt": "2021-11-06T10:45:15Z"
        }
      ]
    },
    {
      "number": 196,
      "id": "I_kwDOEItXAM4-YAo-",
      "title": "Kathleen Moriarty's review of -12",
      "url": "https://github.com/lake-wg/edhoc/issues/196",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Merged to master"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/_WXM6xHrWf-QUk_at5KUJal3ius/\r\n\r\n=========================\r\n\r\nSection 1.1 Nit\r\nOLD:\r\nEDHOC does\r\n   currently not support pre-shared key (PSK) authentication as\r\n   authentication with static Diffie-Hellman public keys by reference\r\n   produces equally small message sizes but with much simpler key\r\n   distribution and identity protection.\r\n\r\nNEW:\r\nEDHOC does not\r\n   currently support pre-shared key (PSK) authentication as\r\n   authentication with static Diffie-Hellman public keys by reference\r\n   produces equally small message sizes but with much simpler key\r\n   distribution and identity protection.\r\n\r\nSection 1.2:\r\n\r\nThe intent of the following sentence is to convey that these libraries are already in use for OSCORE, but the wording of the following sentence could be a bit more clear:\r\nOLD:\r\nBy reusing existing libraries, the additional code size can be kept very\r\n   low. \r\nPROPOSED:\r\nIn using libraries already in the code base for OSCORE, the additional code size can be kept very\r\n   low. \r\n\r\n\r\nSection 3.8\r\nS/enrolment/enrollment/\r\n\r\nSection 4.3\r\nS/kan/can/\r\nIn the following sentence: in most encryption algorithms the same key kan be\r\n\r\nIANA Registries\r\n\r\nI see for the registries created that Expert review [RFC8126] is required. What documentation is required? Is it also Specification required or is there other guidance for the experts when considering updates? I see this is discussed in 9.14, but perhaps adding specification recommended in each of the places a registry is created would be helpful.\r\n",
      "createdAt": "2021-11-06T10:41:26Z",
      "updatedAt": "2021-12-14T14:30:18Z",
      "closedAt": "2021-12-14T14:30:18Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Registration procedures was discussed in the  2021 October 5 interim, see issue #167. ",
          "createdAt": "2021-11-06T11:16:45Z",
          "updatedAt": "2021-11-06T11:16:45Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "#167 reopened",
          "createdAt": "2021-12-14T14:30:18Z",
          "updatedAt": "2021-12-14T14:30:18Z"
        }
      ]
    },
    {
      "number": 198,
      "id": "I_kwDOEItXAM4-fh9o",
      "title": "Updated Internet Threat Model considerations",
      "url": "https://github.com/lake-wg/edhoc/issues/198",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "Close?",
        "Merged to master"
      ],
      "body": "IAB has started a program to look into updates of the Internet Threat Model. Looks like the outcome might be a guidance document. One new threat is centralised data collection where the other endpoint might not be acting in the interest of the users.\r\nhttps://www.iab.org/activities/programs/internet-threat-model-model-t-program/\r\nhttps://datatracker.ietf.org/doc/html/draft-arkko-arch-internet-threat-model-guidance\r\n\r\nThere is not reason to change the protocol, but I think it would be good with some privacy considerations. Using the same credentail with several other endpoints enables tracking.\r\n\r\nI will make a PR soon with a reference to draft-arkko-arch-internet-threat-model-guidance\r\n",
      "createdAt": "2021-11-09T10:44:39Z",
      "updatedAt": "2022-01-21T09:31:10Z",
      "closedAt": "2022-01-21T09:31:09Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been merged for a while without any comments. Was discussed at the interim. Closing.",
          "createdAt": "2022-01-21T09:31:09Z",
          "updatedAt": "2022-01-21T09:31:09Z"
        }
      ]
    },
    {
      "number": 201,
      "id": "I_kwDOEItXAM4-nxOl",
      "title": "Minor cryptographic explanations",
      "url": "https://github.com/lake-wg/edhoc/issues/201",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "Close?",
        "PR exists",
        "Merged to master"
      ],
      "body": "- The MAC length MUST be at least 8 bytes.\r\n- Compact representation only for G_X and G_Y\r\n- nonce for binding with the event that triggered KeyUpdate\r\n- Explanation of no running hash\r\n\r\nThese have already seen commits to master",
      "createdAt": "2021-11-11T06:15:19Z",
      "updatedAt": "2022-01-21T16:22:20Z",
      "closedAt": "2022-01-21T16:22:20Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Add that less then 64 bit MACs shall not be used with EDHOC. The current text only refer to the MAC length parameter and not to COSE AEADs in general.\r\n",
          "createdAt": "2021-12-10T09:41:46Z",
          "updatedAt": "2021-12-10T09:41:46Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Add G_X collision text already in Responder message_1 processing. Based on Stephen's review this might be missed otherwise.",
          "createdAt": "2021-12-10T09:50:52Z",
          "updatedAt": "2021-12-10T09:50:52Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Security considerations on 64 and 128 bit MACs based on Stefans review",
          "createdAt": "2021-12-10T10:03:02Z",
          "updatedAt": "2021-12-10T10:03:02Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Some of the considerations in\r\nhttps://mailarchive.ietf.org/arch/msg/lake/75nRaD6czYG6RqLT06Qe8C_lsaM/\r\n\r\nShould likely be added.",
          "createdAt": "2021-12-10T10:59:09Z",
          "updatedAt": "2021-12-10T10:59:09Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The last parts was fixed in commit 678619c.",
          "createdAt": "2022-01-21T16:22:20Z",
          "updatedAt": "2022-01-21T16:22:20Z"
        }
      ]
    },
    {
      "number": 202,
      "id": "I_kwDOEItXAM4-n6bP",
      "title": "Stephen Farrell 's review of -12",
      "url": "https://github.com/lake-wg/edhoc/issues/202",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?",
        "Merged to master"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/JMVbv_rlfozxMh3n9ckmB7lvxAM/\r\n\r\n-----------------------------------\r\n\r\nHiya,\r\n\r\nAt our last interim I also promised to review edhoc. This\r\nis my late (apologies;-) review. This is all review by me\r\nas just another participant, not as co-chair. (So please\r\ndo feel entirely free to ignore bits or just say no.)\r\n\r\nGenerally, I guess I could implement from this, were I\r\nfluent in CBOR/COSE etc, so I think it's in good shape.\r\nAll but my first comment are editorial. I assumed that\r\nwe'll have others who do crypto analysis and implementers\r\nwho'll provide yet more detailed feedback as we go, so\r\nwe're not quite there yet but getting pretty close IMO.\r\nGood job!\r\n\r\nCheers,\r\nS.\r\n\r\n\r\n- Connection identifiers (which can be byte-strings) are\r\nsent in clear which could enable various network observer\r\nattacks for protocols that later send values obviously\r\nderived from connection IDs in clear. (I see from A.3 that\r\none main use case does expose these values anyway.). To\r\ngiven an example of how this could be concerning, if some\r\nproxy (that just muxes packets) sits between I and R then\r\nthose cleartext identifiers could allow an observer on that\r\nlink to more easily do traffic analysis of a specific\r\ninitiator's traffic. Was any consideration given to deriving\r\nsuch identifiers in a less obvious manner? I'm not claiming\r\nthat that'd be a great improvement, just asking.\r\n\r\nEditorial:\r\n\r\n- 80 pages is still big, I understand its hard to delete\r\n   stuff but hope we keep trying:-)\r\n\r\n- 1.1, CWT, CSS and C509 could do with expansion here on\r\n   1st use.  (Perversely, X.509 is probably sufficiently\r\nwell known and disliked to not need such:-) That might also\r\nmake the text before (or caption of) Figure 1 easier to\r\nread.\r\n\r\n- section 1.2: last para - this is repetitive, suggest\r\n   making these points just once\r\n\r\n(Aside on figures/captions: I always find it a useful\r\nexercise to ensure that a figure+caption can, by itself,\r\nmake a meaningful slide to present with no additions. And\r\nthen I remove most text that's already in the caption from\r\nelsewhere in the document. Might be worth a try.)\r\n\r\n- Figure 1: I don't get how the \"Figure 1 shows...\"\r\n   sentence results in those example message sizes. I'm not\r\ndoubting the numbers, but the text could be improved\r\n(maybe, as suggested above via caption text.)\r\n\r\n- 1.4: are \"EDHOC authenticated with digital signatures\"\r\n   and \"EDHOC authenticated with signature keys\" different\r\nthings? If not, using one term is likely better. If so,\r\nusing terms that are more clearly different would be good.\r\n\r\n- 1.5: which is normative, CDDL or English language text?\r\n   We seem to have a bit of a mixture.\r\n\r\n- Figure 2: I see why message 2 doesn't also use an AEAD(),\r\n   but probably no harm to say that more explicitly here.\r\nMaybe moving some of the relevant text from section 8 to\r\nhere would work.\r\n\r\n- Figure 2: consider showing the AAD as an input to the\r\n   AEAD() construct in the figure. That might be too\r\ncumbersome or it may help, not sure.\r\n\r\n- 3.5.1, 3.5.2 and 3.5.3: this might be some text to\r\n   shorten a lot - how much is it really needed? Could it be\r\ncut down to the stuff with 2119 terms and a bit more? (I'd\r\nkeep the examples though.)\r\n\r\n- 3.6: does EDHOC *really* support hash based sigs? What'd\r\n   be the consequence for EDHOC of using a private key too\r\nmany times or loss of state?  (Are you missing a reference\r\nto rfc8778 there too or is one embedded in COSE stuff\r\nsomewhere?)\r\n\r\n- 4.1: Be good to clarify that the PRK_<foo> labels in\r\n   4.1.x are basically local key names. (Same for others in\r\n4.2.)\r\n\r\n- 4.1.2/3: You need to define R and I in each of these as\r\n   (I guess) the static DH secret and not as the identities\r\nof the initiator and recipient which were (I thought) the\r\nprevious uses of I and R. Might be better to use different\r\nnames though.\r\n\r\n- 5.2.2: What does \"truncated after the cipher suite\r\n   selected for this session\" mean? (Also be good to say\r\norder of preference means first in network byte order is\r\nmost-preferred.) I'm also puzzled by \"but all cipher suites\r\nwhich are more preferred than the selected cipher suite in\r\nthe list MUST be included in SUITES_I.\"\r\n\r\n- 5.3.2: This seems to be the first occurrence of the\r\n   \"<<..>>\" symbolism. A forward ref to C.1 would be good.\r\n\r\n- 5.3.3: is it ok to pass EAD_2 to the application before\r\n   checking authentication?\r\n\r\n- section 6: I found this v. hard to follow. Suspect a\r\n   re-write for clarity would be good.\r\n\r\n- section 8: \"EDHOC provides a minimum of 64-bit\r\n   security...\" could do with a reference to wherever that\r\nconclusion is derived. And 64-bit security isn't quite \"in\r\nline\" with TLS is it?\r\n\r\n- 8.7: stating that a \"truly random seed MUST\" be provided\r\n   isn't a sensible use of 2119, and isn't entirely under\r\nthe control of an implementer (maybe the section title\r\ncould be re-thought?).\r\n\r\n- 8.7 (or somewhere): if some random values are visible\r\n   (connection identifiers?) then it can make sense to\r\nderive those from a different random stream compared to\r\nthat used for randomly picking secrets. That way the\r\npublicly visible random numbers are less likely to leak\r\ninformation about the state of the PRNG used for secrets.\r\nCould be worth a mention.\r\n\r\n- 8.7: discarding a message_1 because of G_X\r\n   collision/reflection should also be stated earlier - it\r\ncould very easily be missed here.\r\n\r\n- 8.7: TEE => \"cannot\" be tampered is a little optimistic\r\n   IMO.\r\n\r\n- 9.10: The well-known URI is not mentioned at all in the\r\n   body of the spec but only here and then in an appendix. A\r\nforward ref to A.3 from 9.10 is probably enough to fix. The\r\nsame may apply to other IANA registrations I guess.\r\n\r\n- 10.1: are we confident that all the normative I-Ds will\r\n   become RFCs in a sufficiently timely manner? I've no\r\nspecific reason to think they won't, and they're all far\r\nalong the process, but sometimes transitive dependencies\r\ncan cause a lot of delay.  (Very sadly, we can't just ask\r\nJim about this.)\r\n\r\n- A.1: \"byte string shaped\"? what's that mean?\r\n\r\n- Appendix D: Point 6 mentions an EUI-64. I'm not clear how\r\n   that'd be used in edhoc.\r\n\r\n- The URL for SIGMA can use https so change to [1]\r\n   [1] https://webee.technion.ac.il/~hugo/sigma-pdf.pdf\r\n",
      "createdAt": "2021-11-11T07:16:00Z",
      "updatedAt": "2022-01-25T17:56:22Z",
      "closedAt": "2022-01-25T17:56:22Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "It was good to have a discussion on connection id privacy.\r\n\r\n@chrysn started discussing this in https://github.com/core-wg/oscore/issues/263\r\n\r\nAs I said during the meeting, earlier versions of EDHOC did derive the OSCORE IDs with the KDF but this creates to large identities so I don't think thas it an option. It also does not improve privacy much as EDHOC message_3 and the first OSCORE message will likely be sent in the same packet.\r\n\r\nQUIC introduces mechanisms to issue and retire connection IDs. Each connection can also have many connection IDs associated with it. I think these kind of mechanisms could be considered as future updates in OSCORE, maybe as part of KUDOS. I think there is not much to do in EDHOC. ",
          "createdAt": "2021-11-15T10:05:03Z",
          "updatedAt": "2021-11-15T10:05:03Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Long random connection identifiers also helps an adversary as they have a low probability to collide. Short connection identifiers collide with other devices ids making it harder to track a device over several paths.",
          "createdAt": "2021-12-18T11:07:00Z",
          "updatedAt": "2021-12-18T11:07:00Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Short IDs may collide, but short IDs on the same server (which is typically not mobile) are often unique again.\n",
          "createdAt": "2021-12-18T11:10:03Z",
          "updatedAt": "2021-12-18T11:10:03Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Are we waiting for Stephen to confirm that he is happy with the changes? I think we should assume that no further comments mean that Stephen is happy and close the issue. We can always reopen the issue or open a new one.\r\n\r\nTwo of Stephens comments are handled by other open issues. #212 #214",
          "createdAt": "2022-01-25T11:11:56Z",
          "updatedAt": "2022-01-25T11:11:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "@authors: as a default, assume I agree with your changes\r\n",
          "createdAt": "2022-01-25T17:56:22Z",
          "updatedAt": "2022-01-25T17:56:22Z"
        }
      ]
    },
    {
      "number": 203,
      "id": "I_kwDOEItXAM4-4K12",
      "title": "Certificates - Review of Draft v12",
      "url": "https://github.com/lake-wg/edhoc/issues/203",
      "state": "CLOSED",
      "author": "stoprocent",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hi\r\n\r\nI have a few comments I would like to raise on `EDHOC` `v12` specification in regards to the certificates handling.\r\nLet me start that we are planning to use `EDHOC` mainly with `x509` Certificates as Authentication Credentials so it's important for us to get this into the best possible state.\r\n\r\nFrom the current version of the spec, we can read that if a single `x509` Certificate will be used for Authentication Credentials we should place it in `DER` format as `CBOR` `bstr` in `CRED_x`. Which makes sense ...\r\nIf we do this we should also provide `ID_CRED_x` with `x5t` `COSE` header (`COSE_CertHash`) with the value of certificate hash.\r\n\r\nThis is where the first problem occurs for me. Actually first two problems.\r\n\r\n1. Draft defining `COSE` headers needed for `x509` is already expired. It was valid until June this year.\r\n2. Even if we assume it's still valid I have a few problems with it:\r\n\r\n`COSE_CertHash` `x5t` is according to: https://datatracker.ietf.org/doc/draft-ietf-cose-x509/08/\r\n\r\n> (...) The second element is a binary string containing the hash value computed over the DER-encoded certificate.\r\n\r\nThis spec is a draft so the closest there is to RFC covering a similar area are `rfc7515` and `rfc7517`. I guess `COSE` was influenced by `JOSE` so it seems ok to assume some compatibility. \r\n\r\nRFCs I have mentioned are defining `x5t` a little bit different:\r\n\r\n> The \"x5t\" (X.509 certificate SHA-1 thumbprint) Header Parameter is a\r\n> base64url-encoded SHA-1 thumbprint (a.k.a. digest) of the DER\r\n> encoding of the X.509 certificate [RFC5280] corresponding to the key\r\n> used to digitally sign the JWS.  Note that certificate thumbprints\r\n> are also sometimes known as certificate fingerprints.  Use of this\r\n> Header Parameter is OPTIONAL.\r\n\r\nIn summary `x5t` in draft `COSE` spec is `HASH( DER(...,...,DIGEST) )` and in `JSON` related specs as `DER(...,...,DIGEST)`. \r\nI think they should be alined. There are many reasons for this one of which is interoperability etc.\r\n\r\nIf we think from a processing perspective to use a certificate to first validate it and extract the public key for message authentication needs, there is no extra overhead when parsing the certificate to extract its digest.\r\n\r\n**I have edited this issue as yesterday I have wrongly interpreted `ID_CRED_x` and `CRED_x` roles in the certificate chain but I think one issue remains in terms of `draft-ietf-cose-x509` being expired.**\r\n\r\nSo to summarize I think:\r\n\r\n1. We should take care of `draft-ietf-cose-x509` so it's valid and aligned with similar specs.\r\n2. We should establish what is a certificate hash in detail.\r\n\r\nHope we can discuss this further.",
      "createdAt": "2021-11-16T13:57:07Z",
      "updatedAt": "2021-11-24T15:48:47Z",
      "closedAt": "2021-11-24T15:48:47Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems like a COSE issue. Are there any clarifications needed in the EDHOC draft?\r\n\r\nI don't understand what the difference between COSE and JOSE that you find problematic. In JOSE x5t is a base64 encoded SHA-1 hash. In COSE it is a struct with an algorithms and a hash made with that algorithm. The hash is a COSE bstr.\r\n\r\ndraft-ietf-cose-x509 is submitted for publication so it will be published soon. You don't need to worry that it is expired. There is ongoing discussion on GitHub. If you have any issues with the x509 draft there might still be possible to address them. You should comment on GitHub or mail the COSE WG email list.\r\nhttps://github.com/cose-wg/X509\r\ncose@ietf.org\r\n\r\n> we should also provide ID_CRED_x with x5t\r\n\r\nShould is a bit strong. You might use any of the COSE header parameters that identify a X.509 certificate. I.e. you may also use x5chain, x5bag, x5u.\r\n\r\n\r\n",
          "createdAt": "2021-11-24T13:42:26Z",
          "updatedAt": "2021-11-24T14:39:56Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@emanjon I think you are right on this that it's actually not needed for EDHOC spec clarification. I will close this",
          "createdAt": "2021-11-24T15:48:47Z",
          "updatedAt": "2021-11-24T15:48:47Z"
        }
      ]
    },
    {
      "number": 204,
      "id": "I_kwDOEItXAM4-82xn",
      "title": "Length of labels, removal of master",
      "url": "https://github.com/lake-wg/edhoc/issues/204",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?",
        "PR exists",
        "reopened"
      ],
      "body": "RFC 8446 states:\r\n   \"Note: With common hash functions, any label longer than 12 characters\r\n   requires an additional iteration of the hash function to compute.\r\n   The labels in this specification have all been chosen to fit within\r\n   this limit.\"\r\n\r\n12 is specific for TLS, but even if the number is slighty higher for EDHOC the following labels might currently require an extra iteration.\r\n\r\n   Label: OSCORE_Master_Secret\r\n   Label: OSCORE_Master_Salt\r\n\r\nI would suggest we calculate the exact length for EDHOC. Add that length as a consideration in the draft. And shorted down any long labels to not be longer.\r\n",
      "createdAt": "2021-11-17T13:36:06Z",
      "updatedAt": "2022-05-10T13:24:36Z",
      "closedAt": "2022-05-10T13:24:35Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": " ```\r\n  info = (\r\n     transcript_hash : bstr,\t\t32 bytes\r\n     label : tstr,\t\t\t\t\tx bytes\r\n     context : bstr,\t\t\t\t1 bytes\r\n     length : uint,\t\t\t\t1-2 bytes\r\n   )\r\nHKDF padding  1 byte\r\nHMAC padding 9 bytes\r\n\r\nFor short lengths the label can be 20 bytes\r\nFor long lengths the label can be 19 bytes\r\n\r\nWe need to shorten:\r\nOSCORE_Master_Secret\r\nOSCORE_Master_Salt\r\n\r\nI suggest removing \"Master\". I future update of OSCORE might rename the key to Main secret. But we will never be able to update the label.\r\n\r\nSuggestion:\r\nWe need to shorten:\r\nOSCORE_Secret\r\nOSCORE_Salt\r\n```",
          "createdAt": "2021-11-24T13:21:59Z",
          "updatedAt": "2021-11-24T13:22:13Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think removal of master is it's own issue. While we can update the terminology in an update, the labels are frozen and cannot be changed.",
          "createdAt": "2021-12-03T07:32:59Z",
          "updatedAt": "2021-12-03T07:32:59Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Appreciated, as these are strings lugged around in every firmware update.",
          "createdAt": "2021-12-16T12:44:44Z",
          "updatedAt": "2021-12-16T12:44:44Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing since #205 is merged.",
          "createdAt": "2022-01-19T10:11:00Z",
          "updatedAt": "2022-01-19T10:11:00Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Updating my implementation, I noticed that these are in a CBOR structure anyway (and not concatenated into strings).\r\n\r\nSo as these are all registered, why not go all the way and make them integers?",
          "createdAt": "2022-03-21T15:46:10Z",
          "updatedAt": "2022-03-21T15:46:10Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "label : tstr\r\n\r\nWhat do you want to make integers? ",
          "createdAt": "2022-03-21T16:48:02Z",
          "updatedAt": "2022-03-21T16:48:02Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "The labels -- given they are coming from a registry anyway. (Why go \"OSCORE_master_secret\" to \"OSCORE_secret\" when we could go to 23 as well.\n\n(I realize it's little savings, like 60 bytes of firmware size; might not be worth much, but if there's a time for it, it's now)\n",
          "createdAt": "2022-03-21T16:53:05Z",
          "updatedAt": "2022-03-21T16:53:05Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That makes sense to me",
          "createdAt": "2022-03-21T16:54:49Z",
          "updatedAt": "2022-03-21T16:54:49Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Right, we could use something else instead of unique text strings. The current construct is:\r\n\r\nEDHOC-Exporter(label, context, length) = EDHOC-KDF(PRK_4x3m, TH_4, label, context, length)\r\n\r\nIf not label, then context (bstr) can be unique for this use of PRK_4x3m and TH_4. Is the proposal to register unique byte strings, or to change the definition of the function?\r\n\r\n\r\n\r\n",
          "createdAt": "2022-03-21T20:26:37Z",
          "updatedAt": "2022-03-21T20:26:37Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Reopening this issue, since there is new input.",
          "createdAt": "2022-03-22T16:26:58Z",
          "updatedAt": "2022-03-22T16:26:58Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Still not clear to me what to register instead of labels and how to use in Exporter. There are multiple options.  (I assume this only applies to Exporter, not \"KEYSTREAM_2\" etc.)\r\n\r\nBut perhaps first ask more people. @marco-tiloca-sics, @StefanHri, others: Is replacing exporter labels with e.g. integers a good change?",
          "createdAt": "2022-03-22T16:36:15Z",
          "updatedAt": "2022-03-22T16:36:40Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "The proposal is to replace all inputs that ever go into the \"label\" argument -- anything else would be adding complexity.\r\n\r\nFor a concrete proposal, we would change\r\n\r\n```\r\n  label : tstr,\r\n```\r\n\r\nto\r\n\r\n```\r\n  label : uint,\r\n```\r\n\r\nand define, in order of occurrence in the document:\r\n\r\n```cddl\r\nLABEL_MAC_2 = 0\r\nLABEL_KEYSTREAM_2 = 1\r\nLABEL_MAC_3 = 2\r\nLABEL_K_3 = 3\r\nLABEL_IV_3 = 4\r\n```\r\n\r\nwith all occurrences of `\"MAC_2\"` with `LABEL_MAC_2` etc.\r\n\r\nThe exporter registry would then grow a n int field, and look like this:\r\n\r\n```\r\nValue: 0\r\nLabel: EDHOC_K_4\r\nDescription: Key used to protect EDHOC message_4\r\nReference: [[this document]]\r\n\r\nValue: 1\r\nLabel: EDHOC_IV_4\r\nDescription: IV used to protect EDHOC message_4\r\nReference: [[this document]]\r\n\r\nValue: 2\r\nLabel: OSCORE_Master_Secret\r\nDescription: Derived OSCORE Master Secret\r\nReference: [[this document]]\r\n\r\nValue: 3\r\nLabel: OSCORE_Master_Salt\r\nDescription: Derived OSCORE Master Salt\r\nReference: [[this document]]\r\n```\r\n\r\n(It doesn't matter here that there is overlap in the values -- just as it was never ruled out that \"K_3\" could become a label in the string based EDHOC Exporter Label Registry. That has and still is OK because it's used with different PRKs and transcript hashes. At any rate it's good that all these stay under 23 even with some room for other users, so implementers can store things preencoded if they so desire.)\r\n\r\nAs for the security analyses, the numbers have the same properties as the strings -- they are self-delimited, and relative uniqueness properties should be the same no matter whether it's strings or numbers (at least when dealing in absolutes; if someone picked an unregistered number at random they're more likely to pick an assigned one than with strings, but that was already \"maybe broken\"). Length of input is reduced, but that is part of the point, and removing the \"_Master\" was fine already.",
          "createdAt": "2022-03-23T10:20:32Z",
          "updatedAt": "2022-03-23T10:20:32Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Based also on further discussions with @chrysn \r\n\r\n* If the change is made to have integer labels, this should happen to all the labels involved. That is, not only to the labels provided as input to EDHOC-Exporter(), but also to the labels \"KEYSTREAM_2\" etc. that are a direct input to EDHOC-KDF(). This avoids having an implementation of EDHOC-KDF() to handle both types as possible input.\r\n\r\n* The labels to actually register should still be only those intended as input to EDHOC-Exporter(), i.e., there is no need to register integer labels that are a direct input to EDHOC-KDF() (corresponding to the current \"KEYSTREAM_2\" etc.). In fact, same integer values would not be a problem in practice, since PRK_4x3m clearly points to the exporter labels when used as first argument in EDHOC-KDF().\r\n\r\n* What can be useful is to make clear, as much as now for the tstr version, that potential labels defined in the future as part of EDHOC extensions and to directly use with EDHOC-KDF() have to be different from those already defined in that space, i.e., \"KEYSTREAM_2\" etc.",
          "createdAt": "2022-03-23T10:21:40Z",
          "updatedAt": "2022-03-23T10:21:40Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "- Changing label to integers seems fine with me.\r\n\r\n- I don't see why the Label below would stay in the specification. This would just be a variable name in the implementation, or?\r\n\r\n- I assume that there is no benefit with int here as the uint is not sent on the wire. 0-255 would be stored as a single byte in the program and then converted to cbor when used.\r\n\r\n\r\n\r\n",
          "createdAt": "2022-03-30T21:21:43Z",
          "updatedAt": "2022-03-30T21:21:43Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that somebody suggested that this is good to to as late as possible just to break compability.",
          "createdAt": "2022-04-13T16:53:09Z",
          "updatedAt": "2022-04-13T16:53:09Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on the input from the formal verification, we will likely have 3 more internal EDHOC labels. Likley something like the following:\r\n\r\nDerived from PRK_2e\r\n------------------------------\r\nLABEL_KEYSTREAM_2\r\nLABEL_SALT_2e\r\n\r\nDerived from PRK_3e2m\r\n------------------------------\r\nLABEL_MAC_2\r\nLABEL_K_3\r\nLABEL_IV_3\r\nLABEL_SALT_3e2m\r\n\r\nDerived from PRK_3m\r\n------------------------------\r\nLABEL_MAC_3\r\nLABEL_PRK_OUT",
          "createdAt": "2022-04-14T09:15:00Z",
          "updatedAt": "2022-04-14T09:15:00Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolve in PR #286. Close this when that is merged.",
          "createdAt": "2022-05-09T07:57:23Z",
          "updatedAt": "2022-05-09T07:57:23Z"
        }
      ]
    },
    {
      "number": 208,
      "id": "I_kwDOEItXAM4_0tic",
      "title": "Error messages",
      "url": "https://github.com/lake-wg/edhoc/issues/208",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "Close?"
      ],
      "body": "From Marco's review:\r\n\r\n[Section 5.2.3]\r\n\r\n* \"If an error message is sent, the session MUST be discontinued.\"\r\n\r\n    Is this sentence actually required? Regardless sending an error \r\nmessage or not, the session is discontinued if any processing step \r\nfails, which is the reason for possibly sending an error message. Or are \r\nthere situations where an error message is sent even if no processing \r\nstep fails?\r\n\r\n",
      "createdAt": "2021-12-03T16:56:56Z",
      "updatedAt": "2022-03-15T14:51:09Z",
      "closedAt": "2022-03-15T14:51:09Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\nThis sentence does not talk about failed processing, it is a general implication stating the necessity of discontinuing the session if an error message is sent (for whatever reason), in contrast to the converse statement in the preceding sentence which states that there is no necessity of sending an error message if the session is discontinued.\r\n\r\nBut it is not explained why you would send an error unless processing has failed. Do we have any example?",
          "createdAt": "2021-12-03T16:58:29Z",
          "updatedAt": "2021-12-03T16:58:29Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see the problem here at all. In general in security protocols there is no connection between some processing step failing, sending an alert, and terminationg the connection.\r\n\r\nError => processing fails is not true. It is not defined when an error is sent.\r\n\r\nClose?",
          "createdAt": "2021-12-10T08:52:07Z",
          "updatedAt": "2021-12-10T08:52:07Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "When to send an error is left for the implementation. Does that need to explained better?",
          "createdAt": "2021-12-10T10:10:32Z",
          "updatedAt": "2021-12-10T10:10:32Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Related comment from Sean\r\n\r\n```\r\ns5.2.3, s5.3.3, s5.4.3, s5.5.3, last sentence (question - probably being pedantic): If there is an error but an error message is not sent, is the session discontinued? How does the peer know it was discontinued if an error is not sent?\r\n```\r\n\r\nLet's go over and make sure the document answer\r\n\r\n- When is the protocol discontinued?\r\n- When is an error sent?\r\n- How does the other party get information about discontinue and the type of error?\r\n\r\nMy understanding\r\n\r\n- Up to the implementation/application when to discontinue the protocol. My feeling is that this is broader than \"processing step fails\"\r\n- When the protocol is discontinued, an error MUST be sent, expect if that cannot be done due to DoS. The error tels the other party that the protocol has been discontinued and why it has been discontinued.\r\n- A party receiving an error knows that the other party discontinues or that an attacker sent the error. In DoS situation the other party gets no information. \r\n\r\n\r\n",
          "createdAt": "2021-12-16T14:35:05Z",
          "updatedAt": "2021-12-16T14:35:05Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I will make a suggested PR for this in the upcoming weeks.",
          "createdAt": "2021-12-21T15:17:19Z",
          "updatedAt": "2021-12-21T15:17:19Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a PR to try to address the two comments from Marco and Sean which where quite different but both involve error.\r\n\r\nAs in HTTP and CoAP the intention is that error can be both \"client errors\" and \"server errors\". I removed duplicate text from the processing sections and expanded the text in the error section.\r\n\r\nThe PR likely needs some further update but is hopefully a good start for discussion.",
          "createdAt": "2022-01-23T10:08:36Z",
          "updatedAt": "2022-01-23T10:08:36Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "EDHOC is not following the standard client error server error design of HTTP and CoAP. Is this intentional?\r\n\r\nThis is the highest level grouping in HTTP and CoAP. As far as I can remember that was not even discussed. \r\n\r\nInstead of\r\n1 | tstr          | Unspecified         \r\n\r\nShould we not have something like \r\n1 | tstr          | Unspecified Initiator error\r\n2 | tstr          | Unspecified Responder error\r\n\r\nor\r\n\r\n1 | tstr | Unspecified Sender error\r\n2 | tstr | Unspecified Reciever error\r\n\r\nAlso is \"Unspecified\" a good name? The intention is that it is specified in the tstr.\r\n",
          "createdAt": "2022-01-24T06:21:58Z",
          "updatedAt": "2022-01-24T08:23:13Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "https://mailarchive.ietf.org/arch/msg/lake/ABtedw5eR2M66563D5qI0Op1Unc/\r\n\r\nWhile working on this I noticed than one cause for Marcos comment might be\r\nthat EDHOC only talkes about what HTTP and CoAP calls \"client error\",\r\ni.e., there was something wrong in the received message.\r\n\r\nHTTP and CoAP defines errrors into two classes \"client error\" (there is something\r\nwrong with you) and \"server error\" (there is something wrong with me).\r\n\r\nEDHOC does currently not follow this design and only has a single error\r\n\r\n1 | tstr | Unspecified\r\n\r\nShould EDHOC instead have have something like?\r\n\r\n1 | tstr | Unspecified Initiator error\r\n2 | tstr | Unspecified Responder error\r\n\r\nor\r\n\r\n1 | tstr | Unspecified Sender error\r\n2 | tstr | Unspecified Reciever error\r\n\r\nThe choice would likely be whatever is easiest for an implementation.\r\n\r\nI think we should discuss this. This type of high level classes was not discussed before. We only discussed what kind of detailed errors we should standardized and agreed on none.\r\n\r\nAlso is \"Unspecified\" a good name? The intention is that it is specified in the tstr.",
          "createdAt": "2022-01-24T17:21:30Z",
          "updatedAt": "2022-01-24T17:21:30Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Marco wrote:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/lake/C8s2WyZH52TQ5QoZAPdgUFpsAq0/\r\n\r\nI think it's good to have something like in your second proposal and \r\nwithout \"Unspecified\" (as you say, the error is specified in the text \r\nstring), that is:\r\n\r\n1 | tstr | Sender error\r\n2 | tstr | Receiver error\r\n\r\nWithout bothering about which among client and server exactly has the \r\nInitiator or Responder role in the EDHOC session, the above can be read as:\r\n\r\n1 --> \"something wrong done by the sender of the message that resulted \r\nin this error message\"\r\n\r\n2 --> \"something locally wrong happened at the receiver of the message \r\nthat resulted in this error message\"\r\n\r\nThe mapping with high-level classes from CoAP/HTTP would be limited to \r\nresponses only, and for CoAP it was basically sketched in Appendix A.3.1:\r\n\r\n\"In particular, it is RECOMMENDED that such error responses have \r\nresponse code either 4.00 (Bad Request) in case of client error (e.g., \r\ndue to a malformed EDHOC message), or 5.00 (Internal Server Error) in \r\ncase of server error (e.g., due to failure in deriving EDHOC key material).\"\r\n\r\nThis can be expanded to highlight the use of 4.00 responses for ERR_CODE \r\n1 (Sender error) and the use of 5.00 responses for ERR_CODE 2 (Receiver \r\nerror).",
          "createdAt": "2022-01-24T17:21:48Z",
          "updatedAt": "2022-01-24T17:24:45Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "https://mailarchive.ietf.org/arch/msg/lake/RA9VAiL9zo_ZEjGz8yOAy0Esn7w/\r\n\r\nOr would the right choice be to differentiate between errors where the message might be retried and errors where the message may be retried later?\r\n\r\n1 | tstr | Do not automatically retry error\r\n2 | tstr | May retry later error\r\n\r\nMost be not client errors should not be retried while most but not all server errors might be retried.\r\n\r\nCarsten had the opinion that different EDHOC errors should lead to different automatic processing. But I think nothing like the above was ever discussed.",
          "createdAt": "2022-01-25T09:16:48Z",
          "updatedAt": "2022-01-25T09:16:48Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can't even understand the sentence.\r\n\r\n> If the processing fails for some reason then, typically, an error message is sent, the protocol is discontinued, and the protocol state erased. Further details are provided in the following subsections and in [Section 6](http://127.0.0.1:7997/#error)[](http://127.0.0.1:7997/#section-5.1-5).\r\n\r\nThese are passive constructions, so I don't know who is acting on the fact that \"an error message was sent\" (and how that is detected), and I don't know who is acting when performing the mandate \"the protocol is discontinued\".  (I hope that doesn't mean that we need a new standard because the old EDHOC was discontinued.  Is this about the protocol *run*?)\r\n\r\nSorry to be pedantic, but I really don't know what this all means. \r\n",
          "createdAt": "2022-02-10T12:33:27Z",
          "updatedAt": "2022-02-10T12:33:27Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The current plan is to merge the current PR which addresses Marco's and Sean's review comments.\r\n\r\nAdditional things has be discussed more and handles with other PRs\r\n- More EDHOC errors (client, server) or (retry, do not retry) or (unsuported X)\r\n- Use of CoAP error codes, current recommendation is to use 4.00 and 5.00 and always use diagnistic payload. Seemed during the design meeting that implementatins do other stuff, should discuss and maybe update specification.\r\n\r\nAny new error with negotiation should probably not be done. To do that in a safe way would require significant changes. An implementation could assign ciphersuite1+application profile1  and ciphersuite+application profile2 to the private ciphersuite numbers to get secure negotiation of application profiles. Maybe that should be discussed.",
          "createdAt": "2022-02-18T07:35:22Z",
          "updatedAt": "2022-02-18T07:35:22Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Apart from the error code / progress hints as mentioned in the previous comment, we have now resolved the remaining comments from Marco and Sean of this issue in PR #234 (which is now merged).\r\n\r\n@marco-tiloca-sics @seanturner - let us know if you disagree with the resolution.",
          "createdAt": "2022-02-18T15:14:02Z",
          "updatedAt": "2022-02-18T15:14:02Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me.",
          "createdAt": "2022-02-18T16:10:38Z",
          "updatedAt": "2022-02-18T16:10:38Z"
        }
      ]
    },
    {
      "number": 209,
      "id": "I_kwDOEItXAM4_9rOc",
      "title": "Change MTI cipher suite to (0 AND 1) OR (2 AND 3)",
      "url": "https://github.com/lake-wg/edhoc/issues/209",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?",
        "Merged to master"
      ],
      "body": "Separate issue from Stefan's review #194:\r\n\r\n\"Constrained endpoints SHOULD implement cipher suite 0 or cipher suite 2.\"\r\n\r\nThe difference between 0 and 1 and between 2 and 3 is only the size of the tag, i.e. the used algorithms are the same. -> I will suggest changing to \"...suite 0/1 or cipher suite 2/3\" or similar.   \r\n",
      "createdAt": "2021-12-07T09:42:10Z",
      "updatedAt": "2022-02-22T07:46:58Z",
      "closedAt": "2022-02-22T07:46:58Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Relates to #22. I think this is a good idea.\r\n",
          "createdAt": "2021-12-07T09:42:56Z",
          "updatedAt": "2021-12-07T09:42:56Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "A proposal in PR #200 ",
          "createdAt": "2021-12-07T11:55:57Z",
          "updatedAt": "2021-12-07T11:55:57Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This makes sense to me\r\n",
          "createdAt": "2021-12-10T08:45:49Z",
          "updatedAt": "2021-12-10T08:45:49Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I propose we merge this once we converge on #22 ",
          "createdAt": "2021-12-16T13:30:54Z",
          "updatedAt": "2021-12-16T13:30:54Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "#22 and #209 are very independant.\r\n\r\nI think 1 and 3 should probably be recommended for transports that can handle 53 byte payloads without significant performance degradation.",
          "createdAt": "2021-12-17T09:06:28Z",
          "updatedAt": "2021-12-17T09:06:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "There was discussion during the meeting regarding endpoint / device. The current draft use both as a well as implementation. I think device is useful when we talk about \"constrained devices\" but not otherwise. The endpoint does in general not need to be a \"device\". It might be software in the cloud or some chip where EDHOC is used on the internal bus.",
          "createdAt": "2021-12-17T12:28:15Z",
          "updatedAt": "2021-12-17T12:28:15Z"
        }
      ]
    },
    {
      "number": 210,
      "id": "I_kwDOEItXAM4_-Idy",
      "title": "Add appendix about the use of EAD",
      "url": "https://github.com/lake-wg/edhoc/issues/210",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "Provide examples to simplify understanding of intended use",
      "createdAt": "2021-12-07T11:40:15Z",
      "updatedAt": "2022-03-15T14:51:27Z",
      "closedAt": "2022-03-15T14:51:27Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree. This is releated to #149. I should not have closed that one. EAD is stil underspecified.",
          "createdAt": "2021-12-10T08:53:35Z",
          "updatedAt": "2021-12-10T08:53:35Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Related to Stephen's comment in #202:\r\n\r\n> 5.3.3: is it ok to pass EAD_2 to the application before\r\n   checking authentication?\r\n\r\nIf EAD_2 indeed contains external authorization data (e.g. information about identity of intended endpoint), then EAD_2 needs to be processed before you can verify the identity of the other endpoint and the integrity of the message. But if we look at EAD_3, the same things apply, but we also claim that EAD_3 is protected between Initiator and Responder, which with the current order of things isn't verified at the time when EAD processed. \r\n",
          "createdAt": "2021-12-10T16:39:56Z",
          "updatedAt": "2021-12-10T16:39:56Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #240 addresses this issue. \r\n\r\n* Rewrite of section 3.8 and added appendix with more details\r\n* Application should consider EAD unprotected by EDHOC.\r\n* Details of how EAD protection is moved to security considerations (8.1)\r\n",
          "createdAt": "2022-02-18T10:10:36Z",
          "updatedAt": "2022-02-18T10:10:36Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "#240 as above and with the new appendix E is now merged.",
          "createdAt": "2022-02-23T13:22:26Z",
          "updatedAt": "2022-02-23T13:22:26Z"
        }
      ]
    },
    {
      "number": 212,
      "id": "I_kwDOEItXAM5ACdNt",
      "title": "Shorten 3.5",
      "url": "https://github.com/lake-wg/edhoc/issues/212",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "This issue is extracted from Stephen's review #202:\r\n\r\n3.5.1, 3.5.2 and 3.5.3: this might be some text to\r\n   shorten a lot - how much is it really needed? Could it be\r\ncut down to the stuff with 2119 terms and a bit more? (I'd\r\nkeep the examples though.)\r\n",
      "createdAt": "2021-12-08T13:00:32Z",
      "updatedAt": "2022-03-15T14:51:43Z",
      "closedAt": "2022-03-15T14:51:43Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree with Stephen that this is a candidate for shortening.\r\n\r\nRelated to #142. Do we need a new issue?",
          "createdAt": "2021-12-10T08:56:01Z",
          "updatedAt": "2021-12-10T08:56:01Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Section 3.5 is shortened with PR #240. Role of EDHOC clarified and non-EDHOC protocol things moved to new appendix D.\r\n",
          "createdAt": "2022-02-18T10:16:52Z",
          "updatedAt": "2022-02-18T10:16:52Z"
        }
      ]
    },
    {
      "number": 213,
      "id": "I_kwDOEItXAM5AK8Ok",
      "title": "Security considerations on connection IDs",
      "url": "https://github.com/lake-wg/edhoc/issues/213",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "Close?",
        "PR exists"
      ],
      "body": "Based on the first comment in Stephen's review #202.",
      "createdAt": "2021-12-10T09:17:49Z",
      "updatedAt": "2022-01-19T10:33:31Z",
      "closedAt": "2022-01-19T10:33:31Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this since #219 is merged.",
          "createdAt": "2022-01-19T10:33:31Z",
          "updatedAt": "2022-01-19T10:33:31Z"
        }
      ]
    },
    {
      "number": 214,
      "id": "I_kwDOEItXAM5ALFaQ",
      "title": "Security considerations on gererating secret material and public material such as connection IDs.",
      "url": "https://github.com/lake-wg/edhoc/issues/214",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "Close?",
        "PR exists"
      ],
      "body": "Based on Stephens review",
      "createdAt": "2021-12-10T09:47:27Z",
      "updatedAt": "2022-02-18T10:50:51Z",
      "closedAt": "2022-02-18T10:50:51Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Referring to this in #202:\r\n\r\n> if some random values are visible \r\n> (connection identifiers?) then it can make sense to\r\n> derive those from a different random stream compared to\r\n> that used for randomly picking secrets. That way the\r\n> publicly visible random numbers are less likely to leak\r\n> information about the state of the PRNG used for secrets.\r\n",
          "createdAt": "2021-12-10T16:49:37Z",
          "updatedAt": "2021-12-10T16:49:37Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "From the PR #233:\r\n\r\n\"As explained by Krawczyk, any attack mitigated by the NIST requiment would mean that the KDF is fully broken and would have to be replaced anyway.\"\r\n\r\nI didn't understand \"any attack mitigated by the NIST requirement\", and how mitigation could imply that something is broken.\r\n\r\nAs far as I understand, the statement is something like \"if there is a problem deriving secret and non-secret material from the same KDF, then there is a problem with the KDF\"\r\n\r\nPerhaps \"an attack based on the violation of the NIST requirement is an attack on the KDF itself\"?\r\n\r\n\r\n",
          "createdAt": "2022-01-24T07:42:41Z",
          "updatedAt": "2022-01-24T07:42:41Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, it was likely meants to say \"if any attack is mitigate\"\r\n\r\nLet's reformulate according to your suggestion",
          "createdAt": "2022-01-24T08:20:56Z",
          "updatedAt": "2022-01-24T08:20:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a commit to correct spelling and grammar.\r\n\r\n- I don't think we can give applications more guidance here. How to gererate e.g. private key in certificates are way outside of EDHOC, and it would anyway be hard to say something general as deployments might look very different.\r\n\r\n- I did not want to say anything about randomly generated conenction ID as that is not how connection IDs is meant to be generated. They are intended to be as short as possible. An implentation is allowed to use long random bytestrings but is not recommended in general. ",
          "createdAt": "2022-01-25T11:24:40Z",
          "updatedAt": "2022-01-25T11:24:40Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2022-02-18T10:50:51Z",
          "updatedAt": "2022-02-18T10:50:51Z"
        }
      ]
    },
    {
      "number": 215,
      "id": "I_kwDOEItXAM5AOgeO",
      "title": "Verification of identities in X.509 and CWT",
      "url": "https://github.com/lake-wg/edhoc/issues/215",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "From John's comment to changes following Marco's review:\r\n\r\n\"identities to verify the 'sub' (subject) claim of the CWT.\"\r\n\r\n Should use the same text for X509 and CWT.\r\n\r\nMoreover,  \"sub\" claim is just an example. CWT might add e.g. AltSub in the future.\r\n",
      "createdAt": "2021-12-11T13:57:31Z",
      "updatedAt": "2022-03-15T14:52:05Z",
      "closedAt": "2022-03-15T14:52:05Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "If we change one of them we should change both. I think this issue is strongly related to #212 and could be fixed together.",
          "createdAt": "2021-12-16T14:01:51Z",
          "updatedAt": "2021-12-16T14:01:51Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "With PR #240, it is now clear that verification of identity is the responsibility of the application. Therefore Appendix D just gives examples, where this text now reads: \r\n\r\n> When a Public Key Infrastructure (PKI) is used with certificates, the identity is the subject whose unique name, e.g., a domain name, a Network Access Identifier (NAI), or an Extended Unique Identifier (EUI), is included in the endpoint's certificate. Similarly, when a PKI is used with CWTs, each endpoint needs a specific identity or set of identities it is allowed to communicate with to match against the relevant claim, such as 'sub' (subject).\r\n\r\nIs this good enough?\r\n\r\n",
          "createdAt": "2022-02-18T10:24:32Z",
          "updatedAt": "2022-02-18T10:24:32Z"
        }
      ]
    },
    {
      "number": 217,
      "id": "I_kwDOEItXAM5Aaieu",
      "title": "Sean Turner's review of -12",
      "url": "https://github.com/lake-wg/edhoc/issues/217",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?",
        "Merged to master"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/01_qDnQqJlsem3KT58F6XNVbSQ4/\r\n\r\n----\r\n\r\ns1.2 (nit): If s1.2 is supposed to be an applicability statement in the context of RFC 2026, can we call it that. i.e., r/Use of EDHOC/Applicability Statement. \r\n\r\nrevised: And then, I see section 3.9. Maybe instead of renaming s1.2, a forward pointer to s3.9 is all that is needed to say that an applicability statement is required?\r\n\r\ns2, 2nd para (nit): refer to both because it\u2019s (D)TLS and not just TLS?  I.e.,\r\ns/(D)TLS 1.3 [RFC8446]/(D)TLS 1.3 [RFC8446] [I-D.ietf-tls-dtls13]\r\n\r\ns2, 2nd para (nit): I think you can safely drop the 2nd reference to IKEv2\r\ns/like IKEv2 [RFC7296],/like IKEv2,\r\n\r\ns3.2/s3.5.2 (question): Smarter people than I have devised plans to allow mixing of different METHODs. How does this impact the key usage extension present in certificates? In other words, are METHODS 1 and 2 suggesting that a DS and DH key be used together and does that violate any kind of restrictions on the key usage settings for certificates?\r\n\r\ns3.4 (nit): Is transport of error messages, as noted by s6 (2nd para), needed in the list.\r\n\r\ns3.5 para after the bullets (nit): I think you are trying to say the credentials have to be the same type, i.e., you can\u2019t have PGP one one side and x.509 on the other. I am not sure that the following is the best wording:\r\n\r\ns/Identical authentication credentials need to be established in both endpoints to be able to verify integrity./The same type of authentication credentials are needed baby the endpoints to be able to verify integrity.\r\n\r\ns3.5.1, 1st para (nit): At first I thought for sure this had to be a MUST, but it says or application so I am not sure:\r\n\r\nThe EDHOC implementation or the application must enforce information about the intended endpoint \u2026\r\n\r\ns3.5.1 (nit): expand on first use NAI & EUI\r\n\r\ns3.5.1, 1st bullet (nit): Often we refer to this a Proof-of-Possession so maybe you could say that:\r\n\r\ns/EDHOC provides\r\n      proof that the other party possesses the private authentication\r\n      key corresponding to the public authentication key in its\r\n      certificate./EDHOC provides\r\n      proof that the other party possesses the private authentication\r\n      key corresponding to the public authentication key in its\r\n      certificate, which is also known as proof-of-possesion.\r\n\r\ns3.5.1, 1st bullet (question): This seems like the \u201cmixing\u201d discussed in s3.2, relies on the identity provide in the certificate?\r\n\r\n    The certification path provides proof that the\r\n    subject of the certificate owns the public key in the certificate.\r\n\r\ns3.5.2 (question): related to comment on s3.2.\r\n\r\ns3.5.3, 2nd para (nit): Could point to RFC 3279/5480 for some key usages for ECDSA and RFC 8410 for x25519/x448.\r\n\r\nIn\r\n   X.509 and C509 certificates, signature keys typically have key usage\r\n   \"digitalSignature\" and Diffie-Hellman public keys typically have key\r\n   usage \"keyAgreement\" [RFC3279][RFC8410].\r\n\r\ns3.6 (nit): refer to both?:\r\ns/TLS 1.3 [RFC8446]/\r\n(D)TLS 1.3 [RFC8446] [I-D.ietf-tls-dtls13]\r\n\r\ns3.5.3 (question): EDHOC seems to assume you only provide the reference for the initiator's/responder\u2019s. Was there any thought it to providing references for the rest of the certification path up to but not including the Root CA\u2019s certificate? I mean technically they can also be in there certificate provided so not necessarily needed.\r\n\r\ns3.6, CNSA ref (nit): I made a similar comment against the ZRTP spec when they said their alg suites were compliant with Suite B \u2026 probably best to say Suite 24 and 25 use algorithms in CNSA and leave the word \u201ccompatible\u201d for \u201cthem\u201d to say.\r\n\r\ns3.8 (comment): Wow .. so you can send in the CSR in EAD, if it works then you can use the cert in the later messages (e.g., kind of like EAP)? Sure hope there\u2019s no kind of CSR-related error. And, you know that the CA gets to decide the name right. Sorry just trying to digest it all.\r\n\r\ns4.3 (nit): s/kan/can\r\n\r\ns4.4/s5.1 (question): Do you need to provide advice on when to delete the old PRK_4x3m? I.e., does the peer that sent this need to wait for some kind of confirmation before deleting it?\r\n\r\ns5.1 (question): Is a state diagram needed? One thing people clamored for from TLS was a state machine. Maybe a diagram isn\u2019t needed because there are so few states?\r\n\r\ns5.1 (comment, no action required): Cute. Deduplication is how to deal with message reply ;)\r\n\r\ns5.2.1, s.5.3.1, s5.4.1, s5.5.1 (nit): is the \u201c,\u201d before the closing bracket right? e.g.,\r\n\r\nOLD:\r\n\r\n    ? EAD_1 : ead,\r\n}\r\n\r\nNEW:\r\n\r\n    ? EAD_1 : ead\r\n}\r\n\r\ns5.2.2 (question): If this this initiator processing section, how does the initiator know to truncate?\r\n\r\n  \u2026, truncated after the cipher suite selected for this\r\n  session.\r\n\r\ns5.2.3, s5.3.3, s5.4.3, s5.5.3, last sentence (question - probably being pedantic): If there is an error but an error message is not sent, is the session discontinued? How does the peer know it was discontinued if an error is not sent?\r\n\r\ns5.2.3, s5.3.3, s5.4.3, s5.5.3 (nit, which I am sure the RFC editor fix better than I could, but I couldn\u2019t help myself): Instead of the e.g., in middle of the MAY sentence maybe:\r\n\r\nOLD:\r\n\r\n   Sending error\r\n   messages is essential for debugging but MAY e.g., be skipped if a\r\n   session cannot be found or due to denial-of-service reasons, see\r\n   Section 8.6.\r\n\r\nNEW:\r\n\r\n   Sending error\r\n   messages is essential for debugging but MAY be skipped if, for\r\n   example, a\r\n   session cannot be found or due to denial-of-service reasons, see\r\n   Section 8.6.\r\n\r\ns6.1 (nit): To stop loops, should any peer that receives an ERR_CODE=0 discontinue the session? I.e., is that worth stating in the I-D?\r\n\r\ns6.2 (nit): It\u2019s really more \u201cFreeform\u201d than unspecified right? I mean the string is required so it\u2019s definitely not unspecified per se.\r\n\r\ns6.3.2, 2nd to last para (nit): s/shall/SHALL\r\n\r\ns6.3.2/s5.2.1 (nit): Might be worth noting earlier that SUITES_R is not important. Also, s5.2.1, mentioned SUITES_I, but s5.2.2 does not mention SUITES_R.\r\n\r\ns7, last para (nit): s/To enable as much interoperability as we can\r\n   reasonably achieve,/To enable as much interoperability as possible,\r\n\r\ns8 (question): Isn\u2019t some kind of consideration needed to address the use of PSKs shared by more than two? See RFC 8773 for some considerations wrt to group key sharing and that sharing impact on authentication.\r\n\r\ns8.3 (nit): You can informatively refer to RFC 6194 to slam the door on SHA-1.\r\n\r\ns9 and onwaard (apologies): I ran out of steam.\r\n\r\ns? (question): Is a peer supposed to check status information for its peer\u2019s certificate/key? \r\n\r\nI-D Nit complaints (not all of them because the DOWNREFs (mostly) looked intentional):\r\n\r\n== Missing Reference: 'RFC9052' is mentioned on line 2411, but not defined\r\n",
      "createdAt": "2021-12-15T07:56:29Z",
      "updatedAt": "2022-01-25T17:45:27Z",
      "closedAt": "2022-01-25T17:45:25Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Waiting for Sean to confirm that he is happy with the changes. Will be closed unless Sean has any further comments. If Sean does not comment more we will assume he is happy and close the issue.",
          "createdAt": "2022-01-25T11:05:45Z",
          "updatedAt": "2022-01-25T11:05:45Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Sean acks",
          "createdAt": "2022-01-25T17:45:25Z",
          "updatedAt": "2022-01-25T17:45:25Z"
        }
      ]
    },
    {
      "number": 218,
      "id": "I_kwDOEItXAM5AfbUI",
      "title": "Ed25519 instead of EdDSA",
      "url": "https://github.com/lake-wg/edhoc/issues/218",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "Close?",
        "PR exists"
      ],
      "body": "Comment from Lo\u00efc: \r\n\r\nhttps://mailarchive.ietf.org/arch/msg/lake/4ErIcI5oqQT0utmwbpdydQGOUVI/\r\n\r\n> It seems that \"EdDSA\" is not the proper wording to use in the draft (at least in Section 9.2). I quote the original paper by Bernstein, Duif, Lange, Schwabe and Yang [1]: \r\n> - \" This section specifies the signature system used in this paper, and a generalized signature system EdDSA that can be used with other choices of elliptic curves.\"\r\n> - \" Our recommended curve for EdDSA is a twisted Edwards curve birationally equivalent to the curve Curve25519 [...] We use the name Ed25519 for EdDSA with this particular choice of curve.\"\r\n> Therefore \"Ed25519\" should be used in place of \"EdDSA\" (at least in Section 9.2). \r\n> \r\n> [1] High-speed high-security signature, Bernstein, Duif, Lange, Schwabe and Yang, 2011. https://protect2.fireeye.com/v1/url?k=31323334-501d5122-fe22d327-454445555731-1b801206d8bfce4f&q=1&e=371d7c78-5c57-49c2-8785-e20bf038bf86&u=https%3A%2F%2Fed25519.cr.yp.to%2Fed25519-20110926.pdf\r\n> ",
      "createdAt": "2021-12-16T09:48:37Z",
      "updatedAt": "2022-01-19T10:01:31Z",
      "closedAt": "2022-01-19T10:01:31Z",
      "comments": [
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "let's just be careful that we are aligned with RFC 8152 definitions here.",
          "createdAt": "2021-12-16T13:07:21Z",
          "updatedAt": "2021-12-16T13:07:21Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "What [1] says it not particulary important. We only care the standadized versions which often are not equal to the original academic papers.\r\n\r\nIn this case we want to follow firstly COSE RFC 8152 and secondly RFC 8032. COSE calls the signature algorithm \"EdDSA\" so I think 9.2 is correct. All uses of \"EdDSA\" in the EDHOC draft refer to the generalized signature system EdDSA, so also according to [1], I do not see a problem either. 9.2 talks about the generalized signature system EdDSA used with the curves Ed25519 and Ed448 (following RFC 8152).\r\n\r\nDo we need some more references to COSE. Some of the other reviewers asked about references to LMS. Should be clear in the EDHOC draft that basicaaly everything concerning algorithms and ID_CRED_x follows from COSE and than any details or futher references can be found there.\r\n",
          "createdAt": "2021-12-16T13:59:54Z",
          "updatedAt": "2021-12-16T13:59:54Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the EDHOC document needs to be clearer that all terminology follows COSE and that all definitions is found in COSE. JOSE has strange naming that COSE has borrowed. And maybe COSE added some strange names on it own.\r\n\r\n- The curve registry list X25519, X448, Ed25519, Ed448, as curves\r\n  (the CFRG names are edwards25519 and Curve25519 etc.,)\r\n- AES-128 is often called A128 \r\n- ECDSA with SHA-256 is called ES256\r\n- RSASSA-PSS with SHA-256 is called PS256\r\n- RSASSA-PKCS1-v1_5 using SHA-256 is called RS256\r\n- RSASSA-PKCS1-v1_5 using SHA-1 is called RS1\r\n- HKDF-AES-128 ............\r\n\r\nI genuinly hate a lot of these names. I get _many_ questions from people internally at my company from people asking about these weird names. They cause a lot of confusion and extra work for no apperent benefit.\r\n\r\nHowever, I think EDHOC needs to follow COSE. We should just explain that better.",
          "createdAt": "2021-12-21T09:07:18Z",
          "updatedAt": "2021-12-21T09:07:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that \"EdDSA\" in Section 9.2 is not even \"Ed25519\". The choice between Ed25519 and Ed448 depends on the authentication key as specified by COSE.",
          "createdAt": "2021-12-21T14:41:09Z",
          "updatedAt": "2021-12-21T14:41:09Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this since #221 is now merged.",
          "createdAt": "2022-01-19T10:01:31Z",
          "updatedAt": "2022-01-19T10:01:31Z"
        }
      ]
    },
    {
      "number": 222,
      "id": "I_kwDOEItXAM5AxGwD",
      "title": "Feedback regarding test vectors",
      "url": "https://github.com/lake-wg/edhoc/issues/222",
      "state": "CLOSED",
      "author": "StefanHri",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "test vectors"
      ],
      "body": "I like a lot the JSON format for storing the test vectors. I noticed the following:\r\n\r\n* In order for the file to be in correct JSON format, the strings `test_vector_x` should be in quotation marks, e.g. `\"test_vector_1\"` and not `test_vector_1`.\r\n\r\n* The primary target platforms for EDHOC are constrained devices, i.e., microcontrollers. It will be very useful to provide the test vectors as a C header file, that can be used on microcontrollers without a file system. This will make automated testing on microcontrollers easier. I am writing myself a small python parser that converts the test vectors from JSON to C header. If there is an interest from other implementors I can contribute this script.\r\n\r\n* When using suites 2 and 3 (ecdsa with P256) for every protocol run the signatures are different even if the signed message and signature key are the same (this is due to the nature of ecdsa [link]). This fact reduces the usability of the test vectors for automated testing for these suites. Still, the EDHOC input data (e.g. ID_CRED_x, CRED_x, etc) contained in the test vectors is useful but not all intermediary results and the end results. Probably it makes sense to document that along the test vectors.\r\n\r\n[link]: https://crypto.stackexchange.com/questions/851/can-ecdsa-signatures-be-safely-made-deterministic\r\n",
      "createdAt": "2021-12-22T09:14:18Z",
      "updatedAt": "2023-09-16T16:40:04Z",
      "closedAt": "2023-09-16T16:40:04Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Stefan,\r\n\r\nThat is excellent comments.\r\n- The quotation marks should be fixed.\r\n- Maybe we can also run the script on the final version of the test vectors and distribute the result together with JSON\r\n- ECDSA test vectors should maybe use deterministic ECDSA. ",
          "createdAt": "2021-12-22T12:33:47Z",
          "updatedAt": "2021-12-22T12:33:47Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I note that the quotation marks are not fixed yet. @stoprocent something for IETF 113 Hackathon? :)\r\n\r\nOn the use of deterministic ECDSA, since that is not recommended to be used in practice we were hesitant to have such test vectors. In -traces we used cipher suite 2 with method 3, i.e.  P-256 with static DH instead of ECDSA.\r\n",
          "createdAt": "2022-03-17T18:30:13Z",
          "updatedAt": "2022-03-17T18:30:13Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Points 1 and 3 in John's comment above fixed. Add one more point from #257 to be able to close that.\r\n\r\n* test vectors with prepended C_x  \r\n\r\n",
          "createdAt": "2022-05-09T08:41:30Z",
          "updatedAt": "2022-05-09T08:41:30Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "What is the final state regarding ECDSA test vectors? How EDHOC with ECDSA should be tested?   ",
          "createdAt": "2022-05-26T11:51:10Z",
          "updatedAt": "2022-05-26T11:51:10Z"
        }
      ]
    },
    {
      "number": 223,
      "id": "I_kwDOEItXAM5Bb3S9",
      "title": "Changes needed in 3.5 (identity, credential, trust achor)",
      "url": "https://github.com/lake-wg/edhoc/issues/223",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "While trying to add TOFU I noticed that 3.5 require quite big changes. The section 3.5 is not clear at all what is the responsibility of the Application and what is the responsibility of EDHOC. EDHOC provides proof-of-possession and transfers the credentials, but that is it. \r\n\r\n- Authentication is purely outside of a normal EDHOC implementation. This need to be made clear. Identity handling, credentials, and trust anchors are purely the resposibility of the application. An EDHOC implementation could potentially implement authentication for a specific application. As some TLS implementation do for HTTPS, but this would be outside of the EDHOC specification. I think quite much text should be moved to an appendix.\r\n\r\n- Interface between EDHOC and Application is not even mention. While the API should not be specified in detailed, it should likely be a requirement to be able to do mutual authentication. A simple interface for this is that EDHOC gives the credential to the application and the application can say YES or NO. An EDHOC implementation could also allow the implementation to give input to EDHOC, but this would be VERY application specific.\r\n\r\n",
      "createdAt": "2022-01-10T12:11:10Z",
      "updatedAt": "2022-03-15T14:52:34Z",
      "closedAt": "2022-03-15T14:52:34Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "As a case in point, one of the comments in Sean's review that can be answered by this context: \r\n\r\nIs a peer supposed to check status information for its peer\u2019s certificate/key? ",
          "createdAt": "2022-01-10T15:54:02Z",
          "updatedAt": "2022-01-10T15:54:02Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> Is a peer supposed to check status information for its peer\u2019s certificate/key?\r\n\r\nI think this type of considerations should be in an appendix. Very much depends on the application.",
          "createdAt": "2022-01-10T16:42:26Z",
          "updatedAt": "2022-01-10T16:42:26Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this issue is addressed with the merge of PR #240.",
          "createdAt": "2022-02-23T13:30:01Z",
          "updatedAt": "2022-02-23T13:30:01Z"
        }
      ]
    },
    {
      "number": 224,
      "id": "I_kwDOEItXAM5BcwzD",
      "title": "State diagram",
      "url": "https://github.com/lake-wg/edhoc/issues/224",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?",
        "Merged to master"
      ],
      "body": "From Sean's review:\r\n\r\ns5.1 (question): Is a state diagram needed? One thing people clamored for from TLS was a state machine. Maybe a diagram isn\u2019t needed because there are so few states?",
      "createdAt": "2022-01-10T15:51:12Z",
      "updatedAt": "2022-01-25T17:56:46Z",
      "closedAt": "2022-01-25T17:56:46Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Not sure it is needed in EDHOC. TLS has three distict states (early data, handshake, post handshake) and the key to use depend on the state irrespective of message type. EDHOC has none of that. A key derivation figure would maybe make more sense if we are to add anything.",
          "createdAt": "2022-01-10T17:34:18Z",
          "updatedAt": "2022-01-10T17:34:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Suggestion by Goran to add a reference to an academic paper that has a figure with the key derivation\r\n",
          "createdAt": "2022-01-14T08:27:58Z",
          "updatedAt": "2022-01-14T08:27:58Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Perhaps sufficient to refer to figure 2?",
          "createdAt": "2022-01-22T15:43:00Z",
          "updatedAt": "2022-01-22T15:43:00Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't have a strong preference, but fig 3 is used for message_4.",
          "createdAt": "2022-01-22T18:56:40Z",
          "updatedAt": "2022-01-22T18:56:40Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "But message_4 will likely not be used in most deployments, so maybe Fig 2 is enough.",
          "createdAt": "2022-01-25T10:56:17Z",
          "updatedAt": "2022-01-25T10:56:17Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this can be closed after interim today, unless there are any more comments.",
          "createdAt": "2022-01-25T11:03:15Z",
          "updatedAt": "2022-01-25T11:03:15Z"
        }
      ]
    },
    {
      "number": 226,
      "id": "I_kwDOEItXAM5CCdz7",
      "title": "Blocking one of multiple simultaneous EDHOC exchanges",
      "url": "https://github.com/lake-wg/edhoc/issues/226",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [],
      "body": "Channeling question from @pbtgit on Section 8.8 (raised in #220 but worth a separate issue):\r\n\r\n\"Note that in the case of two simultaneous EDHOC exchanges where the nodes only complete one and where the nodes have different preferred cipher suites, an attacker can affect which of the two nodes\u2019 preferred cipher suites will be used by blocking the other exchange.\"\r\n\r\nWhat are the exact pre-conditions for such an attack?",
      "createdAt": "2022-01-19T10:45:40Z",
      "updatedAt": "2022-01-21T16:21:56Z",
      "closedAt": "2022-01-21T16:21:56Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This was fixed in commit 678619c.",
          "createdAt": "2022-01-21T16:21:56Z",
          "updatedAt": "2022-01-21T16:21:56Z"
        }
      ]
    },
    {
      "number": 227,
      "id": "I_kwDOEItXAM5CIgRq",
      "title": "Inconsistent test vectors",
      "url": "https://github.com/lake-wg/edhoc/issues/227",
      "state": "CLOSED",
      "author": "malishav",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "traces and test vectors"
      ],
      "body": "When generating the test vectors from `test-vectors-11/vectors.cpp` on my macOS Monterey, the output differs from the one that is in the Editor's version of `draft-ietf-lake-traces`. I compared the output of \"OSCORE Master Secret (Raw Value)\". In addition, the output differs from the one in json file (\"vectors-json.txt\").\r\n\r\nI built the program on my Mac using the following command:\r\n`g++ aes.c aes-ccm.c aes-enc.c vectors.cpp -lsodium -o vectors -std=c++17`\r\n\r\nLibsodium is version 1.0.18_1, installed with homebrew.\r\n\r\n",
      "createdAt": "2022-01-20T16:39:09Z",
      "updatedAt": "2023-04-20T07:48:53Z",
      "closedAt": "2023-04-20T07:48:53Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Good input.\r\n\r\nVery likely the random number generation. Probably the use of seed only ensures consistant test vectors in the same environment.\r\n\r\nWe should move to an \"PRNG\" that does not depend on the environment.",
          "createdAt": "2022-01-21T11:05:28Z",
          "updatedAt": "2022-01-21T11:05:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "My implementation is now replaced by Marek's. ",
          "createdAt": "2023-04-20T07:48:53Z",
          "updatedAt": "2023-04-20T07:48:53Z"
        }
      ]
    },
    {
      "number": 228,
      "id": "I_kwDOEItXAM5CIhgF",
      "title": "Not clear which test vectors are in draft-ietf-lake-traces",
      "url": "https://github.com/lake-wg/edhoc/issues/228",
      "state": "CLOSED",
      "author": "malishav",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "test vectors"
      ],
      "body": "When playing with the `vectors.cpp` application, I found it hard to relate the test vectors in `draft-ietf-lake-traces` and the ones generated by the program. The text in the draft should clearly state how and which test vectors are generated, and this should ideally be parametrized such that it is possible to generate:\r\n* the test vectors present in the draft\r\n* all supported vectors, with different verbosity levels",
      "createdAt": "2022-01-20T16:44:00Z",
      "updatedAt": "2023-09-16T16:40:11Z",
      "closedAt": "2023-09-16T16:40:11Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree that the draft shouldl clearly state traces that is is a (small) subset of the JSON testvectors, and clearly point out which of them.\r\n\r\nMarek had a related comment that the JSON test vectors should have a table on content explaining what each test vector contains.",
          "createdAt": "2022-01-21T11:12:32Z",
          "updatedAt": "2022-01-21T11:12:32Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The traces document should also link to the code that was used to genereate them",
          "createdAt": "2023-04-20T08:02:24Z",
          "updatedAt": "2023-04-20T08:02:24Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "For producing the traces, I used my implementation available at:\r\n\r\nhttps://github.com/rikard-sics/californium/tree/edhoc/cf-edhoc\r\n\r\nThe specific output was produced through the JUnit tests at:\r\n\r\nhttps://github.com/rikard-sics/californium/blob/edhoc/cf-edhoc/src/test/java/org/eclipse/californium/edhoc/MessageProcessorTest.java",
          "createdAt": "2023-04-20T10:48:10Z",
          "updatedAt": "2023-04-20T10:48:10Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Could we maybe a JSON version of the test vectors in the document. E.g. in an appendix? ",
          "createdAt": "2023-08-25T12:40:33Z",
          "updatedAt": "2023-08-25T12:40:33Z"
        }
      ]
    },
    {
      "number": 229,
      "id": "I_kwDOEItXAM5CIiIl",
      "title": "Vectors.cpp app build is not cross-platform friendly",
      "url": "https://github.com/lake-wg/edhoc/issues/229",
      "state": "CLOSED",
      "author": "malishav",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "traces and test vectors"
      ],
      "body": "It would be nice to include a README and a generic Unix-friendly Makefile that explains how to build the `vectors.cpp` application. The current build is Windows-only.",
      "createdAt": "2022-01-20T16:46:31Z",
      "updatedAt": "2023-04-20T07:50:03Z",
      "closedAt": "2023-04-20T07:50:03Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think Marek has already solve this. Have you looked at his code?\r\n\r\nhttps://github.com/lake-wg/edhoc/issues/185",
          "createdAt": "2022-01-21T11:08:31Z",
          "updatedAt": "2022-01-21T11:08:31Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Link to the code:\r\n\r\nhttps://github.com/stoprocent/edhoc/tree/feature/mbedtls/test-vectors-11\r\n",
          "createdAt": "2022-01-24T14:32:37Z",
          "updatedAt": "2022-01-24T14:32:37Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "My code is now considered obsolete. It has been replaced by Marek's test vector code.",
          "createdAt": "2023-04-20T07:50:03Z",
          "updatedAt": "2023-04-20T07:50:03Z"
        }
      ]
    },
    {
      "number": 235,
      "id": "I_kwDOEItXAM5CY6eV",
      "title": "Decision to use SHA-256/64 for I_CRED_R in draft-selander-lake-traces-02",
      "url": "https://github.com/lake-wg/edhoc/issues/235",
      "state": "CLOSED",
      "author": "mrdeep1",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Close?",
        "traces and test vectors",
        "PR exists"
      ],
      "body": "[lake-traces 2.  Setup](https://www.ietf.org/archive/id/draft-selander-lake-traces-02.html#section-2) states\r\n````\r\nBoth I and R are assumed to support cipher suite 0, which determines the algorithms:\r\n\r\nEDHOC AEAD algorithm = AES-CCM-16-64-128\r\nEDHOC hash algorithm = SHA-256\r\nEDHOC MAC length in bytes (Static DH) = 8\r\nEDHOC key exchange algorithm (ECDH curve) = X25519\r\nEDHOC signature algorithm = EdDSA\r\nApplication AEAD algorithm = AES-CCM-16-64-128\r\nApplication hash algorithm = SHA-256\r\n````\r\nThen [lake-traces 4.2.  message_2](https://www.ietf.org/archive/id/draft-selander-lake-traces-02.html#section-4.2) has\r\n````\r\nCRED_R is identified by a 64-bit hash:\r\n\r\nID_CRED_R =\r\n{\r\n  34 : [-15, h'60780E9451BDC43C']\r\n}\r\nwhere the COSE header value 34 ('x5t') indicates a hash of an X.509 certficate, and the COSE algorithm -15 indicates\r\nthe hash algorithm SHA-256 truncated to 64 bits.\r\n````\r\nwhich is using -15 (SHA-256/64), not -16 (SHA-256) for the hash.\r\n\r\nHow was this decision arrived at?",
      "createdAt": "2022-01-25T12:25:56Z",
      "updatedAt": "2022-02-18T11:10:17Z",
      "closedAt": "2022-02-18T11:10:16Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the comment.\r\n\r\n- The hash algorithm used in x5t is independent of the EDHOC cipher suite, that should probably be mentioned in the draft. I will make a PR with some text on this.\r\n\r\n- I don't think there was any discussion on this, but SHA-256/64 feels like a natural choice. As EDHOC integrity protects the whole certificate the length of the hash does not have any security relevance, the hash is just used to find the certificate, not to prove it is the correct one. Using SHA-256 would increase overhead with 24 bytes per message without any benefits. An implementation supporting SHA-256 can easily support SHA-256/64 (as it is just a truncated SHA-256).\r\n",
          "createdAt": "2022-01-25T14:43:03Z",
          "updatedAt": "2022-01-25T14:51:24Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@emanjon Than I need to run an update on test vectors for p256 as I have switched to SHA_256. I will make an update to use SHA_256/64 and pull request",
          "createdAt": "2022-01-28T08:26:55Z",
          "updatedAt": "2022-01-28T08:26:55Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, please do. Using SHA-256 in x5t is just a waste of 24 bytes in message_2 and message_3.\r\n\r\nWe should maybe give some recommendations in the draft regarding this, but I think it is hard to give normative requirements as x5t is just one example and future COSE header parameters and EAD might use cryptographic algorithms. The algortithms in X.509 in another example on algorithms not controlled by the cipher suite, Somebody might use a cert with a P-521 authentication key where the CA used RSA-PSS to sign the certificate together with cipher suite 2/3.\r\n\r\nMaybe the draft should recommend the use of algorithms from the ciphersuite also in cose headers, EAD, X.509, CWT, etc. In the case of x5t the recommendation could be to use the same hash function but with as much truncation as possible.",
          "createdAt": "2022-01-28T09:24:37Z",
          "updatedAt": "2022-01-28T09:24:37Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this now?",
          "createdAt": "2022-02-18T11:06:55Z",
          "updatedAt": "2022-02-18T11:06:55Z"
        },
        {
          "author": "mrdeep1",
          "authorAssociation": "NONE",
          "body": "Works for me - thanks.",
          "createdAt": "2022-02-18T11:10:16Z",
          "updatedAt": "2022-02-18T11:10:16Z"
        }
      ]
    },
    {
      "number": 238,
      "id": "I_kwDOEItXAM5Cpjcq",
      "title": "When does the Compliance requirements apply?",
      "url": "https://github.com/lake-wg/edhoc/issues/238",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?",
        "PR exists"
      ],
      "body": "Compliance requirements has some positive effects but also many negative.\r\n- Constrained devices might be required to support things (takes up storage) they never use.\r\n- Weaknesses might be found in cryptographic algorithms. Implementation then have to chose between being compliant or insecure.\r\n\r\nTLS 1.3 has softened the compliance requirements compared to TLS 1.2 (COSE does not have any at all). TLS 1.3 (RFC8446) use the following sentence\r\n\r\n\"  In the absence of an application profile standard specifying\r\n   otherwise:\r\n\"\r\n\r\nThis might (likely?) be a good sentence for EDHOC as well.\r\n ",
      "createdAt": "2022-01-29T11:15:26Z",
      "updatedAt": "2022-02-22T07:46:30Z",
      "closedAt": "2022-02-22T07:46:30Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Other comments, in addition to the proposal in PR #239 (see above):\r\n\r\n1. TLS text for convenience: \r\n\r\n> In the absence of an application profile standard specifying otherwise:\r\n>\r\n> A TLS-compliant application MUST implement the TLS_AES_128_GCM_SHA256 cipher suite and SHOULD implement the TLS_AES_256_GCM_SHA384 and TLS_CHACHA20_POLY1305_SHA256  cipher suites.\r\n> \r\n> A TLS-compliant application MUST support digital signatures with rsa_pkcs1_sha256 (for certificates), rsa_pss_rsae_sha256 (for CertificateVerify and certificates), and ecdsa_secp256r1_sha256.  A TLS-compliant application MUST support key exchange with secp256r1 (NIST P-256) and SHOULD support key exchange with X25519.\r\n\r\n\r\n2. Corresponding EDHOC may be:\r\n\r\n\"In the absence of an _applicability template_ specifying otherwise:\"\r\n\r\n\r\n3. With an initial sentence as in 2. or PR 239, the current text on cipher suites may be considerably simplified (since it is anyway up to the application), for example:\r\n\r\nOLD\r\nFor many constrained IoT devices it is problematic to support several crypto primitives. Existing devices can be expected to support either ECDSA or EdDSA. Cipher suites 0 (AES-CCM-16-64-128, SHA-256, 8, X25519, EdDSA, AES-CCM-16-64-128, SHA-256) and 1 (AES-CCM-16-128-128, SHA-256, 16, X25519, EdDSA, AES-CCM-16-64-128, SHA-256) only differ in size of the MAC length, so supporting one or both of these is no essential difference. Similarly for cipher suites 2 (AES-CCM-16-64-128, SHA-256, 8, P-256, ES256, AES-CCM-16-64-128, SHA-256) and 3 (AES-CCM-16-128-128, SHA-256, 16, P-256, ES256, AES-CCM-16-64-128, SHA-256). To enable as much interoperability as possible, less constrained devices SHOULD implement all four cipher suites 0-3. Constrained endpoints SHOULD implement cipher suites 0 and 1, or cipher suites 2 and 3. Implementations only need to implement the algorithms needed for their supported methods.\r\n\r\n\r\nNEW\r\nCipher suites 2 (AES-CCM-16-64-128, SHA-256, 8, P-256, ES256, AES-CCM-16-64-128, SHA-256) and 3 (AES-CCM-16-128-128, SHA-256, 16, P-256, ES256, AES-CCM-16-64-128, SHA-256) only differ in size of the MAC length, so supporting one or both of these is no essential difference. \r\nAn EDHOC-compliant implementation MUST implement cipher suite 2 and 3. Implementations only need to implement the algorithms needed for their supported methods.\r\n",
          "createdAt": "2022-02-07T17:51:30Z",
          "updatedAt": "2022-02-07T17:52:26Z"
        }
      ]
    },
    {
      "number": 241,
      "id": "I_kwDOEItXAM5CtAW0",
      "title": "Update text on identity protection",
      "url": "https://github.com/lake-wg/edhoc/issues/241",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "Close?",
        "PR exists"
      ],
      "body": "Current draft says:\r\n\"EDHOC protects the credential identifier of the Initiator against active attacks and the credential identifier of the Responder against passive attacks.\"\r\n\r\nShould probably point out that active attack would be a new message_1 to the lower layer address as the other message_1.\r\n\r\n",
      "createdAt": "2022-01-31T08:07:22Z",
      "updatedAt": "2022-02-22T07:45:57Z",
      "closedAt": "2022-02-22T07:45:57Z",
      "comments": []
    },
    {
      "number": 242,
      "id": "I_kwDOEItXAM5CxouS",
      "title": "Errors in EAD processing",
      "url": "https://github.com/lake-wg/edhoc/issues/242",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "From follow up of Sean's review:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/lake/rC3OwLdD0fO6EEx8Lnh3k1zXUV8/\r\n\r\n> > s3.8 (comment): Wow .. so you can send in the CSR in EAD, if it works then you can use the cert in the later messages (e.g., kind of like EAP)? Sure hope there\u2019s no kind of CSR-related error. And, you know that the CA gets to decide the name right. Sorry just trying to digest it all.\r\n> > \r\n> > [GS: We discussed this in the LAKE interim where you participated, but just for the record: Yes, the intent is to be able to send CSR in EAD. This is expected to be detailed in an accompanying specification. One example would be the enrolment of an \"operational\" certificate as an add-on to initial authentication, the authentication of which could be performed using a manufacturer certificate included in the device from factory.\r\n> > ]\r\n>\r\n> Yeah I remember I was there. As long as your consider what to do when you get an enrollment error this will be fine to do.\r\n \r\nHow to handle errors in EAD processing should be included in the new EAD appendix.",
      "createdAt": "2022-02-01T07:07:44Z",
      "updatedAt": "2022-03-15T14:53:21Z",
      "closedAt": "2022-03-15T14:53:21Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I propose that errors in EAD processing are left out of scope for EDHOC. If a security application processing EAD reaches an unexpected state it may discontinue the EDHOC processing, or it may continue EDHOC processing potentially with an EAD being sent back. The specification defining the EAD for this security application should describe this. I add this to PR #240.",
          "createdAt": "2022-02-18T09:30:32Z",
          "updatedAt": "2022-02-18T09:30:32Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "With the new content of Section 3.8 and Appendix E (now merged with master branch) it should be clear that EAD processing is separate from EDHOC. Regarding EAD-related errors, Appendix E now states: \r\n\r\n> The processing of (ead_label, ead_value) by the security application needs to be described in the specification where the ead_label is registered, see [Section 9.5](https://github.com/lake-wg/edhoc/issues/242#iana-ead), including the ead_value for each message and actions in case of errors.\r\n\r\nGood enough?",
          "createdAt": "2022-02-23T13:20:03Z",
          "updatedAt": "2022-02-23T13:20:03Z"
        }
      ]
    },
    {
      "number": 243,
      "id": "I_kwDOEItXAM5C-OjY",
      "title": "Checking G_X in EDHOC Message 1",
      "url": "https://github.com/lake-wg/edhoc/issues/243",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "PR exists"
      ],
      "body": "In the Editor's copy, the second bullet point at [1] says:\r\n\r\n> Verify that G_X is not equal to G_X in a simultanous EDHOC message exchange initiated by the Responder.\r\n\r\nCould you clarify the exact meaning of \"simultaneous EDHOC message exchange\" and which of the existing EDHOC sessions should be checked?\r\n\r\nIn particular, is this limited to checking the sessions that the Responder has started but are still not completed, while simply skipping all the other ones? If so, can a session be considered completed when TH_4 has been computed and stored, or even earlier than that?\r\n\r\n\r\n[1] https://lake-wg.github.io/edhoc/draft-ietf-lake-edhoc.html#section-5.2.3",
      "createdAt": "2022-02-03T22:15:10Z",
      "updatedAt": "2022-02-22T07:45:39Z",
      "closedAt": "2022-02-22T07:45:39Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, let's clarify that.\r\n",
          "createdAt": "2022-02-07T13:00:36Z",
          "updatedAt": "2022-02-07T13:00:36Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "It would also help narrowing that statement to where it is actually relevant. Reading over \"all the state\" in a system can be costly, and becomes less and less well-defined the more a system becomes distributed. Reading (for example, if that is the case) over \"all the state of exchanges that use a particular PSK\" would be more doable.",
          "createdAt": "2022-02-10T16:10:02Z",
          "updatedAt": "2022-02-10T16:10:02Z"
        },
        {
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "body": "> It would also help narrowing that statement to where it is actually relevant. Reading over \"all the state\" in a system can be costly, and becomes less and less well-defined the more a system becomes distributed. Reading (for example, if that is the case) over \"all the state of exchanges that use a particular PSK\" would be more doable.\r\nI certainly agree.\r\n",
          "createdAt": "2022-02-11T07:16:14Z",
          "updatedAt": "2022-02-11T07:16:14Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree. The G_X is a leftover from the time when we had a PSK mode, It was left as it theoretically is a nice way to stop selfie-attacks for future methods. Given the practical problems and that this is not needed for any of the current methods with mutual authentication I think it should be removed from processing and moved back to security considerations.\r\n- For method 0-3 with mutual authentication, selfie-attacks are not a problem, I will authenticate R.\r\n- For method 0-3 with TOFU, selfie-attacks are a problem, but can then be solved by the looking at CRED_R and making sure CRED_R was not previously sent by I. This is easier to do then checking active G_X.\r\n- For a hypothetical future EDHOC PSK mode, selfie-attack can be mitigated by doing the G_X check, assign strict roles (I or R) to each PSK, or adding some identifier string to e.g. EAD (\"42-50-31-FF-EF-37-32-39\").\r\n ",
          "createdAt": "2022-02-11T08:03:29Z",
          "updatedAt": "2022-02-11T08:03:29Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a PR which should address all the aspects of this issue.\r\n\r\n- Deleted all G_X checking text\r\n- Separated reflection attack checking from simultanous sessions.\r\n\r\nAdded the following text\r\n\r\n`To mititgate reflection attacks, the Initiator MUST verify that the the Responder's identity is not equal to Initiator's, e.g., by checking that ID_CRED_R was not previosly created by the Intiator. Any future EHDOC methods using e.g., pre-shared keys might need to mitigate this in other ways.\r\n`\r\n\r\nShould it be mentioned in message_2 processing? Should it be MUST? Should it take specifically about TOFU? \r\n",
          "createdAt": "2022-02-18T09:14:04Z",
          "updatedAt": "2022-02-18T10:44:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Addresses Marcos comments. Seems to be agreement on new text. Merging and closing",
          "createdAt": "2022-02-22T07:45:39Z",
          "updatedAt": "2022-02-22T07:45:39Z"
        }
      ]
    },
    {
      "number": 244,
      "id": "I_kwDOEItXAM5DItO1",
      "title": "Update test vectors with new Exporter label",
      "url": "https://github.com/lake-wg/edhoc/issues/244",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "PR #205, which is merged with master, changed Exporter labels for OSCORE:\r\n\r\nhttps://github.com/lake-wg/edhoc/pull/205/commits/febb2bab\r\n\r\nThe test vectors need to be updated accordingly, to be able to submit a new version of -traces matching the next version of -edhoc.\r\n\r\n(Att: @stoprocent @emanjon)",
      "createdAt": "2022-02-07T18:37:06Z",
      "updatedAt": "2022-02-08T07:15:47Z",
      "closedAt": "2022-02-08T07:15:47Z",
      "comments": [
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PR done.",
          "createdAt": "2022-02-07T22:30:07Z",
          "updatedAt": "2022-02-07T22:30:07Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, merged.",
          "createdAt": "2022-02-08T07:15:47Z",
          "updatedAt": "2022-02-08T07:15:47Z"
        }
      ]
    },
    {
      "number": 246,
      "id": "I_kwDOEItXAM5DLTbq",
      "title": "Update acknowledgements",
      "url": "https://github.com/lake-wg/edhoc/issues/246",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "Stephen, Sean, Kathleen, ...",
      "createdAt": "2022-02-08T10:03:33Z",
      "updatedAt": "2022-03-15T14:53:36Z",
      "closedAt": "2022-03-15T14:53:36Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Added the three you listed",
          "createdAt": "2022-02-10T07:28:02Z",
          "updatedAt": "2022-02-10T07:28:02Z"
        }
      ]
    },
    {
      "number": 247,
      "id": "I_kwDOEItXAM5DPuC6",
      "title": "Illustrate message_4 in CoAP transport",
      "url": "https://github.com/lake-wg/edhoc/issues/247",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "Include message_4 in Figure 10 (and perhaps not in Fig 11, since it is optional)",
      "createdAt": "2022-02-09T08:17:37Z",
      "updatedAt": "2022-03-15T14:54:03Z",
      "closedAt": "2022-03-15T14:54:03Z",
      "comments": []
    },
    {
      "number": 249,
      "id": "I_kwDOEItXAM5DW8rV",
      "title": "Type of connection identifiers",
      "url": "https://github.com/lake-wg/edhoc/issues/249",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "Proxying question from Stefan: \r\n\r\n> Is there a strong reason to define the encoding as bstr/int. Is it not enough to have just int? From my perspective to allow one of both bstr or int depending on the user makes not only the the implementation more complex but as well the EDHOC API more user unfriendly. \r\n\r\nThis would reduce the number of identifiers of a given size. Perhaps this could be a constraint in the applicability template / application profile.",
      "createdAt": "2022-02-10T13:32:35Z",
      "updatedAt": "2022-03-15T14:54:46Z",
      "closedAt": "2022-03-15T14:54:45Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the number of identifiers of a given size are as follows\r\n```\r\nbytes        bstr        int\r\n1               1         48\r\n2             256        464\r\n```\r\nOnly int would likely be acceptable.\r\n\r\n",
          "createdAt": "2022-02-11T08:08:00Z",
          "updatedAt": "2022-02-11T08:08:00Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "The above holds for the EDHOC identifiers, which are exchanged on the wire only during an EDHOC execution.\r\n\r\nThings are different if we think of what that means in terms of OSCORE identifiers, which are supposed to be exchanged on the wire several times later on when using OSCORE.\r\n\r\nIf we consider:\r\n\r\n* The EDHOC==>OSCORE conversion rules from -lake-edhoc at [1]; and\r\n\r\n* The OSCORE==>EDHOC conversion rules from -core-oscore-edhoc at [2], to deterministically and optimally select one specific EDHOC identifier among the two equivalent ones for the same OSCORE identifier;\r\n\r\nThen we have the following number of available OSCORE identifiers, as shown in the second and third column.\r\n\r\n```\r\nSize N in bytes    When EDHOC ID is a bstr     When EDHOC ID is an int\r\n of OSCORE ID      on the wire (N+1 bytes)     on the wire (N bytes)\r\n     0                          1                          0\r\n     1                        208                         48\r\n     2                      65072                        464\r\n    ...                       ...                         ...\r\n```\r\n\r\nThinking of an EDHOC endpoint when **offering its own** EDHOC identifier C_X as bstr or int, it can be admittedly non-trivial (I would not say difficult) for an implementation to optimally check if it is possible to offer first any available EDHOC identifier that yield an available 1-byte OSCORE identifier, before moving on to considering the next pool of EDHOC identifiers yielding 2-byte OSCORE identifiers.\r\n\r\nHowever, the optimal selection above does not have to necessarily be performed. Regardless, in order to avoid any possible complication and keep the offering of EDHOC identifiers very simple, an EDHOC endpoint may simply choose to offer only numeric identifiers, which is already possible to do today.\r\n\r\nAt the same time, I think it is good to continue expecting that an EDHOC endpoint is at least able to correctly receive and process a byte-string valued EDHOC identifier when offered by the other peer. This preserves a large number of short OSCORE identifiers that remain possible to select and use later on with OSCORE.\r\n\r\n\r\n[1] https://datatracker.ietf.org/doc/html/draft-ietf-lake-edhoc-12#appendix-A.1\r\n\r\n[2] https://datatracker.ietf.org/doc/html/draft-ietf-core-oscore-edhoc-02#section-4.1",
          "createdAt": "2022-02-13T22:53:45Z",
          "updatedAt": "2022-02-13T22:53:45Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Now we mention the option for an endpoint to select only integer or only byte string connection identifiers.\r\n\r\n@marco-tiloca-sics Did I capture your comment?\r\n@StefanHri Is this good enough? If not, please provide more details of the problem.\r\n\r\n\r\n",
          "createdAt": "2022-02-23T11:28:06Z",
          "updatedAt": "2022-02-23T11:28:06Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Overall yes, thanks. Two comments on the new added text:\r\n\r\n> One simplification is to restrict to only use integer or only byte string connection identifiers.\r\n\r\nI suggest to replace \"use\" with \"select\", also consistently with other just added text as intended to apply to what is offered to the other peer, not used overall.\r\n\r\n\r\n> An endpoint MAY choose to select, for example, only numeric connection identifiers which then are equivalent if and only if the integer value is the same, thus simplifying the comparison.\r\n\r\nI can't fully parse this sentence. The word \"equivalent\" is defined a few paragraphs above as applicable to two equivalent connection identifiers (one bstr and one int) yielding the same OSCORE identifier and hence ambiguous. The word was not intended to be used for two int connection identifiers.\r\n\r\nAlso, the numbers in the table are the result of applying both the rules in the {{edhoc-to-oscore}} section and the companion rules in draft-ietf-core-oscore-edhoc , which is probably better to mention. That's what ensures that, when selecting an available OSCORE Recipient ID, only one of the two equivalent corresponding connection identifier is deterministically selected.\r\n\r\nPerhaps here you mean that, due to the above, there is only a limited number of eligible integer connection identifier for each identifier size (e.g., 48 for 1-byte integer identifiers). Due to the rules in the {{edhoc-to-oscore}} section, those are the identifiers whose CBOR encoding is equal to the corresponding OSCORE ID, which indeed simplifies a comparison.",
          "createdAt": "2022-02-23T11:53:24Z",
          "updatedAt": "2022-02-23T11:53:24Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Updated after discussion with @marco-tiloca-sics: 4f568988",
          "createdAt": "2022-02-25T16:38:51Z",
          "updatedAt": "2022-02-25T16:38:51Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me.",
          "createdAt": "2022-02-25T19:03:52Z",
          "updatedAt": "2022-02-25T19:03:52Z"
        }
      ]
    },
    {
      "number": 250,
      "id": "I_kwDOEItXAM5DYPFl",
      "title": "applicability template -> application profile",
      "url": "https://github.com/lake-wg/edhoc/issues/250",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "The first term was \"applicability statement\" but since we did not intend the meaning of RFC 2026 was changed to \"applicability template\" which seems to be confusing because implies something needs to be filled in. New proposal:  \"application profile\".\r\n",
      "createdAt": "2022-02-10T16:32:26Z",
      "updatedAt": "2022-03-15T14:55:12Z",
      "closedAt": "2022-03-15T14:55:12Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I like it. That also aligns with the wording in TLS 1.3.",
          "createdAt": "2022-02-11T08:08:52Z",
          "updatedAt": "2022-02-11T08:08:52Z"
        }
      ]
    },
    {
      "number": 253,
      "id": "I_kwDOEItXAM5EWm3K",
      "title": "Updates needed for traces-01",
      "url": "https://github.com/lake-wg/edhoc/issues/253",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "traces and test vectors"
      ],
      "body": "I've started to work on the update of -traces, see c936328e.\r\n\r\nWhat is missing is:\r\n\r\n* Trace 2: SUITES_I = [6, 2] instead of 2.\r\n\r\n* Trace 2: Add bytes for raw x.509 (in addition to the CBOR encoded, see c936328e)\r\n     * In total two new entries: CRED_I (Raw Value) and CRED_R (Raw Value)\r\n     \r\n* Trace 2: Pretty print of all byte strings\r\n   * the analogue of vectors.txt for p256\r\n   * 16 bytes per row\r\n    * space between bytes\r\n\r\n* Marek's address\r\n\r\n@stoprocent could you help out here?\r\n\r\n\r\nThere is also TODO on version and reference which we need to fix, but that's just an editorial.\r\n",
      "createdAt": "2022-02-22T11:14:26Z",
      "updatedAt": "2022-03-17T18:39:06Z",
      "closedAt": "2022-03-17T18:38:33Z",
      "comments": [
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi \r\n\r\nSorry i was super loaded at work last few days. I will have a look on this and also your email tomorrow or the.\r\n\r\nBest\r\n\r\nM",
          "createdAt": "2022-02-22T14:10:53Z",
          "updatedAt": "2022-02-22T14:10:53Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": " @stoprocent Submission deadline Monday in 10 days :-)",
          "createdAt": "2022-02-25T17:04:48Z",
          "updatedAt": "2022-02-25T17:04:48Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done here: https://github.com/lake-wg/edhoc/pull/254\r\n\r\nPlease review and sorry for the delay",
          "createdAt": "2022-02-26T08:57:28Z",
          "updatedAt": "2022-02-26T08:57:28Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n@stoprocent Thanks for the update. Started to update trace 2, ran into this: \r\n\r\n> C_I (Raw Value) (Connection identifier chosen by Initiator) (int)\r\n> -24\r\n>\r\n> C_I (CBOR Data Item) (Connection identifier chosen by Initiator) (2 bytes)\r\n> 41 e8\r\n> \r\n> C_R (Raw Value) (Connection identifier chosen by Responder) (int)\r\n> -8\r\n> \r\n> C_R (CBOR Data Item) (Connection identifier chosen by Responder) (2 bytes)\r\n> 41 f8\r\n\r\nHow is this CBOR encoding made? I would have expected \r\n> -24 \r\n\r\nto be encoded as \r\n> 37 # negative(23)\r\n\r\nand\r\n> -8\r\n\r\nas\r\n> 27 # negative(7)\r\n\r\n\r\n",
          "createdAt": "2022-03-02T07:20:42Z",
          "updatedAt": "2022-03-02T07:20:42Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi\r\n\r\nThere was an incompatibility in the generator function for identifiers. This has been fixed here: https://github.com/stoprocent/edhoc/commit/abc197ef7372930c3c0d40dc4d0042cca27c6487\r\nand updated test vectors are here: https://github.com/lake-wg/edhoc/pull/255",
          "createdAt": "2022-03-02T15:44:24Z",
          "updatedAt": "2022-03-02T15:44:24Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, I'll take a look later today.",
          "createdAt": "2022-03-02T15:44:46Z",
          "updatedAt": "2022-03-02T15:44:46Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "New test vector included in trace 2.",
          "createdAt": "2022-03-02T20:53:36Z",
          "updatedAt": "2022-03-02T20:53:36Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "We are still missing update of label/remove of \"Master\" in trace 1, per #205.\r\n\r\n@emanjon @stoprocent Could anyone of you help?\r\n\r\n(Replace \"OSCORE_Master_Secret/Salt\" with \"OSCORE_Secret/Salt\" and re-generate test vector for EdDSA in vectors.txt)\r\n",
          "createdAt": "2022-03-02T20:58:03Z",
          "updatedAt": "2022-03-02T20:58:03Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "> We are still missing update of label/remove of \"Master\" in trace 1, per https://github.com/lake-wg/edhoc/pull/205.\r\n> \r\n> @emanjon @stoprocent Could anyone of you help?\r\n> \r\n> (Replace \"OSCORE_Master_Secret/Salt\" with \"OSCORE_Secret/Salt\" and re-generate test vector for EdDSA in vectors.txt)\r\n\r\nFor the first trace using EdDSA, with the new labels \"OSCORE_Secret\" and \"OSCORE_Salt\", I derive:\r\n\r\nOSCORE Master Secret (Raw Value) (16 bytes)\r\n9565355973280280d64a3ce8d7fa0a93\r\n\r\nOSCORE Master Salt (Raw Value) (8 bytes)\r\n37478eddb09e5d7a\r\n\r\nOSCORE Master Secret after KeyUpdate (Raw Value) (16 bytes)\r\nad4870dc7aca505bf80868785bd40d1b\r\n\r\nOSCORE Master Salt after KeyUpdate (Raw Value) (8 bytes)\r\n7138715cb50303a2\r\n\r\nCan anyone confirm?",
          "createdAt": "2022-03-09T10:16:50Z",
          "updatedAt": "2022-03-09T10:16:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "These updates are now completed in -traces.",
          "createdAt": "2022-03-17T18:38:33Z",
          "updatedAt": "2022-03-17T18:39:06Z"
        }
      ]
    },
    {
      "number": 257,
      "id": "I_kwDOEItXAM5FKx6d",
      "title": "Clarification Appendix A.3.",
      "url": "https://github.com/lake-wg/edhoc/issues/257",
      "state": "CLOSED",
      "author": "StefanHri",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "Hi,\r\n\r\nI don't understand this very good: \r\n> \"For the default case when the\r\n   server is Responder, the prepended connection identifier is C_R, and\r\n   C_I if the server is Initiator.  If message_1 is sent to the server,\r\n   the CBOR simple value \"true\" (0xf5) is sent in its place (given that\r\n   the server has not selected C_R yet).\"\r\n\r\nIn the case where:\r\n* the initiator is a client and\r\n* the responder is a server\r\nDo we need to replace C_I with 0xf5 in message_1??? \r\n\r\n@AleksanderDemianowski",
      "createdAt": "2022-03-05T21:50:42Z",
      "updatedAt": "2022-05-09T08:42:27Z",
      "closedAt": "2022-05-09T08:42:26Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "No, this is only referring to the *prepended* connection identifiers. \r\n\r\nThe prepended connection identifiers are only used when the session can't be inferred from the previous message. The first message is a special case since there is no previous message, which is why \"true\" is used. \r\n\r\nMaybe the \"in its place\" is not sufficiently clear?\r\n\r\n ",
          "createdAt": "2022-03-10T20:14:04Z",
          "updatedAt": "2022-03-10T20:14:04Z"
        },
        {
          "author": "AleksanderDemianowski",
          "authorAssociation": "NONE",
          "body": "@StefanHri just for clarifiaction, @gselander please correct me if needed. Assuming the responder is a server, the first send data it's a message from client to server. This message is a concatenation of 1B (true - 0xf5) and EDHOC message_1. EDHOC message_1 includes C_I inside and this is not changing (is not repclaced). \r\nIn this case always client (initiator) sends data like: (**0xf5**) || (METHOD, SUITES_I, G_X, **C_I**, EAD_1 ), where || is a symbol of concatenation.\r\nThis is what we can see as the first message on [Figure 10 in A.3. chapter.](https://tools.ietf.org/id/draft-ietf-lake-edhoc-12.html#fig-coap1)",
          "createdAt": "2022-03-14T07:20:20Z",
          "updatedAt": "2022-03-14T07:24:14Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@AleksanderDemianowski Yes that is correct. \r\n\r\nHere is some new text replacing the existing description in an attempt to clarify further:\r\n\r\nOLD\r\n> In order to correlate a message received from a client to a message previously sent by the server, messages sent by the client are prepended with the CBOR serialization of the connection identifier which the server has chosen.  For the default case when the server is Responder, the prepended connection identifier is C_R, and C_I if the server is Initiator. If message_1 is sent to the server, the CBOR simple value \"true\" (0xf5) is sent in its place (given that the server has not selected C_R yet).\r\n\r\n\r\nNEW\r\n> In order to correlate a message received from a client to a message previously sent by the server in the same EDHOC session over CoAP, messages sent by the client are prepended with the CBOR serialization of the connection identifier which the server has chosen. This applies independently of if the CoAP server is Responder or Initiator. \r\n\r\n> * For the default case when the server is Responder, message_3 sent from the client is prepended with the identifier C_R. In this case message_1 is also sent by the client, and to indicate that this is a new EDHOC session it is prepended with a dummy identifier, the CBOR simple value \"true\" (0xf5), since the server has not selected C_R yet. See Figure 10.\r\n\r\n> * In the case when the server is Initiator, message_2 sent from the client is prepended with the identifier C_I. See Figure 11.\r\n\r\n> Note the prepended identifiers are only used to keep track of messages in an EDHOC session, and this does not impact the value of the connection identifiers within the EDHOC messages.\r\n\r\n@StefanHri Is this more clear?\r\n",
          "createdAt": "2022-03-15T08:51:39Z",
          "updatedAt": "2022-03-15T08:51:39Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Some adaptations of the proposal above in PR #259.",
          "createdAt": "2022-03-16T07:20:06Z",
          "updatedAt": "2022-03-16T07:20:06Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "Thanks @gselander  and @AleksanderDemianowski  for the explanations! For me the new text is now clear. \r\n\r\nHowever I have now a more generic question. For me correlation and protocol session maintenance are closely related. Ideally an EDHOC implementation should support several sessions running in parallel, i.e., several protocol states should be maintained. Ideally this state information should be not visible to the user. \r\n\r\nAppendix A.3 proposes two different mechanisms for corelation: 1) on the server side through the prepended connection identifier chosen by the server and 2) on the client side through the CoAP token.\r\n\r\nFor me this means that the mapping of messages to sessions depend on the transport protocol, which makes implementing a transport independent EDHOC library difficult. \r\n\r\nIs it not better to provide a mechanism where message can be correlated independently from the transport protocol? Obviously, this will increase the bytes on the wire, however then EDHOC will be truly independent form the transport which will allow generic EDHOC libraries to be used with different transports. ",
          "createdAt": "2022-03-19T20:25:18Z",
          "updatedAt": "2022-03-19T20:25:18Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I think Stefan has a good point about providing an implementation independent of transport. Do others agree?\r\n\r\nEven if the correlation problem is out of EDHOC, and a solution is specified for CoAP, there is a need for adding adaptation for any other transport. Can this be made more application friendly? Would a \"wrapper\" prepending connection ids on all message be a (non-optimized) solution which can be used for transport independence?\r\n\r\n@chrysn @marco-tiloca-sics @stoprocent and others: What do you think \r\n(a) is a user-friendly solution, and\r\n(b) should be stated in the draft.\r\n\r\n",
          "createdAt": "2022-03-25T15:46:39Z",
          "updatedAt": "2022-03-25T15:46:39Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "If any possible transport has to be covered (CoAP included), then prepending connection identifiers to all EDHOC messages is the only way I see to be entirely agnostic of the specifically used transport (even when not necessary since the transport properties allow to achieve correlation anyway).\r\n\r\nHowever, on top of being not justified due to the transport properties ensuring correlation anyway, the resulting communication overhead can be unacceptable.\r\n\r\nI am thinking especially of EDHOC message_2 transported with CoAP in the typical Client=Initiator workflow. The smallest possible actual message_2 would still be 45 bytes, but it will yield a message payload of at least 46 bytes on the wire due to the prepended (and useless) C_I, and we know 45 bytes to be the critical payload threshold which is possible to not exceed by leveraging the inclusion of connection identifiers only when necessary.\r\n\r\nSince those prepended connection identifiers are not part of the actual EDHOC messages, the code building an EDHOC message based on the current protocol status can already be transport-agnostic.\r\n\r\nFor implementations of EDHOC that are expected to be used with multiple possible transports (e.g., as stand-alone libraries), I see the mentioned wrapper as an implementation approach where the payload to send on the wire is finalized starting from the just prepared EDHOC message. However, due to the reasons above, I think that at least the wrapper has to be transport-aware, and prepend a connection identifier or not in accordance with the correlation properties of the specifically used transport.\r\n\r\nThis may be worth stating in the draft, but I think mostly as notes for implementors.\r\n",
          "createdAt": "2022-03-25T22:14:44Z",
          "updatedAt": "2022-03-25T22:14:44Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Such a wrapper might need to provide all kinds of things -- essentially the 3.4 \"shopping list\" (of which message correlation is but one point). (And one might also add \"framing\" as in \"determining the message's length\" to the list, which in the age of `*ad_n` is tacitly assumed).\r\n\r\nA transport may or may not provide any of these, and I don't think that EDHOC can be expected to cater for all these. It may be helpful to point out that for particular cases the CoAP transport provides blueprints (which would be straightforward to extend to both directions if a transport needs it), but IMO a generic wrapper would either be inflated out of proportion or killed by a thousand parameters.",
          "createdAt": "2022-03-28T07:59:08Z",
          "updatedAt": "2022-03-28T07:59:08Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "What exactly is meant by correlation in section 3.4? Does this mean that the transport has some correlator field, e.g., CoAP tocken or something more?\r\n\r\nI think the easiest way for building a generic library will be to pass not only the payload of the messages to the EDHOC engine but also the correlator from the transport if there is some. If there is no correlator field on the transport layer we can use the currently proposed method. In that case, the session mapping can be done completely within the edhoc library. ",
          "createdAt": "2022-03-28T20:08:28Z",
          "updatedAt": "2022-03-28T20:08:28Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "As I understand message correlation, it just means that the transport needs to keep apart different exchanges if it supports them at all.\r\n\r\nAPI-wise, I don't think that using C_x as correlators at the API surface is a good abstraction. Instead, the correlators at the EDHOC library should be dealt out by the EDHOC library uniformly. (In high-level languages that might be an object, in low level language it might be a numeric handle or a pointer, or even just the EDHOC state struct if the library user manage memory -- called `exchange` below). Code on the client side can then look like this:\r\n\r\n```\r\nexchange := new EDHOC-exchange(as initiator, forbidden_c_i=my_oscore_recipient_ids)\r\nmsg12 := new CoAP-exchange\r\nmsg12.send_request(True | exchange.build_message_1())\r\nexchange.process_message_2(msg12.receive response())\r\nmsg34 := new CoAP-exchange\r\nmsg34.send_request(exchange.c_r | exchange.build_message_3())\r\n```\r\n\r\nwhich does just keeps the exchange handle on the stack, whereas on a server side there are actual lookups:\r\n\r\n```\r\nrunning_exchanges := new Dict mapping IntOrBstr to EDHOC-exchange\r\non request(req):\r\n    c_r = first item of req\r\n    if c_r is True:\r\n        exchange := new EDHOC-exchange(\r\n            as responder,\r\n            forbidden_c_r=keys of running_exchanges \u222a my_oscore_recipient_ids,\r\n            )\r\n        exchange.process_message_1(later items of req)\r\n        running_exchanges.store(exchange.c_r, exchange)\r\n        return exchange.build_message_2()\r\n    else:\r\n        exchange := running_exchanges.load(c_r)\r\n        exchange.process_message_3(later items of req)\r\n        return exchange.build_message_4()\r\n```\r\n\r\nThis keeps all the nitty-gritty transport details out of the EDHOC engine, which can now focus on running EDHOC only. (What this code is not showing is that ).\r\n\r\nThis is not ruling out EDHOC engines that manage all their contexts on their own, but for such engines to be truly generic as you envision them, they can't just index their exchanges by C_peer, but can also receive information from the transport indicating to which type of message is coming in, or through which transport, so that would need to be a more complex interface.",
          "createdAt": "2022-03-29T08:08:38Z",
          "updatedAt": "2022-03-29T08:08:38Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "Actually this brings another aspect. We need to map messages to sessions only on the server side. Correct? On the client side this is not necessary since after a request we can receive only a response to the that request. Therefore we don't need to support different EDHOC sessions on the client side. \r\n\r\nOf course if an implementation supports several parallel running clients this can be the case. However, I don't know if there is a use case for that.",
          "createdAt": "2022-03-29T18:36:24Z",
          "updatedAt": "2022-03-29T18:36:24Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "It's still a multiplex mapping, just at a different place, and not to an EDHOC handle but rather to a task and its stack frame (although when running on a single-thread single-client CoAP implementation, that lookup is in the 1-long token-to-boolean \"dictionary\" of \"is it the token I just used\").\r\n\r\nBut my point is not so much about a concrete implementation, but about that transports do things depending on how *they* work (all keywords \"client\", \"server\", \"request\" etc are in the transport domain), and can use a single concept (an EDHOC session / handle / exchange) to map to -- the transports may use information they ask from the session (such as its C_[RI], but possibly also the last message it has received or produced) to make decisions, but IMO the EDHOC implementation does not need to be bothered with how the transport precisely arrives at these decisions.",
          "createdAt": "2022-03-29T18:52:28Z",
          "updatedAt": "2022-03-29T18:52:28Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "Do I understand correctly Christian that you will prefer a single concept to be used for correlation (an EDHOC session / handle ..) since this is what I am proposing too. However this will excised the 45 byte boundary that we have for message 2, see above.",
          "createdAt": "2022-03-29T19:22:52Z",
          "updatedAt": "2022-03-29T19:22:52Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "I prefer the transports to map to a single concept semantically (that is, the concept of individual EDHOC exchanges that might in APIs be expressed as objects or handles), but that mapping should still be done in implementations (guided by the transport specification).\r\n\r\nOn the wire, for the CoAP transport, I am very happy with the current construction -- it allows that mapping to happen easily inside the transport. Even when implementing both initiator and responder, both the client behavior (receive EDHOC messages, send peer C_x followed by EDHOC messages) and the server behavior (receive peer C_x, process rest of payload as EDHOC message; send plain EDHOC messages) are simple.",
          "createdAt": "2022-03-29T19:38:36Z",
          "updatedAt": "2022-03-29T19:38:36Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "Does this mean that your implementation is tightly coupled to a CoAP transport and if you wish to add an additional transport you need to extend it?\r\n\r\nI will say let's keep it like it is. I have now a sufficient understanding of how to implement it.\r\n\r\n@stoprocent, @gselander should the pretending of C_x also be addressed in the test vectors?",
          "createdAt": "2022-03-29T20:41:17Z",
          "updatedAt": "2022-03-29T20:41:17Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "The implementation I work on is in two pieces: py-edhoc (which I'm extending based on Timothy's work) is unaware of any transports. aiocoap handles CoAP messages, prepends and reads C_x where necessary, selects keys and loads them depending on the CoAP library's configuration and properties of the incoming message (e.g. the Uri-Host). A new transport could use py-edhoc as is. (It could pick some parts about key selection from aiocoap --  I made no attempt to provide a generic key store so far).",
          "createdAt": "2022-03-29T21:07:48Z",
          "updatedAt": "2022-03-29T21:07:48Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@StefanHri About test vectors: Yes. Marek agreed that should be a feature of the new test vector code, and the prepended identifiers printed out in some vectors.\r\n\r\nThere is a meeting about test vectors on Monday April 4, 16:30-17:30 CEST, those interested to join can contact me.",
          "createdAt": "2022-03-30T06:38:13Z",
          "updatedAt": "2022-03-30T06:38:13Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as the final point about test vectors is included in #222.",
          "createdAt": "2022-05-09T08:42:26Z",
          "updatedAt": "2022-05-09T08:42:26Z"
        }
      ]
    },
    {
      "number": 258,
      "id": "I_kwDOEItXAM5Feu7r",
      "title": "Switching cipher suites between traces 1 and 2",
      "url": "https://github.com/lake-wg/edhoc/issues/258",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "traces and test vectors"
      ],
      "body": "@marco-tiloca-sics  pointed out that if we switch cipher suite between traces 1 and 2 then we don't have to use deterministic ECDSA to get reproducible traces (because there is no ECDSA signature):\r\n\r\nMethod 0, cipher suite 0  ->  EdDSA signatures \r\nMethod 3, cipher suite 2  ->  P-256 with static DH \r\n\r\nWhat do people think about that?\r\n",
      "createdAt": "2022-03-10T20:26:31Z",
      "updatedAt": "2022-03-17T18:32:51Z",
      "closedAt": "2022-03-17T18:32:51Z",
      "comments": [
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is a good idea. Since the most constrained devices are likely going to use `STAT-STAT` and considering that these legacy devices dominantly have P-256 accelerated in hardware, it definitely makes sense to have this combination, not only from the deterministic vs random signature but also from the functional point of view. ",
          "createdAt": "2022-03-11T07:22:44Z",
          "updatedAt": "2022-03-11T07:22:44Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should I redo traces for p-256 then ?",
          "createdAt": "2022-03-13T22:58:34Z",
          "updatedAt": "2022-03-13T22:58:34Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Not hearing anyone against, so let's do the change. \r\n\r\nWho can help with EdDSA?",
          "createdAt": "2022-03-14T11:46:20Z",
          "updatedAt": "2022-03-14T11:46:20Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I will try tomorrow to do both. Will post updates back here. \r\nAlso on EdDSA there is a need to change labels right?",
          "createdAt": "2022-03-14T23:29:03Z",
          "updatedAt": "2022-03-14T23:29:03Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@stoprocent Thanks! Yes, the labels too. ",
          "createdAt": "2022-03-15T09:25:49Z",
          "updatedAt": "2022-03-15T09:25:49Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@stoprocent just to let you know that I am eagerly waiting for a complete STAT-STAT trace over P256  :)",
          "createdAt": "2022-03-15T14:33:00Z",
          "updatedAt": "2022-03-15T14:33:00Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@malishav have a look on version from pull request https://github.com/lake-wg/edhoc/pull/256",
          "createdAt": "2022-03-15T22:14:14Z",
          "updatedAt": "2022-03-15T22:14:55Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@stoprocent Thanks for the new second trace! I wait for verification from someone before putting it into -traces. \r\n\r\nSince LAKE WG meeting is on Monday and I would need to send in slides describing the results well in advance any further progress on traces right now is much appreciated. :-)\r\n",
          "createdAt": "2022-03-16T06:45:41Z",
          "updatedAt": "2022-03-16T06:46:14Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok I got the EdDSA to compile on Mac OS so now I can generate the other ones too. \r\nWhich ones should we generate?\r\n\r\n```\r\n    // The four methods with COSE header parameters kid and x5t\r\n    test_vectors( sdh, cred_uccs, kid, sdh, cred_uccs, kid, 0, 34400 ); // Table 1, column 1\r\n    test_vectors( sdh, cred_uccs, kid, sig, cred_x509, x5t, 0, 27400 );\r\n    test_vectors( sig, cred_x509, x5t, sdh, cred_uccs, kid, 0, 44400 );\r\n    test_vectors( sig, cred_x509, x5t, sig, cred_x509, x5t, 0, 37400 ); // Table 1, column 4\r\n\r\n    // Other COSE header parameters\r\n    test_vectors( sdh, cred_x509, x5u, sdh, cred_x509, x5u, 0, 68500 );\r\n    test_vectors( sdh, cred_x509, x5chain, sig, cred_x509, x5bag, 0, 56200 );\r\n    test_vectors( sdh, cred_uccs, uccs, sig, cred_cwt, cwt, 0, 67200 ); // cwt not implemented\r\n\r\n    // Cipher suite 1\r\n    test_vectors( sdh, cred_uccs, kid, sdh, cred_uccs, kid, 1, 34410 );\r\n    test_vectors( sig, cred_x509, x5t, sig, cred_x509, x5t, 1, 37410 );\r\n\r\n    // More complex, long ids, EAD\r\n    test_vectors( sdh, cred_uccs, kid, sdh, cred_uccs, kid, 0, 34401, true );\r\n    test_vectors( sig, cred_x509, x5t, sig, cred_x509, x5t, 0, 37401, true );\r\n\r\n    // signature keys in UCCS and static DH keys in X.509, // Table 1, columns 2 and 3\r\n    test_vectors( sdh, cred_x509, x5t, sdh, cred_x509, x5t, 0, 2716057 );\r\n    test_vectors( sig, cred_uccs, kid, sig, cred_uccs, kid, 0, 3370318, false, false ); // No comma in JSON\r\n```",
          "createdAt": "2022-03-16T07:12:52Z",
          "updatedAt": "2022-03-16T07:12:52Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Good question. \r\n\r\nAccording to the new plan, trace 1 should be method 0, cipher suite 0, i.e. EdDSA signatures, in which case it makes most sense showing real X.509 certificates identified by x5t. Do we have any real X.509 certificates with Curve25519 public keys?\r\n\r\nEdit: That is test vector 4, the last or the initial four test vectors. If we don't have real certs available soon, we'll make a plan B.\r\n\r\nEdit 2: I think plan B would be to use the dummy certs, i.e. test vector 4 as is. Other proposal?",
          "createdAt": "2022-03-16T07:48:05Z",
          "updatedAt": "2022-03-16T08:20:07Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Assuming we will use X.509 certificates for trace 1, we may for variety in the document want to use CWT Claims Sets and `kid`s in trace 2. \r\n\r\nIf we stick with X.509 certificates in trace 2, we may want to make other changes, for  example setting the Key Usage extension of the certificates to Key Agreement.\r\n\r\nOpinions?\r\n",
          "createdAt": "2022-03-16T08:28:20Z",
          "updatedAt": "2022-03-16T08:36:04Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I propose we keep trace 2 dead simple and instantiate it for the most constrained setting. I believe that refers to the usage of `kid`.",
          "createdAt": "2022-03-16T08:32:24Z",
          "updatedAt": "2022-03-16T08:32:24Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@stoprocent Then you would get even more work :-/   Let us know if you need help.\r\n\r\n@malishav Perhaps you want to help out generating the CWT Claims Sets with the same public keys as in the current X.509 certs for trace 2, which would then replace them as credentials?",
          "createdAt": "2022-03-16T08:44:03Z",
          "updatedAt": "2022-03-16T08:44:03Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@gselander I'd love to help but I am not quite sure how to generate CCS? Is there soem library that you used? In my implementation code, I really only jump to the public key to grab it for crypto operations.",
          "createdAt": "2022-03-16T08:59:16Z",
          "updatedAt": "2022-03-16T08:59:16Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@malishav I would start with Figure 5, Section 3.5.2, and replace relevant fields. \r\n\r\nPerhaps someone else has a better way? @marco-tiloca-sics @stefanhri",
          "createdAt": "2022-03-16T10:25:21Z",
          "updatedAt": "2022-03-16T10:25:21Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "It should be ok to simply reuse that figure with updated values.\r\n\r\nI have a method that, upon client/server startup, builds the same kind of minimalistic CCS in the figure. It takes as input a public key (with all public coordinates), the subject string and the kid to use in 'kid' within 'cnf'. While values of course differ, the output structure is just as in the quoted figure.\r\n \r\nBefore having that, I just manually built the CCS on https://cbor.me/",
          "createdAt": "2022-03-16T10:49:47Z",
          "updatedAt": "2022-03-16T10:49:47Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This switch is now completed in -traces and the new test vectors are merged.",
          "createdAt": "2022-03-17T18:32:51Z",
          "updatedAt": "2022-03-17T18:32:51Z"
        }
      ]
    },
    {
      "number": 262,
      "id": "I_kwDOEItXAM5GBD7A",
      "title": "Usage of Content-Format in CoAP when transferring EDHOC over CoAP",
      "url": "https://github.com/lake-wg/edhoc/issues/262",
      "state": "CLOSED",
      "author": "dnav",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "As specified in section [A.3 Transferring EDHOC over CoAP](https://lake-wg.github.io/edhoc/draft-ietf-lake-edhoc.html#name-transferring-edhoc-over-coa), the payload in some CoAP messages can be an EDHOC message prepended by either a C_x identifier or \"true\". The draft states:\r\n\r\n> The application/edhoc media type does not apply to these messages; their media type is unnamed.\r\n\r\nHowever, the payload is actually a CBOR Sequence as defined by [RFC 8742](https://datatracker.ietf.org/doc/html/rfc8742). Thus, we could define and use a new media type \"application/edhoc+cbor-seq\".\r\n\r\nNote that the usage of the Content-Format option is optional.",
      "createdAt": "2022-03-20T20:58:04Z",
      "updatedAt": "2022-05-10T13:25:20Z",
      "closedAt": "2022-05-10T13:25:20Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Makes sense to me. \r\n\r\n@cabo, @chrysn, others: Comments?\r\n\r\nGood that you bring up the optionality of Content-Format, we should stress that in this text.\r\n\r\nThe discussion in Hackathon also reminded me about the common-option-compression which @chrysn presented in the May 12 interim 2021 - how to replace the Uri-Path: \"/.well-known/edhoc\" with a, say,  integer valued CoAP option.",
          "createdAt": "2022-03-20T21:33:14Z",
          "updatedAt": "2022-03-20T21:33:14Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Makes a lot of sense to me, too.\r\n",
          "createdAt": "2022-03-21T00:56:32Z",
          "updatedAt": "2022-03-21T00:56:32Z"
        }
      ]
    },
    {
      "number": 264,
      "id": "I_kwDOEItXAM5Gcx-f",
      "title": "Collecting items for conformity / plug tests",
      "url": "https://github.com/lake-wg/edhoc/issues/264",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "test vectors"
      ],
      "body": "I don't think there are plans yet to have high-level tests similar to those we had for OSCORE as the plug test spec. What I envision there is a set of corner cases that implementers could try to interoperate with, some of which deliberately hard.\r\n\r\nThis would be distinct from the traces / vectors as I understand them: Those are highly detailed step-by-step data sets that ensure that all data items go to the right places and can be debugged if they don't. For this here, I think more of a few high-level items that can be tested on a live systems too (ie. don't require predefined ephemeral values), and their failure indicates some particular set of things going wrong. Also, unlike the traces / vectors, not all of this necessarily reflects a MUST, some only SHOULDs.\r\n\r\nConcretely (and usually because I either just fixed that or know that my implementation will get it wrong), this would include:\r\n* CRED_x encoded noncanonically (\"SHOULD use an available authentication credential (transported in EDHOC or otherwise provisioned) without re-encoding\")\r\n* ID_CRED_x encoded noncanonically (not sure if that is even allowed as it's a header map)\r\n* Presence of unknown (eg. not-yet-specified) cipher suites.\r\n\r\nDo you think it is useful to gather such cases? If so, what are others you'd like to see covered?",
      "createdAt": "2022-03-26T18:04:10Z",
      "updatedAt": "2023-09-16T16:39:54Z",
      "closedAt": "2023-09-16T16:39:54Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, please list such cases here as they become known. It would be good with additional tests beyond current interop testing. Is OSCORE style tests preferable (defined initial state, actions and expected outcome)? What cases do people find important to cover?",
          "createdAt": "2022-03-31T06:12:12Z",
          "updatedAt": "2022-03-31T06:12:12Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "My takeaway from using the OSCORE tests was that they work best if at least one side can just work as a server (which is generally stateless, and can accept clients performing any test; for EDHOC that may require having multiple servers run or name-based-virtual-hosting). Thus initial state would be empty by test case (unless they build upon each other, in which case it is \"whatever test X turned out to produce\"). This property allowed the last versions of the OSCORE tests to be run unilaterally, only coming back to the server operator if trouble occurred.\r\n\r\nI generally prefer tests in which nothing needs to be configured that is not also configurable at run time (as such configurations might conflict with general API design; for example, I'd hope to use truly ephemeral keys and not hard-coded ones), but that may not be possible completely for EDHOC. For example, implementations would need to be configured with externally generated private keys to work with a peer that is configured to the plug test specs, even though it'd typically generate its private key pair and keep it isolated. (But the alternative of having an out-of-band live plug test configuration, eg. by the client GETting the server's public keys and PUTting its own in some CWT format would IMO be more error prone than the EDHOC tests themselves).",
          "createdAt": "2022-03-31T07:06:50Z",
          "updatedAt": "2022-03-31T07:06:50Z"
        }
      ]
    },
    {
      "number": 265,
      "id": "I_kwDOEItXAM5GySSb",
      "title": "kid2 => int, instead of kid => bstr / int  ",
      "url": "https://github.com/lake-wg/edhoc/issues/265",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "There has been for some time a discussion in COSE about how to define integer-valued key identifiers:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/cose/K0eifKhCluNreVwnJv2-LmhfLo8/\r\n\r\nThe extension of kid to bstr / int was previously agreed on the COSE mailing list but that is now revisited because of potential impact on existing COSE implementations. Three alternatives considered: \r\n\r\nSolution A (currently assumed by EDHOC).\r\nkid => int / bytes\r\n\r\nSolution B.\r\nkid => bytes\r\nkid2 => int / bytes\r\n\r\nSolution C.\r\nkid => bytes\r\nkid2 => int\r\n\r\nAt the time of writing there is one voice in preference for solution C and no objections.\r\n\r\nDoes anyone see any issues with solutions B or C (besides minor change in current implementations)?\r\n\r\n\r\n",
      "createdAt": "2022-03-31T06:35:55Z",
      "updatedAt": "2022-05-03T16:30:26Z",
      "closedAt": "2022-05-03T16:30:26Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@cabo made a proposal in the COSE mail thread above going into another direction [1]:\r\n\r\n> all kids are byte strings and the integer representation is just a compressed way to express such a byte string\r\n\r\nThe idea is that certain byte strings (48 to be precise) should have integer representations in the interval -24, ... ,23 (which all have 1-byte CBOR encoding: 37, 36, ..., 21, 20, 00, 01, ..., 17)\r\n\r\nIn his mail [1] @cabo made a proposal for which these byte strings should be.\r\n \r\n[1] https://mailarchive.ietf.org/arch/msg/cose/1EXuPcjrGWSXNTk4rw2Ffp6Jpnk/\r\n\r\nAfter an offlist discussion that part of the proposal was changed so that the byte strings which have integer representation are those for which there is an integer in the interval -24..23 that happens to have this byte string as its CBOR encoding, i.e.:\r\n\r\nh'37', h'36', ..., h'21', h'20', h\u201900\u2019, h'01', ..., h\u201917'\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2022-03-31T18:56:00Z",
          "updatedAt": "2022-03-31T18:56:00Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@cabo's summary: \r\n\r\n(1) We simplify connection identifiers to only ever be byte strings.\r\n\r\n(2) credential identifiers stay CBOR maps, and we are focusing on efficiently representing the case where this map has a single kid (which is, by the definition in COSE, a byte string).  PLAINTEXT_2 already has such an optimization for bstr (simply unpacking that from the map value).\r\n\r\nIn both cases, we provide a \u201ccompact\u201d representation of byte strings in the range h\u201900\u2019 to h\u201917\u2019 and h\u201920\u2019 to h\u201937\u2019 (48 single byte strings total), representing the byte string as the integer -24..23 that happens to have this byte string as its CBOR encoding.\r\n\r\nWe define the \u201cpreferred encoding\u201d of an application byte string (connection id or credential id) of this form to be the one-byte integer in these two choices.\r\n(Did we say we need to disallow the non-preferred bstr form here?)\r\n\r\nSo\r\n\r\n   PLAINTEXT_2 =\r\n   (\r\n    ID_CRED_R / bstr / -24..23,\r\n    \u2026\r\n\r\nmeans that the bstr\r\n\r\nh\u20194711\u2019\r\n\r\nis a shortcut for\r\n\r\n{ /kid/ 4: h\u20194711\u2019 }\r\n\r\nand that the int\r\n\r\n-13\r\n\r\nIs a shortcut for\r\n\r\n{ /kid/ 4: h\u20192C\u2019 }",
          "createdAt": "2022-03-31T18:58:03Z",
          "updatedAt": "2022-03-31T18:58:03Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Following this line of thought, if C_x are ever only byte strings, then the mapping of Connection Identifiers to OSCORE Sender/Recipient ID can be simplified; the Sender/Recipient ID equals the byte string. E.g. if C_R is h'0a' in diagnostic notation then Sender ID = 0x0a.\r\n\r\nThe only complication is the format of EDHOC on the wire: \r\n\r\n```\r\nC_x                 EDHOC           \r\nbstr             on the wire           \r\n\r\nh\u2019\u2019                    40                 \r\nh\u201900\u2019                  00                    \r\n. . .\r\nh\u201909\u2019                  09                    \r\nh\u20190a\u2019                  10                      \r\n. . .\r\nh\u201917\u2019                  23                       \r\nh\u201918\u2019               41 18                     \r\nh\u201919\u2019               41 19                      \r\nh\u201920\u2019                  -1                   \r\n. . .\r\nh\u201937\u2019                 -24                   \r\nh\u201938\u2019               41 38                     \r\n. . .\r\nh\u20194711\u2019          42 47 11         \r\n        ",
          "createdAt": "2022-03-31T19:17:38Z",
          "updatedAt": "2022-03-31T19:17:38Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "See PR #267 for a first sketch.",
          "createdAt": "2022-04-01T06:51:55Z",
          "updatedAt": "2022-04-01T06:51:55Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "All: Note that there are two (edit:) ~~independent~~  **different** #PRs (#267 and #274) addressing this issue and identifiers in EDHOC in general.\r\n\r\nWhich do you prefer?",
          "createdAt": "2022-04-04T06:36:50Z",
          "updatedAt": "2022-04-04T06:41:50Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "#267 seems to be much more self-contained, keeping the onus for managing the compression from byte string to integer to the place where that compression is needed.",
          "createdAt": "2022-04-04T07:57:30Z",
          "updatedAt": "2022-04-04T07:57:30Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "With the change proposed by Marco in #267 I think there are no advantages left with #274, so I withdraw that proposal.",
          "createdAt": "2022-04-05T08:14:12Z",
          "updatedAt": "2022-04-05T08:14:12Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolved with merge of #267",
          "createdAt": "2022-05-03T16:30:26Z",
          "updatedAt": "2022-05-03T16:30:26Z"
        }
      ]
    },
    {
      "number": 268,
      "id": "I_kwDOEItXAM5G5JWv",
      "title": "Avoid key and IV reuse for AEADs",
      "url": "https://github.com/lake-wg/edhoc/issues/268",
      "state": "CLOSED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "An AEAD scheme is meant to be used only once with a given IV and key,\r\nsee e.g. [RFC5116, Sec 3.1].\r\n\r\nThe standard currently specifies (Appendix E, p. 73) that an \"EDHOC implementation MAY keep the protocol state to be able to recreate the previously sent EDHOC message and resend it.\" For a fixed protocol state before the computation of `message_3`, the plaintext of `message_3` is randomized if the corresponding signature scheme is (like it is the case for ECDSA), but `IV_3` and `K_3` are not. Allowing to recompute `message_3` thus leads to a situation where the same key and IV are used for two (or more) distinct messages.\r\n\r\nTo solve the issue, there is a couple of possible actions:\r\n * remove the corresponding sentence (Appendix E, p. 73)\r\n * replace the \"MAY\" with a \"MUST NOT\"\r\n * explain the situation in more details\r\n",
      "createdAt": "2022-04-01T07:38:27Z",
      "updatedAt": "2022-05-18T07:54:59Z",
      "closedAt": "2022-05-18T07:54:59Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Good point. Clearly a risk that the standard is implemented in an insecure way here. This needs either\r\nadditional clarification/considerations or technical changes. In addition to the solutions described above you could also use the plaintext in the key/IV derivation.\r\n\r\nI think this needs to be discussed with implementors. Recomputations or storing is an implementation aspect. I don't know what the tradeoffs would be. Storing the random input to ECDSA seems impractical.\r\n\r\nI think this issue also affects message_2.\r\n",
          "createdAt": "2022-04-12T17:24:23Z",
          "updatedAt": "2022-04-12T17:24:23Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "With deterministic encryption like AES-SIV or deterministic signatures like deterministic ECDSA, EdDSA, RSA, or LMS this is not an issue, but deterministic ECDSA and EdDSA are not to be recommended on IoT devices.",
          "createdAt": "2022-04-13T06:48:36Z",
          "updatedAt": "2022-04-13T06:48:36Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> In addition to the solutions described above you could also use the plaintext in the key/IV derivation.\r\n\r\nIt would have been a cool solution, but the recipient needs to be able to compute the key and IV, so inserting the plaintext here would make it impossible for the recipient to compute the needed material for the decryption.\r\n\r\n> I think this issue also affects message_2.\r\n\r\nOooh, good point  For message 2, the consequence of the behaviour is that the attacker can obtain the xor of the two plaintexts. So, it would get a bunch of zeros, and then the xor of the two randomized signatures. What are the concrete consequences of this, I don't know... But probably better to avoid such weird behavior anyway?\r\n\r\nTo note, for `message_3`, as the AEAD algorithm is not fixed the consequences of the IV reuse are not specified and we should assume the worst possible case.",
          "createdAt": "2022-04-13T10:56:28Z",
          "updatedAt": "2022-04-13T10:56:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> >In addition to the solutions described above you could also use the plaintext in the key/IV derivation.\r\n> \r\n> It would have been a cool solution, but the recipient needs to be able to compute the key and IV, so inserting the plaintext here would make it impossible for the recipient to compute the needed material for the decryption.\r\n\r\nYes my mistake :) if you need to use the message in a smart way you need to do it inside the algorithm like in AES-GCM-SIV.\r\n\r\n> > I think this issue also affects message_2.\r\n> \r\n> Oooh, good point For message 2, the consequence of the behaviour is that the attacker can obtain the xor of the two plaintexts. So, it would get a bunch of zeros, and then the xor of the two randomized signatures. What are the concrete consequences of this, I don't know... But probably better to avoid such weird behavior anyway?\r\n\r\nYes, for message_2 and all the currently specified AEAD algorithms the consequences on confidentiality is that the attacker gets as you say \"a bunch of zeros, and then the xor of the two randomized signatures\". As the signature algorithm is not specified I think we have follow what you say below: In the worst case we have to assume that the attacker gets knowledge of both signatures. And a signature can be used to identity the public key (by testing verification). But with ECDSA this is probable not practically doable).\r\n\r\n> To note, for message_3, as the AEAD algorithm is not fixed the consequences of the IV reuse are not specified and we should assume the worst possible case.\r\n\r\nYes I agree, in the worst case you have assume that all confidentiality and integrity is gone and the key is revealed.\r\n",
          "createdAt": "2022-04-13T16:51:56Z",
          "updatedAt": "2022-04-13T16:51:56Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've put some more thought on that, and I really don't see any practical solution :/\r\n\r\nMaybe the best thing is simply to describe the issue, either in the cryptographic considerations or the Appendix E, and say that when such a feature is implemented, deterministic signatures SHOULD be preferred?",
          "createdAt": "2022-04-26T08:13:05Z",
          "updatedAt": "2022-04-26T08:13:05Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "My proposal is that we should replace the \"MAY\" with a \"SHOULD NOT\", and give an example of a setting when it may anyway be used.",
          "createdAt": "2022-04-26T09:52:29Z",
          "updatedAt": "2022-04-26T09:52:29Z"
        }
      ]
    },
    {
      "number": 269,
      "id": "I_kwDOEItXAM5G5iuz",
      "title": "Simplify and improve the session key management",
      "url": "https://github.com/lake-wg/edhoc/issues/269",
      "state": "CLOSED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "\r\nAs is, the session key PRK_4x3m offers much weaker properties than\r\nthe final exported keys.\r\n\r\nReason 1: session keys don't have \"contributiveness\" or \"key control\": even if Alice produces good randomness each time, keys may not be unique (if Bob sends low order points or the identity point - see footnote 1). Exported keys fix this by inclusion of transcript, which also gives a better binding to the protocol execution.\r\n\r\nReason 2: `PRK_4x3m` does not authenticate `TH_4` as it is independent of it. If there are ways \"to play with\" `MESSAGE_3` in order to obtain distinct values of `TH_4` on both sides (we discuss this further below), any application key derivation not using `TH_4` and only `PRK_4x3m` will break the authentication claim over `TH_4`.\r\n\r\n\r\nAs an additional remark, the current construction makes it difficult to identify in cryptographic terms what is the session key of the protocol, as the stored key material at the end is both `TH_4` and `PRK_4x3m`.\r\n\r\nOur suggestion is to follow a design similar to e.g. TLS, and to have a final key derivation, that combines both `TH_4` and `PRK_4x3m` into a final key. This has multiple advantages:\r\n  * solve the issues raise before, ensuring contributivity and no key control over the session key, as well as ensuring that the session key is tied to the execution through `PRK_4x3m`;\r\n  * simplify the final state of the protocol, where instead of managing both `TH_4` and `PRK_4x3m`, only the final key is stored;\r\n  * simplify the exporter, as it would only now depend on the session key.\r\n\r\n\r\nTo make this proposal a bit more concrete, we provide a first draft of a commit that could implement this solution here: https://github.com/charlie-j/edhoc/commit/9f4843a8ff9f93a0522ff3f1a478657fd197b5e2\r\n\r\n## Breaking TH_4 authentication\r\n\r\nWe discuss here some subtle ways that may lead to a breach of authentication for `TH_4`, which could make the authentication very implementation dependent. Those mostly rely on the fact that using `ciphertext_3` inside the transcript instead of the underlying payload may allow the attacker some leeway in changing the concrete value of `ciphertext_3`, thus leading to an initiator and a responder disagreeing on the vlaue of `TH_4` after verification of message 3.\r\n\r\n1) According to Appendix B, there appear to exist multiple valid encodings of the same bitstring value. Typically, `'12cd'` can be encoded as `'12cd'`,`h'12cd'` or `<< '12cd' >>`. If that is the case, by converting between those multiple encodings, an attacker can change the value of the `ciphertext_3` that is included inside `TH_4` (unless the implementation does a COSE decoding to obtain the actual value of the ciphertext, then does a new COSE encoding to put back the value inside the COSE sequence used for `TH_4`). \r\n\r\n2) The standard specifies a way to interface with the COSE encryption, where after computing a `COSE_Encrypt0` object the protected and unprotected fields are dropped to only keep the ciphertext field. This may be error prone on the implementation side: if the full `COSE_Encrpyt0` is used inside the implementation instead of the ciphertext field, the message becomes malleable through the unprotected header. \r\n\r\n3) An encryption scheme based on the MacThenEncrypt paradigm may only provide integrity of the plaintext, and not integrity of the ciphertext itself. This would lead to two different values of `ciphertext_3` each being a valid ciphertext for the same plaintext. This implies in term of a computational analysis that stronger security assumptions are required to prove the security of the key exchange. (Disclaimer: I incorrectly claimed that AES-CCM does not provide ciphertext integrity during the ietf 113 presentation, based on the fact that it is a MacThenEncrypt paradigm, but there is actually a proof of ciphertext integrity for CCM).\r\n\r\n4) Related to Issue #268, where a randomized signature may force a responder to send two distinct `MESSAGE_3` (different randomization), we could forward the first copy to I (while R keeps the second one). Both agents would derive the same `PRK_4x3m` but not the same `TH_4`.\r\n\r\n->  As a side remark, using the plaintext inside of the ciphertext inside `TH_4` would resolve points 1,2 and 3).\r\n\r\n## Footnotes\r\n\r\n1) A low order point over the elliptic curve is a point `h` thus such that `h^x=h` with high probability. A particular case is the identity of the group, which is such that `e^x=e` always.\r\n",
      "createdAt": "2022-04-01T09:06:55Z",
      "updatedAt": "2022-05-06T09:38:24Z",
      "closedAt": "2022-05-06T09:38:24Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #276 looks very good, also as a starting point for other updates.\r\n\r\nOne comment by the ETH team [0] was\r\n\r\n>  4. KDF Usage in KeyUpdate:\r\n> \r\n>  [---]\r\n> \r\n>     3) To prevent key reuse across primitives,\r\n>     KeyUpdate should use Expand, not Extract. (see 3.)\r\n\r\nTo address this we could replace this:\r\n\r\n>    EDHOC-KeyUpdate( nonce ):\r\n>         PRK_out = Extract( nonce, PRK_out )\r\n\r\nwith something like this:\r\n\r\n>    EDHOC-KeyUpdate( nonce ):\r\n>       PRK_out = EDHOC-KDF( PRK_out, ' ',  \"EDHOC-KeyUpdate\", nonce, hashalg-length)\r\n> \r\n>   where hashalg-length is the output length of the EDHOC Hash Algorithm\r\n\r\nAnother comment in [0]:\r\n\r\n> 3. Key Reuse in KDF:\r\n>  The key schedule uses PRK_2e, PRK_3e2m, and PRK-4x3m as inputs in both Extract and Expand (depending on the authentication mode). Such reuse of key material across is generally not secure. Concretely, in HMAC/KMAC-based derivation, one would need to carefully ensure domain separation between such calls. \r\n\r\n\r\nSo, for example, this part:\r\n\r\n> If the Initiator authenticates with a static Diffie-Hellman key,  then PRK_3m = Extract( PRK_3e2m, G_IY ), ...\r\n\r\ncould be changed into something like this:\r\n\r\n> If the Initiator authenticates with a static Diffie-Hellman key,  then PRK_3m = Extract( Salt_3m, G_IY ), ...\r\n> where Salt_3m = EDHOC-KDF( PRK_3e2m, TH_3, \"Salt_3m\", h'', hashalg_length )\r\n\r\nWe'll make one of more PRs for this.\r\n\r\n[0] https://mailarchive.ietf.org/arch/msg/lake/i2NYxn3vchQ1jUv91frlcqQ4sP0/",
          "createdAt": "2022-04-13T12:32:53Z",
          "updatedAt": "2022-04-13T12:32:53Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@charlie-j For clarity: The four cases of \"Breaking TH_4 Authentication\" you mention above, they are all mitigated by PR #276, right?\r\n\r\nJust a remark about item 1:\r\n\r\n> Typically, '12cd' can be encoded as '12cd',h'12cd' or << '12cd' >>.\r\n\r\nNote that the different representations you list are in the \r\ndiagnostic notation (which indeed has multiple ways to notate certain byte strings) but not the encoding used on the wire, so would e.g. not impact the ciphertext.\r\n\r\n",
          "createdAt": "2022-04-13T12:37:21Z",
          "updatedAt": "2022-04-13T12:37:21Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The four cases of \"Breaking TH_4 Authentication\" you mention above, they are all mitigated by PR https://github.com/lake-wg/edhoc/pull/276, right?\r\n\r\nYes. By strongly tying together the session key and the transcript in the session key, we then avoid any of those issues about the transcript authentication.\r\n\r\n> Note that the different representations you list are in the\r\ndiagnostic notation (which indeed has multiple ways to notate certain byte strings) but not the encoding used on the wire, so would e.g. not impact the ciphertext.\r\n\r\nThanks for the explanation!",
          "createdAt": "2022-04-13T13:08:13Z",
          "updatedAt": "2022-04-13T13:08:13Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "#276 ",
          "createdAt": "2022-05-06T09:38:24Z",
          "updatedAt": "2022-05-06T09:38:24Z"
        }
      ]
    },
    {
      "number": 270,
      "id": "I_kwDOEItXAM5G5jqC",
      "title": "Strengthen the TEE implementation",
      "url": "https://github.com/lake-wg/edhoc/issues/270",
      "state": "CLOSED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In method 0, the attacker must be able to compromise the long term authentication key to break the authentication of the protocol. In other terms, leaking the ephemeral share and the session key is not enough to break authentication, and does only break secrecy. This leads to a situation where it makes sense to protect the long term authentication key inside a TEE, as it strengthens authentication.\r\n\r\nThe issue is that in other methods, where an agent authenticates with a long term DH key, the attacker only needs access to ephemeral and session keys to impersonate an agent. In turn, this implies that using a TEE for the long term DH share does not currently have any meaningful impact on the security of the protocol.\r\n\r\nIn more detail, for instance in Method 2, the MAC key used to authenticate the initiator is actually the final session key. An attacker can thus by learning the ephemeral key and the session key of an initiator complete a Machine-In-The-Middle attack where the initiator believes to be talking to A while the attacker impersonated I to some Responder R.  We provide a the bottom of this issue a picture describing the attack on a simplified, abstracted LAKE-EDHOC execution for clarity.\r\n\r\nPossible actions:\r\n * mention that method 0 is better suited for TEE implementations, and that other methods offer weaker authentication guarantees\r\n * update the protocol to allow DH authentication with a TEE, where the session key would not allow to recompute a MAC. The TEE interface would then contain both an export function to compute PRK_4x3m as well as a function that would return the full MAC. Two similar options could be considered:\r\n     - Option 1) Add to the MAC payload the value G^IY. This option does not update the key derivation.\r\n\t - Option 2) Distinguish the session key and the MAC key, with an additional inclusion of the G^IY value for the MAC key. \r\n\r\n## Impersonation attack without compromise of long term authentication key\r\nOn an abstracted edhoc protocol:\r\n ![image](https://user-images.githubusercontent.com/7815574/161232673-19b4aa2a-f478-40e9-8e01-cb60bc2d1312.png) ",
      "createdAt": "2022-04-01T09:09:44Z",
      "updatedAt": "2022-05-06T09:38:56Z",
      "closedAt": "2022-05-06T09:38:56Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@charlie-j Thanks for presenting both problem and solution! \r\n\r\nJust for clarity (just reiterating text in #276): With PR #276  and by computing both the MAC and PRK_out inside a TEE, an attacker  with a leaked PRK_out would not be able to forge the MAC - thus strengthening the role of a TEE also for other methods than 0, right? ",
          "createdAt": "2022-04-13T13:43:59Z",
          "updatedAt": "2022-04-13T13:43:59Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Just a note about this:\r\n\r\n> using a TEE for the long-term DH share does not currently have any meaningful impact on the security of the protocol\r\n\r\n\r\nWe found this statement quite strong :-) \r\n\r\nIf the session key leaks, then authentication in the application is broken. This is the same regardless of signature vs. static DH key protected in TEE. The long-term key in TEE continues to provide security in other instances of the protocol in which the session key does not leak. This is also the same regardless of signature vs static DH key protected in TEE.\u00a0So there seems to be some cases where the use of a TEE has some impact on the security even for static DH methods, no? :-)\r\n",
          "createdAt": "2022-04-13T13:50:06Z",
          "updatedAt": "2022-04-13T13:50:06Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Another comment which may be beyond the protocol analysis is that the application of the Initiator in general may know what Responder public key it intends to authenticate. This may be a specific public key or public keys certified with a particular trust anchor. If pkA is not in the in the trusted set the Initiator is supposed to discontinue the protocol.",
          "createdAt": "2022-04-13T13:56:57Z",
          "updatedAt": "2022-04-13T13:56:57Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Just for clarity (just reiterating text in https://github.com/lake-wg/edhoc/pull/276): With PR https://github.com/lake-wg/edhoc/pull/276 and by computing both the MAC and PRK_out inside a TEE, an attacker with a leaked PRK_out would not be able to forge the MAC - thus strengthening the role of a TEE also for other methods than 0, right?\r\n\r\nYes!\r\n\r\n> We found this statement quite strong :-)\r\n\r\nSorry about that, it is indeed, we are always looking through the lens of our theoretical models, so it does distort a bit things^^ And as outlined by your point on the security of other instances of the protocol, it is actually a false statement. Coming up with a better sentence here would have been:\r\n\"In turn, this implies that using a TEE for the long term DH share does not currently have as strong as an impact as it could on the security of the protocol.\"\r\n\r\nJust a side remark on your final point:\r\n> If the session key leaks, then authentication in the application is broken. This is the same regardless of signature vs. static DH key protected in TEE. \r\n\r\nIt kind of depends on what we call authentication in the application. For an application for which authentication is equal to \"I have completed successfully an EDHOC exchange\", and if such authentication should trigger a concrete action, then we have a difference.\r\nIndeed, the core difference is that in method 0, both agents will be aware that they established an EDHOC session together, even though the authentication at the application level is broken. In other methods, this may not be the case, and there may be successful EDHOC sessions between agents that are not however of having communicated together.,\r\n",
          "createdAt": "2022-04-13T15:02:34Z",
          "updatedAt": "2022-04-13T15:02:34Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "#276",
          "createdAt": "2022-05-06T09:38:55Z",
          "updatedAt": "2022-05-06T09:38:55Z"
        }
      ]
    },
    {
      "number": 271,
      "id": "I_kwDOEItXAM5G5k8w",
      "title": "Future proofing the protocol: transcript collisions resistance",
      "url": "https://github.com/lake-wg/edhoc/issues/271",
      "state": "CLOSED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "\r\nChosen prefix collisions are a particular kind of hash function collisions, where given two prefixes p1 and p2, the attacker is able to compute two bitstrings c1 and c2 such that `h(p1 | c1) = h(p2 | c2)`. The consequences of such collisions over protocols have been explored in [1]. Computing such collisions is feasible on MD5 and SHA-1, and it is unknown whether it will or not be the case for SHA-256 in the coming years. \r\n\r\nOn the current version of the protocol, chosen prefix collisions lead to attacks on secrecy and authentication, as well as downgrade attacks on the ciphersuite. Such attacks can be prevented or mitigated by a set of small adjustment to the standard, and would at low cost improve the long term security of the protocol. Let us first detail the concrete chosen prefix collisions, before talking about the mitigations.\r\n\r\nThe attacker performs a Machine-In-The-Middle, where it will use a chosen-prefix collision attack to build a session where I and R are talking together and agree on the value of the hash of the transcript, but where each agent actually received the neutral DH group element (which is so that e^x=e).\r\n\r\nThe following transcripts are computed in such a run, where `Trans_E` is the expected shared transcript (displayed using variable names), and `Trans_I` and `Trans_R` are the transcripts produced by the attack, with values aligned with corresponding variable names of the expected transcript.\r\n```\r\nTrans_E :=  method |  suitesI  | G_X |  C_I  |  EAD_1  | G_Y | C_R \r\n\r\nTrans_I :=  zero   | \"suitesI\" | g^x | \"C_I\" | \"EAD_1\" |  e  | c2 | g^y | C_R \r\nTrans_R :=  zero   | \"suitesI\" |  e  | \"C_I\" |   c1    | g^y | \"C_R\"\r\n```\r\n\r\nWe see that the attacker is using the arbitrary long fields `EAD_1` and `C_R` to stuff the bitstring corresponding to the chosen-prefix collision. In this scenario, we remark that as the ciphersuites are part of the prefix, the attacker could also decide to show two distinct suitesI values to both participants, corresponding to a downgrade attack. As a last scenario, if the parsing of suitesI is loose, for instance accepting `suites = [ 2* int / btstr ] / int` instead of `suites = [ 2* int ] / int`, a value of the array can also be use to stuff the chosen-prefix collision bits.\r\n\r\nPossible actions:\r\n * add length restrictions over the `EAD,C_R` and `C_I` fields;\r\n * enforce/recommend checking for low-order points when it has a low-ressource cost (and in general at least the identity element);\r\n * enforce/recommend that the CBOR parsing must be strict.\r\n\r\n\r\n\r\n[1]: https://hal.inria.fr/hal-01244855 Transcript Collision Attacks: Breaking Authentication in TLS, IKE, and SSH. Karthikeyan Bhargavan, Ga\u00ebtan Leurent\r\n\r\n",
      "createdAt": "2022-04-01T09:14:08Z",
      "updatedAt": "2022-10-11T12:13:36Z",
      "closedAt": "2022-10-11T12:13:36Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "I don't quite understand the possible actions. There is no definition of strict parsing in RFC8949, what is meant by that?",
          "createdAt": "2022-04-12T15:38:07Z",
          "updatedAt": "2022-04-12T15:38:07Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Also, in terms of length restrictions: Which order of magnitude are we talking about? Few bytes? Megabytes? Gigabytes?",
          "createdAt": "2022-04-12T15:56:54Z",
          "updatedAt": "2022-04-12T15:56:54Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "# Strict parsing\r\n\r\nWhat we mean for strict parsing is the following: If the standard specifies that some message is of CBOR type `X`, any received message that does not perfectly matches this type MUST be rejected. \r\n\r\nAs a concrete example, if instead of receiving for the `suites` value a message of the form `[5,4,2]`, an agent receives a message of the form `[5, SOME_LONG_BITSTRING,2]`, then the parsing step should fail and the protocol be discontinued. Otherwise, it means that the attacker can use the somehow loose parsing to include arbitrary long bitstrings inside the transcript that will be hashed. \r\n\r\n# Length restriction\r\n\r\nWe are talking of around a few hundred bytes. For instance, two colliding PGP certificates based on SHA-1 were derived thanks to 757 bytes collision suffixes [1]. We cannot say what could happen for SHA-256 (and as we said, whether it would ever be a true weakness), but an implementation forbidding anything over 100 bytes would be secure for a very long time. \r\n\r\nA question over this is whether EADs are meant to be used to send over big values or not. As a good practice, big values should probably be authenticated simply by an independent MAC with a key derived at the end of EDHOC.\r\n\r\n[1]: https://eprint.iacr.org/2020/014.pdf, SHA-1 is a Shambles, First Chosen-Prefix Collision on SHA-1 and Application to the PGP Web of Trust, Ga\u00ebtan Leurent and Thomas Peyrin",
          "createdAt": "2022-04-12T16:51:08Z",
          "updatedAt": "2022-04-12T16:51:08Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "> Strict parsing\r\n\r\nThis kind of strict parsing (i.e. that the message conforms to the CDDL described in the specification) is, as I understand, commonplace; I'd be surprised if the current spec even allows it.\r\n\r\nThere are places like `ead_value`, and possibly inside the COSE header maps of ID_CRED_x, where the protocol allows `any` value -- would strict parsing mean anything for them?\r\n\r\n> Length restriction\r\n\r\nID_CRED_x can IMO live with a restriction in that order of magnitude. For EAD, not sure (gut feeling, I'd like to have up to 1kB there); if there's some hashing inbetween that'd be fine with me (as long as the empty-EAD case stays cheap).",
          "createdAt": "2022-04-12T17:00:08Z",
          "updatedAt": "2022-04-12T17:00:08Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> This kind of strict parsing (i.e. that the message conforms to the CDDL described in the specification) is, as I understand, commonplace; I'd be surprised if the current spec even allows it.\r\n\r\nIf it is already the case for the implementations, that's perfect, it could indeed indicate that this point does not need to be mentioned :) (maybe some implementer feedback can easily resolve this here?)\r\n\r\n> There are places like ead_value, and possibly inside the COSE header maps of ID_CRED_x, where the protocol allows any value -- would strict parsing mean anything for them?\r\n\r\nYes. It is let's call it as strict as possible, so when the specification is `any`, you do have to accept anything.\r\n\r\n> ID_CRED_x can IMO live with a restriction in that order of magnitude. For EAD, not sure (gut feeling, I'd like to have up to 1kB there); if there's some hashing in between that'd be fine with me (as long as the empty-EAD case stays cheap).\r\n\r\nA solution could indeed be to include inside the transcript `h(EAD)` instead of `EAD` when the actual value is overly long, but this comes at the cost of some performance.\r\n\r\nOf course, instead of a hard restriction, simply adding a sentence in the security considerations mentioning that bounding the length of the EAD can increase the long term security of the protocol could do the job. Then, an implementer could decide to enforce a length limit based on the use case.\r\n",
          "createdAt": "2022-04-12T17:13:02Z",
          "updatedAt": "2022-04-12T17:13:02Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The techniques for collision attacks on MD5 and SHA-1 does not seem useful for SHA-256. If collision attacks were found for SHA-256, I think the recommendation would be to stop using SHA-256 even in constructions not requiring collision resistance such as is currently done with HMAC-SHA1. That said minimizing the damage of collision is a good idea if it can be done without other disadvantages.\r\n\r\n- Length restrictions (a few hundred bytes) on EAD would be problematic, even 1kB seem too small.\r\n- Length restrictions on C_I and C_R would be ok\r\n- Strict parsing (CDDL and deterministic CBOR) is enforced by EDHOC. The specification expect implementations to refuse messages that are not deterministic (general CBOR does e.g. allow several encodings of integers). This should probably be checked with actual implementations. Any non-deterministic encoding is unsuitable for use in security protocols.\r\n- Including h(EAD) would not be a problem I think.\r\n- EDHOC implementations are already required to check that the ephemeral public keys are not the identity element, see Section 8.2 of the EDHOC specification.\r\n\r\n(I did not understand if all or just one of the actions would be enough)",
          "createdAt": "2022-04-13T07:28:37Z",
          "updatedAt": "2022-04-13T07:28:37Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "TLDR: bellow are a bit more details around this, but to sum-up, I guess the two simplest actions to take are the following ones:\r\n * Length restriction over C_I and C_R of around 100 bytes\r\n * Forbid the identity element as well as low-order points for the ephemeral public keys. For X25519 and X448, enforce the check that the resulting ECDH shared secret is not the all-zero string, as specified in [Section 6, RFC7748]. (I don't know what is the corresponding action for the other curves).\r\n\r\n# Which actions would be enough\r\n\r\nI'm gonna sum-up the scenarios that lead to an attack bellow, all of them being under the assumption of chosen-prefix collisions:\r\n * No length restriction over EAD_1 and C_R + no weak ephemeral DH check -> secrecy attack\r\n * No length restriction over C_I and C_R + no weak ephemeral DH check -> secrecy attack\r\n * Loose parsing + no weak ephemeral DH check -> downgrade + secrecy attack\r\n\r\nSo, the minimal low cost solutions (as we indeed do not want to make huge or costly changes to the standard given that this is not at all an immediate threat) seem to be:\r\n * Length restriction over C_I and C_R of around 100 bytes.\r\n * Weak ephemeral public keyschecks.\r\n \r\nThose two actions together would then negates the attacks that we found. Only the second one would be enough, but I think there are curves for which it may be costly (to check), so doing both is anyway a good idea.\r\n\r\nWith those actions, enforcing a strict parsing is not needed, but it is anyhow a good idea that the standard already enforce it. (it is always a good thing to reduce the attacker possible actions, especially when it is at no-cost).\r\n\r\n# On the weak DH ephemeral public keys\r\n\r\nThe issue is when the attacker can give an element `h` to the responder such that `h^y` will be a predictable constant. This occurs both with the identity element, as well as some low-order points over the curves.\r\n\r\n> EDHOC implementations are already required to check that the ephemeral public keys are not the identity element, see Section 8.2 of the EDHOC specification.\r\n\r\nWhat I found in section 8.2 is \"Requirements for how to securely generate, validate, and process the ephemeral public keys depend on the elliptic curve. For X25519 and X448, the requirements are defined in {{RFC7748}}. For secp256r1, secp384r1, and secp521r1, the requirements are defined in Section 5 of {{SP-800-56A}}. For secp256r1, secp384r1, and secp521r1, at least partial public-key validation MUST be done.\". I don't think this is enough to clearly forbid such behaviors. Maybe the mentioned specs do enforce an identity check, but they only mention as an optional feature to check for low-order points, which are also an issue.\r\n\r\nFrom [RFC7748], the interesting bit is the following one:\r\n\"Protocol designers using Diffie-Hellman over the curves defined in this document must not assume \"contributory behaviour\".  Specially, contributory behaviour means that both parties' private keys contribute to the resulting shared key.  Since curve25519 and curve448 have cofactors of 8 and 4 (respectively), an input point of small order will eliminate any contribution from the other party's private key.  This situation can be detected by checking for the all-zero output, which implementations MAY do, as specified in [Section 6](https://datatracker.ietf.org/doc/html/rfc7748#section-6). However, a large number of existing implementations do not do this.\"\r\n\r\nThis part only specifies \"MAY\", which should become a MUST in our setting.",
          "createdAt": "2022-04-13T10:47:15Z",
          "updatedAt": "2022-04-13T10:47:15Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Starting at a different end: Does the order of elements being hashed have an impact?  \r\n\r\nWould replacing this:\r\n\r\n> TH_2 = H( H(message_1), G_Y, C_R )\r\n\r\nwith this:\r\n\r\n> TH_2 = H( G_Y, H(message_1), C_R )\r\n\r\nor this:\r\n\r\n> TH_2 = H( G_Y, C_R, H(message_1) )\r\n\r\nmake any difference?",
          "createdAt": "2022-04-13T14:04:07Z",
          "updatedAt": "2022-04-13T14:04:07Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe I misunderstand the attack, but it seems to be producing transcripts which masquerade as:\r\n\r\n> method |  suitesI  | G_X |  C_I  |  EAD_1  | G_Y | C_R \r\n\r\nBut all individual fields above are type-length-value encoded by CBOR, so I didn't see how to produce\r\n\r\n> values aligned with corresponding variable names of the expected transcript\r\n\r\nPerhaps a simple example?",
          "createdAt": "2022-04-13T14:13:35Z",
          "updatedAt": "2022-04-13T15:15:01Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Starting at a different end: Does the order of elements being hashed have an impact?\r\n\r\nIt does have an impact, but we would need to run some verifications to identify a valid order with any kind of confidence. We can try to look into it if this is a preferred solution. Should we?",
          "createdAt": "2022-04-13T15:08:04Z",
          "updatedAt": "2022-04-13T15:08:04Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Perhaps a simple example?\r\n\r\nTo produce a valid TLV encoding does take slightly more work, but the tag and length values that will make the fake transcript look like a valid encoding can be seen as part of the prefix over which the collisions are computed. So, to make the representation of EAD1 and C_R in the example a bit more precise, we get the following thing, assuming that the instantiation of a value for X as a TLV is denoted by `<\"tag identifier\", data length, data>`:\r\n```\r\nTrans_E :=  method |  suitesI  | G_X |  C_I  |  EAD_1  | G_Y | C_R \r\n\r\nTrans_I :=  zero   | \"suitesI\" | g^x | \"C_I\" | <\"EAD_1\",honest_length, honest_value> |  e  | <\"C_R\", length_of_c2+gy+honestCR, c2 | g^y | C_R >\r\nTrans_R :=  zero   | \"suitesI\" |  e  | \"C_I\" |  <\"EAD_1\", length_of_c1, c1>          | g^y | <\"C_R\", honest_length,honest_CR>\r\n```\r\n(this questions were raised and answered inside the paper we cited in the first message of this thread, where the were concretely able to mount such attacks on some transcript similarly built)",
          "createdAt": "2022-04-13T15:19:55Z",
          "updatedAt": "2022-04-13T15:19:55Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "> We can try to look into it if this is a preferred solution. Should we?\r\n\r\nIn comparison to C_x length restrictions and weak ephemeral public keychecks, I believe this could be a preferred solution.\r\n\r\nBut before running any verification, please just comment if it makes sense that this kind of change could potentially have an impact on the chosen prefix collision attack. (By hashing G_Y first in TH_2,  A doesn't know the value of G_Y in the prefix when it sends c2 to R.)\r\n\r\n\r\n\r\n",
          "createdAt": "2022-04-13T15:37:01Z",
          "updatedAt": "2022-04-13T15:37:01Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It definitely makes sense, first for the reason you mention, and additionally because by reordering, we are breaking the fact that `H(H(mess1),G_Y,C_R) = H( mess1 || C_Y || C_R)` (which was due to the length extension).\r\nSo, I would expect at least one of the reorderings to completely solve the chosen prefix attacks. My best bet would probably be on: `TH_2 = H(C_R, G_Y, H(message_1))`",
          "createdAt": "2022-04-13T16:44:50Z",
          "updatedAt": "2022-04-13T16:44:50Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "To make this complete, there are 6 permutations. Where 1 is the the one in the current draft. 2-3 does not seems promising, and 4-6 is likely improvements.\r\n\r\n    1. TH_2 = H( H(message_1), G_Y, C_R )\r\n    2. TH_2 = H( H(message_1), C_R, G_Y )\r\n    3. TH_2 = H( C_R, H(message_1), G_Y )\r\n\r\n    4. TH_2 = H( G_Y, H(message_1), C_R )\r\n    5. TH_2 = H( G_Y, C_R, H(message_1) )\r\n    6. TH_2 = H( C_R, G_Y, H(message_1) )\r\n",
          "createdAt": "2022-04-13T17:37:42Z",
          "updatedAt": "2022-04-13T17:37:42Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If there is any of those orderings between 2 to 6 that would be preferable for any kind of reason, tell me and I'll run it by our tools.\r\nYou can also give an order of preference, and I'll run them by the tools until we get a secure one for chosen-prefix collisions.",
          "createdAt": "2022-04-14T09:54:50Z",
          "updatedAt": "2022-04-14T09:55:26Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think there are similar from an implementation perspective. Some thoughts from my collegue Erik Thormarker that suggested changing the order in the first place:\r\n\r\n> 4-6 should all thwart the attack, since the unpredictable G_Y comes before any data passed from A to R.\r\n>  \r\n> I prefer having G_Y first if they\u2019re the same implementation wise. Then it is most clear to see that it stops the attack since that relies on the unpredictability of G_Y, and it also aligns with Bernstein\u2019s suggested best practice that whatever is most unpredictable should come first https://mailarchive.ietf.org/arch/msg/cfrg/GRigAYvZ8-Z8qmxJ1jOiKR8eLyQ/. Keeping G_Y and C_R together also looks more natural to me. So I like option 5 best.\r\n\r\n",
          "createdAt": "2022-04-14T11:02:29Z",
          "updatedAt": "2022-04-14T11:03:37Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Option 5 seems like a good option.\r\n\r\n@charlie-j If this is easy for you to test, would you please try it out?",
          "createdAt": "2022-04-19T14:02:47Z",
          "updatedAt": "2022-04-19T14:02:47Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On it!",
          "createdAt": "2022-04-20T09:41:33Z",
          "updatedAt": "2022-04-20T09:41:33Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We don't find any attack due to chosen-prefix collisions after reordering with option 5.\r\n\r\nI've looked at the draft and came up with a commit, the change does appear to be minimal and corresponds to a very small commit: https://github.com/charlie-j/edhoc/commit/79ea8aa14840b5d0c90b8ff6affccb65d7f4436e",
          "createdAt": "2022-04-21T14:40:16Z",
          "updatedAt": "2022-04-21T14:40:16Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@charlie-j Indeed, this is a small commit, and it looks good. Please make a PR.",
          "createdAt": "2022-04-22T07:55:22Z",
          "updatedAt": "2022-04-22T07:55:22Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n\r\nOn 12/04/2022 18:13, charlie-j wrote:\r\n> A solution could indeed be to include inside the transcript `h(EAD)`\r\n> instead of `EAD` when the actual value is overly long, but this comes\r\n> at the cost of some performance.\r\n\r\nI'd guess use of EAD would be atypical (but may be wrong\r\nthere) in which case one would be adding h(NULL) which is\r\na fixed string and avoids overhead. Be good to confirm if\r\nthat's right/wrong.\r\n\r\n\r\n\r\n",
          "createdAt": "2022-10-11T09:22:24Z",
          "updatedAt": "2022-10-11T09:22:24Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this issue was resolved with option 5 above, which includes EAD_1 in h(message_1). So I don't see that h(EAD) need to appear separate, and wonder if the comment is still relevant? (Maybe I misunderstood something.)",
          "createdAt": "2022-10-11T10:03:47Z",
          "updatedAt": "2022-10-11T10:03:47Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Reopened as there is discussion. Might close soon again\r\n\r\nMy understanding is that length restrictions such as h(EAD) are not needed after the order was changes to\r\nTH_2 = H( G_Y, C_R, H(message_1) )\r\n\r\n\r\n\r\n",
          "createdAt": "2022-10-11T10:26:41Z",
          "updatedAt": "2022-10-11T10:26:41Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, the order change solved it, length restrictions were just one of the options.",
          "createdAt": "2022-10-11T11:02:10Z",
          "updatedAt": "2022-10-11T11:02:10Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing again.",
          "createdAt": "2022-10-11T12:13:36Z",
          "updatedAt": "2022-10-11T12:13:36Z"
        }
      ]
    },
    {
      "number": 272,
      "id": "I_kwDOEItXAM5G5lJb",
      "title": "Clarify the limitations of non-repudiation",
      "url": "https://github.com/lake-wg/edhoc/issues/272",
      "state": "CLOSED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "We regroup here multiple remarks on the non-repudiation.\r\n\r\n## Scope of non-repudiation\r\nNon-repudiation for the initiator is defined for methods 0 and 2. Non-repudiation for the responder is defined for method 0 only, and not in method 1 contrary to what one could believe, as the proof requires leaking its long term DH authentication key in method 1.\r\n\r\n## Hard to count\r\n\r\nUsing the non-repudiation to count the number of sessions executed by an agent may be tricky. First, if the agents accept low-order points or the identity group element, many different sessions may share the same PRK_4x3m. Second, if the signature is malleable (i.e., given one signature for a message, it is possible to create a second distinct signature for the same message), multiple proofs could be produced for the same session.\r\n  \r\n## Breaking non-repudiation\r\n\r\nFor some signature schemes, it is possible to produce maliciously generated public keys for which verification will succeed over any message (see [1] for a survey, it is for example the case for ED25519) . An agent deciding to use such a key is essentially making itself repudiable, claiming that it got very unlucky in the key generation.\r\n\r\n[1]: https://eprint.iacr.org/2019/779.pdf Seems Legit: Automated Analysis of Subtle Attacks on Protocols that Use Signatures. Dennis Jackson and Cas Cremers and Katriel Cohn-Gordon and Ralf Sasse. \r\n",
      "createdAt": "2022-04-01T09:14:51Z",
      "updatedAt": "2022-06-02T06:04:11Z",
      "closedAt": "2022-06-02T06:04:11Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the comments. As you noted, non-repudation is conflicting with other design objectives and is in fact a non-requirement in certain cases, e.g. where plausible deniability is important. We will update the corresponding paragraph in the security considerations, in particular make a correction per your first remark.\r\n",
          "createdAt": "2022-04-14T09:16:56Z",
          "updatedAt": "2022-04-14T09:16:56Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, I just saw that the first point was relevant to draft 12, but has already been corrected in the github following #191. Sorry for not checking.\r\n\r\nMaybe the only point worth mentioning from this issue would be something like. \"If needed, the TH_x part of the input  can be used as a unique identifier to log the number of runs that an endpoint participated in.\". Or, stated in a negative fashion. \"Signatures cannot be used as a unique identifier  to log the number of runs that an endpoint participated in.\"",
          "createdAt": "2022-04-14T10:28:16Z",
          "updatedAt": "2022-04-14T10:28:16Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Could somebody give an update on this? Should we propose some PR, or simply close the issue if it does not look like something worth mentioning?\r\n\r\n(I'm only talking about the point in my last comment)",
          "createdAt": "2022-04-26T08:10:02Z",
          "updatedAt": "2022-04-26T08:10:02Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@charlie-j As you note, work is going on intermittently, and therefore responses are not always coming as timely as we would like. We are working on submitting a new version in a few weeks and would like to include the most urgent updates (for you and others to take into account in your analysis) and the low hanging fruits. So, some nuggets may be left for later versions. This issue may either be something we can fix with minor update or leave for a later update, more in next comment.\r\n\r\nTaking the opportunity in this comment to provide some feedback. We are very grateful for the help you and the team have provided in analysing, contributing solutions and making PRs. But you don't need to make PRs for all the issues you raise, in particular on general topics, such as repudiation, it is not so easy to specify what questions should be answered and how much details to include. But one PR you could make is to update the Acknowledgments section with the names of contributor(s)!\r\n",
          "createdAt": "2022-04-26T09:43:09Z",
          "updatedAt": "2022-04-26T09:43:09Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "* Regarding the first remark: I'm still not convinced about with the current text, compare before and after this commit: \r\n\r\n851fb6c5\r\n\r\nThe text before the commit looks uncontroversial to me. The text after (= current text) addresses the \"mixed\" methods 1 and 2 (on my request, see #191) -  is that still correct?\r\n\r\n* About the second remark: It is not clear to me for what purpose people would use the protocol to verify the number of sessions. I don't think this is a property that the protocol is required or claimed to have.\r\n\r\n* Likewise, it is not clear to me how the third remark is exploited in a use case for which EDHOC is intended to be used.\r\n\r\nIn as much as these remarks can be put into a context that impacts or clarifies use cases for which EDHOC is expected to be used I think we should make relevant security considerations.\r\n\r\n",
          "createdAt": "2022-04-26T09:45:05Z",
          "updatedAt": "2022-04-26T09:46:12Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Will come back later to the concrete issue, but to clarify on those points:\r\n> As you note, work is going on intermittently,\r\n> Taking the opportunity in this comment to provide some feedback. We are very grateful for the help you and the team have provided in analysing, contributing solutions and making PRs.\r\n\r\nThere's no rush, it definitely makes sense that all this big process takes time. As you may have guessed, we are new to this process, so we are just checking to see if those issues are left hanging as uninteresting, or just on the stack due to low priority. Essentially, an important thing for us is to know what seems relevant and what seems not that relevant, so that we don't spend a lot of time looking into what does not appear to be relevant in our analysis, and typically so that we don't spend a lot of time checking for irrelevant security properties when updating the models to the latest version. (and as a side thing, it is also useful for us to know what actually gets inside the draft for writing up a paper, but that should be orthogonal to the actual discussions)\r\n",
          "createdAt": "2022-04-26T10:53:02Z",
          "updatedAt": "2022-04-26T10:53:02Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Returning to 851fb6c:\r\n\r\nOLD\r\nRepudiation: In EDHOC authenticated with signature keys, either endpoint can prove that the other endpoint performed a run of the protocol by presenting the input to the signature function as well as the signature itself. With static Diffie-Hellman key authentication, both parties can always deny having participated in the protocol.\r\n\r\nNEW\r\nRepudiation: If an endpoint authenticates with a signature, the other endpoint can prove that the endpoint performed a run of the protocol by presenting the input to the signature function as well as the signature itself. With static Diffie-Hellman key authentication, the authenticating endpoint can deny having participated in the protocol.\r\n\r\n\r\nIs the new formulation good? As stated at the top of this issue, for method 1 the proof requires leaking its long term DH authentication key. Is that what you are expect to present as \"input to the signature function\"?\r\n\r\n",
          "createdAt": "2022-05-13T07:42:53Z",
          "updatedAt": "2022-05-13T07:42:53Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I was actually comparing for the OLD text with draft-12, that explicitly stated \" In EDHOC authenticated with signature keys, the\r\n   Initiator could theoretically prove that the Responder performed a\r\n   run of the protocol by presenting the private ephemeral key,\"\r\n   \r\n   So, in draft-12, the need to present the private ephemeral key was made explicit, hence point 1 of this issue.\r\n   \r\nI think what we need to clarify in our current discussion is that in the new text, I feel like it can be interpreted in two ways, leading to two different solutions:\r\n    * \" presenting the input to the signature function\" = presenting the final values of the signature input, i.e. simply providing << <ID_CRED_R, TH_2, CRED_R, ? EAD_2, MAC_2>>. Here, there is no need to present any private ephemeral or long term key, and the first point of the issue is moot.\r\n    * \" presenting the input to the signature function\" = presenting the atomic values needed to recompute the signature input from scratch, = private ephmeral key of the prover + ephemeral public key of the other party + EAD_1 + ... + sometimes long term private key\r\n    \r\nIt is unclear whether one or the other provide better security. In both setting, a party can obtain a signature from an other party   only if:\r\n * it did perform an EDHOC with them\r\n * or it compromised a third-party that performed a EDHOC exchange with the first one.\r\nThe second interpretation implies that the compromise of the third party also leaked the private ephemeral key, which could be seen as a stronger threat model.\r\n\r\nI believe that the first solution is the best one, as:\r\n * it is simpler to implement as it does not require to store any secret share after having completed the exchange\r\n * and it thus works on all methods where a party is using a signature.\r\n \r\n The questions I would still have about it are:\r\n  * is it clear enough that the first solution corresponds to the natural interpretation of the current text?\r\n  * an intermediate option between solution 1 and 2 would be to give the input of the signature functions, as well as the input needed to recompute TH_2 or TH_3. This would then give a stronger level of confidence in the non repudiation, as for instance TH_3 contains ID_CRED_R explicitly signed by the initiator. The initiator can thus not deny having communicated with ID_CRED_R. This does not seem to really impact the non repudiation of the initiator, as the identity of the initiator is not in TH_2.",
          "createdAt": "2022-05-14T10:46:02Z",
          "updatedAt": "2022-05-14T10:48:09Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@charlie-j Thanks for input, further thoughts:\r\n\r\n1. How about replacing \"input to the signature function\" with something \"data being signed\"? For example:\r\n\r\n\"the other endpoint can prove that the endpoint performed a run of the protocol by presenting the data being signed as well as the signature itself\"\r\n\r\n\r\n2. Just to be clear, the current formulation implies that the signature in a mixed method provide the expected property: I in method 1 (and R in method 2) can be proven to have performed a run of the protocol as above. This is correct, right?\r\n\r\n",
          "createdAt": "2022-05-16T09:46:05Z",
          "updatedAt": "2022-05-16T09:46:05Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "1. I like it, I think it avoid any misunderstanding.\r\n2. This is correct :)\r\n\r\nAs we are unclear on the concrete cases in which people would want non-repudiation, I guess the current text would be sufficient. However, if at some point there are more details about practical scenarios and about the expected non repudation properties, we can model those expectations in our tools.",
          "createdAt": "2022-05-25T18:06:46Z",
          "updatedAt": "2022-05-25T18:06:46Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Great, thanks! That is the formulation used in -14. So we are done with the first remark.\r\n\r\nAs mentioned above, I propose we leave out the two other remarks, unless someone else also thinks any of them should be covered in the specification.",
          "createdAt": "2022-05-26T06:54:04Z",
          "updatedAt": "2022-05-26T06:54:04Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the current text looks good. I think we can close this.",
          "createdAt": "2022-06-02T06:04:11Z",
          "updatedAt": "2022-06-02T06:04:11Z"
        }
      ]
    },
    {
      "number": 273,
      "id": "I_kwDOEItXAM5G5lck",
      "title": "Clarify private key usages",
      "url": "https://github.com/lake-wg/edhoc/issues/273",
      "state": "CLOSED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "The standard does not restrict private key usages. In particular, it could be tempting to use the public/private keys for the ed25519 signature scheme as a public and private key pair for the static authentication mode with the elliptic curve X25519. This does not have clear direct and practical implications. However, this usage falls outside the existing cryptanalysis for the signature scheme, and is a bad practice from a theoretical point of view. This would require a dedicated cryptographic analysis, similar to [2].\r\n\r\n[1, Section 12] typically recommends that different keys are used for different algorithms, but it may be unclear if the EDHOC use case falls under this recommandation, or if an extra one could be pertinent. \r\n\r\nWe recommend to mention this issue somewhere in the standard, or explicitly forbid such a shared key usage.\r\n[1]: https://www.ietf.org/archive/id/draft-ietf-cose-rfc8152bis-struct-15.txt\r\n[2]: https://eprint.iacr.org/2021/509.pdf On using the same key pair for Ed25519 and an X25519 based KEM. Erik Thormarker.\r\n",
      "createdAt": "2022-04-01T09:15:56Z",
      "updatedAt": "2022-05-10T13:25:48Z",
      "closedAt": "2022-05-10T13:25:48Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "I've seen single keys used for both ed25519 and x25519 during plugtests; IIUC the agreement among the plugtesters back then was that this was not intended use and should generally not be done. This might serve as a data point that illustrates the need for a clear statement.",
          "createdAt": "2022-04-06T07:57:54Z",
          "updatedAt": "2022-04-06T07:57:54Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Mentioning this issue and refering to [1, Section 12] seems like a good idea. The text would need to mention EDHOC methods as [1, Section 12] only talks about algorithms and the ECDHE in EDHOC is not strictly a COSE algorithm. Writing that using the same key requires a dedicated cryptographic analysis, similar to [2] also seems like a good idea.\r\n\r\n(As a comparision, I don't think TLS 1.3 states anything about forbidding the public key in the certificate to be used for Elgamal, ECIES, or ECDHE outside of TLS).",
          "createdAt": "2022-04-12T16:50:23Z",
          "updatedAt": "2022-04-12T16:50:23Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should we propose a PR for this?",
          "createdAt": "2022-04-26T08:14:08Z",
          "updatedAt": "2022-04-26T08:14:08Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@charlie-j Please go ahead. Prepare for the option to have a reference to an analysis showing this is secure under certain conditions.",
          "createdAt": "2022-04-26T09:57:38Z",
          "updatedAt": "2022-04-26T09:57:38Z"
        }
      ]
    },
    {
      "number": 275,
      "id": "I_kwDOEItXAM5HMB0Y",
      "title": "Encrypted EAD_1 (or general steps for enabling it)",
      "url": "https://github.com/lake-wg/edhoc/issues/275",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "This is motivated by two considerations, the concerns for clients selecting a hidden service in a protected way (pinging @eighthave, do you have a pointer to your hackathon project), and TLS's encrypted Client Hello (superseding eSNI, encrypted server name indication).\r\n\r\nThe rough situation for either case is that a client has some out-of-band information about the server that includes a public key for encryption (even if the encryption key on its own may be insufficient to authenticate the server).\r\n\r\nAs a straw man proposal (mainly as scaffolding for the \"how to enable it\" steps later), consider the following:\r\n\r\n> ead_label -1 is defined as \"Encrypted EAD\", its corresponding ead_value is a byte string. To produce valid data in this option, the initiator has to know some public key G_E (for \"early\") to which the responder presumably has the private key E, and some EAD_1 items [possibly following the same shape as EAD in general] encoded into a plain text byte string. The byte string is produced by the client by obtaining a shared secret G_XE, and expanding it [...] to the length of the plain text, and XOR-ing them into the ead_value.\r\n> [We might also describe that there is some inner MAC on the plaintext -- but it is important that anything outside visible is indistinguishable from random data].\r\n>\r\n> The responder may use plaintext recovered from reversing the encryption procedure (using its G_X and E rather than X and G_E to obtain the shared secret) for selecting the identity (CRED_R / ID_CRED_R) it presents to the client; the presence of the plain text MUST NOT have an impact on the authorization associated with the exchange.\r\n\r\n(I bet that reading the [Encrypted Client Hello draft](https://datatracker.ietf.org/doc/draft-ietf-tls-esni/) will give valuable input for making this complete).\r\n\r\nTo ensure that responders (who are, in their identity selection, the more exposed side) can't be probed for their support of encrypted EAD, encrypted EAD should be marked as \"elective\" in the sense that a server may ignore it if it does not support it. (It'd still become part of the transcript). If a server receives an EAD it can not decrypt (or which, after decryption, contains nothing valid, eg. because the wrong G_E was used), it needs to just continue and pick the CRED_R / ID_CRED_R it would always have picked.\r\n\r\nAIU we do not yet distinguish between EAD that are elective and those that are critical. I do not know whether we'll even have any \"critical\" ones (as the peer's lack of action on them should be enough indication that they were unsupported), but if we do distinguish (eg. along the positive/negative number line), encrypted EAD should be optional. This has the upside that initiators that can spare the few bytes can always include some random bytes in the encrypted EAD, and thus ensure that actual users of encrypted EAD do not stand out (or that connections with encrypted EAD would be blocked). It should be a design goal of encrypted EAD that any use of EAD can always be plausibly claimed to just be random bytes added because the specification says one should do that ever now and then.\r\n\r\nFor a practical example, a vulnerable service (say, anything civil rights related) might be operated at the same IP address as a more wide-spread service (say, a large public LwM2M provider). The civil rights service would publish its address together with the public key G_E and its service name in DNS records similar to [HTTPS records](https://www.ietf.org/archive/id/draft-ietf-dnsop-svcb-https-08.html). A client contacting it would start an EDHOC exchange with the public address and encrypt the service name with G_EX in the EAD_1. The server would respond with credentials for the civil rights service, to which the client then may either present an anonymous (CCS) identity, or (now that it knows it's speaking to the right peer) its own CRED_I / ID_CRED_I. If the CRED sizes are always the same, this exchange should be indistinguishable from an exchange done between an LwM2M client and the LwM2M backend when the client has chosen to send some more garbage bytes.\r\n\r\n(For application such as eighthalve's, it should be noted that there is probably no need for any further proof of identity inside the EAD_1 plaintext: Possession of G_E in combination with the suitable plaintext should suffice to open the present alternative server credentials, any secret whose possession is proven in the plaintext part would be exactly as secret as G_E, as no attacker without E can obtain the plaintext.).\r\n\r\n---\r\n\r\nTo condense this all into a few actionable points:\r\n\r\n* We should have a code point in ead_label for \"encrypted EAD\" data. (We may not even have to specify how it works, that can be specified later or even be guided by the out-of-band information that needs to be present for all of this anyway).\r\n  * That code point either needs to be described explicitly as \"MUST ignore if not supported / content not understood\" for all of EDHOC from the start, or there needs to be general wording about which ead_labels are to be ignored if unprocessable.\r\n* We should encourage initiators to send some random garbage there if they can afford it. (A LoRA device certainly can't, a 6lo device probably neigther, but a guard proxy establishing a connection probably can). This is not only to protect initiators that need it, but also to ensure that it is not being blocked, and that responders don't reveal whether they support it.",
      "createdAt": "2022-04-06T09:29:46Z",
      "updatedAt": "2022-10-04T14:31:21Z",
      "closedAt": "2022-10-04T14:31:20Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "This has parallels to <https://www.ietf.org/archive/id/draft-selander-ace-ake-authz-04.html>, which will take some work to pick out in detail.",
          "createdAt": "2022-04-08T16:22:01Z",
          "updatedAt": "2022-04-08T16:22:01Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm trying to understand what would need to be changed in EDHOC to support this functionality.\r\n\r\n* The distinction between critical and elective EADs. This seems like a good general construct. Perhaps by designated subsets of labels, e.g. negative or even eab_label are elective. \r\n\r\n* The use of a designated eab_label for encrypted EAD_1 seems less general and is somewhat breaking with the mindset that one application is reserving a label and defines the associated processing. Is there a problem with specifying a particular (elective) EAD for this application and associate a policy that it is used by default, with garbage when there is nothing to send? (I couldn't see  obfuscating ead_label really achieved much in practice, but I may have missed something.)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2022-05-10T16:22:29Z",
          "updatedAt": "2022-05-10T16:22:29Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "The first, yes.\r\n\r\nAs for the labels, if the application reserves a label and defines the processing, it is showing a passive attacker that it is being used; this may be undesirable. Applications should have *some* label behind which they can hide the fact that this application is being used; I think it is preferable if that is shared by as many applications as practical (including the \"it's really just garbage\" application that some hosts may want to run). Whether that requires that they also share an encryption mechanism or not, I am unsure.",
          "createdAt": "2022-05-10T16:35:42Z",
          "updatedAt": "2022-05-10T16:35:42Z"
        },
        {
          "author": "eighthave",
          "authorAssociation": "NONE",
          "body": "@chrysn at the IETF Hackathon, we put together a working proof of concept for https://www.ietf.org/archive/id/draft-schinazi-httpbis-transport-auth-05.html  Is that what you mean?  That's not really related to ECH, but came out of MASQUE.",
          "createdAt": "2022-05-11T07:37:31Z",
          "updatedAt": "2022-05-11T07:37:31Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@chrysn The three-party setup seems very useful in different settings, so there may be multiple use cases where  R receives EAD_1 intended for a third party and needs to know that to do with it. Currently ead_label is filling that function.\r\n\r\nIf we can assume that R by default has designated third party, or sufficient information about the third party is carried in EAD_1, then ead_label could probably be encrypted. (In principle, EAD_1 could be a COSE_Encrypt0 or any tagged COSE object, with information needed by R in the unprotected header.)\r\n\r\nSo how do we handle the case when there are multiple candidate third parties and you want to hide both the intent and the third party identity?\r\n\r\nA designated ead_label is possible (or two, if critical / elective is baked into the label) but I don\u2019t see how this label will be used other applications (so to acheive uncertainty about what is intended) because the co-existence of different candidate applications using EAD_1 requires a method for R to distinguish between them. Maybe I'm missing something?\r\n",
          "createdAt": "2022-05-12T07:45:28Z",
          "updatedAt": "2022-05-12T07:45:28Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "### Side security comment regarding the example\r\n```\r\nThe server would respond with credentials for the civil rights service, to which the client then may either present an anonymous (CCS) identity, or (now that it knows it's speaking to the right peer) its own CRED_I / ID_CRED_I. If the CRED sizes are always the same, this exchange should be indistinguishable from an exchange done between an LwM2M client and the LwM2M backend when the client has chosen to send some more garbage bytes.\r\n```\r\nFor the attacker to be unable to know which service the user is contacting, it would be important that an initiator receiving the credentials to the wrong service name fails in the same way has an initiator for which verification of the responder signature would fail. Otherwise, an active attacker could test if I intended to use the protected service by xoring the encrypted EAD_1 with some random bytes. The responder would always see EAD_1 as some random bytes and answer with the unprotected service, and then, \r\n * if the initiator wanted to talk to the protected service, it will fail after decrypting the message and seeing the wrong service credentials\r\n  * if the initiator want to talk to the unprotected service, it will fail during the verification of the signature as the two transcript will not match.\r\n  Those two failures should then be indistinguishable from the attacker point of view (even with timing attacks).\r\n  ",
          "createdAt": "2022-05-12T08:10:38Z",
          "updatedAt": "2022-05-12T08:10:38Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "At least critical / elective EAD should be included in -15",
          "createdAt": "2022-06-22T13:46:10Z",
          "updatedAt": "2022-06-22T13:46:10Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The critical / elective logic could in principle be implemented in each application. It would be good to provide more use cases to support the case of making this a standardized feature. \r\n\r\nClearly there is a benefit with tagging an EAD as \"critical\"  since some operations require the information carried in the EAD to complete, e.g. authorization information from a trusted third party may be required for the Initiator to make any use of the authentication. But what EAD content is not critical?\r\n\r\nIs the following a good example for elective EAD?\r\n\r\nA service provider is allowing a variety of devices in its network to authenticate using EDHOC and grants different access rights depending on the capabilities and trustworthiness of the device. Later, the IETF specifies the EAD for remote attestation (see Appendix E). New devices which implements this EAD and appropriately attests to the attestation request carried in the EAD field get certain access which old devices doesn't get.  But the old devices should still get basic access. If all EAD were critical then the old device which doesn't understand the new EAD would be forced to discontinue the protocol at the arrival of the remote attestation EAD. If the EAD is elective, then both old and new devices can be supported.\r\n\r\nQuestion: With this example in mind, is critical / elective a property of the EAD type, or isn't it rather a boolean set by the application? I can think of another use case where remote attestation is mandatory and it doesn't make sense to define different EADs for these two use cases. \r\n\r\n(Then we are somehow back at the application specified property. But it may still make sense to have a standardized way of expressing criticality.)\r\n\r\nThoughts?",
          "createdAt": "2022-06-27T15:29:59Z",
          "updatedAt": "2022-06-27T15:29:59Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "The critical/elective property always needs to be encoded in the message (as an LSB, or as the number's sign) no matter whether criticality is the sender's choice or whether it's part of the registration.\r\n\r\nFrom a recent chat I think that registering one number, and then allowing it to be used in positive (elective) or negative (critical) role as by the sender's choice. Application authors would describe in which criticality/-ies it makes sense to use their number, just as they describe in which of the messages it makes sense. (The alternative is to allow registering elective and critical options independently, and that application authors who do need to give the senders a choice of using either would register a pair of options; really would work just as well). Introducing RATS data seems like a very good use case to illustrate EAD examples. (In this particular case I don't know why a sender would insist the attestation to be processed into its network joining).\r\n\r\nTo rephrase the original use cases with recently published terminology, we can refer to [RFC9170](https://datatracker.ietf.org/doc/html/rfc9170). That reference might go with a suggestion that devices that can afford sending a few more bytes should occasionally do so in a grease-style non-critical option, or maybe in a non-critical Encrypted-EAD1 option right away.\r\n\r\nI'd welcome if ace-ake-autz already defined an EAD field for what could resemble Encrypted-Client-Hello; AIU it currently refers to an older version of EDHOC. It could be updated to place LOC_W and ENC_ID into separate EAD items, and the latter could be more generally defined as \"a container for encrypted data which the responder, possibly guided by other EAD1 fields, can use to come up with a suitable ID_R\". (How enc_id is then constructed would not be a property of using that particular option, but follow from using the LOC_W option). Then, there would be no need for a defined Grease field, as that ENC_ID field could serve the very same purpose.",
          "createdAt": "2022-06-28T11:20:45Z",
          "updatedAt": "2022-06-28T11:20:45Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Since there seems to be a case for non-critical EAD I made PR #311. Please review. \r\n\r\n(Yes, ace-ake-authz needs to be updated, following the closing of this issue.)",
          "createdAt": "2022-06-28T17:31:10Z",
          "updatedAt": "2022-06-28T17:31:10Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I did not read this discussion before now as it did not seem relevant for the base EDHOC protocol.\r\n\r\nThe PR #311 seems quite far from the use case described here. PR #311 described a general critical, non-critical mechanism similar to X.509 extensions while the discussion in this issue is about an ECH type of mechanism.....\r\n\r\nPR #311 does not seem to be the basis of a good ECH mechanism....\r\n\r\n@chrysn could you have a short presentation at LAKE IETF 114?\r\n(edit: fixed Christian's github name)\r\n\r\n",
          "createdAt": "2022-06-30T05:19:46Z",
          "updatedAt": "2022-06-30T05:52:10Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it is clear that PR #311 does not solve the use case outlined here. In particular, the comment from @charlie-j above is not considered as far as I can see. But the point about critical / non-critical (ead_label, ead_value) appeared in this discussion and merits to be specified as a general feature. ",
          "createdAt": "2022-06-30T06:05:16Z",
          "updatedAt": "2022-06-30T06:05:16Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it would be good with longer discussion about ECH type mechanisms in EDHOC. Might be added on later but it could also benefit from being added alrady in the base EDHOC specification.\r\n\r\nFor a use case where the Initiator knows the long term key of the Responder the TLS ECH solution is a quite ugly hack that uses two different keys and an ineficient message flow. The use of a single key as discussed above is an improvement, but the use of a noise XX pattern is not optimal. If you want to design something for the use case where the Initiator knows the long term key of the Responder it makes more sense with noise IK which is used by WireGuard.\r\n\r\nIf the use case where Initiator knows the long term key of the Responder is small the above approach makes sense. If is is big it might make more sense to define new method(s) based on the noise IK pattern.\r\n\r\n",
          "createdAt": "2022-06-30T08:26:56Z",
          "updatedAt": "2022-06-30T08:26:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Could we have a design team meeting or an interim to discuss this issue?\r\n",
          "createdAt": "2022-06-30T08:27:27Z",
          "updatedAt": "2022-06-30T08:27:27Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "In the use case that the Initiator gets the Responders static public key beforehand\r\n\r\n```\r\nInitiator                                                   Responder\r\n|                                 G_R                               |\r\n|<- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\r\n\r\n...\r\n\r\nyou can follow noise IK (shown below) rather that XX (as in EDHOC method 3)\r\n\r\nInitiator                                                   Responder\r\n|   METHOD, SUITES_I, G_X, C_I, AEAD( ID_CRED_I, MAC_1, EAD_1 )     |\r\n+------------------------------------------------------------------>|\r\n|                             message_1                             |\r\n|                                                                   |\r\n|       G_Y, AEAD( ID_CRED_R, Signature_or_MAC_2, EAD_2 ), C_R      |\r\n|<------------------------------------------------------------------+\r\n|                             message_2                             |\r\n|                                                                   |\r\n|                           AEAD( EAD_3 )                           |\r\n+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - >|\r\n|                             message_3                             |\r\n\r\n```\r\n\r\nThe Responder would in this case have a static DH key. The Initiator could use Static DH or a singature.",
          "createdAt": "2022-06-30T15:04:25Z",
          "updatedAt": "2022-07-01T05:02:48Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Perhaps a  breakout meeting during/just before IETF 114?",
          "createdAt": "2022-06-30T17:41:13Z",
          "updatedAt": "2022-07-01T05:03:09Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this since @chrysn agreed that the introduction of critical/non-critical EAD (PR #311, included in -15) in combination with an example using third party encrypted EAD (as in ace-ake-authz) resolves the issue.",
          "createdAt": "2022-10-04T14:31:20Z",
          "updatedAt": "2022-10-04T14:31:20Z"
        }
      ]
    },
    {
      "number": 278,
      "id": "I_kwDOEItXAM5H5v4i",
      "title": "Summarizing the the key derivation after the current suggested changes",
      "url": "https://github.com/lake-wg/edhoc/issues/278",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?",
        "PR exists"
      ],
      "body": "There has been a lot of suggestions and discussion regarding the key derivation latelely. Below is an attempt to summarize all the current suggstions that currently seems relatively likely to be done. This is not an issue in itself but I think it is good to have somewhere to discucess the complete changes to the key derivation. \r\n\r\n-----------------------------------\r\n\r\n- Suggested to permute the order of element in the TH_2 sequence to be more resistant to any future collision attacks in hash functions. Exact order unclear but suggested to put the random and unpredictable G_Y first.\r\n- Suggested to use PLAINTEXT instead of CIPHERTEXT in transcript hashes to simplify formal verification. Endpoints agree on that they received the same plaintext rather then the same cipertext.\r\n\r\n```\r\nTH_2 = H( G_Y, C_R, H(message_1) )\r\nTH_3 = H( TH_2, PLAINTEXT_2 ) \r\nTH_4 = H( TH_3, PLAINTEXT_3 )\r\n```\r\n\r\n- Suggested to use a salt derived from PRK in Extract to avoid usign the PRK keys directly in both Extract and Expand\r\n\r\n```\r\nPRK_3e2m = Extract( SALT_2e,   G_RX )\r\nPRK_3m   = Extract( SALT_3e2m, G_IY )\r\n```\r\n\r\n- Suggested to use unsigned integer instead of text string for label to save memory.\r\n\r\n```\r\nOKM = EDHOC-KDF( PRK, transcript_hash, label, context, length )\r\n    = Expand( PRK, info, length )\r\n\r\n   info = (\r\n     transcript_hash : bstr,\r\n     label : uint,\r\n     context : bstr,\r\n     length : uint,\r\n   )\r\n```\r\n\r\n- Suggestion to add a final key derivation PRK_out and use that in the exporter. Note that the exporter would also have uint labels\r\n\r\n```\r\nEDHOC-Exporter( label, context, length ) = EDHOC-KDF( PRK_out, h'', label, context, length )\r\n```\r\n\r\n- Suggestion to base Key-Update on Expand instead of extract. The label would need IANA registration. hash_length is a new variable that the implementation needs to keep track of. Should considered whether using Exporter for KeyUpdate has any disadvantages.\r\n- Suggested that more info on how an application protocol is supposed to use KeyUpdate and Exporter together is needed.\r\n\r\n```\r\nPRK_out = EDHOC-KeyUpdate( context ) = EDHOC-Exporter( 0, context, hash_length )\r\n```\r\n\r\n- The EDHOC internal key derivations (i.e., not using the Exporter) would then be something like below. The exact labels should be discussed. Note that that only some of the derivations actually need a label to avoid collision\r\n\r\n```\r\ncontext_2 = << ID_CRED_R, CRED_R, ? EAD_2 >>\r\ncontext_3 = << ID_CRED_I, CRED_I, ? EAD_3 >>\r\n```\r\n\r\n```\r\nSALT_2e     = EDHOC-KDF( PRK_2e,   TH_2, 0, h'',       hash_length )\r\nKEYSTREAM_2 = EDHOC-KDF( PRK_2e,   TH_2, 1, h'',       plaintext_length )\r\nMAC_2       = EDHOC-KDF( PRK_3e2m, TH_2, 0, context_2, mac_length_2 )\r\nSALT_3e2m   = EDHOC-KDF( PRK_3e2m, TH_3, 0, h'',       hash_length )\r\nK_3         = EDHOC-KDF( PRK_3e2m, TH_3, 1, h'',       key_length )\r\nIV_3        = EDHOC-KDF( PRK_3e2m, TH_3, 2, h'',       iv_length )\r\nMAC_3       = EDHOC-KDF( PRK_3m,   TH_3, 0, context_3, mac_length_3 )\r\nPRK_out     = EDHOC-KDF( PRK_3m,   TH_4, 0, h'',       hash_length )\r\n\r\n```\r\n\r\n- Including KeyUpdate, the IANA registered exporter labels could be:\r\n\r\n```\r\nPRK_out       = EDHOC-KeyUpdate( context )\r\n              = EDHOC-Exporter( 0, context, hash_length )\r\nK_4           = EDHOC-Exporter( 1, h'', key_length )\r\nIV_4          = EDHOC-Exporter( 2, h'', iv_length )\r\nMaster Secret = EDHOC-Exporter( 3, h'', oscore_key_length )\r\nMaster Salt   = EDHOC-Exporter( 4, h'', oscore_salt_length )\r\n```\r\n\r\n ",
      "createdAt": "2022-04-17T08:55:57Z",
      "updatedAt": "2022-06-29T06:45:31Z",
      "closedAt": "2022-06-29T06:45:31Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good. I had different naming in mind of the salts:\r\n\r\nPRK_3e2m = Extract( SALT_3e2m,   G_RX )\r\nPRK_3m   = Extract( SALT_3m, G_IY )\r\n\r\nwhere\r\n\r\nSALT_3e2m     = EDHOC-KDF( PRK_2e,   TH_2, 0, h'',       hash_length )\r\nSALT_3m   = EDHOC-KDF( PRK_3e2m, TH_3, 0, h'',       hash_length )\r\n\r\nWith this the salts are named by its use rather than from what key they are derived.\r\n",
          "createdAt": "2022-04-19T14:31:18Z",
          "updatedAt": "2022-04-19T14:31:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "```\r\nSALT_2e     = EDHOC-KDF( PRK_2e,   TH_2, 0, h'',       hash_length )\r\nKEYSTREAM_2 = EDHOC-KDF( PRK_2e,   TH_2, 1, h'',       plaintext_length )\r\nMAC_2       = EDHOC-KDF( PRK_3e2m, TH_2, 0, context_2, mac_length )\r\nSALT_3e2m   = EDHOC-KDF( PRK_3e2m, TH_3, 0, h'',       hash_length )\r\nK_3         = EDHOC-KDF( PRK_3e2m, TH_3, 1, h'',       key_length )\r\nIV_3        = EDHOC-KDF( PRK_3e2m, TH_3, 2, h'',       iv_length )\r\nMAC_3       = EDHOC-KDF( PRK_3m,   TH_3, 0, context_3, mac_length )\r\nPRK_out     = EDHOC-KDF( PRK_3m,   TH_4, 0, h'',       hash_length )\r\n```\r\n\r\nThe labels was just to illustrate the fact that they don't need to be separate. I think it is still better to just use 0-7. That makes it very easy for the reader to see that there are no collisions.\r\n\r\n",
          "createdAt": "2022-04-20T07:00:58Z",
          "updatedAt": "2022-04-20T07:00:58Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@emanjon Was this a comment on my proposed names of salts, or a separate comment?\r\n\r\n(I agree labels 0-7 is good.)",
          "createdAt": "2022-04-20T07:30:31Z",
          "updatedAt": "2022-04-20T07:30:31Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> @emanjon Was this a comment on my proposed names of salts, or a separate comment?\r\n\r\nIt was a separate comments. Your suggestion for salt naming is fine with me. Some other non-technical naming things that a hidden in my summary above\r\n\r\n- I think key_length should use different terms in the derivation of K_4 and OSCORE Master Secret. The current naming gives the idea that they are the same.\r\n- I think the contexts in the MAC_2 and MAC_3 derivations should be given names.\r\n- Should consider collection all the EDHOC-KDF derivations in a single place.",
          "createdAt": "2022-04-20T08:12:12Z",
          "updatedAt": "2022-04-22T06:18:03Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Might want to derive:\r\nK_4           = EDHOC-KDF( PRK_3m,   TH_4, 0, h'',       key_length )\r\nIV_4          = EDHOC-KDF( PRK_3m,   TH_4, 0, h'',       iv_length )\r\n\r\nto avoid that the applicaiton gets K_4 and IV_4.\r\n\r\nAnother alternative is to use\r\n\r\nK_4           = EDHOC-Exporter( 7, h'', key_length )\r\nIV_4          = EDHOC-Exporter( 8, h'', iv_length )\r\n\r\nand forbid the application to use the labels for K_4 and IV_4",
          "createdAt": "2022-04-20T14:17:51Z",
          "updatedAt": "2022-04-20T14:17:51Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Editorial; should be:\r\nK_4 = EDHOC-KDF( PRK_3m, TH_4, 1, h'', key_length )\r\nIV_4 = EDHOC-KDF( PRK_3m, TH_4, 2, h'', iv_length )\r\n\r\nor, if we want all KDF labels distinct:\r\n\r\nK_4 = EDHOC-KDF( PRK_3m, TH_4, 8, h'', key_length )\r\nIV_4 = EDHOC-KDF( PRK_3m, TH_4, 9, h'', iv_length )\r\n\r\nAlternatively, application access to Exporter only allows uint with:\r\n\r\nK_4 = EDHOC-Exporter( -1, h'', key_length )\r\nIV_4 = EDHOC-Exporter( -2, h'', iv_length )\r\n\r\n\r\n\r\n",
          "createdAt": "2022-04-25T07:50:24Z",
          "updatedAt": "2022-04-25T07:50:24Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Trying to compile the suggestions. \r\n\r\nThese have a PR:\r\n\r\n* Suggested to permute the order of element in the TH_2 sequence \u2026\r\n    * #283\r\n\r\n* Suggested to use PLAINTEXT instead of CIPHERTEXT in transcript hashes \u2026\r\n   *  #277\r\n\r\n* Suggestion to add a final key derivation PRK_out and use that in the exporter\r\n    * #276\r\n\r\n\r\nThe following needs to be addressed:\r\n\r\n* Suggested to use a salt derived from PRK in Extract \r\n    * define salt\r\n    * derive salt\r\n\r\n* Suggested to use unsigned integer instead of text string for label to save memory\r\n\r\n* suggestion to base Key-Update on Expand \r\n\r\n* consider whether using Exporter for KeyUpdate has any disadvantages.\r\n\r\n* more info on how an application protocol is supposed to use KeyUpdate and Exporter together \r\n\r\n* distinguish key_length in K_3/K_4 and OSCORE Master Secret\r\n\r\n* define contexts explicitly \r\n  \r\n* table of KDF derivations\r\n\r\n",
          "createdAt": "2022-04-26T07:26:17Z",
          "updatedAt": "2022-04-26T07:26:17Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Trying to put things together. Let's call this variant A, part 1.\r\n\r\n```\r\nSALT_3e2m   = EDHOC-KDF( PRK_2e,   TH_2, 0, h'',       hash_length )\r\nKEYSTREAM_2 = EDHOC-KDF( PRK_2e,   TH_2, 1, h'',       plaintext_length )\r\nMAC_2       = EDHOC-KDF( PRK_3e2m, TH_2, 2, context_2, mac_length_2 )\r\nSALT_4e3m   = EDHOC-KDF( PRK_3e2m, TH_3, 3, h'',       hash_length )\r\nK_3         = EDHOC-KDF( PRK_3e2m, TH_3, 4, h'',       key_length )\r\nIV_3        = EDHOC-KDF( PRK_3e2m, TH_3, 5, h'',       iv_length )\r\nMAC_3       = EDHOC-KDF( PRK_4e3m, TH_3, 6, context_3, mac_length_3 )\r\nPRK_out     = EDHOC-KDF( PRK_4e3m, TH_4, 7, h'',       hash_length )\r\nK_4         = EDHOC-KDF( PRK_4e3m, TH_4, 8, h'',       key_length )\r\nIV_4        = EDHOC-KDF( PRK_4e3m, TH_4, 9, h'',       iv_length )\r\n```\r\n\r\nwhere \r\n```\r\ncontext_2  =  << ID_CRED_R, CRED_R, ? EAD_2 >>\r\ncontext_3  =  << ID_CRED_I, CRED_I, ? EAD_3 >>\r\n```\r\n\r\nand (edit: depending on method)\r\n\r\n```\r\nPRK_3e2m = Extract( SALT_3e2m, G_RX )\r\nPRK_4e3m = Extract( SALT_4e3m, G_IY )\r\n```\r\n\r\nNew salts to avoid double use of PRK, named by its use. Same construction for K_4/IV_4 as K_3/IV_3, motivating the renaming of _3m in #276 as _4e3m.\r\n\r\nThe label in the KDF, third argument, is an uint, all distinct for simplicity.\r\n",
          "createdAt": "2022-04-26T07:49:05Z",
          "updatedAt": "2022-04-26T08:12:28Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Variant A, part 2:\r\n\r\n```\r\nPRK_out     = EDHOC-KeyUpdate( context ) = \r\n            = EDHOC-KDF( PRK_out, h'00', 10, context, hash_length )\r\n\r\nEDHOC-Exporter( label, context, length ) = \r\n            = EDHOC-KDF( PRK_out, h'01', label, context, length )\r\n\r\nMaster Secret = EDHOC-Exporter( 0, h'', oscore_key_length )\r\nMaster Salt   = EDHOC-Exporter( 1, h'', oscore_salt_length )\r\n```\r\n\r\nDistinct \"transcript hash\" in KeyUpdate and Exporter. Exporter does not give access to EDHOC internal keys. OSCORE key length separate from key_length. \r\n\r\n---\r\n\r\nEdit: Not clear that 'context' is needed in the EDHOC-Exporter. Also, to be strict in  labelling we could continue enumeration. Here is variant B, part 2 (B.1 = A.1):\r\n\r\n```\r\nPRK_out     = EDHOC-KeyUpdate( context ) = \r\n            = EDHOC-KDF( PRK_out, h'00', 10, context, hash_length )\r\n\r\nEDHOC-Exporter( label, length ) = \r\n            = EDHOC-KDF( PRK_out, h'01', label, h'', length )\r\n\r\nMaster Secret = EDHOC-Exporter( 11, oscore_key_length )\r\nMaster Salt   = EDHOC-Exporter( 12, oscore_salt_length )\r\n```\r\n\r\n",
          "createdAt": "2022-04-26T07:52:24Z",
          "updatedAt": "2022-04-26T13:53:00Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Variant C.2 (C.1 = A.1):\r\n\r\n```\r\nPRK_out     = EDHOC-KeyUpdate( context ) = \r\n            = EDHOC-KDF( PRK_out, h'00', 0, context, hash_length )\r\n\r\nEDHOC-Exporter( label, length ) = \r\n            = EDHOC-KDF( PRK_out, h'01', label, h'', length )\r\n\r\nMaster Secret = EDHOC-Exporter( 0, oscore_key_length )\r\nMaster Salt   = EDHOC-Exporter( 1, oscore_salt_length )\r\n```\r\n\r\n(edited:)\r\nSame as B.2 but with different labels. With variant C we have essentially:\r\n* the internal KDF labels with current list: 0, ..., 9; and \r\n* the IANA EDHOC Exporter Registry with current list: 0, 1.",
          "createdAt": "2022-04-27T06:08:02Z",
          "updatedAt": "2022-04-27T06:30:11Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics @malishav @chrysn and all: Any implementation considerations or other comments on variant C above? We'll start with the PR(s) soon.",
          "createdAt": "2022-04-27T06:33:28Z",
          "updatedAt": "2022-04-27T06:33:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The last posts here are confusing....  \r\n\r\n>  Also, to be strict in labelling we could continue enumeration\r\n\r\nI don't agree. These are separate. We should definitly not try to keep them separate. I.e. it should be\r\n\r\nMaster Secret = EDHOC-Exporter( 0, h'', oscore_key_length )\r\nMaster Salt   = EDHOC-Exporter( 1, h'', oscore_salt_length )",
          "createdAt": "2022-04-27T06:59:24Z",
          "updatedAt": "2022-04-27T06:59:24Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "```\r\ninfo          = ( transcript_hash : bstr, label : uint, context : bstr, length : uint )\r\n\r\nEDHOC-KDF( PRK, transcript_hash, label, context, length )\r\n              = Expand( PRK, info, length )\r\n\r\nTH_2          = H( G_Y, C_R, H(message_1) )\r\nTH_3          = H( TH_2, PLAINTEXT_2 ) \r\nTH_4          = H( TH_3, PLAINTEXT_3 )\r\n\r\ncontext_2     = << ID_CRED_R, CRED_R, ? EAD_2 >>\r\ncontext_3     = << ID_CRED_I, CRED_I, ? EAD_3 >>\r\n\r\nPRK_3e2m      = Extract( SALT_3e2m, G_RX )\r\nPRK_4e3m      = Extract( SALT_4e3m, G_IY )\r\n\r\nSALT_3e2m     = EDHOC-KDF( PRK_2e,   TH_2, 0, h'',       hash_length )\r\nKEYSTREAM_2   = EDHOC-KDF( PRK_2e,   TH_2, 1, h'',       plaintext_length )\r\nMAC_2         = EDHOC-KDF( PRK_3e2m, TH_2, 2, context_2, mac_length_2 )\r\nSALT_4e3m     = EDHOC-KDF( PRK_3e2m, TH_3, 3, h'',       hash_length )\r\nK_3           = EDHOC-KDF( PRK_3e2m, TH_3, 4, h'',       key_length )\r\nIV_3          = EDHOC-KDF( PRK_3e2m, TH_3, 5, h'',       iv_length )\r\nMAC_3         = EDHOC-KDF( PRK_4e3m, TH_3, 6, context_3, mac_length_3 )\r\nPRK_out       = EDHOC-KDF( PRK_4e3m, TH_4, 7, h'',       hash_length )\r\nK_4           = EDHOC-KDF( PRK_4e3m, TH_4, 8, h'',       key_length )\r\nIV_4          = EDHOC-KDF( PRK_4e3m, TH_4, 9, h'',       iv_length )\r\n\r\nPRK_out       = EDHOC-KeyUpdate( context ) = \r\n              = EDHOC-KDF( PRK_out, h'00', 10, context, hash_length )\r\n\r\nEDHOC-Exporter( label, context, length )\r\n              = EDHOC-KDF( PRK_out, h'01', label, context, length )\r\n\r\nMaster Secret = EDHOC-Exporter( 0, h'', oscore_key_length )\r\nMaster Salt   = EDHOC-Exporter( 1, h'', oscore_salt_length )\r\n```\r\n\r\nThe above looks good to me with the following not so interesting options.\r\n- order of the 0-9 labels\r\n- use 10 or 0 label for Key-Update\r\n- order of the h'00' and h'01' \"transcripts\"",
          "createdAt": "2022-04-27T07:14:30Z",
          "updatedAt": "2022-04-27T07:14:30Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should maybe merge the \"context\" and \"transcript hash\" inputs. This simplifies things and avoids using h'00' and h''01' as \"transcript hashes.\r\n\r\n```\r\ninfo          = ( label : uint, context : bstr, length : uint )\r\n\r\nEDHOC-KDF( PRK, label, context, length )\r\n              = Expand( PRK, info, length )\r\n\r\nTH_2          = H( G_Y, C_R, H(message_1) )\r\nTH_3          = H( TH_2, PLAINTEXT_2 ) \r\nTH_4          = H( TH_3, PLAINTEXT_3 )\r\n\r\ncontext_2     = << TH_2, ID_CRED_R, CRED_R, ? EAD_2 >>\r\ncontext_3     = << TH_3, ID_CRED_I, CRED_I, ? EAD_3 >>\r\n\r\nPRK_3e2m      = Extract( SALT_3e2m, G_RX )\r\nPRK_4e3m      = Extract( SALT_4e3m, G_IY )\r\n\r\nSALT_3e2m     = EDHOC-KDF( PRK_2e,   0, TH_2,       hash_length )\r\nKEYSTREAM_2   = EDHOC-KDF( PRK_2e,   1, TH_2,       plaintext_length )\r\nMAC_2         = EDHOC-KDF( PRK_3e2m, 2, context_2, mac_length_2 )\r\nSALT_4e3m     = EDHOC-KDF( PRK_3e2m, 3, TH_3,       hash_length )\r\nK_3           = EDHOC-KDF( PRK_3e2m, 4, TH_3,       key_length )\r\nIV_3          = EDHOC-KDF( PRK_3e2m, 5, TH_3,       iv_length )\r\nMAC_3         = EDHOC-KDF( PRK_4e3m, 6, context_3, mac_length_3 )\r\nPRK_out       = EDHOC-KDF( PRK_4e3m, 7, TH_4,       hash_length )\r\nK_4           = EDHOC-KDF( PRK_4e3m, 8, TH_4,       key_length )\r\nIV_4          = EDHOC-KDF( PRK_4e3m, 9, TH_4,       iv_length )\r\n\r\nPRK_out       = EDHOC-KeyUpdate( context ) = \r\n              = EDHOC-KDF( PRK_out, 10, << 0, context >>, hash_length )\r\n\r\nEDHOC-Exporter( label, context, length )\r\n              = EDHOC-KDF( PRK_out, label, << 1, context >>, length )\r\n\r\nMaster Secret = EDHOC-Exporter( 0, h'', oscore_key_length )\r\nMaster Salt   = EDHOC-Exporter( 1, h'', oscore_salt_length )\r\n```",
          "createdAt": "2022-04-27T07:24:32Z",
          "updatedAt": "2022-04-27T07:24:32Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Alternatively\r\n\r\n```\r\ninfo          = ( label : uint, context : bstr, length : uint )\r\n\r\nEDHOC-KDF( PRK, label, context, length )\r\n              = Expand( PRK, info, length )\r\n\r\nTH_2          = H( G_Y, C_R, H(message_1) )\r\nTH_3          = H( TH_2, PLAINTEXT_2 ) \r\nTH_4          = H( TH_3, PLAINTEXT_3 )\r\n\r\ncontext_2     = << TH_2, ID_CRED_R, CRED_R, ? EAD_2 >>\r\ncontext_3     = << TH_3, ID_CRED_I, CRED_I, ? EAD_3 >>\r\n\r\nPRK_3e2m      = Extract( SALT_3e2m, G_RX )\r\nPRK_4e3m      = Extract( SALT_4e3m, G_IY )\r\n\r\nSALT_3e2m     = EDHOC-KDF( PRK_2e,   0, TH_2,       hash_length )\r\nKEYSTREAM_2   = EDHOC-KDF( PRK_2e,   1, TH_2,       plaintext_length )\r\nMAC_2         = EDHOC-KDF( PRK_3e2m, 2, context_2, mac_length_2 )\r\nSALT_4e3m     = EDHOC-KDF( PRK_3e2m, 3, TH_3,       hash_length )\r\nK_3           = EDHOC-KDF( PRK_3e2m, 4, TH_3,       key_length )\r\nIV_3          = EDHOC-KDF( PRK_3e2m, 5, TH_3,       iv_length )\r\nMAC_3         = EDHOC-KDF( PRK_4e3m, 6, context_3, mac_length_3 )\r\nPRK_out       = EDHOC-KDF( PRK_4e3m, 7, TH_4,       hash_length )\r\nK_4           = EDHOC-KDF( PRK_4e3m, 8, TH_4,       key_length )\r\nIV_4          = EDHOC-KDF( PRK_4e3m, 9, TH_4,       iv_length )\r\n\r\nPRK_out       = EDHOC-KeyUpdate( context ) = \r\n              = EDHOC-KDF( PRK_out, 10, context, hash_length )\r\n\r\nPRK_exporter  = EDHOC-KDF( PRK_out, 11, h'', hash_length )\r\n\r\nEDHOC-Exporter( label, context, length )\r\n              = EDHOC-KDF( PRK_exporter, label, context, length )\r\n\r\nMaster Secret = EDHOC-Exporter( 0, h'', oscore_key_length )\r\nMaster Salt   = EDHOC-Exporter( 1, h'', oscore_salt_length )\r\n```",
          "createdAt": "2022-04-27T07:28:24Z",
          "updatedAt": "2022-04-27T07:28:24Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "The latest version of the summary https://github.com/lake-wg/edhoc/issues/278#issuecomment-1110643708  looks good.",
          "createdAt": "2022-04-27T07:44:17Z",
          "updatedAt": "2022-04-27T07:44:17Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Overview of main changes needed:\r\n\r\nMerge #276\r\n\r\nRename PRK_3m as PRK_4e3m\r\n\r\nSection 4.1\r\nupdate PRK_  definitions\r\nmove section PRK_out to 4.2\r\n\r\nSection 4.2\r\nUpdate EDHOC-KDF and info definition\r\nUpdate derivations\r\nInclude derivations of salts and K_4 / IV_4\r\nList EDHOC-KDF derivations with labels 0-9\r\n\r\nSection 4.3\r\nUpdate EDHOC-Exporter (use label 10 instead of 11)\r\nRemove derivation of K_4 / IV_4\r\n\r\nSection 4.4\r\nUpdate EDHOC-KeyUpdate (use label 11 instead of 10)\r\n\r\nSection 5.3.2\r\nDefine context_2\r\n\r\nSection 5.4.2\r\nDefine context_3\r\n\r\nSection 9.1\r\nUpdate EDHOC Exporter labels\r\n\r\nAppendix A.1\r\nUpdate Master Secret/Salt derivation",
          "createdAt": "2022-04-28T09:17:41Z",
          "updatedAt": "2022-04-28T09:17:41Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Additional updates: \r\n* As noted in previous comment, a proposal to interchange labels 10 and 11 to enumerate labels in the order they appear in the specification. (Other proposal for assignment of integer labels is welcome.)\r\n\r\n* Should we align / adapt definition of context_x and external_aad? Currently (for message_2 and similar for message_3):\r\n   * external_aad = << TH_2, CRED_R, ? EAD_2 >>\r\n   * context_2 = << TH_2, ID_CRED_R, CRED_R, ? EAD_2 >>\r\n\r\n\r\nEdit: Seems to be favourable to at least align this blobs, so changed context_2 to\r\n    <<  ID_CRED_R, TH_2, CRED_R, ? EAD_2 >> and similar for context_3, in 5464707a",
          "createdAt": "2022-04-28T09:24:45Z",
          "updatedAt": "2022-05-04T14:22:17Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "PRK_exporter is a key which we only introduce for simple distinction between different KDF applications. Perhaps an overkill? May open up for unnecessary discussion about properties of that key. Here is another variant:\r\n\r\n```\r\nPRK_out = EDHOC-KeyUpdate( context ) = \r\n              = EDHOC-KDF( PRK_out, 10, context, hash_length )\r\n\r\nEDHOC-Exporter( label, context, length )\r\n              = EDHOC-KDF( PRK_out, 11, << label, context >>, length )\r\n\r\nMaster Secret = EDHOC-Exporter( 0, h'', oscore_key_length )\r\nMaster Salt   = EDHOC-Exporter( 1, h'', oscore_salt_length )\r\n```\r\n\r\nEdit: As commented before, Marco thinks a separate PRK_Exporter is preferred; less error prone etc.",
          "createdAt": "2022-05-03T16:29:08Z",
          "updatedAt": "2022-05-04T14:24:12Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Most old comments are now addressed, and there are quite a few changes, so it is a good time to merge PR #286. Remaining points:\r\n\r\n* derivation of K_4/ IV_4 and text about key confirmation. Not clear if there is any difference in practice between K_4 /IV_4 being derived from PRK_4e3m or PRK_out, but the current text about explicit key confirmation is not valid in the former case. May alternatively tune down the key confirmation terminology.\r\n\r\n* Suggested to make clearer distinction between key derivation for EDHOC processing, resulting in PRK_out, and key derivation for application, i.e. making use of PRK_out in EDHOC-Exporter and EDHOC-KeyUpdate. More guidance on the latter is also proposed.",
          "createdAt": "2022-05-04T14:30:39Z",
          "updatedAt": "2022-05-04T14:30:39Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Tried to address the remaining points in the previous comment with the latest two commits: 5d675ac  and  95e35bb.\r\n\r\nMore guidance on KeyUpdate may still be needed. \r\n\r\nOther points?",
          "createdAt": "2022-05-06T09:40:35Z",
          "updatedAt": "2022-05-06T09:40:35Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@emanjon What more guidance is needed on KeyUpdate?",
          "createdAt": "2022-05-18T12:01:22Z",
          "updatedAt": "2022-05-18T12:01:22Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Was a request from someone. Might be hard to understand how to use it. E.g. that you should alternate key update and exporter\r\n\r\nExporter\r\n\r\nKey Update\r\nExporter\r\n\r\nKey Update\r\nExporter\r\n\r\n...",
          "createdAt": "2022-05-18T12:29:53Z",
          "updatedAt": "2022-05-18T12:29:53Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Another guidance needed is how to manage overwrite of PRK_out pending confirmation of the derived key from the other endpoint. When the Initiator is updating PRK_out it needs both old and new derived keys to be able to communicate securely in lock-step the change to the new key.",
          "createdAt": "2022-06-23T06:38:20Z",
          "updatedAt": "2022-06-23T06:38:20Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Perhaps good to remark that the entire application contexts (including e.g. sequence numbers) need to be maintained before a transition is made. ",
          "createdAt": "2022-06-23T12:02:11Z",
          "updatedAt": "2022-06-23T12:02:11Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "see #313 instead. The current discussion has very little to do with #310 ",
          "createdAt": "2022-06-29T06:45:31Z",
          "updatedAt": "2022-06-29T06:45:31Z"
        }
      ]
    },
    {
      "number": 279,
      "id": "I_kwDOEItXAM5H51WW",
      "title": "Selfie attacks mitigation implies privacy-loss for the Initiators",
      "url": "https://github.com/lake-wg/edhoc/issues/279",
      "state": "CLOSED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "Close?",
        "PR exists"
      ],
      "body": "The selfie attack mitigation implies that an initiator is stopping the exchange if it receives its own identity. An active attacker can then use this behavior to test if an initiator identity is the same one as a responder identity. In turn, it implies that the initiator anonymity does not hold against an active attacker when this mitigation is enabled.\r\n\r\nTo judge if this is an issue in practice, the following question should be answered: Are there scenarios where an identity is shared between an initiator and a receiver, but the initiator identity should still be protected? One could maybe think about the case where multiple initiators and receivers are on the same server, sometimes sharing public keys and using distinct ports, but it is expected that the initiators identities are still protected.\r\n\r\nPossible actions:\r\n * mention privacy loss due to the selfie attack mitigation.\r\n * update the selfie attack mitigation, by mentioning that initiators should conclude the exchange as usual, but can check at the end whether they are talking to themselves or not. \r\n * remove the selfie attack mitigation.\r\n\r\n# On the selfie attack mitigation\r\n\r\nClassical selfie attacks are when there is a pre-shared key between an initiator and a receiver, and the initiator will be talking to itself while it believes to be talking to the receiver. When there are only public keys, as in EDHOC, it is unclear to me if what is currently called in the draft is indeed a selfie attack. An initiator talking to itself knows it and does not believe to be talking to some other identity. As such this is why it could be possible to either remove the mention of selfie attacks in the draft, or update it. \r\n",
      "createdAt": "2022-04-17T10:50:16Z",
      "updatedAt": "2022-06-30T11:27:17Z",
      "closedAt": "2022-06-30T11:27:17Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n> The selfie attack mitigation implies that an initiator is stopping the exchange if it receives its own identity.\r\n\r\nI and R are expected to stop the exchange it they receive any identity they do not want to talk to. This likely includes their own identity. Good point that this leaks information. I think that should be added, but I don't see that the own identity is special.\r\n\r\n>Classical selfie attacks are when there is a pre-shared key between an initiator and a receiver,\r\n>and the initiator will be talking to itself while it believes to be talking to the receiver.\r\n>When there are only public keys, as in EDHOC, it is unclear to me if what is currently\r\n>called in the draft is indeed a selfie attack. \r\n\r\nThe selfie attack mitigation is intended for Trust On First Use (TOFU) use cases, where there is no authentication in the initial setup. I don't think an initiator talking to itself in a TOFU use case would not know it except if they checked R's public key. Do you some better suggestion than \"Selfie attack\". I agree that it is not perfect. \"Selfie attacks\" has in older papers been called reflection attacks, but the term reflection attacks has also been used for very different attacks. One option is to not give the attack any name and instead just describe the attack.",
          "createdAt": "2022-04-18T11:19:14Z",
          "updatedAt": "2022-04-18T11:19:14Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> One option is to not give the attack any name and instead just describe the attack.\r\n\r\nI think I like to not give any name, as it does not perfectly match the classical definition. Here, the property which is violated is \"If an EDHOC exchange is completed, two distinct identities/computers/agents were active\".  Which is different to violating the authentication of the protocol as is the case in classical selfie attacks.\r\n\r\n> The selfie attack mitigation is intended for Trust On First Use (TOFU) use cases.\r\n\r\nGood point. So what we are talking about in this issue is a slightly different privacy leak, which happens when the set of parties you are willing to talk to is equal to all responders minus yourself. To be more concrete, let me try to put it in a kind of drafty formal description that could replace the existing formulation.\r\n\r\nFirst the existing formulation:\r\n> So-called selfie attacks are mitigated as long as the Initiator does not have its own identity in the set of Responder identities it is allowed to communicate with. In trust on first use (TOFU) use cases the Initiator should verify that the the Responder's identity is not equal to its own. Any future EHDOC methods using e.g., pre-shared keys might need to mitigate this in other ways.\r\n\r\nNow a possible replacement:\r\n\r\n>  In the setting where an identity is both acting as Initiator and Responder, an active attacker could initiate a session where a single identity is actually active. The property that a completed EDHOC exchange implies that another identity has been active is upheld as long as the Initiator does not have its own identity in the set of Responder identities it is allowed to communicate with. However, an active attacker can learn the set of identities an Initiator is not willing to communicate with, so if this set is restricted to only the Initiator identity, this identity can then be leaked. In trust on first use (TOFU) use cases the Initiator should verify that the the Responder's identity is not equal to its own. Any future EHDOC methods using e.g., pre-shared keys might need to mitigate this in other ways.",
          "createdAt": "2022-04-18T11:48:56Z",
          "updatedAt": "2022-04-18T11:48:56Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the input! This issue is related to the TOFU use case which is still to be detailed (Appendix D.5). We probably should wait with the update until we have progressed that.",
          "createdAt": "2022-04-26T14:36:21Z",
          "updatedAt": "2022-04-26T14:36:21Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Relates to #178 ",
          "createdAt": "2022-05-10T13:06:07Z",
          "updatedAt": "2022-05-10T13:06:07Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made PR #309 for this issue. This is also related to PR #307 and PR #308.\r\n\r\nThe suggested text in #309 is largely based on the suggested text above but I made some changes. \r\n\r\n`\"In the setting where an identity is both acting as Initiator and Responder, an active attacker could initiate a session where a single identity is actually active.\"`\r\nI did not think this fitted well with the rest of the draft. The sentence was also not really needed.\r\n\r\n`\"can learn the set of identities an Initiator is not willing to communicate with\"`\r\nThis is only true in the case where the set of identifiers is a small finite set. In the general case the set of identifiers the Initiator is not willing to communicate with is infinite.\r\n\r\nI suggest to add the following recommendation for TOFU\r\n_To not leak any long-term identifiers, it is recommended to use a freshly generated authentication key as identity in each initial TOFU exchange._\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2022-06-27T13:28:24Z",
          "updatedAt": "2022-06-27T13:28:24Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I merged the PR to master. Keeping the issue open for a while.",
          "createdAt": "2022-06-29T04:25:36Z",
          "updatedAt": "2022-06-29T04:25:36Z"
        }
      ]
    },
    {
      "number": 280,
      "id": "I_kwDOEItXAM5IHsi-",
      "title": "Length information leakage.",
      "url": "https://github.com/lake-wg/edhoc/issues/280",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\"Information regarding the lengths of ID_CRED_I, ID_CRED_R, EAD_2, EAD_3, and EAD_4 are leaked to a passive attacker.\"\r\n\r\nThis should be reformulated. This is only true if the mitigations are not followed.",
      "createdAt": "2022-04-20T17:14:17Z",
      "updatedAt": "2022-05-02T14:13:22Z",
      "closedAt": "2022-05-02T14:13:22Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Corrected in master",
          "createdAt": "2022-05-02T14:13:22Z",
          "updatedAt": "2022-05-02T14:13:22Z"
        }
      ]
    },
    {
      "number": 281,
      "id": "I_kwDOEItXAM5IHuUG",
      "title": "Add that EDHOC uses a deterministic encoding.",
      "url": "https://github.com/lake-wg/edhoc/issues/281",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "It is stated that EDHOC uses deterministic CBOC, but EDHOC could still be non-deterministic if is allows a choice between e.g., bstr and int.\r\n\r\n1. Add that the encodig in EDHOC is deterministic.\r\n\r\n2. Add some considerations regarding decoding. In any cryptographic protocols the optimal for security is that the decoder raises a fatal error if the something in the encoding is enexpected. E.g. wrong order in map or two byte encoding of the integer 7. This is however not supported by CBOR implementations so it cannot be mandated. The security issues with a allowing decoder is that is gives options to an attacker. If the hash function has some weakness, An attacker can e.g. try all n! permutations of a map with n elements until they find a collision. This is not critical but it might be guidance that a decoder that only tolerated deterministic CBOR might have security benefits.",
      "createdAt": "2022-04-20T17:21:38Z",
      "updatedAt": "2022-05-18T07:55:35Z",
      "closedAt": "2022-05-18T07:55:35Z",
      "comments": [
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That would be interesting, notably as it was mentioned as an attack surface previously (#269).\r\n\r\nBellow is an additional example of the kind of weird things that can go on when everything is not nice and deterministic.\r\n\r\n# Privacy compromise against active attacker from R to I but passive from I to R\r\n\r\nConsider an attacker that can only modify messages going from Rresponder R to Initiator I, but not send its own messages to R. Then, the identity of R should intuitively be anonymous. This could be the case of an attacker only sitting next to the device I, and who wants to know from whom I is receiving messages.\r\n \r\nThe attacker wants to tests if some I is communicating with some fixed identity `id_r`. This attacker may intercept the message_2 encrypted part: `enc := <id,signature,ead_2> XOR keystream`. Now assume that there exists a second distinct encoding of `id_r`, that we call `id_r2`. The attacker can then compute `<id_r,0,0> XOR <id_r2,0,0> XOR enc`.\r\n\r\nNow, two options, either `id = id_r`, in which case the message received by I is `<id_r2,signature,ead_2> XOR keystream`, which will successfully proceed. If `id <> id_r`, the processing of the message will fail. And thus, the attacker can learn if I is talking to `id_r` or not.\r\n\r\nRemark that in both cases, the key exchange will fail at the next step as parties will disagree on `TH_3`.",
          "createdAt": "2022-04-22T08:22:26Z",
          "updatedAt": "2022-04-22T08:22:26Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Decoding considerations should  consider deterministic CBOR, CDDL, and anything outside CBOR and CDDL.",
          "createdAt": "2022-04-25T08:11:27Z",
          "updatedAt": "2022-04-25T08:11:27Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The text about decoding should recommend to abort if encoding not deterministic.",
          "createdAt": "2022-04-26T14:47:48Z",
          "updatedAt": "2022-04-26T14:47:48Z"
        }
      ]
    },
    {
      "number": 290,
      "id": "I_kwDOEItXAM5Jmk7E",
      "title": "State max size of message_2 when SHA-2 is used",
      "url": "https://github.com/lake-wg/edhoc/issues/290",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "Channeling from Erik.\r\n\r\nUse of the HKDF as EDHOC-KDF for generation of KEYSTREAM_2 and encryption of message_2 induces a max size. For example, HKDF-SHA256 has max output size 255*32 = 8160 bytes.",
      "createdAt": "2022-05-13T07:30:49Z",
      "updatedAt": "2022-05-18T07:55:22Z",
      "closedAt": "2022-05-18T07:55:22Z",
      "comments": []
    },
    {
      "number": 294,
      "id": "I_kwDOEItXAM5K2e0E",
      "title": "Clarify confidentiality of message_2",
      "url": "https://github.com/lake-wg/edhoc/issues/294",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "> As described in SIGMA, different levels of identity protection are provided to the Initiator and the Responder. EDHOC protects the credential identifier of the Initiator against active attacks and the credential identifier of the Responder against passive attacks. An active attacker can get the credential identifier of the Responder by eavesdropping on the destination address used for transporting message_1 and send its own message_1 to the same address.\r\n\r\n* EDHOC protects not only credential identifier against passive attacks\r\n* EDHOC does not protect confidentiality of message_2 against active attacks",
      "createdAt": "2022-06-01T11:53:28Z",
      "updatedAt": "2022-06-12T12:24:41Z",
      "closedAt": "2022-06-12T12:24:41Z",
      "comments": [
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> EDHOC does not protect confidentiality of message_2 against active attacks.\r\n\r\nWait, that is a bit strong (unless there is an attack I am not aware of). The constant fields of message_2 can be obtained by an attacker sending its own DH share to the responder. But for a message_2 corresponding to some non compromised initiator DH share, the content of message_2, like the signature, should be confidential.",
          "createdAt": "2022-06-01T12:08:14Z",
          "updatedAt": "2022-06-01T12:08:14Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe I didn't formulate the property well. I'm thinking about this: message_2 is disclosed to the owner of the private key X, and an active attacker can replace G_X in message_1 to read message_2.\r\n\r\nEdit: This goes for signature as well.",
          "createdAt": "2022-06-01T12:26:09Z",
          "updatedAt": "2022-06-01T12:29:21Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, ok, the owner of the private key learns everything and also the signature, but only the owner of the private keys X learns  the corresponding message_2 essentially. \r\n\r\nIt is just that stated as it was, it made it for me sound like if even for honest private keys X that the attacker does not know, it would be able to break the confidentiality of message_2.",
          "createdAt": "2022-06-01T12:56:10Z",
          "updatedAt": "2022-06-01T12:56:10Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, good point, let's try to formulate this better then :-)",
          "createdAt": "2022-06-01T13:57:36Z",
          "updatedAt": "2022-06-01T13:57:36Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Assuming an Alice sends\r\n\r\n`message_1 = METHOD, SUITES_I, G_X, C_I, EAD_1\r\n`\r\nand do/would receive \r\n\r\n`message_2 = G_Y, ENC( PAD, ID_CRED_R, Signature_or_MAC_2, EAD_2 ), C_R`\r\n\r\nAn attacker can do a number of active attacks\r\n\r\n1. An attacker can block message_1 and send a similar message_1 with a different source IP and different G_X.\r\nAssuming that the Responder does not chose credentials based on IP, G_X, or randomly, the attacker would get an\r\nalmost equal message_2 (different G_Y, KEYSTREAM_2, and Signature_or_MAC_2)\r\n\r\n2. An attacker can block message_2 and send a similar message_2 with a different ID_CRED_R. Using the information wether the Initiator sends message_3 the attacker gain info about ID_CRED_R. (note that the attacker might increase the size of ID_CRED_R)\r\n\r\n3. An attacker can block message_2 and send a similar message_2 with a different ID_CRED_R. Leaks information about the length.\r\n\r\n4. An attacker can block message_2 and send a similar message_2 with a different Signature_or_MAC_2. Using the information wether the Initiator sends message_3 the attacker gain info about Signature_or_MAC_2. This attack might not work for practically used MAC and Signature algortihms, but if S = SIG(PK, M) is a signature algorithm then S2 = (S, PK) = SIG(PK, M) is also a valid signature algorithm that is vulnerable to the attack.\r\n\r\nI think **\"EDHOC does not protect confidentiality of message_2 against active attacks\"** is quite correct on a high level. You could mitigate attacks where the attacker modifies message_2 but that is quite useless given attack 1. ",
          "createdAt": "2022-06-02T07:17:02Z",
          "updatedAt": "2022-06-02T07:17:02Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a commit with a minor fix for the first bullet.\r\nhttps://github.com/lake-wg/edhoc/commit/b43bc46555c854532ddc6436f5f7ca816b65f546\r\n\r\n",
          "createdAt": "2022-06-02T09:02:02Z",
          "updatedAt": "2022-06-02T09:02:02Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Regarding bullet two \"EDHOC does not protect confidentiality of message_2 against active attacks\" we need some more discussion what to do. Based on the comments and discussions the last two weeks it might be good to do some clarification.\r\n\r\nA first observation is that the confidentiality only apply to PLAINTEXT_2 and not the whole message.\r\n`\"EDHOC does not protect confidentiality of PLAINTEXT_2 against active attacks\"`\r\n\r\nNot sure we want to say this. It is a bit too much detail and a bit too high level. In addition to identity protection, the only property the reader might care about is the confidentiality of EAD_2. I suggest that in addition to the commit described above we augment the current text on EAD_2\r\n\r\n\"EAD_2 is encrypted but the Responder has not yet authenticated the Initiator.\"\r\n\r\nto say that EDHOC only provides confidentiality of EAD_2 against passive attackers.",
          "createdAt": "2022-06-02T09:12:10Z",
          "updatedAt": "2022-06-02T09:12:10Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a commit that gives more details on EAD_2 encryption.\r\n\r\nNEW\r\n`External authorization data sent in message_1 (EAD_1) or message_2 (EAD_2) should be considered unprotected by EDHOC, see {{unprot-data}}. EAD_2 is encrypted but the Responder has not yet authenticated the Initiator and the encryption does not provide confidentiality against active attacks.`",
          "createdAt": "2022-06-02T09:35:28Z",
          "updatedAt": "2022-06-02T09:35:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think these minor commits are enough and that this can be closed",
          "createdAt": "2022-06-02T09:36:54Z",
          "updatedAt": "2022-06-02T09:36:54Z"
        }
      ]
    },
    {
      "number": 295,
      "id": "I_kwDOEItXAM5K-lL4",
      "title": "Connection identifers and privacy",
      "url": "https://github.com/lake-wg/edhoc/issues/295",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "If connection identifiers are predictable (e.g., a sequence) they might be used by an attacker to determine that the two EDHOC sessions came from the same device. We should add a sentence on this. In practice it does not matter unless IP address, MAC address, etc are randomized as well.",
      "createdAt": "2022-06-02T09:17:13Z",
      "updatedAt": "2022-06-12T12:24:51Z",
      "closedAt": "2022-06-12T12:24:51Z",
      "comments": [
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Isn\u00b4t it covered by sec 8.5?: \r\n>    An attacker observing network traffic may use connection identifiers sent in clear in EDHOC or the subsequent application protocol to  correlate packets sent on different paths or at different times.\r\n\r\nEssentially, any of the additional data (EADs and C_I/C_R) can be used to attack privacy, whether anonymity or unlinkability. A side remark is that even with padding, if any of the  EAD_s is a counter, the length of message_x can allow to distinguish high intensity traffic vs low intensity traffic.",
          "createdAt": "2022-06-02T09:38:51Z",
          "updatedAt": "2022-06-02T09:38:51Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, it does. The text is more general then I thought.\r\n\r\n```\r\n   An attacker observing network traffic may use connection identifiers\r\n   sent in clear in EDHOC or the subsequent application protocol to\r\n   correlate packets sent on different paths or at different times.  The\r\n   attacker may use this information for traffic flow analysis or to\r\n   track an endpoint.  Application protocols using connection\r\n   identifiers from EDHOC SHOULD provide mechanisms to update the\r\n   connection identifier and MAY provide mechanisms to issue several\r\n   simultaneously active connection identifiers.  See [RFC9000] for a\r\n   non-constrained example of such mechanisms.\r\n```\r\n\r\nShould probablt have some guidance on non-predictable connection identifiers. If a device is using a sequence like 0x3489f2, 0x3489f3, 0x3489f4, 0x3489f5 updating the connection identifier is quite useless.\r\n",
          "createdAt": "2022-06-02T10:10:11Z",
          "updatedAt": "2022-06-02T10:10:11Z"
        }
      ]
    },
    {
      "number": 296,
      "id": "I_kwDOEItXAM5K-1BE",
      "title": "Clarify authentication guarantees",
      "url": "https://github.com/lake-wg/edhoc/issues/296",
      "state": "CLOSED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Maybe a forgotten change due to transcript computation update. In `Security considerations`, we currently read:\r\n```\r\nCompared to {{SIGMA}}, EDHOC adds an explicit method type and expands the message authentication coverage to additional elements such as algorithms, external authorization data, and previous messages.\r\n```\r\n\r\nSince the transcripts now contain the plaintexts and not anymore the messages, this may need to be amended. The authentication of the plaintexts now hold with strong confidence, but the authentication of the messages requires both strong security assumptions over the encryption functions as well as a completely unambiguous parsing/encoding/decoding of everything. ",
      "createdAt": "2022-06-02T10:17:34Z",
      "updatedAt": "2022-06-20T10:19:31Z",
      "closedAt": "2022-06-20T10:19:31Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Very clear that authentication does not cover the messages sent on the wire anymore. As this is in the security considerations I think it should be updated to be correct.",
          "createdAt": "2022-06-03T06:49:25Z",
          "updatedAt": "2022-06-03T06:49:25Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Is 19911ca good enough? Other proposal?",
          "createdAt": "2022-06-13T09:03:01Z",
          "updatedAt": "2022-06-13T09:03:01Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Some plural is missing on one of the word in 19911ca (messages?), otherwise LGTM",
          "createdAt": "2022-06-13T12:14:15Z",
          "updatedAt": "2022-06-13T12:14:15Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "How about this:\r\n\r\nNEW\r\nEDHOC adds an explicit method type and expands the message authentication coverage to additional elements such as algorithms, external authorization data, and previous plaintext messages.",
          "createdAt": "2022-06-13T12:45:08Z",
          "updatedAt": "2022-06-13T12:45:08Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in 7d869f8",
          "createdAt": "2022-06-20T10:19:30Z",
          "updatedAt": "2022-06-20T10:19:30Z"
        }
      ]
    },
    {
      "number": 299,
      "id": "I_kwDOEItXAM5LSQcR",
      "title": "Using sid as nonce in Extract for better security reduction",
      "url": "https://github.com/lake-wg/edhoc/issues/299",
      "state": "CLOSED",
      "author": "cottierb",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "The nonce used for the computation of PRK_2e in the key schedule is set to be an empty.\r\nBy replacing this empty string by the sid of the session, this makes the key PRK_2e linked to the session connection identifiers and divides the chances for an attacker to correctly compute the key PRK_2e by the number of running sessions.\r\n\r\nMore precisely, considering $n$ running sessions, computing Extract(\"\",Z) with a random Z, the attacker may have a match with any of the sessions. While considering using a sid, computing Extract(sid, Z), the attacker may have a match only with the session using this sid. \r\n\r\n",
      "createdAt": "2022-06-07T10:30:20Z",
      "updatedAt": "2022-10-04T14:24:06Z",
      "closedAt": "2022-10-04T14:24:06Z",
      "comments": [
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This would increase the reduction bounds for PRK_2e, but would it make a change if we consider the actual keystream? (and latter keys)\r\n```KEYSTREAM_2   = EDHOC-KDF( PRK_2e,   0, TH_2,      plaintext_length )```\r\n\r\nAs the transcript is included inside the derivation, the keystream_2 does depend on all the information exchanged that could be used to build an sid.\r\n\r\nAt a high level, the question is kind of the following I guess: is it better to do `Expand( Extract(0,Z), TH_2, length)` vs `Expand( Extract(TH_2,Z), 0, length)`? (I have no clue about the answer, but I would guess that if we rely on the PRF assumption, it is mostly the same?)\r\n\r\n",
          "createdAt": "2022-06-08T09:27:29Z",
          "updatedAt": "2022-06-08T10:29:59Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Making the following change would be relatively easy:\r\n\r\n```\r\nOLD: PRK_2e = Extract( 0x, G_XY )\r\nNEW: PRK_2e = Extract( TH_2, G_XY )\r\n```\r\n\r\nBut as charlie-j points out, TH_2 is already included in all the Expand() derivations, so I am not sure that adding TH_2 improves the practical security.\r\n\r\n> computing Extract(\"\",Z) with a random Z, the attacker may have a match with any of the sessions. While considering using a sid, computing Extract(sid, Z), the attacker may have a match only with the session using this sid.\r\n\r\nFor the inclusion of SID to make this \"attack\" harder the size of the curve would have to be smaller than the size of the hash function output. For the X25519-SHA-256 combination that is true but the size of X25519 is still 2^252. Brute forcing that would be much harder than brute forcing the typically 128 bit OSCORE key or breaking X25519 with Pollard's rho.",
          "createdAt": "2022-06-27T08:41:11Z",
          "updatedAt": "2022-06-27T08:41:11Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "For comparison, below is how the TLS 1.3 key schedule looks like without PSK\r\n\r\n```\r\n             0\r\n             |\r\n             v\r\n000... ->  HKDF-Extract\r\n             |\r\n             v\r\n       Derive-Secret(., \"derived\", \"\")\r\n             |\r\n             v\r\n   (EC)DHE -> HKDF-Extract = Handshake Secret\r\n             |\r\n             +-----> Derive-Secret(., \"c hs traffic\",\r\n             |                     ClientHello...ServerHello)\r\n             |                     = client_handshake_traffic_secret\r\n             |\r\n             +-----> Derive-Secret(., \"s hs traffic\",\r\n             |                     ClientHello...ServerHello)\r\n             |                     = server_handshake_traffic_secret\r\n```\r\n",
          "createdAt": "2022-06-29T04:07:22Z",
          "updatedAt": "2022-06-29T04:07:22Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> draft-ietf-lake-edhoc-14: \"and all symmetric keys are derived using as much previous information as possible\" \r\n\r\nThis is not really true for the current: \r\n`PRK_2e = Extract( 0x, G_XY )`\r\n\r\nBut would be true for\r\n`PRK_2e = Extract( TH_2, G_XY )`\r\n",
          "createdAt": "2022-06-29T04:10:30Z",
          "updatedAt": "2022-06-29T06:26:43Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we interpret `symmetric keys` in this quote as covering the PRKs, it is not true for any of them apart from PRK_out, as similarly TH_3 and TH_4 are included only in K_3 and K_4.",
          "createdAt": "2022-06-29T08:42:43Z",
          "updatedAt": "2022-06-29T08:42:43Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> If we interpret symmetric keys in this quote as covering the PRKs, it is not true for any of them apart from PRK_out, as similarly TH_3 and TH_4 are included only in K_3 and K_4.\r\n\r\nGood point. Let's see if we should reformulate \"and all symmetric keys are derived using as much previous information as possible\" is some way",
          "createdAt": "2022-06-30T11:31:46Z",
          "updatedAt": "2022-06-30T11:31:46Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The keys (and actually random material) that do follow this specification are the one form the key derivation figure:\r\n\r\n> {: #fig-edhoc-kdf title=\"Key derivations using EDHOC-KDF.\"} {: artwork-align=\"center\"}\r\n\r\nSo an option would be to simply point at the figure?",
          "createdAt": "2022-06-30T13:03:39Z",
          "updatedAt": "2022-06-30T13:03:39Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Making a PR for this I noticed that this change has the benefit of allowing the text talking about HKDF and using the empty string as salt. Irrespectively of if the extra security factor is needed or not I therefore think this change should be done. There does not seem to be any negative affects of the change (except that it affects the test vectors).",
          "createdAt": "2022-07-28T16:19:49Z",
          "updatedAt": "2022-07-28T16:19:49Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #323 is included in -16",
          "createdAt": "2022-10-04T14:24:06Z",
          "updatedAt": "2022-10-04T14:24:06Z"
        }
      ]
    },
    {
      "number": 300,
      "id": "I_kwDOEItXAM5LVDI6",
      "title": "Do we need different names for paddings of different messages?",
      "url": "https://github.com/lake-wg/edhoc/issues/300",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "If there is a risk someone thinks that padding in the messages must be the same we could use   PAD_2, PAD_3, PAD_4. \r\n",
      "createdAt": "2022-06-07T20:09:12Z",
      "updatedAt": "2022-06-12T12:14:06Z",
      "closedAt": "2022-06-12T12:14:06Z",
      "comments": [
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If I understand correctly, the PAD is to hide the length of the messages. If the three messages share the same PAD length, it is enough for one of the message to have a length known by the attacker, e.g. if EAD_4 is of constant length across all sessions, to leak the length of the PAD, and thus the length of the other messages contents. As such, 3 distinct padding lengths would be strictly better.\r\n\r\nOtherwise, as the encryptions are distinct (different key streams), I on my side don't see any weird cryptographic interactions that would be possible.\r\n\r\n(a side question is does the padding in message 2 leads to potential for padding oracles attacks, where the attacker could try to flip a few bytes of the cyphertext and learn some information based on which step of the processing fail. However, that is covered by #294 I guess) ",
          "createdAt": "2022-06-08T08:47:40Z",
          "updatedAt": "2022-06-08T08:47:40Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This is an editorial change. I merged the PR and will close this issue.\r\n\r\n`does the padding in message 2 leads to potential for padding oracles attacks, where the attacker could try to flip a few bytes of the cyphertext and learn some information based on which step of the processing fail.`\r\n\r\nNo and yes. SIGMA and EDHOC and TLS 1.3 does not provide confidentiality of the second flight to active attackers (except maybe the signature). In SIGMA and EDHOC and attacker can modify the second flight and gain information. But this attack seems very uninteresting compared to attacks where the attacker modifies message_1.",
          "createdAt": "2022-06-12T12:14:06Z",
          "updatedAt": "2022-06-12T12:14:06Z"
        }
      ]
    },
    {
      "number": 303,
      "id": "I_kwDOEItXAM5Lpe_8",
      "title": "Using SHA-256, do we need larger message_2 than 8160 bytes?",
      "url": "https://github.com/lake-wg/edhoc/issues/303",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "The current design of encryption of message_2 in EDHOC limits the size of the message to 8160 bytes when SHA-256 is used. Is that a problem?\r\n \r\nmessage_2 consists of the fields\r\n \r\n- G_Y\r\n- ID_CRED_R \r\n- Signature_or_MAC_2\r\n- C_R\r\n\r\nand optional fields:\r\n- ? PAD_2\r\n- ? EAD_2\r\n\r\nWhile these message fields could be very small, depending on use case, some may be arbitrarily large. The field ID_CRED_R would typically be a reference to an authentication credential, but may contain the credential itself, for example a certificate chain. EAD_2 is defined by the application so may a priori be large. One example is revocation information.\r\n\r\nJohn: SHA-384 has the limit 12240  bytes and SHA-512 has the limit 16320 bytes. SHAKE128 and SHAKE256 have much much larger limits (2^2040 \u2212 1 bits)\r\n",
      "createdAt": "2022-06-13T09:33:01Z",
      "updatedAt": "2022-10-04T14:22:30Z",
      "closedAt": "2022-10-04T14:22:30Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Some of the alternatives:\r\n\r\n- Do nothing / this is not a problem\r\n- Replace HKDF with HKDF', which allows larger length of output\r\n- Use HKDF for message_2 size < 8160, HKDF' for larger message_2 \r\n- Replace message_2 encryption with AES-CTR / ChaCha20\r\n- Use KMAC instead of HKDF\r\n \r\nEdit:\r\n- Multiple applications of HKDF, to produce sufficiently long keystream\r\n\r\nJohn: HKDF' here refer only to HKDF-Expand. HKDF-Extract would stay the same.\r\n\r\nJohn: HKDF' would still be HKDF but not HKDF as specified in RFC 5869. The original HKDF paper just states that the counter is fixed length. RFC 5869 unfortunately chose 1 byte.\r\nhttps://eprint.iacr.org/2010/264.pdf",
          "createdAt": "2022-06-13T09:57:13Z",
          "updatedAt": "2022-06-30T15:52:55Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "It seems that this is a concern if/when G_Y or Signature_or_MAC_2 becomes one of the monstrous Post-Quantum algorithms, or a HSS.   I think that we should rule that out of scope,  say that when it happens that we'll do EDHOC2 based upon new constraints at the time.\r\n I think that 8K is probably enough for the certificate chain.  That's a *lot* (100) of 802.15.4 fragments.\r\nSo unless switching to HKDF' is really cheap, don't bother.",
          "createdAt": "2022-06-13T16:46:00Z",
          "updatedAt": "2022-06-13T16:46:00Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Michael. Yes, the assumption so far has been \"this is not a problem\". \r\n\r\n@All: It would be good to understand the impact on implementation if we would come to a different conclusion. Please comment, on the examples below.\r\n\r\n1.  Replace HKDF with HKDF', which allows larger length of output\r\n\r\nHKDF is constructed from HMAC using a counter which is 8 bits long. By defining HKDF' with 16 / 32 bits counter would make the output 2 MB / 137 GB (if I did the maths right) before the counter wraps. How is HKDF implemented today? Is it feasible to define your own variant, say with 32 bits counter? \r\n\r\n2.    Use HKDF for message_2 size < 8160, HKDF' for larger message_2\r\n\r\nIf this solution is applied, and only HKDF was mandatory to implement, then applications which stay below the limit would have minor impact. Yet it still allows support for all practical message_2 sizes at the cost of implementing HKDF' and the use of two KDFs. Is this an interesting option?\r\n\r\n3.    Replace message_2 encryption with AES-CTR / ChaCha20\r\n\r\nThese are of course well known algorithm. Is AES-CTR available in libraries used, or would you need to implement it from AES? This introduces a dependence of ciphersuite, or the need to add another entry to the cipher suite for message_2 encryption algorithm.\r\n\r\n4.  Use KMAC instead of HKDF\r\n\r\nFor KMAC, output length < 2^2040. But then we lost the case when there is no KMAC available.\r\n\r\n5. Derive as many keystreams as needed to cover PLAINTEXT_2\r\n\r\nDivide PLAINTEXT_2 in fixed size chunks (of 8160 bytes or similar) + last chunk. Introduce dependency on chunk number n = 0, 1, 2, 3, ... in one of the first three arguments of the keystream derivation:\r\n\r\n> KEYSTREAM_2   = EDHOC-KDF( PRK_2e,   0, TH_2,      plaintext_length )\r\n\r\nFor example:\r\n- PRK_2e(n) = Extract ( salt, IKM ) = HMAC-SHA-256( n, G_XY )\r\n\r\nor\r\n\r\n- replace 0 with negative labels:  -n for chunk n\r\n\r\nor\r\n\r\n- replace TH_2 with context = <<  n, TH_2 >>\r\n\r\n\r\n\r\n",
          "createdAt": "2022-06-14T14:49:55Z",
          "updatedAt": "2022-06-14T14:49:55Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #304 is included in -16",
          "createdAt": "2022-10-04T14:22:27Z",
          "updatedAt": "2022-10-04T14:22:27Z"
        }
      ]
    },
    {
      "number": 305,
      "id": "I_kwDOEItXAM5MG9ne",
      "title": "What message manipulations are detected and when",
      "url": "https://github.com/lake-wg/edhoc/issues/305",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [],
      "body": "Further security considerations about how message content is protected against manipulation. Perhaps something like this:\r\n\r\n\"Manipulations of message_1 may not be detected at reception since there is no MAC but, since message_1 is included in TH_2, if I and R disagree on message_1 then subsequent PRKs and MACs will be different.\r\n\r\nManipulations of other messages are detected at reception through the MACs, except for manipulation of the encrypted padding of message_2, since PAD_2 is not integrity protected.\"\r\n\r\n ",
      "createdAt": "2022-06-20T13:01:21Z",
      "updatedAt": "2022-06-28T05:58:28Z",
      "closedAt": "2022-06-28T05:58:27Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a PR for this #308 ",
          "createdAt": "2022-06-27T09:22:51Z",
          "updatedAt": "2022-06-27T09:22:51Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I merged #308 to prepare for submission on -15. #308 is just a simple clarification.",
          "createdAt": "2022-06-28T05:58:27Z",
          "updatedAt": "2022-06-28T05:58:27Z"
        }
      ]
    },
    {
      "number": 312,
      "id": "I_kwDOEItXAM5MyO3U",
      "title": "Should there be a flag for critical EAD?",
      "url": "https://github.com/lake-wg/edhoc/issues/312",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "There is a new PR #311 suggesting this. There is no background discussion in the PR #311. There would be good with some use case.\r\n\r\nThe definition of what critical need and how the recipient handles critical would need a lot of discussion and fine-tuning.The handling of critical extensions in C.509 is to my understanding confusing and problematic. Both in the specification and in implementations.",
      "createdAt": "2022-06-29T06:32:24Z",
      "updatedAt": "2022-07-28T16:31:37Z",
      "closedAt": "2022-07-28T16:31:37Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Please see #275 for background discussion and use cases.",
          "createdAt": "2022-06-29T08:51:00Z",
          "updatedAt": "2022-06-29T08:51:00Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems very unclear that the current PR can be the basis for a ECH type mechanism. PR #311 should motivate why it is the basis for an ECH type mechanism or we should have some discussion regarding use cases for a general critical non-critical EAD mechanism. I do not see that #311 follow from #275.",
          "createdAt": "2022-06-30T05:23:18Z",
          "updatedAt": "2022-06-30T05:23:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Having critical/non-critical EAD seems like a reasonable thing in its own, but it is not clear to me that it is a step on the way to a ECH mechanism in EDHOC.",
          "createdAt": "2022-06-30T08:17:34Z",
          "updatedAt": "2022-06-30T08:17:34Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Should we add another column in IANA register?\r\n\r\nType:  always critical / always non-critical / application determines criticality",
          "createdAt": "2022-06-30T15:57:21Z",
          "updatedAt": "2022-06-30T15:57:21Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "If we define such a Type, the following text can be removed from specification and replaced by IANA consideration:\r\n\r\n\"A specification registring a new EAD label MUST describe if the EAD item is always critical, always non-critical, or if it can be decided by the application in the sending endpoint.\"",
          "createdAt": "2022-06-30T16:39:01Z",
          "updatedAt": "2022-06-30T16:39:01Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I merged #311 which addresses some points raised in this issue. Please review and comment if there is anything missing.\r\n\r\nThe consequences of EDHOC processing of critical / non-critical EAD items is described, but how the security application makes use of this property is left to the associated specification. (In particular, no registration of criticality in the IANA register.)",
          "createdAt": "2022-07-10T14:54:29Z",
          "updatedAt": "2022-07-10T14:54:29Z"
        }
      ]
    },
    {
      "number": 313,
      "id": "I_kwDOEItXAM5MyQzd",
      "title": "Updates needed to KeyUpdate text",
      "url": "https://github.com/lake-wg/edhoc/issues/313",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "> PRK_exporter MUST be derived anew from PRK_out if EDHOC-KeyUpdate is used\r\n\r\nThis is not correct. How to derive and store PRK_exporter is completely up to the implementation. One can derive PRK_exporter everytime Exporter is called.\r\n\r\n> PRK_out = EDHOC-KDF( PRK_out, 11, context, hash_length )\r\n\r\nThis make it look like PRK_out is overwritten. This should be formulated with `N+1` and `N` like TLS 1.3 or with `OLD` and `NEW` or something. How long to save the old keying material (PRK_out, PRK_Exported, any derived keys) is likely up to the application. The importand thing is that they need to be deleted to give FS.",
      "createdAt": "2022-06-29T06:41:59Z",
      "updatedAt": "2022-10-11T09:48:47Z",
      "closedAt": "2022-10-11T09:48:46Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "There was a request from someone that more guidance on the use of KeyUpdate should be expanded. Maybe not clear how you are supposed to alternate KeyUpdate and Exporter to get FS.",
          "createdAt": "2022-06-29T06:47:37Z",
          "updatedAt": "2022-06-29T06:47:37Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As you are considering making the KeyUpdate more detailed, I have a general design question.\r\n\r\nAre there use cases where one would expect Post-Compromise Security? That is, if one of the participant's PRK_out is compromised, a successful KeyUpdate mechanism between the two honest parties would heal them and lock out the attacker That is typically what is met by the double ratchet from the Signal app.\r\n\r\nThe classical way to achieve that is roughly to have each party send out for the update fresh DH ephemeral shares, and add the corresponding DH secret inside the key derivation. (it would of course require more care than that in the details)",
          "createdAt": "2022-06-29T08:53:55Z",
          "updatedAt": "2022-06-29T08:53:55Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> As you are considering making the KeyUpdate more detailed,\r\n\r\nI think part of the plan is to make it less detailed and leave some stuff to the implementation/application :)\r\n\r\nThe current KeyUpdate mechanism only gives forward secrecy. If you exchange some nonces and use them as a context you might get protection against an attacker is not monitoring all your traffic. I think details of this should be specified outside of EDHOC like in the OSCORE KeyUpdate draft in the CORE WG.\r\n\r\nThe double ratchet was discussed in LAKE WG at an earlier point. The conclusion was that it added to much complexity to specify that as part of EDHOC. To get this kind of security an application has to rerun EDHOC frequently (like TLS 1.3). Signal uses the Diffie-Hellman ratchet very often which makes it understandable to have on optimized Diffie-Hellman ratchet post-handshake. Contrained use cases of EDHOC can not do Diffie-Hellman as often as Signal so it was determined that requiring rerun of the full EDHOC was the best tradeoff.\r\n\r\nShould the EDHOC specification say more about the benefits of frequently rerunning Diffie-Hellman? I don't remember how much it says. I recently wrote a paragraph about this that was accepted to RFC8446bis.\r\n",
          "createdAt": "2022-06-30T09:41:18Z",
          "updatedAt": "2022-06-30T09:41:50Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> is the only secret key shared between Initiator and Responder that needs to be stored \r\n\r\nThis is not correct. PRK_out does not need to be stored. An implementation can derive the application keys directly and never store PRK_out. An implementation can also store PRK_exporter if they don't use EDHOC-KeyUpdate.",
          "createdAt": "2022-06-30T11:10:48Z",
          "updatedAt": "2022-06-30T11:10:48Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> cache the old PRK_out until it has verfied that the other endpoint has the correct new PRK_out.\r\n\r\nThis is not enough. You need to be sure that the old key is not needed more.",
          "createdAt": "2022-06-30T11:18:08Z",
          "updatedAt": "2022-06-30T11:18:08Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I merged #314 which addresses some points raised in this issue. Please review and comment if there is anything missing.",
          "createdAt": "2022-07-10T14:48:12Z",
          "updatedAt": "2022-07-10T14:48:12Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "No comments received, so I assume this is fine. (KeyUpdate is now in an appendix.)",
          "createdAt": "2022-10-11T09:48:46Z",
          "updatedAt": "2022-10-11T09:48:46Z"
        }
      ]
    },
    {
      "number": 316,
      "id": "I_kwDOEItXAM5NNE_D",
      "title": "Eventually wrong TH_3 in traces ",
      "url": "https://github.com/lake-wg/edhoc/issues/316",
      "state": "CLOSED",
      "author": "StefanHri",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Close?",
        "traces and test vectors"
      ],
      "body": "@stoprocent \r\n\r\nThe input for TH_3 given in the traces doc [1]:\r\n```\r\n58203AB11700841FCE193C323911EDB317B046DCF24B9950FD624884F7F57CD98B07\r\n5850A11822822E4879F2A41B510C1F9B5840F373A7203EFA7DF0738C360EE080171A\r\nCA67FCB175F26D785D095B55EB1484655C39E03A3F5F9BDD87EF8C5F2EC3DFE6FBBA\r\n49B7B4625B126F27DE301767270C\r\n```\r\nproduces the hash value:\r\n```\r\nca4915a1c4096febd9351c93ff1967b0fc7c9d72809574512709954771f2c66e\r\n```\r\nand not\r\n```\r\n77 a5 1a 1c f0 eb 60 e4 06 1b fc 27 08 87 52 9c 16 b6 f4 b3 4d 88 a2 26\r\ne7 06 5b 60 f4 15 26 71\r\n```\r\n\r\n[1]: https://lake-wg.github.io/edhoc/traces-of-14/draft-ietf-lake-traces.html ",
      "createdAt": "2022-07-06T06:45:08Z",
      "updatedAt": "2022-07-28T16:27:02Z",
      "closedAt": "2022-07-28T16:27:02Z",
      "comments": [
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for spotting this.The bug is actually in the \"input\" value compiled in the traces (i.e., not in the following values and steps). This applies to both traces and to the input for computing both TH_3 and TH_4.\r\n\r\nThe resulting TH_3 and TH_4 are as already reported in the corresponding traces. I will update the traces in https://github.com/lake-wg/edhoc/pull/301\r\n\r\nWhat we should correctly have is as follows.\r\n\r\n---\r\n\r\nTrace 1\r\n\r\nInput to calculate TH_3 (CBOR Sequence) (114 bytes)\r\n```\r\n58 20 3a b1 17 00 84 1f ce 19 3c 32 39 11 ed b3 17 b0 46 dc f2 4b 99\r\n50 fd 62 48 84 f7 f5 7c d9 8b 07 a1 18 22 82 2e 48 79 f2 a4 1b 51 0c\r\n1f 9b 58 40 f3 73 a7 20 3e fa 7d f0 73 8c 36 0e e0 80 17 1a ca 67 fc\r\nb1 75 f2 6d 78 5d 09 5b 55 eb 14 84 65 5c 39 e0 3a 3f 5f 9b dd 87 ef\r\n8c 5f 2e c3 df e6 fb ba 49 b7 b4 62 5b 12 6f 27 de 30 17 67 27 0c\r\n```\r\n\r\nInput to calculate TH_4 (CBOR Sequence) (114 bytes)\r\n```\r\n58 20 77 a5 1a 1c f0 eb 60 e4 06 1b fc 27 08 87 52 9c 16 b6 f4 b3 4d 88\r\na2 26 e7 06 5b 60 f4 15 26 71 a1 18 22 82 2e 48 c2 4a b2 fd 76 43 c7 9f\r\n58 40 ab 7e fd 2d 2f 2d 2b 7f f4 e1 f1 6b f5 51 a5 09 f1 f7 6d 37 e0 28\r\nb7 0c 9c 98 32 02 6c 52 c2 37 21 73 81 91 91 c5 95 59 07 b1 63 c8 86 0f\r\nbf 7e 62 51 b6 71 9f 76 1c b9 44 9e 1d 47 57 41 c6 0b\r\n```\r\n---\r\n\r\nTrace 2\r\n\r\nInput to calculate TH_3 (CBOR Sequence) (44 bytes)\r\n```\r\n58 20 9d 2a f3 a3 d3 fc 06 ae a8 11 0f 14 ba 12 ad 0b 4f b7 e5 cd f5 9c\r\n7d f1 cf 2d fe 9c 20 24 43 9c 32 48 ad 01 bc 30 c6 91 11 76\r\n```\r\n\r\nInput to calculate TH_4 (CBOR Sequence) (44 bytes)\r\n```\r\n58 20 08 5d e1 6d 9c 82 35 cb f5 7c 46 d0 6d 16 d4 56 a6 c0 ad 81 aa 4b\r\n44 8b 6a bc 98 dc ba 61 25 eb 2b 48 35 4f 0b c2 74 1e ea c6\r\n```",
          "createdAt": "2022-07-06T10:42:47Z",
          "updatedAt": "2022-07-06T10:42:47Z"
        },
        {
          "author": "StefanHri",
          "authorAssociation": "NONE",
          "body": "Thanks for the fast response Marco! Can you share the complete raw traces? ",
          "createdAt": "2022-07-06T10:47:47Z",
          "updatedAt": "2022-07-06T10:47:47Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Except for the fixes above (to be added), the raw traces are both available at:\r\n\r\nhttps://github.com/lake-wg/edhoc/blob/337615d8af2a4c11e70ab4bdf50e2e05be0c4a6a/draft-ietf-lake-traces.md\r\n\r\nas part of PR #301",
          "createdAt": "2022-07-06T11:01:00Z",
          "updatedAt": "2022-07-06T11:01:00Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "EDIT: The fixes above are now added to PR #301, see the commit https://github.com/lake-wg/edhoc/pull/301/commits/3c53df19e3614b98c4d9384e38c07fe230ab9820\r\n",
          "createdAt": "2022-07-06T12:05:02Z",
          "updatedAt": "2022-07-06T12:05:15Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@StefanHri have you looked at the ones generated by me? https://github.com/lake-wg/edhoc/pull/315/files",
          "createdAt": "2022-07-09T07:57:05Z",
          "updatedAt": "2022-07-09T07:57:05Z"
        }
      ]
    },
    {
      "number": 317,
      "id": "I_kwDOEItXAM5NcgLG",
      "title": "Computational analysis of EDHOC Sig-Sig - improvement suggestions for transcript hashes",
      "url": "https://github.com/lake-wg/edhoc/issues/317",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "Following our last email and in preparation for the IETF 114, we would like to offer a suggestion from our computational analysis of EDHOC. I will first state the suggestion and then give some motivation and justification.\r\n\r\nSuggestion: Include the authentication credentials in the transcript hash computation.\r\n\r\nNamely, we suggest modifying the transcript hashes TH_3 and TH_4 to include the credential of the peer that authenticate themselves. More precisely, we propose that protocol participants compute:\r\n   > TH_3 = H(TH_2, (PAD_2, G_Y, ID_CRED_R, SIGNATURE_2, EAD_2, C_R, CRED_R)) instead of\r\n   >    TH_3 = H(TH_2, (PAD_2, G_Y, ID_CRED_R, SIGNATURE_2, EAD_2, C_R))\r\n\r\nSimilarly, we propose that the computation of TH_4 becomes\r\n   >   TH_4 = H(TH_3, (PAD_3, ID_CRED_I, SIGNATURE_3, EAD_3, CRED_I)) instead of\r\n   >   TH_4 = H(TH_3, (PAD_3, ID_CRED_I, SIGNATURE_3, EAD_3))\r\n\r\nThe philosophy behind this proposal is to make explicit the identity of the peer that authenticated themselves, even if those identities are not sent. (One can think of this as expanding TH to include the actual identity credentials, which the sent ID_CRED values hint to but do not uniquely determine). This is to simplify arguing agreement on the communication peer.\r\n\r\n\r\nMotivation and justification:\r\n\r\n- We analysed EDHOC in the Multi-Stage Key exchange model, following the work [Dow21] of Dowling et al.\r\n- We suggest the change above as an improvement towards ensuring explicit authentication, which we observed when analysing the following excerpt from the draft (draft-14, section 3.5.3):\r\n\r\n  \"As stated in Section 3.1 of [I-D.ietf-cose-rfc8152bis-struct], applications MUST NOT assume that 'kid' values are unique, and several keys associated with a 'kid' may need to be checked before the correct one is found. Applications might use additional information such as 'kid context' or lower layers to determine which key to try first. Applications should strive to make ID_CRED_x as unique as possible, since the recipient may otherwise have to try several keys.\"\r\n\r\nWe modelled the above statement conservatively and considered that any ID_CRED might reference multiple identities and associated credentials. A potential consequence of this modelling is that there may be ambiguity about the identity of the peer who authenticated themselves, which needs careful consideration. For instance, if ID_CRED_R refers to both CRED_R and CRED_R', the initiator that tries multiple public keys could conclude that it is talking to R'. If this occurs, the protocol would still come to completion since the transcript hash won't change.\r\n\r\nThe standard unforgeability notion of signature schemes would not necessarily prevent such a scenario [1], and our analysis relies on strictly stronger notions. Concretely we require that signature schemes in EDHOC provide explicit ownership. In our model and proof, we had to rely on the relatively strong notion of \"Malicious Universal Exclusive Ownership\" to capture explicit authentication for EDHOC as currently specified. To the best of our knowledge, M-S-UEO was only studied and proven for Ed25519 as implemented in Libsodium[Bre20]. Therefore, relying on a weaker notion, \"Universal Exclusive Ownership\", is desirable.\r\n\r\nAdding the credentials in the transcript hash would prevent identity mis-binding attacks since divergence in the identity of the authenticated host would lead to diverging transcript hashes and, therefore, different derived keys. Furthermore, we can rely on weaker notions of explicit ownership from a proof standpoint. Fortunately, Ed25519 provides explicit ownership [Bre20], and [Po05] already showed that the inclusion of the credentials along with the message in the signing process, as is done already in EDHOC, provides explicit ownership and prevents ambiguity.  For ECDSA, care must be taken in the implementation so that this construction guarantees exclusive ownership. Overall, we assume that CBOR encoding is unambiguous.\r\n\r\nWe would very much appreciate your feedback and thoughts on the discussion above, and we are happy to answer any questions you might have.\r\n\r\n\r\nKind regards,\r\nMarc Ilunga (and Felix G\u00fcnther)\r\n\r\n[1] The need for a notion strictly stronger than standard EUF-CMA security for signature schemes also arises in the basic SIGMA protocol with the MAC under the signature. One needs that signature scheme is not only unforgeable for a random key but for all keys. Otherwise, an attacker may carry an identity mis-binding attack.\r\n[Dow21] Dowling et al. \"A Cryptographic Analysis of the TLS 1.3 Handshake Protocol\", https://eprint.iacr.org/2020/1044.pdf\r\n[Po05] Pornin and Stern, \"Digital Signatures Do Not Guarantee Exclusive Ownership\", https://link.springer.com/chapter/10.1007/11496137_10\r\n[Bre20] Brendel et al. \"The Provable Security of Ed25519: Theory and Practice\", https://eprint.iacr.org/2020/823.pdf\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/lake/BTxPdJl0Z8ylSe1P7i0BFx1T_0o/\r\n\r\n\r\n\r\n\r\n\r\n",
      "createdAt": "2022-07-08T18:16:26Z",
      "updatedAt": "2022-10-04T18:05:15Z",
      "closedAt": "2022-10-04T18:05:15Z",
      "comments": [
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi!\r\n\r\nWhen reading:\r\n> \"As stated in Section 3.1 of [I-D.ietf-cose-rfc8152bis-struct], applications MUST NOT assume that 'kid' values are unique, and several keys associated with a 'kid' may need to be checked before the correct one is found. Applications might use additional information such as 'kid context' or lower layers to determine which key to try first. Applications should strive to make ID_CRED_x as unique as possible, since the recipient may otherwise have to try several keys.\"\r\n\r\nI understood that a kid would map to multiple keys, but all of those keys would be owned by the same party. From what I understand, the attack described here only occurs when one kid maps to keys owned by distinct parties. \r\nWhich is the correct interpretation? And should the second case actually be allowed?\r\n\r\n(I think the update proposed is no matter what a good idea though, it strictly improves things)",
          "createdAt": "2022-07-09T11:27:00Z",
          "updatedAt": "2022-07-09T11:27:00Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "My interpretation of COSE is that one kid might map to keys owned by distinct parties. Seems hard to guarantee anything about kids unless there is a single authority that controls all the kids. as soon as there are several authorities there might be collisions. That all the keys with a certain kid belongs to a single party would require that a single authority determines all the kids or that some additional header parameter like kid_context is used. I think the whole reason that kid_context was introduced was to separate between different authorities determining kids.\r\n\r\nMaybe it would be good to clarify things in I-D.ietf-cose-rfc8152bis-struct",
          "createdAt": "2022-07-09T11:42:11Z",
          "updatedAt": "2022-07-09T11:42:11Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> (think the update proposed is no matter what a good idea though, it strictly improves things)\r\n\r\nThanks for this quick feedback!",
          "createdAt": "2022-07-09T11:50:47Z",
          "updatedAt": "2022-07-09T11:50:47Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I sent a mail to COSE suggesting that this should maybe be clarified\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/cose/WfEA8SHlLtK8yxFxmrb0PiDnsys/",
          "createdAt": "2022-07-09T11:51:31Z",
          "updatedAt": "2022-07-09T11:51:31Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am trying to precisely detail step by step the missbinding attack to understand how to improve our symbolic models and capture it, and I am not precisely able to. My first idea would require to be able to alter the signature under the xor, is this indeed the needed capability? Marc, could you give the details on how it would be carried out?",
          "createdAt": "2022-07-09T12:00:56Z",
          "updatedAt": "2022-07-09T12:00:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Below is my mail to LAKE on the topic\r\n\r\n```\r\nYour suggested change seems like a relatively easy thing to do:\r\n\r\nOLD: TH_3 = H(TH_2, PLAINTEXT_2)\r\nNEW: TH_3 = H(TH_2, PLAINTEXT_2, CRED_R)\r\n\r\nwhere\r\n\r\nPLAINTEXT_2 = ( PAD_2, ID_CRED_R, Signature_or_MAC_2, EAD_2 )\r\n\r\nand where the message to be signed is\r\n\r\n[ \"Signature1\", << ID_CRED_R >>, << TH_2, CRED_R, ? EAD_2 >>, MAC_2 ]\r\n\r\nwhere\r\n\r\nMAC_2 = EDHOC-KDF( PRK_3e2m, 2, << ID_CRED_R, TH_2, CRED_R, ? EAD_2 >>, mac_length_2 )\r\n\r\n(and similar for TH_4)\r\n\r\nI have not read the papers you refer to yet but if I understand you correctly, the problem is that signature schemes in general provides quite weak properties and even if CRED_R is already included in MAC_2 and in the external_aad of the signature, that is not enough, i.e., depending on the signature scheme an attacker might be able to find two identities CRED_R and CRED_R' such that Signature_or_MAC_2 is the same for the two identities.\r\n\r\nDoes the issue only apply to authentication with signature keys or also to authentication with Static Diffie-Hellman keys?\r\n\r\nThis seems like a change we should do.\r\n\r\n```\r\n\r\n\r\n\r\n",
          "createdAt": "2022-07-09T13:00:53Z",
          "updatedAt": "2022-07-09T13:00:53Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "`I am trying to precisely detail step by step the missbinding attack to understand how to improve our symbolic models and capture it, and I am not precisely able to. \r\n`\r\nSeems hard to do something in practice as any change to CRED_R changes the 32 byte pseudorandom value MAC_2.\r\n",
          "createdAt": "2022-07-09T13:04:20Z",
          "updatedAt": "2022-07-09T13:04:20Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The MAC-then-Sign version of SIGMA-I is proven to be secure. If the above attack is possible in EDHOC it seems interesting to make a comparision between EDHOC SIG-SIG and SIGMA-I:\r\n - Is there any protocol differences beween EDHOC SIG-SIG and SIGMA?\r\n - Is there different assumptions on the cryptographic functions or in the definition of \"secure\"?\r\n - Is the SIGMA-I proof wrong?",
          "createdAt": "2022-07-09T14:07:27Z",
          "updatedAt": "2022-07-09T14:07:27Z"
        },
        {
          "author": "MarcIlunga",
          "authorAssociation": "NONE",
          "body": "Hi all,\r\nThanks for the feedback so far! I will try and answer the question raised above. \r\nFirst of all, I realised we wrote several things in the email but let me reiterate the main points:\r\n\r\n- The identity mis-binding attack that we presented (and that I will flesh out below) only applies the basic MAC-Then-SIGn version of SIGMA as described in https://link.springer.com/chapter/10.1007/3-540-45708-9_10. It served as a starting point to reason about the precise guarantees we need from the signature scheme.\r\n- Fortunately: the actual instantiation in EHDOC seems to prevent the attack (thanks to _including the credentials under the signature and not just the MAC_. However, from a proof perspective, we are unable to properly show a reduction unless we assume even more about the signature schemes. \r\n- The suggestion allows us to easily reduce the security to a weaker security notion that is likely provided by concrete use of the signatures in EDHOC.\r\n\r\n### Identity mis-binding attack on MAC-then-SIGn and unforgeability requirements.\r\n\r\n> The MAC-then-Sign version of SIGMA-I is proven to be secure. If the above attack is possible in EDHOC, it seems interesting to make a comparision between EDHOC SIG-SIG and SIGMA-I:\r\n> \r\n> * Is there any protocol differences beween EDHOC SIG-SIG and SIGMA?\r\n> * Is there different assumptions on the cryptographic functions or in the definition of \"secure\"?\r\n> * Is the SIGMA-I proof wrong?\r\n\r\nIndeed MAC-then-Sign is proven secure, but the attack concerns the particularity of having the MAC under the signature, which is not completely considered in the previous analysis. Quoting the above paper (https://link.springer.com/chapter/10.1007/3-540-45708-9_10):\r\n> **Lemma 1**. If sig is a secure signature scheme and mac is a secure message authentication function, then it is infeasible for an attacker to find different messages $M$ and $M'$ such that for a randomly chosen secret mac-key $k_1$ the attacker\r\ncan compute $SIG (MAC_k (M))$ even after seeing $SIG (MAC_k (M))$.\r\n\r\nHowever, in the context of an identity mis-binding attack, we are concerned about the possibility of computing $\\sigma = SIG( sk', MAC_k (M')) = SIG(sk, MAC_k (M))$.  Where $sk'$ is adversarially chosen, which hints at Duplicate Signature Key Selection (DSKS)-like attacks. See: https://www.cryptologie.net/article/495/cryptographic-signatures-surprising-pitfalls-and-letsencrypt/\r\n\r\nBased on the existing SIGMA analysis, the requirement for the signature scheme is unforgeability. Namely, the signature is unforgeable \"on the average,\" i.e. for a random key. However, this does not exclude the possibility of \"weak\" keys, which are, for instance, a key pair $(sk, pk)$ such that $pk$ verifies *any message and signature pair*, i.e. $\\forall m, \\sigma: \\mathrm{Vrf}(pk, m, \\sigma) = true$. This notion of a \"weak\" key is not really necessary since the signature is still unforgeable. \r\nIf SIGMA is instantiated with such a pathological signature scheme, **which is still unforgeable**, then the attacker can carry an identity mis-binding that proceeds as follows:\r\n- Alice  -> Bob                   : $g^x$\r\n- Bob -> Eve(interception) : $Bob, g^y, \\sigma = SIG (sk_B, mac_B)$\r\n- Eve                                   : creates a special $(sk', pk')$\r\n- E -> A                              : $Eve, g^y, \\sigma$\r\n- A -> B                              : $Alice , \\sigma$\r\nIn the end, Alice thinks she talks to Eve, and Bob thinks he talks to Alice.\r\n\r\n**Why doesn't this attack work on the \"normal\" SIGMA**?  With the MAC under the signature, peers do not have a notion of verifying a MAC and do so only implicitly via a successful signature verification.  In the \"normal\" SIGMA, the MAC is explicitly verified; hence the attack above doesn't work even with a pathological signature scheme.\r\n\r\nObviously, EDHOC doesn't quite use such a pathological scheme; however, this shows that this case has to be carefully analysed, hence the suggestion for the transcript hashes.",
          "createdAt": "2022-07-09T16:55:08Z",
          "updatedAt": "2022-07-09T16:55:08Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "So does this identity misbinding attack mean that IKEv1 and IKEv2 does not provide authentication, aliveness, peer awareness, etc?",
          "createdAt": "2022-07-14T15:17:05Z",
          "updatedAt": "2022-07-14T15:17:05Z"
        },
        {
          "author": "MarcIlunga",
          "authorAssociation": "NONE",
          "body": "Hi @emanjon  apologies for the delayed response, as I am coming towards the end of my thesis project I need to finalize my writing\u2026\r\nAnyhow, regarding IKE protocols, this is a good question\u2026 Ultimately, this would depend on the concrete instantiation of the signature scheme. \r\nMy fairly limited understanding of IKE is that  the type of attack we describe above also apply. However, the adversary is likely to need to modify the communication transcript when injecting their certificate.  This is where my limited knowledge of IKE limits what I can say about the actual impact.  Perhaps, an attacker may abuse bit string representations to forge a certificate that seemingly does not modify the traffic on the wire?\r\n\r\nFrom a theoretical perspective, at least, it appears that we require some notion of exclusive ownership to prove security of the MAc-then-SIGn, this also depends on how it is instantiated.  The EDHOC instantiation seems to do the right thing. ",
          "createdAt": "2022-07-26T23:14:28Z",
          "updatedAt": "2022-07-26T23:14:28Z"
        },
        {
          "author": "MarcIlunga",
          "authorAssociation": "NONE",
          "body": "@charlie-j, Also apologies for providing the requested details, late. I wondered whether you had the chance to analyze this issue and what results you get from your formal modeling.",
          "createdAt": "2022-07-26T23:34:24Z",
          "updatedAt": "2022-07-26T23:34:24Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Our model did in fact already cover such weak keys for signatures, and in the case of EDHOC such attack is impossible, from what I understand mostly because the attacker cannot perform a MiTM as it cannot compute the encryption keys of the multiple messages. \r\n\r\nOnly in message 2, which is not integrity protected, could the attacker hope to change the signature such that if it was able to go by xoring from the ID_CRED_R to an ID pointing to some weak key, the signature check would go through for some other identity. But then the hash transcript would change and the key exchange would never go further, as the initiator would then produce a message encrypted with a key that neither the attacker nor the reponder can compute.",
          "createdAt": "2022-07-27T14:37:30Z",
          "updatedAt": "2022-07-27T14:37:30Z"
        },
        {
          "author": "MarcIlunga",
          "authorAssociation": "NONE",
          "body": "Dear @charlie-j , thanks for the feedback and the insights on how your formal model captured weak keys.\r\nI believe, however, that we are describing slightly different attacks. At a high level, the type of attack we consider does not really involve a PITM attack. In particular, the attack doesn't modify the transcript; hence nor do the transcript hash changes, or the key derived thereafter; at least as they are currently specified in draft 14.\r\n\r\nMore precisely, from the assumption that ID_CRED may hint at multiple credentials and associated public keys. The verification process would look something like the following pseudo-code(here for the initiator)\r\n```\r\nfor (pk, id) in credentials[ID_CRED_R]:\r\n   compute MAC_2 for id\r\n   Verify SIGNATURE_2 with pk\r\n   Set peer to id if verification succesful\r\n```\r\nIf the adversary would register a specially weak key $pk*$ such that $pk* \\in$ credentials[ID_CRED_R] and assuming that $pk*$ somehow gets precedence on the real $pk_R$ this attack would work if the signature scheme would be vulnerable.\r\nThough we describe attacks on plaintext communication; this is cheating just shows that the attacker knows ID_CRED_R. \r\nI hope this clarifies things a bit.\r\nMarc",
          "createdAt": "2022-07-27T15:25:41Z",
          "updatedAt": "2022-07-27T15:25:41Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I did understand your attack, and I was trying to essentially lift the attack you are describing to one that does not require the multiple CRED_R for one ID_CRED_R assumption.\r\n\r\nI was trying to do that, because under the multiple ID_CRED assumption, the authentication property becomes weird. If we ask for authentication over the ID_CRED and the attacker can register its own pk for an honnest ID_CRED, this already breaks authentication.  If we ask for authentication over the pks, then in your attack, the initiator is simply using an attacker key, for which we have no guarantees, and it is thus not breaking the authentication property.\r\n\r\n",
          "createdAt": "2022-07-28T10:21:32Z",
          "updatedAt": "2022-07-28T10:21:32Z"
        },
        {
          "author": "MarcIlunga",
          "authorAssociation": "NONE",
          "body": "> I did understand your attack, and I was trying to essentially lift the attack you are describing to one that does not require the multiple CRED_R for one ID_CRED_R assumption.\r\n\r\nApologies, I misunderstood the previous message. \r\n\r\nBut we had a similar observation if using unique ID_CRED. These attacks don't really work.\r\nIn the end, we could rely on strong universal exclusive ownership of the signature to show explicit authentication. Although we also had to tweak the explicit authentication guarantees slightly, the reduction would need something stronger than S-UEO. To the best of our knowledge, it is not provided by the signature. Maybe except Ed25519 if it is implemented according to the way Libsodium does it.\r\n\r\nBut adding the credentials to the transcript hashes strengthen the guarantees. ",
          "createdAt": "2022-07-29T10:34:27Z",
          "updatedAt": "2022-07-29T10:59:27Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No worries, I was unclear.\r\nWe seem to agree overall!",
          "createdAt": "2022-07-29T12:15:14Z",
          "updatedAt": "2022-07-29T12:15:14Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "No disagreement and the PR #318 is included in edhoc-16",
          "createdAt": "2022-10-04T18:05:15Z",
          "updatedAt": "2022-10-04T18:05:15Z"
        }
      ]
    },
    {
      "number": 319,
      "id": "I_kwDOEItXAM5Niwpy",
      "title": "Eventually wrong OSCORE master salt in traces",
      "url": "https://github.com/lake-wg/edhoc/issues/319",
      "state": "CLOSED",
      "author": "StefanHri",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Close?",
        "traces and test vectors"
      ],
      "body": "In the first test vector in [1] we have the following inputs for the computation of the OSCORE master salt: \r\n```\r\nPRK_exporter (size 32):\r\n        EA F9 12 D6 9A 96 68 59 F0 E6 9B C0 FD 16 A4 B9 \r\n        5B BD 9B 6C BE 2C 52 5B D2 3F D4 7F 34 05 9E 10 \r\nlabel: 1\r\ncontext (size 0):\r\nlength: 8\r\ninfo (size 3):\r\n        01 40 08 \r\n```\r\nI am computing a master salt:\r\n```\r\n87 B3 EB BB E1 7E B4 B9\r\n```\r\nand not \r\n```\r\n67 ec d7 d5 bb 49 46 17\r\n```\r\n[1]: https://github.com/lake-wg/edhoc/blob/337615d8af2a4c11e70ab4bdf50e2e05be0c4a6a/draft-ietf-lake-traces.md",
      "createdAt": "2022-07-11T16:38:40Z",
      "updatedAt": "2022-07-28T16:26:52Z",
      "closedAt": "2022-07-28T16:26:52Z",
      "comments": [
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Stefan, you're right. I've fixed a bug on my side and I now compute your same Master Salt.\r\n\r\nPlease see below all the Master Salt values for the two traces. The Editor's copy on Github is also updated [1][2].\r\n\r\n\r\n**Trace 1**\r\n\r\nOSCORE Master Salt (Raw Value) (8 bytes):\r\n87 b3 eb bb e1 7e b4 b9\r\n\r\nOSCORE Master Salt after KeyUpdate (Raw Value) (8 bytes):\r\n18 f3 23 ad 2e fc 69 29\r\n\r\n---\r\n\r\n**Trace 2**\r\n\r\nOSCORE Master Salt (Raw Value) (8 bytes):\r\n20 41 51 35 27 9a 4e e4\r\n\r\nOSCORE Master Salt after KeyUpdate (Raw Value) (8 bytes):\r\n94 12 9c a9 a2 2f 1e fc\r\n\r\n---\r\n\r\n[1] https://github.com/lake-wg/edhoc/blob/master/draft-ietf-lake-traces.md\r\n\r\n[2] https://lake-wg.github.io/edhoc/draft-ietf-lake-traces.html",
          "createdAt": "2022-07-12T07:23:49Z",
          "updatedAt": "2022-07-12T07:23:49Z"
        }
      ]
    },
    {
      "number": 320,
      "id": "I_kwDOEItXAM5N9v1U",
      "title": "TH_2, TH_3, TH_4 computation in vectors",
      "url": "https://github.com/lake-wg/edhoc/issues/320",
      "state": "CLOSED",
      "author": "stoprocent",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hi \r\n\r\nThis will be a direct question to @emanjon as the original author. \r\nI was fixing issues with test vectors today and I have noticed that TH_2, 3 and 4 are computed using CBOR'ed values. \r\nFor example TH_3:\r\n\r\n```\r\n// Calculate data_3 and TH_3\r\nvec TH_3_input = cbor( TH_2 ) + cbor( PLAINTEXT_2 );\r\nvec TH_3 = H( TH_3_input );\r\n```\r\n\r\nWhere in spec it only says `TH_3 = H(TH_2, PLAINTEXT_2)`.\r\n\r\nAs I was updating the test vector generator I was caring that over but I hadn't really looked at it before. Now while `TH_3` changed in `v14` so it's using `PLAINTEXT_2` instead of `CIPHERTEXT_2 ` I have noticed it. The same goes for other hashes. \r\n\r\nShould this be changed to just \r\n\r\n```\r\n// Calculate data_3 and TH_3\r\nvec TH_3_input = TH_2 + PLAINTEXT_2;\r\nvec TH_3 = H( TH_3_input );\r\n```\r\n\r\nhttps://github.com/lake-wg/edhoc/blob/master/test-vectors-11/vectors.cpp#L438\r\nhttps://github.com/lake-wg/edhoc/blob/master/test-vectors-11/vectors.cpp#L465\r\nhttps://github.com/lake-wg/edhoc/blob/master/test-vectors-11/vectors.cpp#L493",
      "createdAt": "2022-07-18T14:17:36Z",
      "updatedAt": "2022-07-21T10:46:41Z",
      "closedAt": "2022-07-21T10:46:41Z",
      "comments": []
    },
    {
      "number": 321,
      "id": "I_kwDOEItXAM5N_phs",
      "title": "Prepending 0x02 to the x coordinate to ECC public keys and clarity of Appendix B",
      "url": "https://github.com/lake-wg/edhoc/issues/321",
      "state": "CLOSED",
      "author": "StefanHri",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "I and @stoprocent  were discussing if 0x02 should or should not be prepended to P256 public keys before they are used in EDHOC. \r\n\r\nAppendix B says: \"For such use, the compact\r\n   representation can be transformed into the SECG point compressed\r\n   format by prepending it with the single byte 0x02 (i.e., M = 0x02 ||\r\n   X).\"\r\n\r\nBut section 3.7 says that only the x coordinate should be used (no 0x02). In addition, the traces [1] also does not have 0x02.\r\n\r\n\r\n[1]: https://lake-wg.github.io/edhoc/traces-of-14/draft-ietf-lake-traces.html#name-message_1-second-time",
      "createdAt": "2022-07-18T20:16:25Z",
      "updatedAt": "2022-10-04T17:59:17Z",
      "closedAt": "2022-10-04T17:59:17Z",
      "comments": [
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As I was writing to @StefanHri, this was discussed before and I remember that it's clear that we are only using x without any prefixes.",
          "createdAt": "2022-07-19T06:23:13Z",
          "updatedAt": "2022-07-19T06:23:13Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, this was discussed in #195. \r\n\r\nSection 3.7 says:\r\n\"The ephemeral public keys in EDHOC (G_X and G_Y) use compact representation ...\"\r\n\r\n Appendix B says:\r\n\"This section defines a format for compact representation based on ...\"\r\n\r\nand later\r\n\r\n\"If a y-coordinate is required for validation or compatibility with APIs the value ~yp SHALL be set to zero. For such use, the compact representation can be transformed into the SECG point compressed format by prepending it with the single byte 0x02 (i.e., M = 0x02 || X).\"\r\n\r\nBut, as is stated, the latter is not compact representation, it is a transformation of the compact representation. \r\n\r\nSince this is the second time we get the comment, maybe we should clarify something? If so, what?\r\n",
          "createdAt": "2022-07-23T20:26:33Z",
          "updatedAt": "2022-07-23T20:26:33Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@StefanHri Please look at the commit above if it is more clear now.",
          "createdAt": "2022-09-20T12:11:19Z",
          "updatedAt": "2022-09-20T12:11:19Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "No comment so I assume current text is OK.",
          "createdAt": "2022-10-04T17:59:17Z",
          "updatedAt": "2022-10-04T17:59:17Z"
        }
      ]
    },
    {
      "number": 322,
      "id": "I_kwDOEItXAM5OfrfX",
      "title": "Update text on peer awareness",
      "url": "https://github.com/lake-wg/edhoc/issues/322",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [],
      "body": "Current text on peer awareness is written based on the 3 flight protocol. Should mention peer awareness for a 4 flight protocol (message_4 or OSCORE) which will be common use case.",
      "createdAt": "2022-07-25T14:30:03Z",
      "updatedAt": "2022-10-11T09:58:22Z",
      "closedAt": "2022-10-11T09:58:22Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in master. The peer awareness properties of adding message_4 is given by the original SIGMA paper.",
          "createdAt": "2022-10-11T09:58:22Z",
          "updatedAt": "2022-10-11T09:58:22Z"
        }
      ]
    },
    {
      "number": 324,
      "id": "I_kwDOEItXAM5Opw_9",
      "title": "Computational analysis of EDHOC STAT - improvement suggestions for K_3",
      "url": "https://github.com/lake-wg/edhoc/issues/324",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "Proposal to derive K_3 from PRK_4e3m instead of PRK_3e2m, to make K_3 dependent on the static key of the Initiator.\r\n",
      "createdAt": "2022-07-27T13:31:02Z",
      "updatedAt": "2022-10-11T09:47:00Z",
      "closedAt": "2022-10-11T09:46:59Z",
      "comments": [
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Wait... Isn' t that impossible?\r\nThe responder needs to be able to decrypt message 3 in order to know G_I, and G_I is needed to compute PRK_4e3m. So the key K_3 used to decrypt message 3 cannot depend on G_I.\r\nAm I missing something?\r\n",
          "createdAt": "2022-07-27T14:26:19Z",
          "updatedAt": "2022-07-27T14:26:19Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I had the same comment. Please see slides 21ff in \r\nhttps://datatracker.ietf.org/meeting/114/materials/slides-114-lake-computational-analysis-of-edhoc-stat-stat-00\r\n\r\nMy interpretation was to partition PLAINTEXT_3 into, say,\r\n\r\nPLAINTEXT_3A =\r\n(\r\n? PAD_3,\r\nID_CRED_I / bstr / -24..23,\r\n? EAD_3\r\n)\r\n\r\nPLAINTEXT_3B = Signature_or_MAC_3\r\n\r\nKEYSTREAM_3A = EDHOC-KDF( PRK_3e2m,   TBD, TH_3, plaintext_length )\r\nK_3B         = EDHOC-KDF( PRK_4e3m,   TBD, TH_3,      key_length )\r\nIV_3B        = EDHOC-KDF( PRK_4e3m,   TBD, TH_3,      iv_length )\r\n\r\nCIPHERTEXT_3A = PLAINTEXT_3A XOR KEYSTREAM_3A   \r\n\r\nCIPHERTEXT_3B = AEAD encryption of PLAINTEXT_3B as is currently done in message_3, with K_3B/IV_3B and\r\nadditional external_aad = PLAINTEXT_3A.\r\n\r\nCIPHERTEXT_3 is the concatenation of CIPHERTEXT_3A and CIPHERTEXT_3B.\r\n\r\nThis would increase the size of message_3 with 1-2 bytes due to separate CBOR encoding of CIPHERTEXT_3A and CIPHERTEXT_3B.\r\n\r\nI'm not sure this solves the problem though.\r\n",
          "createdAt": "2022-07-27T14:57:57Z",
          "updatedAt": "2022-07-27T14:57:57Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Some quick thought on the PR and alternatives\r\n\r\n```\r\nOLD (draft-ietf-lake-edhoc-15)\r\nAEAD ( PAD_3, ID_CRED_I, Signature_or_MAC_3, EAD_3 )\r\n\r\nNEW ALT 1 (#325) (Adds 1-2 bytes)\r\nENC( PAD_3, ID_CRED_I, EAD_3 ) || AEAD( Signature_or_MAC_3 )\r\n\r\nNEW ALT 2 (Adds 0 bytes)\r\nENC( PAD_3, ID_CRED_I, AEAD( Signature_or_MAC_3 ), EAD_3 )\r\n\r\nNEW ALT 3 (Where mac_length_3 is inceased to a mimimum of at least 16 bytes) (Adds 0 bytes)\r\nENC( PAD_3, ID_CRED_I, Signature_or_MAC_3, EAD_3 )\r\n```\r\n\r\nIn the SIGMA-I paper Krawczyk writes:\r\n_\"We stress that the encryption function (as applied in the third message) must be resistant to active attacks and therefore must combine some form of integrity protection.\"_\r\n\r\nALT 1 uses IND-CPA encryption for PAD_3, ID_CRED_I, EAD_3\r\nALT 2 uses IND-CPA encryption for PAD_3, ID_CRED_I, EAD_3\r\nALT 2 uses IND-CPA encryption for PAD_3, ID_CRED_I, EAD_3, Signature_or_MAC_3\r\n\r\nNeeds to be analysed where authenticated encryption is needed. As pointed out be @charlie-j the suggested change weakenes the encryption of several fields.\r\n",
          "createdAt": "2022-07-28T15:27:53Z",
          "updatedAt": "2022-07-28T15:40:40Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Constructions in which message_3 replaces the AEAD'd ID_CRED_I with one that is only XOR'd with a KEYSTREAM_3 could be problematic when it comes to attacks to reveal ID_CRED_I under very specific circumstances; https://github.com/lake-wg/edhoc/pull/325#issuecomment-1198352881 has details.",
          "createdAt": "2022-07-28T16:11:01Z",
          "updatedAt": "2022-07-28T16:11:01Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "As pointed out by Christian amsuss, identity protection against active attackers is a very important property. All the alternatives above only provides identity protection against passive attackers. Given that I don't think any of the discussed changes should be done. I think we do want identity protection against active attackers.\r\n\r\nIf 128-bit authentication is needed after message_3 then the best options seems to be to use a longer 16 bytes MAC_3. This is already included in some cipher suites but it always combined with 16 bytes MAC_2. One option would be to allow different lengths of MAC_2 and MAC_3, i.e. 8 byte MAC_2 and 16 byte MAC_3.\r\n\r\nNot sure that  8 byte MAC_2 and 16 byte MAC_3 is worth specifying. Applications that want 128 byte authentication and are not restricted to 45 byte message_2 can use 16 byte MAC_2 and 16 byte MAC_3",
          "createdAt": "2022-07-28T16:13:34Z",
          "updatedAt": "2022-07-28T16:13:34Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Summarizing some of the discussion in the PR\r\n\r\nWhile CRED_I will eventually be integrity protected, implementing the whole processing of message_3 without side channels is hard. I don\u2019t think we want to require that. \r\n\r\nAlso two different ID_CRED_I can according to COSE correspond to the same CRED_I so even an implementation without side channels would potentially leak info about the Initiator identity to an active attacker.\r\n\r\nI think Krawczyk is correct in that the encryption needs to be AE.\r\n\r\nA solution with two concatenated AEAD ciphertexts calculated using different keys seems possible but does not seem to have any advantages v compared to simply increase the length of MAC_3 in the current -15 solution.",
          "createdAt": "2022-07-28T23:25:44Z",
          "updatedAt": "2022-07-28T23:27:07Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "My current conclusion is that no changes should be done. Similar constructions was discussed in the past with similar conclusions. It is possible on a theoretical level with the assumption that all processing is done in one node and in constant-time. In practice the risks for side-channel attacks on confidentiality seems to big.\r\n\r\nAnother change could be to have different MAC lengths in message_2 and message_3 but this would likely only help in the analysed scenario where message_4 is used. Most deployments will not use message_4 so I don't think we should optimize for that.\r\n\r\nCipher suite 0,2 do provide the minimum security level that LAKE WG has agreed on (64 bit security against online attackers producing forged messages). Applications wanting 128 bit authentication can e.g. use cipher suite 1 or 3. ",
          "createdAt": "2022-08-23T09:41:58Z",
          "updatedAt": "2022-08-23T09:41:58Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with the conclusion, some additional high-level remarks:\r\n\r\n1. The use of MACs in multiple messages to prove extended security level without increasing the message overhead, as shown by the team from ENS, is very promising. We should update the security considerations (after having understood the exact conditions) with the improved properties following a successfully verified message_4 and/or OSCORE message.\r\n\r\n2. The particular change discussed here may not be the right trade-off. The proposed change is based on a reasoning about MAC length and security level, but those are not identical. Security level without further qualification may mean different things, but not uncommonly associated to offline attacks. The security consideration in Section 8.1 makes the intended security level more explicit:\r\n\r\n> Based on the cryptographic algorithms requirements (Section 8.3), EDHOC\r\n> provides a minimum of 64-bit security against online brute force\r\n> attacks and a minimum of 128-bit security against offline brute force\r\n> attacks. \r\n\r\nThis formulation has been in the draft since -05 (Feb. 2021) without any comments so I assume none of the previous reviewers had any issue with this, neither with the property itself nor (to the best of current knowledge) its validity. \r\n\r\nIf this is correct, then the targeted security level of the protocol is reached. Improving this is of course welcome if the additional cost is small. But based on the comments above that doesn't seem to be the case. So it seems not to be a consensus to make the change.\r\n\r\n@baptistecottier  Any further comments are most welcome. It would be great if we could continue the discussion about 1. :-)\r\n\r\n",
          "createdAt": "2022-09-22T08:47:55Z",
          "updatedAt": "2022-09-22T08:47:55Z"
        },
        {
          "author": "baptistecottier",
          "authorAssociation": "NONE",
          "body": "In fact, what we have shown in our analysis is that the authenticated encryption in message_3 is in fact not authenticated as not relying on Initiator long-term credential. \r\nHence, several solutions: \r\n- Replace the authenticated encryption by an encryption -> less bytes communication with 64 bits Initiator authentication security\r\n- Same as above but using a greater MAC size -> same message size but 128 bits initiator authentication security\r\n- If authenticated encryption is needed, encrypt ID_CRED_I with classical encryption, and encrypt the remaining of the initial message with AEAD using a key derived from PRK_4e3m. -> 128 bits initiator authentication security with same message size and IND-CPA encryption (except for ID_CRED_I).\r\n\r\nHope it clarifies our work :). \r\n",
          "createdAt": "2022-09-26T08:49:14Z",
          "updatedAt": "2022-09-26T08:49:14Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@baptistecottier:  The proposals you list unfortunately introduce some issues as discussed in #325, in particular a difficulty to implement identity protection securely, opening for timing side-channels. \r\n\r\nIf these concerns cannot be addressed I don\u2019t think we have consensus for any of the proposals.\r\n\r\nAnother way to incorporate your input would be to maintain the current protocol and key schedule and add constraints or considerations that enables raising the theoretical level for online attack. For example:\r\n\r\nA. Encourage the use of ciphersuite 1 and 3 instead of 0 and 2, respectively (mentioned above in this issue).\r\n\r\nB. Define a ciphersuite with 8 byte MAC_2 and 16 byte MAC_3  (mentioned above in this issue)\r\n\r\nC. Use the combined EDHOC and OSCORE message flow [1]. In this case the third flight from I to R contains two MACs: an OSCORE request containing EDHOC message_3. In other words a CoAP message where the payload contains\r\n* message_3 (one MAC of minimum 64 bits)\r\n* the OSCORE ciphertext calculated with an AEAD using a key obtained from EDHOC-Exporter, i.e. derived from PRK_out (another MAC of minimum 64 bits)\r\n\r\nEdit: fixed the description where in the CoAP message the two MACs are located\r\n\r\nOne associated change in [1] is that EDHOC would need to be aborted in case the OSCORE MAC doesn\u2019t verify. (Last paragraph before 3.3.1 of of [1]. That does not impact backward compatibility with OSCORE implementations in general since this processing is associated to the EDHOC option which is defined in that document.)\r\n\r\nAn OSCORE response (payload contains a ciphertext calculated with an AEAD using another key derived from PRK_out) as a fourth flight could provide additional properties in the other direction.\r\n\r\n* Is it easy to prove that these measures provide added value in your metrics? This would be very valuable input to the current discussion.\r\n\r\nResults on this topic can be absorbed as security considerations, for example the use of minimum 16 bytes MACs if possible in message_3 in case of STAT-STAT, or to use combined EDHOC / OSCORE in case of STAT-STAT with cipher suites 0 or 2. \r\n\r\n\r\n[1] https://datatracker.ietf.org/doc/html/draft-ietf-core-oscore-edhoc\r\n\r\n---\r\n\r\n* Additionally, a separate comment about this:\r\n\r\n> In fact, what we have shown in our analysis is that the authenticated encryption in message_3 is in fact not authenticated as not relying on Initiator long-term credential\r\n\r\nNote that the (Authenticated) Encryption is used in message_3 to give identity protection against attackers, not to authenticate the Initiator.\r\n\r\n",
          "createdAt": "2022-09-29T11:33:24Z",
          "updatedAt": "2022-09-30T05:39:14Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The argument with combined EDHOC / OSCORE message above could also be applied to the case with EDHOC message_3 and the application protocol message being separate messages. After message_3 has been verified by the Responder, the EDHOC context could be \"put on hold\" by the Responder (e.g. not persistently stored) pending the result of the verification of the application protocol message. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2022-09-30T06:42:00Z",
          "updatedAt": "2022-09-30T06:42:00Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this in favor of #340 as discussed in the interim.",
          "createdAt": "2022-10-11T09:46:59Z",
          "updatedAt": "2022-10-11T09:46:59Z"
        }
      ]
    },
    {
      "number": 326,
      "id": "I_kwDOEItXAM5OtpnL",
      "title": "PRK notation",
      "url": "https://github.com/lake-wg/edhoc/issues/326",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "With PR #325 the notation of PRKs is not very descriptive anymore. And even if we don't merge it there is room for simplification, for example: \r\n\r\nPRK_2 = PRK_2e\r\nPRK_3 = PRK_3e2m\r\nPRK_4 = PRK_4e3m\r\n\r\nand harmonizing changes like\r\n\r\nSalt_3 = Salt_3e2m\r\nSalt_4 = Salt_4e3m\r\n",
      "createdAt": "2022-07-28T08:37:22Z",
      "updatedAt": "2022-10-11T09:47:25Z",
      "closedAt": "2022-10-11T09:47:25Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I assume that if #325 is not merged, no change should be done, or? I.e., this issue depends on if #325 is approved.",
          "createdAt": "2022-07-28T16:22:32Z",
          "updatedAt": "2022-07-28T16:22:32Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "No, it can make sense to simplify the names even if we don't do #325. Then again, if we don't merge #325, then the meaning of the names (e= enc, m= mac) still makes sense, but I don't know if anyone thinks about that. No biggie.",
          "createdAt": "2022-07-28T18:40:14Z",
          "updatedAt": "2022-07-28T18:40:14Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The keys used to be named PRK_2, PRK_3, ... The reason for the current naming was that it was easy for a reader to assume that PRK_3 was the key used in message_3, which is not true. Can be discussed what the best naming is.",
          "createdAt": "2022-08-03T09:14:09Z",
          "updatedAt": "2022-08-03T09:14:09Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as agreed in the interim.",
          "createdAt": "2022-10-11T09:47:25Z",
          "updatedAt": "2022-10-11T09:47:25Z"
        }
      ]
    },
    {
      "number": 327,
      "id": "I_kwDOEItXAM5Ovh5y",
      "title": "ead_label leaks information even if ead_value is encrypted outside of EDHOC",
      "url": "https://github.com/lake-wg/edhoc/issues/327",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "PR exists"
      ],
      "body": "The current text just says that:\r\n\r\n\"The Initiator and the Responder must make sure that unprotected data\r\n   and metadata do not reveal any sensitive information.  This also\r\n   applies for encrypted data sent to an unauthenticated party.  In\r\n   particular, it applies to EAD_1, ID_CRED_R, EAD_2, and error\r\n   messages. \"\r\n\r\nThe ead_value is expected to sometimes/often be encrypted outside of EDHOC. The text should be augmented with text that ead_label leaks information even if ead_value is encrypted outside of EDHOC.",
      "createdAt": "2022-07-28T15:03:37Z",
      "updatedAt": "2022-09-20T08:31:51Z",
      "closedAt": "2022-09-20T08:31:51Z",
      "comments": []
    },
    {
      "number": 329,
      "id": "I_kwDOEItXAM5Ov8w7",
      "title": "Comment from Marco to clarify identifier privacy recommendations.",
      "url": "https://github.com/lake-wg/edhoc/issues/329",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "PR exists"
      ],
      "body": "Suggestion to clarify and maybe give example of randomness and unpredictability. The SHOULD should probably be removed. Unclear if 1 byte identifiers can ever by unpredictable.",
      "createdAt": "2022-07-28T16:25:38Z",
      "updatedAt": "2022-10-11T14:27:41Z",
      "closedAt": "2022-10-11T14:27:41Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as approved by Marco.",
          "createdAt": "2022-10-11T14:27:41Z",
          "updatedAt": "2022-10-11T14:27:41Z"
        }
      ]
    },
    {
      "number": 331,
      "id": "I_kwDOEItXAM5PUcyK",
      "title": "Difference betwen Test Vector 1 and Test Vector 2",
      "url": "https://github.com/lake-wg/edhoc/issues/331",
      "state": "CLOSED",
      "author": "manishamalik53",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Close?",
        "test vectors"
      ],
      "body": "What is the difference between the two test vectors - Vector 1 and Vector 2 in https://github.com/lake-wg/edhoc/blob/master/test-vectors-15/vectors-p256.txt?\r\n\r\nDoes the value of COSE header vary and thus the sizes of all the EDHOC messages?",
      "createdAt": "2022-08-06T14:04:51Z",
      "updatedAt": "2023-09-16T16:39:33Z",
      "closedAt": "2023-09-16T16:39:33Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@manishamalik53 The difference is in the identifier of the credential (ID_CRED_x):\r\n\r\n* Test Vector 1 uses the COSE header x5t {34: [-15, ... ]}, i.e. a SHA-256 hash of an X.509 certificate truncated to 64-bits as identifier, so the certificate is just referenced.\r\n\r\n* Test Vector 2 uses the COSE header x5bag {32: ... }, i.e. the actual certificate as identifier, so the certificate is transported.\r\n\r\nSorry for extremely slow response! ",
          "createdAt": "2022-09-20T13:34:53Z",
          "updatedAt": "2022-09-20T13:34:53Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@stoprocent Could you please provide a link to the updated test vector code so it can be found from the test-vectors-15 directory? Thanks!",
          "createdAt": "2022-09-20T13:39:28Z",
          "updatedAt": "2022-09-20T13:39:28Z"
        }
      ]
    },
    {
      "number": 332,
      "id": "I_kwDOEItXAM5QVA3H",
      "title": "Suggestion to change the name of the protocol from EDHOC to Lightweight Authenticated Key Exchange (LAKE)",
      "url": "https://github.com/lake-wg/edhoc/issues/332",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-08-23T10:12:59Z",
      "updatedAt": "2022-09-20T06:33:40Z",
      "closedAt": "2022-09-20T06:33:40Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Suggested by someone and now discussed on the list\r\n",
          "createdAt": "2022-08-25T14:29:58Z",
          "updatedAt": "2022-08-25T14:29:58Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "No consensus to rename:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/lake/qaEat04bEWTgaHdCXiLXeNe_WsY/\r\n",
          "createdAt": "2022-09-20T06:33:40Z",
          "updatedAt": "2022-09-20T06:33:40Z"
        }
      ]
    },
    {
      "number": 335,
      "id": "I_kwDOEItXAM5SNE_v",
      "title": "Further guidance on representating byte string identifiers",
      "url": "https://github.com/lake-wg/edhoc/issues/335",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "On request. \r\n\r\nSome people have already implemented this and may want to comment on the Implementation Note in PR #336.",
      "createdAt": "2022-09-20T10:09:26Z",
      "updatedAt": "2022-10-03T07:24:48Z",
      "closedAt": "2022-10-03T07:24:48Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged",
          "createdAt": "2022-10-03T07:24:48Z",
          "updatedAt": "2022-10-03T07:24:48Z"
        }
      ]
    },
    {
      "number": 338,
      "id": "I_kwDOEItXAM5TIicN",
      "title": "Move EDHOC-KeyUpdate to appendix",
      "url": "https://github.com/lake-wg/edhoc/issues/338",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "PR exists"
      ],
      "body": "Replacing a session key with its hash for forward secrecy as specified with EDHOC-KeyUpdate, can alternatively be defined by the application as is done in KUDOS (draft-core-oscore-key-update). For this reason there is no need to recommend EDHOC-KeyUpdate as is done in Section 7.\r\n\r\n\"Implementations SHOULD support EDHOC-KeyUpdate.\"\r\n\r\nEDHOC-KeyUpdate can useful in other applications but the description should be moved out of the body in the interest of focusing on the core functionality of EDHOC.",
      "createdAt": "2022-10-03T13:35:20Z",
      "updatedAt": "2022-10-11T09:44:25Z",
      "closedAt": "2022-10-11T09:44:25Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in the interim and PR merged.",
          "createdAt": "2022-10-11T09:44:22Z",
          "updatedAt": "2022-10-11T09:44:22Z"
        }
      ]
    },
    {
      "number": 340,
      "id": "I_kwDOEItXAM5TPYVp",
      "title": "Add text on properties of using several MACs",
      "url": "https://github.com/lake-wg/edhoc/issues/340",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "PR exists"
      ],
      "body": "This is the outcome of the work by Baptiste Cottier and David Pointcheval related to #324\r\n\r\nThe conclusions form Baptiste and David is that after receiving message_4 the Initiator has authenticated the Responder with a strength of the combined MACs in message_2 and message_4. I.e. if both MACs are 64 bits, they work together as a 128 bit MAC.\r\n\r\nThe same thing apply to application messages such as OSCORE used as message 4,5,6,..... but this comes with the additional requirement that the security association has to be terminated and EDHOC redone in the case that verification of the OSCORE MAC fails. The same apply to the draft-ietf-core-oscore-edhoc where 2 MACs are sent in flight 3\r\nhttps://datatracker.ietf.org/doc/draft-ietf-core-oscore-edhoc/\r\n\r\nThe same priciple should apply to modes with signatures where a signature in message_2 combined with a MAC in message_4 gives the strenght of the signature and the MAC combined. Baptiste and David have not investigated this formally.\r\n\r\n",
      "createdAt": "2022-10-04T16:21:52Z",
      "updatedAt": "2022-10-12T07:34:51Z",
      "closedAt": "2022-10-12T07:34:51Z",
      "comments": []
    },
    {
      "number": 344,
      "id": "I_kwDOEItXAM5UbFp9",
      "title": "Session key terminology?",
      "url": "https://github.com/lake-wg/edhoc/issues/344",
      "state": "CLOSED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "PR exists",
        "Merge?"
      ],
      "body": "Minor comment, but reading through all the security claims, they multiple times refer to the term `session key` (for instance in `compromise of a session key does not compromise past session keys.`), which is not per say completely defined. I am not even sure there is any ambiguity, but is it still worth adding somewhere that this relates to  `PRK_out`?\r\n\r\n",
      "createdAt": "2022-10-20T10:38:30Z",
      "updatedAt": "2022-11-08T17:09:34Z",
      "closedAt": "2022-11-08T17:09:34Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I assume session key most often refer to PRK_out. Could maybe refer to the exported application keys in some sentence. Let's go through all instances and make it clear what it refers to.",
          "createdAt": "2022-10-21T06:53:37Z",
          "updatedAt": "2022-10-21T06:53:37Z"
        }
      ]
    },
    {
      "number": 346,
      "id": "I_kwDOEItXAM5VUkdE",
      "title": "Fix note in TH_3",
      "url": "https://github.com/lake-wg/edhoc/issues/346",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "PR exists",
        "Merge?"
      ],
      "body": "> Compute the transcript hash TH_3 = H(TH_2, PLAINTEXT_2, CRED_R) where H() is the EDHOC hash algorithm of the selected cipher suite.  The transcript hash TH_3 is a CBOR encoded bstr and the input to the hash function is a CBOR Sequence.  Note that H(TH_2, PLAINTEXT_2) can be computed and cached already in the processing of message_2.\r\n\r\nThis note needs to be updated. The sentence is a remnant since TH_3 was defined as H(TH_2, PLAINTEXT_2) ",
      "createdAt": "2022-11-01T13:43:46Z",
      "updatedAt": "2022-11-08T17:10:14Z",
      "closedAt": "2022-11-08T17:10:14Z",
      "comments": []
    },
    {
      "number": 347,
      "id": "I_kwDOEItXAM5VY4uS",
      "title": "WGLC comments from Marco Tiloca ",
      "url": "https://github.com/lake-wg/edhoc/issues/347",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "PR exists"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/zbGxtirpWllLDtXkAUwfdNQOrSo/",
      "createdAt": "2022-11-02T06:43:57Z",
      "updatedAt": "2022-11-25T13:01:47Z",
      "closedAt": "2022-11-25T13:01:47Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Changes  in #364, here are detailed responses, except: \r\n1. regarding changes in EAD for which there is parallel work in #360  \r\n2. the comment on section 5.1 which we make into a separate thread. \r\n\r\n@marco-tiloca-sics Please look through these responses and see if you have any comments.\r\n\r\n[Section 2]\r\n\r\n* \"... using keys derived from the shared secret.\"\r\n\r\n \u00a0\u00a0 This should be the ECDH shared secret derived from G_X and G_Y. It \r\nhas not been introduced before, and it appears a little later for the \r\nfirst time. Hence, here it can be confused with the \"shared secret key \r\nPRK_out\" mentioned before, in the first paragraph after Figure 2.\r\n\r\nGS: Rephrased as\r\nNEW\r\n* \"- crypto algorithms applied with keys derived from one or more shared secrets calculated during the protocol\"\r\n\r\n[Section 3.3]\r\n\r\n* s/certain byte string identifiers/certain identifiers\r\n\r\nGS: DONE\r\n\r\n\r\n[Section 3.3.2]\r\n\r\n* A lot of text in this section takes CBOR byte strings as a starting \r\npoint. However, as mentioned in Section 3.3.0, \"Connection identifiers \r\nin EDHOC are intrinsically byte strings.\"\r\n\r\n \u00a0\u00a0 I read this as \"raw byte strings\", rather than \"CBOR byte strings\". \r\nOne may still choose to generate and store the identifiers precisely as \r\nCBOR byte strings, but they are still raw byte strings at their core.\r\n\r\n \u00a0\u00a0 Then, I think the following editorial changes would make the text in \r\nthis section simpler and less prone to confusion.\r\n\r\n \u00a0\u00a0 - Remove the sentence: \"This correspondence between integers and \r\nbyte strings is a natural mapping between the byte strings with CBOR \r\ndiagnostic notation h'00', h'01', ..., h'37' (except h'18', h'19', ..., \r\nh'1F') and integers which are CBOR encoded as one byte.\" \r\n\r\nGS: DONE\r\n\r\n\r\n \u00a0\u00a0 - s/are encoded as normal CBOR byte strings/are simply encoded as \r\nCBOR byte strings\r\n\r\nGS: DONE\r\n\r\n \u00a0\u00a0 - The text \"h'21' is represented by 0x21 (CBOR encoding of the \r\ninteger -2), not by 0x4121.\" becomes: \"0x21 is represented by 0x21 (CBOR \r\nencoding of the integer -2), not by the CBOR encoding 0x4121.\"\r\n\r\n \u00a0\u00a0 - The text \"h'0D' is represented by 0x0D (CBOR encoding of the \r\ninteger 13), not by 0x410D.\" becomes: \"0x0D is represented by 0x0D (CBOR \r\nencoding of the integer 13), not by the CBOR encoding 0x410D.\"\r\n\r\n \u00a0\u00a0 - The text \"h'18' is represented by 0x4118.\" becomes: \"0x18 is \r\nrepresented by 0x4118 (CBOR encoding of the byte string 0x18).\"\r\n\r\n \u00a0\u00a0 - The text \"h'38' is represented by 0x4138.\" becomes: \"0x38 is \r\nrepresented by 0x4138 (CBOR encoding of the byte string 0x38).\"\r\n\r\n \u00a0\u00a0 - The text \"h'ABCD' is represented by 0x42ABCD.\" becomes: \"0xABCD is \r\nrepresented by 0x42ABCD (CBOR encoding of the byte string 0xABCD).\"\r\n\r\nGS: Did something similar: \r\nNEW\r\n* 0x21 is represented by 0x21 (CBOR encoding of the integer -2), not by 0x4121 (CBOR encoding of the byte string 0x21).\r\n* 0x0D is represented by 0x0D (CBOR encoding of the integer 13), not by 0x410D (CBOR encoding of the byte string 0x0D).\r\n* 0x18 is represented by 0x4118 (CBOR encoding of the byte string 0x18).\r\n* 0x38 is represented by 0x4138 (CBOR encoding of the byte string 0x38).\r\n* 0xABCD is represented by 0x42ABCD (CBOR encoding of the byte string 0xABCD).\r\n\r\n\r\n \u00a0\u00a0 - The text \"A byte string which parses as a CBOR int in the range \r\n-24,..., 23 is just copied directly into the message\" becomes: \"A byte \r\nstring which parses as the 1-byte CBOR encoding of an integer in the \r\nrange -24, ..., 23 is just copied directly into the message\".\r\n\r\nGS: Did something similar: \r\nNEW\r\nA byte string which parses as the one-byte CBOR encoding of an integer (i.e. integer in the interval -24, ..., 23) is just copied directly into the message\r\n\r\n \u00a0\u00a0 - The text \"produces a byte string or an integer depending on its \r\nvalue.\" becomes: \"produces a CBOR byte string or a CBOR integer \r\ndepending on the value of the byte string identifier.\"\r\n\r\nGS: DONE\r\n\r\n\r\n[Section 3.4]\r\n\r\n* s/fragmentation/fragmentation and reassembly \r\n\r\nGS: DONE\r\n\r\n\r\n[Section 3.5.1]\r\n\r\n* \"The authentication key algorithm needs to be compatible with the \r\nmethod and the cipher suite\"\r\n\r\n \u00a0\u00a0 This should be specifically the selected cipher suite, right?\r\n\r\nGS: DONE\r\n\r\n[Section 3.5.2]\r\n\r\n* s/on a specific encoding of the credential/on the specific encoding of \r\nthe credentials\r\n\r\nGS: DONE\r\n\r\n* \"When the authentication credential is a COSE_Key in a CWT, CRED_x \r\nSHALL be the untagged CWT.\"\r\n\r\n \u00a0\u00a0 This should be: \"When the authentication credential is a CWT \r\nincluding a COSE_Key, then CRED_x SHALL be the untagged CWT.\"\r\n\r\nGS: DONE\r\n\r\n* \"When the authentication credential is a COSE_Key but not in a CWT, \r\nCRED_x SHALL be an untagged CCS.\"\r\n\r\n \u00a0\u00a0 This should be: \"When the authentication credential includes a \r\nCOSE_Key but it is not a CWT, then CRED_x SHALL be an untagged CCS.\"\r\n\r\nGS:\r\nNEW\r\n\"When the authentication credential includes a \r\nCOSE_Key but is not a CWT, then CRED_x SHALL be an untagged CCS.\"\r\n\r\n[Section 3.5.3]\r\n\r\n* s/the sender's credential/the message sender's credential\r\n\r\nGS: DONE\r\n\r\n* \"the integer representation of byte string identifiers in Section \r\n3.3.2 MUST be applied.\"\r\n\r\n \u00a0\u00a0 I think it would be clearer to say: \"the same representation used \r\nfor EDHOC connection identifiers and defined in Section 3.3.2 MUST be \r\napplied.\"\r\n\r\nGS: DONE\r\n\r\n[Section 3.6]\r\n\r\n* s/The MAC length MUST be/The EDHOC MAC length MUST be\r\n\r\nGS: DONE\r\n\r\n* s/independently of the cipher suite/independently of the selected \r\ncipher suite\r\n\r\nGS: DONE\r\n\r\n* \"Note that AES-CCM-16-64-128 and AES-CCM-16-64-128 are compatible with \r\nthe IEEE CCM* mode.\"\r\n\r\n \u00a0\u00a0 This should be: \"Note that AES-CCM-16-64-128 and AES-CCM-16-128-128 \r\nare compatible with the IEEE CCM* mode.\"\r\n\r\nGS: DONE\r\n\r\n\r\n[Section 3.8]\r\n\r\n* \"If an endpoint receives a critical EAD item it does not recognize or \r\na critical EAD item that contains information that it cannot process, \r\nthe EDHOC protocol MUST be discontinued.\"\r\n\r\n \u00a0\u00a0 Must an EDHOC error message also be sent before discontinuing the \r\nprotocol?\r\n\r\n \u00a0\u00a0 Is it something that must be specified by the \r\napplication/specification that defines the EAD item and its processing \r\nwhen used as critical?\r\n\r\n \u00a0\u00a0 See also later comments about Section 5.x on sending an EDHOC error \r\nmessage if any processing step fails.\r\n\r\nGS: NOT DONE - pending merging PR about EAD padding\r\n\r\n[Section 3.9]\r\n\r\n* \"For some parameters, ... the receiver is able to verify compliance \r\nwith the application profile\"\r\n\r\n \u00a0\u00a0 It's better to explicitly say \"the receiver of an EDHOC message\". \r\nLater on in the same section, it occurs again in \"the receiver need to \r\nbe able to determine ...\"\r\n\r\nGS: DONE\r\n\r\n* \"Other conditions may be part of the application profile, such as \r\ntarget application or use (if there is more than one application/use) to \r\nthe extent that EDHOC can distinguish between them.\"\r\n\r\n \u00a0\u00a0 Proposed rephrasing: \"Other conditions may be part of the \r\napplication profile, such as the different target application or use (if \r\nthere is more than one application/use), in which case EDHOC needs to be \r\nable to distinguish between them.\"\r\n\r\n\r\nGS: I did not do the change in second part since that is removing an important remark (that EDHOC may not be able to distinguish different uses) and since the proposed new formulation is duplicating the content of the following sentence. \r\nNEW\r\nOther conditions may be part of the application profile, such as what is the \r\ntarget application or use (if there is more than one application/use) to the extent that EDHOC can distinguish between them.\r\n\r\n\r\n* \"for example based on URI or external authorization data type.\"\r\n\r\n \u00a0\u00a0 What URI? I guess this means the URI pointing to an EDHOC resource \r\nwhere an EDHOC message is sent. In that case, an application profile is \r\nassociated with one or more EDHOC resources, identified by the \r\ncorresponding URIs and targeted by the EDHOC messages sent to that node.\r\n\r\nGS: Changed \"URI\" to \"URI to which the EDHOC message is sent\"\r\n\r\n[Section 4.1.2]\r\n\r\n* In the bullet list above Figure 7, the description of \"key_length\" and \r\nof \"iv_length\" should also conclude with \"of the selected cipher suite\", \r\njust like for \"hash_length\".\r\n\r\nGS: DONE\r\n\r\n[Section 5.1]\r\n\r\nLet's say that we have: the Initiator acting as CoAP client and not \r\nsupporting EDHOC message_4; and the Responder that instead supports \r\nEDHOC message_4.\r\n\r\nEventually, the Initiator sends EDHOC message_3. Since the Initiator \r\ndoes not support EDHOC message_4, it moves to a protocol state where the \r\nonly expected, next EDHOC message is an EDHOC error message.\r\n\r\nThen, the Responder sends back EDHOC message_4 as a response. This is \r\nnot wrong to do per se. In fact, an application profile can say that \r\nmessage_4 shall be sent, but it cannot really say that it shall not be \r\nsent. Besides, the Initiator might generally not be aware of the \r\napplication profile.\r\n\r\nThis is actually only a specific example of something more general. That \r\nis, what should the Initiator do after having sent EDHOC message_3, if \r\nit receives as a reply something not expected as per its current \r\nprotocol state?\r\n\r\nThis is still a processing failure (see second from last paragraph of \r\nSection 5.1). However, should the Initiator still send an EDHOC error \r\nmessage and thus discontinue EDHOC even in this case where the protocol \r\nis basically complete?\r\n\r\nI believe the answer is \"no, it should be fine with that, unless there \r\nis a very strong reason to do otherwise.\" In that spirit, I propose to \r\nextend the second from last paragraph of Section 5.1 with some text \r\nalong these lines:\r\n\r\n \u00a0\u00a0 \"After having sent EDHOC message_3, the Initiator remains ready to \r\npossibly receive as following EDHOC messages: i) EDHOC message_4 or an \r\nEDHOC error message, if the Initiator supports EDHOC message_4; or ii) \r\nan EDHOC error message, if the Initiator does not support EDHOC message_4.\r\n\r\n \u00a0\u00a0 If, after having sent EDHOC message_3, the Initiator receives an \r\nEDHOC message that does not match with what it expects or that results \r\nin a processing failure, then the Initiator SHOULD NOT send an EDHOC \r\nerror message and SHOULD NOT discontinue the EDHOC protocol. An \r\nexception applies in case the Initiator supports EDHOC message_4 and is \r\naware of the application profile that states that EDHOC message_4 shall \r\nbe sent.\r\n\r\n \u00a0\u00a0 After having sent EDHOC message_4, the Responder remains ready to \r\npossibly receive a following EDHOC error message. If, after having sent \r\nEDHOC message_4, the Responder receives an EDHOC message that does not \r\nmatch with what it expects or that results in a processing failure, then \r\nthe Responder MUST NOT send an EDHOC error message and MUST NOT \r\ndiscontinue the EDHOC protocol.\"\r\n\r\nGS: I'll make this a separate thread.\r\n\r\n[Section 5.2.3]\r\n\r\n* \"If any processing step fails, the Responder MUST send an EDHOC error \r\nmessage back ...\"\r\n\r\n \u00a0\u00a0 Does \"processing\" cover also the actual EAD processing, or only the \r\nact of making EAD_1 available to the application?\r\n\r\nGS: TBD pending merging PR about EAD padding\r\n\r\n[Section 5.3.2]\r\n\r\n* \"The transcript hash TH_2 is a CBOR encoded bstr ...\"\r\n\r\n \u00a0\u00a0 Well, TH_2 as output of H() is simply raw bytes, i.e, not a CBOR \r\nitem. Only later on is a CBOR-encoded TH_2 used, e.g., when building \r\ncontext_2.\r\n\r\n \u00a0\u00a0 Then it should be ok to simply remove the quoted text.\r\n\r\nGS: DONE\r\n\r\n* \"Compute KEYSTREAM_2 as in ...\"\r\n\r\n \u00a0\u00a0 Here it's good to give a pointer to Appendix I \"Long PLAINTEXT_2\".\r\n\r\nGS: DONE\r\n\r\n* \"Verify Signature_or_MAC_2 using ...\"\r\n\r\n \u00a0\u00a0 It's worth mentioning that, after this step, the Initiator might \r\nhave to get back to processing some EAD items from EAD_2, that were \r\npreviously made available to the application but not (entirely) \r\nprocessed yet.\r\n\r\n \u00a0\u00a0 This is the case, e.g., if their processing requires to first \r\nachieve proof-of-possession of the Responder's private key, which \r\nhappens after having successfully verified Signature_or_MAC_2.\r\n\r\nGS: DONE\r\n\r\n* \"If any processing step fails, the Initiator MUST send an EDHOC error \r\nmessage back ...\"\r\n\r\n \u00a0\u00a0 Does \"processing\" cover also the actual EAD processing, or only the \r\nact of making EAD_2 available to the application?\r\n\r\nGS: Yes, processing also covers EAD processing\r\nGS: TBD pending merging PR about EAD padding\r\n\r\n\r\n[Section 5.4.2]\r\n\r\n* \"The transcript hash TH_3 is a CBOR encoded bstr ...\"\r\n\r\n \u00a0\u00a0 Like in a comment above, TH_3 as output of H() is simply raw bytes, \r\ni.e., not a CBOR item. Only later on is a CBOR-encoded TH_3 used, e.g., \r\nwhen building context_3.\r\n\r\n \u00a0\u00a0 Then it should be ok to simply remove the quoted text.\r\n\r\nGS: DONE\r\n\r\n* \"The transcript hash TH_4 is a CBOR encoded bstr ...\"\r\n\r\n \u00a0\u00a0 Like in the comment above, TH_4 as output of H() is simply raw \r\nbytes, i.e, not a CBOR item. Only later on is a CBOR-encoded TH_4 used, \r\ne.g., as input to EDHOC-KDF.\r\n\r\n \u00a0\u00a0 Then it should be ok to simply remove the quoted text.\r\n\r\nGS: DONE\r\n\r\n\r\n[Section 5.4.3]\r\n\r\n* \"Verify Signature_or_MAC_3 using ...\"\r\n\r\n \u00a0\u00a0 It's worth mentioning that, after this step, the Responder might \r\nhave to get back to processing some EAD items from EAD_3, that were \r\npreviously made available to the application but not (entirely) \r\nprocessed yet.\r\n\r\n \u00a0\u00a0 This is the case, e.g., if their processing requires to first \r\nachieve proof-of-possession of the Initiator's private key, which \r\nhappens after having successfully verified Signature_or_MAC_3.\r\n\r\n\r\nGS: DONE\r\n\r\n* \"If any processing step fails, the Responder MUST send an EDHOC error \r\nmessage back ...\"\r\n\r\n \u00a0\u00a0 Does \"processing\" cover also the actual EAD processing, or only the \r\nact of making EAD_3 available to the application?\r\n\r\nGS: TBD pending merging PR about EAD padding\r\n\r\n[Section 5.5.3]\r\n\r\n* \"If any processing step fails, the Initiator MUST send an EDHOC error \r\nmessage back ...\"\r\n\r\n \u00a0\u00a0 Does \"processing\" cover also the actual EAD processing, or only the \r\nact of making EAD_4 available to the application?\r\n\r\nGS: TBD pending merging PR about EAD padding\r\n\r\n[Section 6.3]\r\n\r\n* \"ERR_INFO is in this case denoted SUITES_R\"\r\n\r\n \u00a0\u00a0 This should be, e.g., \"In this case, ERR_INFO specifies SUITES_R\"\r\n\r\nGS: I didn\u2019t understand why \u201cspecifies\u201d is more clear than \u201cis denoted\u201d. Proposal:\r\nNEW\r\nIn this case, ERR_INFO = SUITES_R \r\n\r\n* \"SUITES_R MAY include a single cipher suite, i.e., be encoded as an int.\"\r\n\r\n \u00a0\u00a0 This should be \"SUITES_R MAY include a single cipher suite, in which \r\ncase it is encoded as an int.\"\r\n\r\nGS: DONE\r\n\r\n\r\n* \"selects its most preferred and the Responder sends an error with \r\nsupported cipher suites.\"\r\n\r\n \u00a0\u00a0 This should be \"selects its most preferred cipher suites and the \r\nResponder sends an error with its supported cipher suites.\"\r\n\r\nGS: DONE\r\n\r\n[Section 8.1]\r\n\r\n* \"A single session of EDHOC does not include negotiation of cipher suites\"\r\n\r\n \u00a0\u00a0 Perhaps do you mean \"a single exchange of two EDHOC messages\" ?\r\n\r\nGS: I think \u201csession\u201d is the right term here. We use that to describe a specific execution of the EDHOC protocol. The negotiation of cipher suites requires the discontinuation of one session and the start of a new, so it is not a single session of EDHOC.\r\n\r\n\r\n* \"... until the Initiator has verified an OSCORE message or message_4 \r\nfrom the Responder.\r\n\r\n \u00a0\u00a0 Like in Section 5.4.2, this should be: \"... until the Initiator has \r\nverified message_4 or a message protected with a derived application \r\nkey, such as an OSCORE message, from the Responder.\"\r\n\r\n\r\nGS: DONE\r\n\r\n[Section 8.3]\r\n\r\n* \"... so that a sufficient security level is maintained for \r\ncertificates, EDHOC, and the protection of application data.\"\r\n\r\n \u00a0\u00a0 Does \"certificates\" actually mean \"authentication credentials\"? Does \r\n\"EDHOC\" actually mean \"EDHOC executions\" or \"EDHOC messages\"?\r\n\r\nGS: Done, expanding \u201cEDHOC\u201d to \u201cthe EDHOC protocol\u201d\r\n\r\n\r\n[Section 8.8]\r\n\r\n* \"Note that part of KEYSTREAM_2 is also non-secret randomness as it is \r\nknown or predictable to an attacker.\"\r\n\r\n \u00a0\u00a0 Proposed rephrasing: \"Note that part of KEYSTREAM_2 does not enjoy \r\nnon-secret randomness either, as it is known or predictable to an attacker.\"\r\n\r\nGS: Not done, what is the issue with the current formulation? \"enjoy randomness\" seems not being a common phrasing.\r\n\r\n[Section 9]\r\n\r\n* Throughout the whole section:\r\n\r\n \u00a0\u00a0 - s/group name/registry group\r\n\r\n \u00a0\u00a0 - When mentioning a registration procedure, refer to RFC 8126 (to be \r\nadded as normative reference).\r\n\r\nGS: DONE\r\n\r\n\r\n[Section 9.7]\r\n\r\n* You can remove \"under the group name \"Well-Known URIs\"\".\r\n\r\n\r\nGS: DONE\r\n\r\n\r\n[Appendix A]\r\n\r\n* s/when OSCORE is used with EDHOC/when EDHOC is used to key OSCORE\r\n\r\nGS: DONE\r\n\r\n[Appendix A.2]\r\n\r\n* \"with response codes analogously to message_2\"\r\n\r\n \u00a0\u00a0 This should be: \"with response codes analogous to those of the \r\nresponse to message_2\".\r\n\r\n* \"In case of an error message in response to message_4, it is sent \r\nanalogously to errors in response to message_2.\"\r\n\r\n \u00a0\u00a0 This should be: \"In case of an error message sent as reply to \r\nmessage_4, it is sent analogously to an error message sent as reply to \r\nmessage_2.\"\r\n\r\nGS: DONE\r\n\r\n* s/See Figure 13/See Figure 13 for an example\r\n\r\nGS: DONE\r\n\r\n* s/See Figure 14/See Figure 14 for an example\r\n\r\nGS: DONE\r\n\r\n* s/to these messages/to the CoAP messages that transport an EDHOC \r\nmessage prepended by a connection identifier\r\n\r\nGS: DONE in singular\r\n\r\n[Appendix A.2.1]\r\n\r\n* \"When using EDHOC over CoAP for establishing an OSCORE Security \r\nContext, EDHOC error messages ...\"\r\n\r\n \u00a0\u00a0 The following text about error responses and response code applies \r\nalso in case EDHOC is used for keying something different than OSCORE.\r\n\r\n \u00a0\u00a0 Hence the sentence can be shortened as: \"When using EDHOC over CoAP, \r\nEDHOC error messages ...\"\r\n\r\nGS: DONE (in commit labelled A.1)\r\n\r\n[Appendix J]\r\n\r\n* \"The change of PRK_out causes a change to PRK_exporter and keys \r\nderived using EDHOC-Exporter.\"\r\n\r\n \u00a0\u00a0 This refers specifically to EDHOC-KeyUpdate, which certainly causes \r\na change to PRK_exporter, but not directly to existing keys previously \r\nderived using EDHOC-Exporter.\r\n\r\n \u00a0\u00a0 I would expect that existing application keys derived from the old \r\nPRK_exporter remain unchanged, at least at the end of EDHOC-KeyUpdate.\r\n\r\n \u00a0\u00a0 At the same time, the final goal of an application triggering \r\nEDHOC-KeyUpdate is practically to update application keys. So perhaps \r\nthe quoted sentence can be rephrased to say that:\r\n\r\n \u00a0\u00a0 i) the newly derived PRK_exporter is used from then on in order to \r\nderive new application keys with EDHOC-Exporter;\r\n\r\n \u00a0\u00a0 and\r\n\r\n \u00a0\u00a0 ii) current, existing application keys previously derived with \r\nEDHOC-Exporter can be re-derived using the new PRK_exporter. The newly \r\nderived applications keys supersed e the old ones.\u00a0When to delete the \r\nold application keys and how to verify that they are not needed is up to \r\nthe application.\r\n\r\nGS: DONE in paragraphs before and after pseudocode.\r\n\r\n\r\n[Nits]\r\n\r\n* Section 1.1:\r\n--- s/criteria/criterion\r\n--- s/prohibitive/prohibitively large\r\n\r\nGS: DONE\r\n\r\n* Section 2:\r\n--- s/Like (D)TLS/Like in (D)TLS\r\n--- s/the application, EDHOC/the application. EDHOC\r\n\r\nGS: DONE\r\n\r\n* Section 3.2:\r\n--- s/indicate protocol/indicate the protocol\r\n\r\nGS: DONE\r\n\r\n* Section 3.3:\r\n--- s/or in subsequent/or may be used in subsequent\r\n\r\nGS: Did \u201cor may be used in\u201d\r\n\r\n--- s/CBOR ints/CBOR integers\r\n\r\nGS: DONE and other similar\r\n\r\n--- s/associated to the/associated with the\r\n\r\nGS: DONE and other similar\r\n\r\n* Section 3.3.2:\r\n--- s/encoding: A byte/encoding: a byte\r\n--- s/message, a byte string which doesn't/message; a byte string which \r\ndoes not\r\n--- s/representation it can/representation, it can\r\n\r\nGS: DONE\r\n\r\n* Section 3.3.3:\r\n--- s/results in same/results in the same\r\n\r\nGS: DONE\r\n\r\n* Section 3.4:\r\n--- s/In addition to transport/In addition to the transport\r\n\r\nGS: DONE\r\n\r\n* Section 3.5.1:\r\n--- s/Note that for most signature/Note that, for most signature\r\n\r\nGS: Not done. There are multiple occurrences of this, but it is consequently without comma. Either we change none or all, and I\u2019m currently inclined to do none.\r\n\r\n--- s/keys are denoted I/keys are denoted as I\r\n\r\nGS: DONE\r\n\r\n* Section 3.5.3:\r\n--- s/within EDHOC, for example/within EDHOC. For example\r\n\r\nGS: DONE\r\n\r\n* Section 3.6:\r\n--- s/follows from COSE/follow from COSE\r\n\r\nGS: DONE\r\n\r\n* Section 3.7:\r\n--- s/In COSE compact/In COSE, compact\r\n\r\nGS: DONE\r\n\r\n* Section 3.8:\r\n--- s/registers their own/registers its own\r\n--- s/non-critical, determined by/non-critical, as determined by\r\n\r\nGS: Not done yet - pending merge of EAD-padding PR\r\n\r\n* Section 3.9:\r\n--- s/because of wrong/because of a wrong\r\n\r\nGS: Not done, I think the current formulation is fine\r\n\r\n--- s/uses public/uses a public\r\n\r\nGS: DONE\r\n\r\n* Section 4.1.2:\r\n--- s/is used is specified/is used are specified\r\n\r\nGS: DONE\r\n\r\n* Section 5.1\r\n--- s/associated to an/associated with an\r\n\r\nGS: DONE\r\n\r\n* Section 5.4.2:\r\n--- s/for acknowledgement/for an acknowledgement\r\n\r\nGS: DONE\r\n\r\n* Section 5.5:\r\n--- s/of such deployments:/of such deployments are:\r\n\r\nGS: DONE\r\n\r\n* Section 6:\r\n--- s/Errors messages in EDHOC/Error messages in EDHOC\r\n--- s/associated to the/associated with the\r\n\r\nGS: DONE\r\n\r\n* Section 6.3.2:\r\n--- s/so therefore selects/therefore it selects\r\n\r\nGS: Not done, I think the current formulation is fine\r\n\r\n--- s/The initiator prepends/The Initiator prepends\r\n\r\nGS: DONE and other similar\r\n\r\n* Section 7\r\n--- s/differ in size of/differ in the size of\r\n\r\nGS: DONE\r\n\r\n--- s/is no essential difference/is of no essential difference\r\n\r\nGS: Not done, I think the current formulation is fine\r\n\r\n\r\n* Section 8.1\r\n--- s/and send its own/and then sending its own\r\n\r\nGS: DONE\r\n\r\n--- s/Either of these provide/Both of them provide\r\n\r\nGS: I want it to be clear that either one or the other of these methods, independently of each other, provides this property. \u201cboth of them\u201d is less clear and may be confused with that both are needed to provide the property. I only fixed the grammar. \r\n\r\n--- s/in the application protocol fail/in the application protocol fails\r\n\r\nGS: Done in separate commit\r\n\r\n* Section 8.2\r\n--- s/future EHDOC methods/future EDHOC methods\r\n\r\nGS: DONE and other similar\r\n\r\n* Section 8.3\r\n--- s/whole authentication credential/whole authentication credentials\r\n\r\nGS: DONE\r\n\r\n* Section 8.5\r\n--- s/update the connection identifier/update the connection identifiers\r\n\r\nGS: DONE\r\n\r\n* Section 8.6\r\n--- s/An passive attacker/A passive attacker\r\n\r\nGS: DONE\r\n\r\n* Section 8.8\r\n--- s/PNRG/PRNG\u00a0 (2 occurrences)\r\n\r\nGS: DONE\r\n\r\n--- s/to select its connection identifiers/to select the connection \r\nidentifier\r\n\r\nGS: DONE\r\n\r\n--- s/ongoing EDHOC protocol/ongoing EDHOC protocol execution\r\n\r\nGS: Not done, I think the current formulation is fine\r\n\r\n--- s/sets that will be/sets will be\r\n\r\nOLD\r\nwhich of the parameter sets that will be used \r\nNEW\r\nwhich parameter set that will be used \r\n\r\n--- s/do not make use/does not make use\r\n\r\nGS: DONE\r\n\r\n--- s/hash, this/hash. This\r\n\r\nGS: DONE\r\n\r\n* Section 9.11\r\n--- s/Expert should consider/Experts should consider\r\n\r\nGS: DONE\r\n\r\n* Appendix A.2.1\r\n--- s/EDHOC and OSCORE protocols/the EDHOC and OSCORE protocols\r\n\r\nGS: DONE\r\n\r\n* Appendix C\r\n--- s/to simplify for implementors/to help implementors\r\n\r\nGS: DONE\r\n\r\n\r\n* Appendix C.1\r\n--- s/occurrance/occurrence\r\n\r\nGS: DONE in other commit\r\n\r\n* Appendix D.2\r\n--- s/associated to the/associated with the\r\n\r\nGS: DONE\r\n\r\n\r\n* Appendix E\r\n--- s/external authorization related data/related external authorization \r\ndata\r\n\r\nGS: DONE\r\n\r\n\r\n* Appendix F\r\n--- s/with value empty/with value the empty\r\n\r\nGS: DONE\r\n\r\n* Appendix G\r\n--- s/acknowledgement on CoAP messaging layer/acknowledgement on the \r\nCoAP messaging layer\r\n\r\nGS: DONE\r\n\r\n--- s/processing on CoAP messaging layer/processing on the CoAP \r\nmessaging layer\r\n\r\nGS: DONE\r\n\r\n--- s/differences which compromises/differences which compromise\r\n\r\nGS: DONE\r\n\r\n* Appendix I\r\n--- s/algorithm the length/algorithm, the length\r\n\r\nGS: DONE\r\n\r\n",
          "createdAt": "2022-11-22T21:53:21Z",
          "updatedAt": "2022-11-22T21:53:21Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, it looks good!\r\n\r\nPlease see my replies on two specific points in the separate comments below.\r\n\r\nI understand that what is still open includes:\r\n\r\n* Handling critical failure of EAD processing (Sections 3.8, 5.2.3, 5.3.3, 5.4.3 and 5.3.3).\r\n\r\n* Exceptions to discontinuing the protocol after having sent message_3 (Section 5.1).",
          "createdAt": "2022-11-23T09:36:05Z",
          "updatedAt": "2022-11-23T09:40:28Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "> [Section 8.1]\r\n> \r\n> \"A single session of EDHOC does not include negotiation of cipher suites\"\r\n> \r\n> Perhaps do you mean \"a single exchange of two EDHOC messages\" ?\r\n> \r\n> GS: I think \u201csession\u201d is the right term here. We use that to describe a specific execution of the EDHOC protocol. The negotiation of cipher suites requires the discontinuation of one session and the start of a new, so it is not a single session of EDHOC.\r\n\r\n\r\nSo far, I've always seen an \"EDHOC execution\" as consisting of \"message exchanges\" and \"message processing\", during which an associated \"session\" is built and referred to.\r\n\r\nIf \"session\" has to be intended as a specific \"EDHOC execution\" as a whole (and not just an incrementally built environment associated with it), maybe it's better to give an early definition of \"session\".",
          "createdAt": "2022-11-23T09:37:30Z",
          "updatedAt": "2022-11-23T09:37:30Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "> [Section 8.8]\r\n> \r\n> \"Note that part of KEYSTREAM_2 is also non-secret randomness as it is known or predictable to an attacker.\"\r\n> \r\n> Proposed rephrasing: \"Note that part of KEYSTREAM_2 does not enjoy non-secret randomness either, as it is known or predictable to an attacker.\"\r\n> \r\n> GS: Not done, what is the issue with the current formulation? \"enjoy randomness\" seems not being a common phrasing.\r\n\r\nTrimming the original sentence, I can't parse \"part of KEYSTREAM_2 is non-secret randomness\". I think my problem here is seeing the verb \"is\": while KEYSTREAM_2 is a \"thing\", randomness is a possible property of that thing.\r\n\r\nPerhaps you mean \"does not have secret randomness\" (better suggestion than \"enjoy\"), or \"is not secretly random\".",
          "createdAt": "2022-11-23T09:38:44Z",
          "updatedAt": "2022-11-23T09:38:44Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "[Section 8.8]\r\n\r\nThe term may be confusing, but it is used in the literature, e.g. in Krawczyk's paper on The HKDF Scheme (https://eprint.iacr.org/2010/264.pdf):\r\n\r\n> the use of the KDF for generating non-secret randomness, such as IVs.\r\n\r\nAlso in this case, \"non-secret randomness\" is referring to a \"thing\", namely an IV. Since the text in the draft is related to the discussion in the literature it is favorable if we can use the same terminology.",
          "createdAt": "2022-11-23T17:05:51Z",
          "updatedAt": "2022-11-23T17:05:51Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "> Since the text in the draft is related to the discussion in the literature it is favorable if we can use the same terminology.\r\n\r\nThanks, I agree. With that context in mind, \"KEYSTREAM_2 is also non-secret randomness\" is just fine then.",
          "createdAt": "2022-11-23T18:05:15Z",
          "updatedAt": "2022-11-23T18:05:15Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "[Section 8.1]\r\n\r\nYes, multiple terms are used. There was a change from \"protocol instance\" to \"session\", and that has also been used in the security analysis. The terms are \"EDHOC exchange\" and \"protocol execution\" also makes sense to keep in certain instances. I added session early in the text and also made some related changes in a separate PR #368\r\n\r\n Does this address your comment?\r\n",
          "createdAt": "2022-11-24T08:29:06Z",
          "updatedAt": "2022-11-24T08:29:06Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "> [Section 8.1]\r\n> ...\r\n> Does this address your comment?\r\n\r\nYes, that looks good. Thanks!",
          "createdAt": "2022-11-24T08:46:52Z",
          "updatedAt": "2022-11-24T08:46:52Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "[Section 5.1]\r\n\r\nI agree with the general aim of this comment. Let's see what if any needs to be rephrased. \r\n\r\nIf the Initiator successfully completed its part of the message exchange there is no protocol to discontinue and therefore no reason to send error. Is this what needs to be clarified?\r\n\r\nEDHOC requires certain parameters to be agreed upon between Initiator and Responder, including if message_4 shall be sent/expected. So from that point of view the Initiator should know if it has completed the protocol or not.\r\n\r\n(If need to describe a change after message exchange is completed then \"terminate session\" is probably better terminology than \"discontinue protocol\".)\r\n",
          "createdAt": "2022-11-24T08:54:18Z",
          "updatedAt": "2022-11-24T08:55:20Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I made two more commits on PR #370.\r\n\r\n* In the interest of harmonizing the terminology I went for \"discontinue protocol\" which is frequently used. \r\n* I tried to capture Marco's comment on 5.1.\r\n\r\n@emanjon @marco-tiloca-sics Please review",
          "createdAt": "2022-11-25T07:29:30Z",
          "updatedAt": "2022-11-25T07:29:30Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as #370 is merged",
          "createdAt": "2022-11-25T13:01:47Z",
          "updatedAt": "2022-11-25T13:01:47Z"
        }
      ]
    },
    {
      "number": 348,
      "id": "I_kwDOEItXAM5VY6rw",
      "title": "Denial-of-service mitigation by increasing size of message_1",
      "url": "https://github.com/lake-wg/edhoc/issues/348",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "The Denial-of-Service text in EDHOC mentions Echo. Another way to mitigate Denial-of-service used by QUIC is to intentionally increase the size of message_1. Can be done by adding `? PAD_1` or by sending a dummy `EAD`. I think the document should at least mention the use of EAD_1 as a way to prevent Denial-of-Service.",
      "createdAt": "2022-11-02T06:50:43Z",
      "updatedAt": "2022-11-25T09:26:55Z",
      "closedAt": "2022-11-25T09:26:55Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "```\r\n   message_1 = (\r\n     METHOD : int,\r\n     SUITES_I : suites,\r\n     G_X : bstr,\r\n     C_I : bstr / -24..23,\r\n     ? EAD_1 : ead,\r\n   )\r\n```\r\n\r\nThree alternatives to make message_1 bigger\r\n\r\n1. Add `? PAD_1 `\r\n2. Add a lot of suites to `SUITES_I`\r\n3. Add a padding `EAD_1 `\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2022-11-03T08:34:26Z",
          "updatedAt": "2022-11-03T08:34:26Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think EAD_1 is a good way to go. I plan to make a PR discussing amplification and the solution of making message_1 bigger mentioning the EAD alternative.",
          "createdAt": "2022-11-03T08:35:12Z",
          "updatedAt": "2022-11-03T08:35:12Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "If a EAP padding type would be registered, it could be arguee that ? PAD_2, ? PAD_3, and ? PAD_4 is not needed.\r\n\r\n```\r\n   ead = 1* (\r\n     ead_label : int,\r\n     ead_value : bstr,\r\n   )\r\n```\r\n\r\nNote that with EAD, padding is minimum 2 bytes. I.e., 1 byte padding is not possible.\r\n",
          "createdAt": "2022-11-03T08:58:05Z",
          "updatedAt": "2022-11-03T14:25:56Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Just like for any other EAD items, if we use a new EAD_1 item for padding message_1, this item will also have to be handed off to \"the application\" for processing external to EDHOC, where it can be treated as padding and ignored.\r\n\r\nIn the other EDHOC messages, padding and its addition/removal does pertain to the core EDHOC message processing. That's why using PAD_1 can actually be better and more aligned with how padding is done already in other messages.\r\n\r\nA good value for PAD_1 would be a sequence of CBOR simple value \"true\", like for the other PAD_X. A good position for it would be after C_I, i.e., before the EAD_1 field (if present).",
          "createdAt": "2022-11-03T17:03:30Z",
          "updatedAt": "2022-11-03T17:03:30Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the quick input Marco. Let's discuss at IETF 115. G\u00f6ran pointed out that this issue might be related to #275\r\n\r\n@chrysn\r\n",
          "createdAt": "2022-11-03T17:24:30Z",
          "updatedAt": "2022-11-03T17:25:30Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Unfortunately, we missed to discuss this in the LAKE meeting yesterday.\r\n\r\nAnyone against having optional padding after C_I in message_1?\r\n\r\nUsing the same encoding as for the other padding: PAD_1 = 1* true\r\n\r\n\r\n\r\n",
          "createdAt": "2022-11-09T14:18:48Z",
          "updatedAt": "2022-11-09T21:38:34Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This would need some discussion.\r\n\r\n- Adding `PAD_1 = 1* true` is a change to the wire format\r\n- Addding a padding EAD seems like a perfect fit for Christians use case in #275.\r\n- Having two ways to do padding is probably not optimal.\r\n- As Marco points out, sending padding to the application is a bit strange. But would maybe be exactly what Christian is looking for.\r\n\r\nMaybe we could have a meeting with all interested parties already during IETF 115?\r\n",
          "createdAt": "2022-11-09T14:27:08Z",
          "updatedAt": "2022-11-09T14:27:08Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\nHiya,\r\n\r\nMaybe take this topic to the list?\r\n\r\nTa,\r\nS.\r\n\r\nOn 09/11/2022 14:27, John Preu\u00df Mattsson wrote:\r\n> This would need some discussion.\r\n> \r\n> - Adding `PAD_1 = 1* true` is a change to the wire format\r\n> - Addding a padding EAD seems like a perfect fit for Christians use case in #275.\r\n> - Having two ways to do padding is probably not optimal.\r\n> - As Marco points out, sending padding to the application is a bit strange. But would maybe be exactly what Christian is looking for.\r\n> \r\n> Maybe we could have a meeting with all interested parties already during IETF 115?\r\n> \r\n> \r\n",
          "createdAt": "2022-11-09T14:53:30Z",
          "updatedAt": "2022-11-09T14:53:30Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> Maybe take this topic to the list?\r\n\r\nYes, we have already agreed that this was missed yesterday and that we will take it to the list soon (today or tomorrow). We might have some offline discussions before so that we can summarize the issue better to the list.",
          "createdAt": "2022-11-09T15:10:11Z",
          "updatedAt": "2022-11-09T15:10:11Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "An ad-hoc group at IETF 115  (Marco, Mali\u0161a, John and me) discussed this. We think this feature is well motivated and propose to add \r\n\r\n> PAD_1 = 1* true \r\n\r\nbefore ? EAD_1 at the end of message_1:\r\n \r\n> ...\r\n  C_I : bstr / -24..23,\r\n  ? PAD_1 : 1* true,\r\n  ? EAD_1 : ead,\r\n)\r\n\r\nWhile this is changing message_1 and thereby changing implementations, it is a minor optional feature only mandatory to support in the receiver, and no impact on current test vectors.\r\n\r\nThe alternative to use EAD instead is possible but not preferred since EAD belongs to the application. Even if we would reserve, say, ead_label 0 for this purpose, it means that EDHOC need to search for one among potentially several EAD items for this label, which we think is out of scope for EDHOC. Since #275 was closed it is not clear that additional support for that issue is really needed.\r\n\r\nThe proposed format using the CBOR simple type 'true' coincides with the definition of padding in the other messages, though here used for a different purpose (not to hide length of non-padding since message_1 is not encrypted).\r\n\r\nThe location of this field in message_1 was discussed and this proposal was considered least intrusive. There was resistance against having an optional field first, where there also is a potential confusion with the prepended 'true' marking message_1. Out of the two optional fields it was preferred to have this first since it is easy to discard if present.\r\n\r\nIt was a discussion about changing one of the uses of 'true' (prepended byte, padding) to another CBOR simple type, but with this location of PAD_1 there is no risk for confusion. (If you think that is worth doing, this is the moment to speak up!)\r\n\r\nMore input is welcome (even if it is just thumbs up).\r\n\r\n",
          "createdAt": "2022-11-10T07:57:17Z",
          "updatedAt": "2022-11-10T07:57:17Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that the normative statements about padding extends to message_1, but I propose to remove \"of plaintext\" to emphasize the change. Although message_1 is not encrypted, the term PLAINTEXT is only used in the encrypted messages message_2, message_3, message_4.\r\n\r\nOLD\r\nImplementations MAY support padding of plaintext when sending messages. Implementations MUST support padding of plaintext when receiving messages, i.e., MUST be able to parse padded messages.\r\n\r\nNEW\r\nImplementations MAY support padding when sending messages. Implementations MUST support padding when receiving messages, i.e., MUST be able to parse padded messages.\r\n\r\n(The change is already made in PR #357.)",
          "createdAt": "2022-11-10T08:00:53Z",
          "updatedAt": "2022-11-10T08:00:53Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "I don't quite understand the rationale of doing this as an extra thing in the protocol rather than using the perfectly viable EAD1 path (which, by the way, works already, thanks to must-understand and optional numbers).\r\n\r\nThe distinction between \"belongs to the application\" and \"is part of the protocol\" sounds rather arbitrary to me, given that by the allocated numbers EADs support composition. Just the way options work in CoAP. Creating a smooth path for amplification mitigation may be implemented as part of the EDHOC library, or (if the EDHOC library is completely unaware of where the EDHOC messages are sent through, which conceptually it can) as part of the application (which is the authority on what is actually needed), or as part of some middleware that glues the two together; that's the beauty of composability.\r\n\r\nI think that addresing this in EAD would be the better choice. (Especially given that it'd be beneficial to have a (or some) \"grease\" EAD option(s) around in the style of [RFC8701](https://www.rfc-editor.org/rfc/rfc8701), and these could just as well share code points).",
          "createdAt": "2022-11-11T11:06:53Z",
          "updatedAt": "2022-11-11T11:06:53Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with Christian. My preference would be to do this with EAD and remove PAD.",
          "createdAt": "2022-11-11T12:44:13Z",
          "updatedAt": "2022-11-11T12:44:13Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Although I tend to see the PAD_1 approach simpler and more intuitive, using an EAD item is also just fine.\r\n\r\nAdmittedly, I wasn't thinking of the greasing aspect (thanks, @chrysn !), or to mandate support for EAD items altogether (like [1] does, together with consistently applying the same padding approach to all the EDHOC non-error messages).\r\n\r\nSo let's go for EAD-based padding then :-) Isn't it good to just go for ead_label 0?\r\n\r\n\r\n[1] https://github.com/lake-wg/edhoc/pull/360/files",
          "createdAt": "2022-11-11T15:58:53Z",
          "updatedAt": "2022-11-11T15:58:53Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "So we have changed this back and forth a couple of times. What convinced me about using EAD for padding was that it is ultimately the application of EDHOC that is in control of EAD_x (which are critical to determine the amplification factor and length of PLAINTEXT_x) and thus can determine the necessary padding in messages 1 to 4. So it might just as well produce the padding itself (in EAD_x) rather than asking EDHOC to do it, which complicates EDHOC and the call. ",
          "createdAt": "2022-11-11T17:38:33Z",
          "updatedAt": "2022-11-11T17:38:33Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #360 is merged",
          "createdAt": "2022-11-25T09:26:55Z",
          "updatedAt": "2022-11-25T09:26:55Z"
        }
      ]
    },
    {
      "number": 350,
      "id": "I_kwDOEItXAM5VaB4f",
      "title": "Add references to various security analyses EDHOC has seen and their insights",
      "url": "https://github.com/lake-wg/edhoc/issues/350",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Given the various security analyses EDHOC has seen and their insights \r\nbeing discussed in Section 8, would it make sense to add informative \r\nreferences to those (as done, e.g., for TLS 1.3, RFC 8446 Appendix E)?\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/lake/3tVDWBtI-NdciJtq7Re7y8KwYq8/",
      "createdAt": "2022-11-02T10:24:40Z",
      "updatedAt": "2022-12-16T17:04:29Z",
      "closedAt": "2022-12-16T17:04:28Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems like a good idea to me",
          "createdAt": "2022-11-02T10:24:56Z",
          "updatedAt": "2022-11-02T10:24:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Related to #343",
          "createdAt": "2022-11-02T10:28:37Z",
          "updatedAt": "2022-11-02T10:28:37Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This was discussed on the IETF 116 LAKE WG meeting, and in absence of volunteers to draft such an appendix we decided to start with adding references.\r\n\r\nWe may want to go somewhere in between a whole appendix and a sentence, and expand with a paragraph about each reference. We still need someone to draft that paragraph for the different references and would like to conclude on this fairly soon. \r\n\r\nWe start by merging #343 now.\r\n\r\n\r\n ",
          "createdAt": "2022-11-24T10:11:21Z",
          "updatedAt": "2022-11-24T10:11:21Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing since #382 is merged.",
          "createdAt": "2022-12-16T17:04:28Z",
          "updatedAt": "2022-12-16T17:04:28Z"
        }
      ]
    },
    {
      "number": 351,
      "id": "I_kwDOEItXAM5VhOMD",
      "title": "Consider chancing sentence on when changes to Changes in message_1 and message_2 are detected.",
      "url": "https://github.com/lake-wg/edhoc/issues/351",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "PR exists"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/Jwiuox0Nu46MhG14Qo-BLKx8ezM/\r\n\r\nHi all,\r\n\r\nFollowing our previous analysis of the draft 12 and 14, we have now \r\nupdated our models w.r.t. draft 17, making a full pass over both the \r\nprotocol changes as well as the security considerations mentioned \r\nthrough out the draft.\r\n\r\nOverall, there is a last security claim that is slightly wrong from a \r\ntheoretical point of view, but in practice does not bear consequences. \r\nWe detail it bellow. Otherwise, our automated analysis was not able to \r\nfind any other weakness, so we hope that with respect to state of the \r\nart analysis techniques, the protocol is in a pretty good shape.\r\n\r\nIt concerns the following point, page 42:\r\n     \"Changes in message_1 and message_2 (except PAD_2) are detected \r\nwhen verifying Signature_or_MAC_2. \"\r\nThis claim in fact dependson the security level of the signature scheme \r\nused. Assume that we have a signature scheme such that given \r\n\"Sign(m,sk)\", the signature of message m with secret key sk,  there \r\nexists a constant \"c\" such that \"Sign(m,sk) XOR c\" is also a valid \r\nsignature for the same message m under sk. This is *not*a violation of \r\nthe classical assumption over signatures (EUFCMA), and with such a \r\nsignature scheme, an attacker could then change the content of \r\nmessage_2, by xoring the signature part with the constant c, and this \r\nchange would not be detectedafter verifying the signature, and would \r\nonly be caught on a message 4 or key confirmation.\r\n\r\nThis is only a theoretical attack, relying on the difference between the \r\nclassical cryptographic assumption EUF-CMA, a signature authenticates \r\nonly the underlying message, while underthe stronger SUF-CMAassumption, \r\na signature authenticates both the underlying message and the signature \r\nitself.Noneof the concrete signature scheme currently standardized \r\nappears to bemalleable under xor. We report it for thoroughness, but are \r\nuncertain whether the sentence should be changedor not.\r\n\r\nBest,\r\nCharlie Jacomme, Elise Klein,Steve KremerandMa\u00efwenn Racouchot.",
      "createdAt": "2022-11-03T14:38:21Z",
      "updatedAt": "2022-11-08T17:11:54Z",
      "closedAt": "2022-11-08T17:11:54Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> and would only be caught on a message 4 or key confirmation.\r\nI think this would be caught when verifying CIPHERTEXT_3",
          "createdAt": "2022-11-07T13:54:02Z",
          "updatedAt": "2022-11-07T13:54:02Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The PR looks fine to me! \r\n\r\nWhen mentioning message 4 or key confirmation, I was specifying when the change would be detected on the initiator side, but the responder would indeed detect it when verifying CIPHERTEXT_3.",
          "createdAt": "2022-11-07T14:10:09Z",
          "updatedAt": "2022-11-07T14:10:09Z"
        }
      ]
    },
    {
      "number": 352,
      "id": "I_kwDOEItXAM5VlGKV",
      "title": "WGLC comments from Rafa Marin-Lopez on RPK notation and key update",
      "url": "https://github.com/lake-wg/edhoc/issues/352",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/_tSTR3oa3jUZDp16fPkQgz_APWo/\r\n\r\n\r\nI have been reading v17 and sent some comments to the authors, that I summarize here:\r\n\r\n1) - Regarding RPK, previous versions of the document had a more detailed explanation about RPK. For example, in version v06 you had \"The Initiator and the Responder MAY use different types of credentials, e.g. one uses an RPK and the other uses a public key certificate.\u201d So RPK is included as part of the definition of authentication credential. \r\n\r\nHowever, v17 may have a different meaning since it seems \u201ccredentials\" is defined as follows: \r\n\r\n\r\n\"EDHOC relies on COSE for identification of credentials (see Section 3.5.3), for example X.509 certificates [RFC5280], C509\r\n   certificates [I-D.ietf-cose-cbor-encoded-cert], CWTs [RFC8392] and\r\n   CWT Claims Sets (CCS) [RFC8392].  When the identified credential is a\r\n   chain or a bag, the authentication credential CRED_x is just the end\r\n   entity X.509 or C509 certificate / CWT. \r\n\r\nI assume RPK is also an authentication credential and this should be included in this text. A clarification would be worthy.\r\n\r\n2) I assume it is possible that any two IoT devices can act as initiator but also as a responder, even between same two peers. It is the application which decides when to start EDHOC (initiator) in a particular case, correct?\r\n\r\n\r\n3) It seems the EDHOC does not define any exchange for the key update (some sort of rekey). It seems an application at some point exchange some messages as \"some event that triggered the key update.\u201d Then the application call to EDHOC-KeyUpdate function to get a new PRK. Am I right? I am asking because looking at IKEv2, for example, and for the rekey, an exchange is required. Although it would add a little bit more complexity, wouldn\u2019t it be sensical that EDHOC defines a 1 RTT to exchange a couple of nonces for the rekeying. Moreover, this function is defined in an Appendix. Is it mandatory to implement?\r\n",
      "createdAt": "2022-11-04T09:28:50Z",
      "updatedAt": "2022-11-25T09:27:42Z",
      "closedAt": "2022-11-25T09:27:42Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "1. Yes. The document should talk about RPK a bit more as that is term that\r\npeople might search for. Should be explained that CWT is the format EDHOC\r\nuses for raw public keys (RPK).\r\n",
          "createdAt": "2022-11-08T13:35:52Z",
          "updatedAt": "2022-11-08T13:35:52Z"
        }
      ]
    },
    {
      "number": 353,
      "id": "I_kwDOEItXAM5Vpx2D",
      "title": "WGLC comment from Christian Ams\u00fcss",
      "url": "https://github.com/lake-wg/edhoc/issues/353",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/D-THUR-raS57JEfZjKFsMqFHl4M/\r\n\r\n\r\nThere is one minor piece of text I suggested at [141] that I think might\r\nhelp EAD specifiers (who might not know that \"we don't look into EDHOC\r\ninternals and key material, and the data we reveal is revealed by\r\ndesign, so we're good\" can be sufficient security analysis), but that's\r\nmerely a minor suggestion at this point.\r\n\r\nBest regards\r\nChristian\r\n\r\n[141]: https://github.com/lake-wg/edhoc/issues/141#issuecomment-1081500628",
      "createdAt": "2022-11-05T12:15:52Z",
      "updatedAt": "2022-12-19T16:12:06Z",
      "closedAt": "2022-12-19T16:12:06Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure it is possible to give sufficient high-level criteria that new EAD items are not causing substantial damage. This is one reason why there are several caveats in the draft about using EAD, and why new EAD items are \"specification required\".\r\n\r\nWe already state that EAD fields should be considered unprotected by EDHOC, so that should be expected. The EAD application should anyway not have access to secret internal keys of EDHOC, so I'm not sure that is necessary to state. The re-use of an EDHOC ephemeral key for other Diffie-Hellman operations is already done in EDHOC and lake-authz. \r\n\r\nWe may consider adding some non-complete guidance if that helps, but each new EAD specification needs to be reviewed, and I'm not sure there is any way around that.\r\n\r\nOther opinions?",
          "createdAt": "2022-11-23T18:44:33Z",
          "updatedAt": "2022-11-24T14:28:52Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see how we would be able to write something perfect here. I think it needs to be up to the specification of the EAD item",
          "createdAt": "2022-12-17T11:03:25Z",
          "updatedAt": "2022-12-17T11:03:25Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this now. We can re-open if there are further comments.",
          "createdAt": "2022-12-19T16:12:06Z",
          "updatedAt": "2022-12-19T16:12:06Z"
        }
      ]
    },
    {
      "number": 354,
      "id": "I_kwDOEItXAM5Vpx5p",
      "title": "WGLC comments from Mali\u0161a Vu\u010dini\u0107",
      "url": "https://github.com/lake-wg/edhoc/issues/354",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/cDbLGYIGEZ6Z36VoaHwR6HDIRKs/\r\n\r\n\r\nHi all,\r\n\r\nI am sending below a couple of points and nits I found when reading the draft top to bottom. Generally, I find the draft in a good shape to proceed with publication. \r\n\r\nOne point I would like to discuss is whether it would be useful to specify a protocol state machine in this draft. Different steps related to message and error processing are scattered throughout the Section 5, but it would be very useful from the implementor\u2019s point of view to have the valid states summarized and illustrated through a figure. I guess something similar to Appendix A of RFC 8446 would be nice.\r\n\r\nAnother point that introduced confusion for me when implementing this draft is whether the transcript hashes should be CBOR wrapped.  For example, in Section 5.3.2. TH_2 is first defined as the output of the hash function TH_2 = H( G_Y, C_R, H(message_1) ), only to be followed by the sentence saying \"The transcript hash TH_2 is a CBOR encoded bstr\u201d. I find confusing here whether the definition of TH_2 includes the CBOR byte string wrapping or not, which is important for further uses of transcript hashes in the derivation of the keying material. Same applies for TH_3 and TH_4. It is worthwhile to note here that we interop\u2019d using raw values of transcript hashes without CBOR byte string wrapping. If this is the way the transcript hashes were intended to be defined, then I do not understand the purpose of the quoted sentence.\r\n\r\nI also noted a couple of remnants that seem to be already signaled in github, remnant in issue #346 on transcript hash, and the inconsistent use of session key terminology (PRK_out vs session key) signaled by Charlie Jacomme. \r\n\r\nMinor nits to be fixed (possibly already signaled by others):\r\n\r\n\u201cSection 1.1: EDHOC is designed for highly constrained settings making it especially suitable for low-power wide area networks [RFC8376] such as Cellular IoT, 6TiSCH, and LoRaWAN. \u201c\r\nNote that 6TiSCH is not a wide area network. Removing \u201cwide area\u201d from the quoted sentence, i.e. saying \u201clow-power networks\u201d would work.\r\n\r\n- Section 3.3.1: s/communications/communication\r\n- Section 3.7: s/COSE always use/COSE always uses\r\n- Section 3.8: s/need to register/needs to register\r\n- Section 6: s/Errors messages in EDHOC/Error messages in EDHOC\r\n- Section 8.2: s/EHDOC/EDHOC\r\n\r\nThat would be it, congrats to the author team for getting the specification to this shape. Finally, apologies for sending this review a morning after the deadline!\r\n\r\nMali\u0161a",
      "createdAt": "2022-11-05T12:16:48Z",
      "updatedAt": "2022-11-28T21:59:08Z",
      "closedAt": "2022-11-28T21:59:08Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": ">One point I would like to discuss is whether it would be useful to specify a protocol state machine in >this draft. Different steps related to message and error processing are scattered throughout the >Section 5, but it would be very useful from the implementor\u2019s point of view to have the valid states >summarized and illustrated through a figure. I guess something similar to Appendix A of RFC 8446 >would be nice.\r\n\r\nThis was discussed before and decided to not do as EDHOC does not really have the kind of states that TLS 1.3 does. I don't think RFC 8446 is a good example. Not against making a figure but the figure would likely be quite simple and trivial, but maybe that is good to show.\r\n",
          "createdAt": "2022-11-05T18:29:01Z",
          "updatedAt": "2022-11-05T18:29:01Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@emanjon I agree that the TLS 1.3 state machine is much more complex but I think it'd still be good to have this common for the implementations, in order for them not to have to reinvent it themselves. There is at least the negotiation step which makes it not straightforward (in a literal sense). Let's discuss at IETF 115.",
          "createdAt": "2022-11-06T11:59:13Z",
          "updatedAt": "2022-11-06T11:59:13Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussion at IETF 115 (https://datatracker.ietf.org/doc/minutes-115-lake-202211081630/):\r\n\r\n    MV: I volunteer to provide a first sketch of state machine for an\r\n    appendix.\r\n    DN: Maybe too optimistic. If the state machine in the figure is not\r\n    perfectly aligned with the specification, this will create problem.\r\n    GS: Can we give it a try with a sketch in an appendix, before\r\n    deciding to keep it or not?\r\n    SF: Yes, and we can have a quick check on the mailing list about\r\n    keeping it.\r\n",
          "createdAt": "2022-11-24T09:34:21Z",
          "updatedAt": "2022-11-24T09:34:21Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "> Another point that introduced confusion for me when implementing this draft is whether the transcript hashes should be CBOR wrapped.\r\n\r\nClarified in #364 (in 1cec57b)",
          "createdAt": "2022-11-24T09:36:42Z",
          "updatedAt": "2022-11-24T09:36:42Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "> I also noted a couple of remnants that seem to be already signaled in github, remnant in issue https://github.com/lake-wg/edhoc/issues/346 on transcript hash, and the inconsistent use of session key terminology (PRK_out vs session key) signaled by Charlie Jacomme.\r\n\r\nI think those are fixed but please check.",
          "createdAt": "2022-11-24T09:38:28Z",
          "updatedAt": "2022-11-24T09:38:28Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Some of the comments are already fixed in other updates, the remaining should be in #369.",
          "createdAt": "2022-11-24T09:52:51Z",
          "updatedAt": "2022-11-24T09:52:51Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just as an update on this, the current version of the state machine is at:\n\nhttps://docs.google.com/presentation/d/1ai-ypkBlsjIhTjNglaMXsCqvgw99Lq8j9YrbAkSxgdg/edit\n\nIt\u2019d be great to get comments on that.\n\nOn Thu 24 Nov 2022 at 06:34 G\u00f6ran Selander ***@***.***> wrote:\n\n> Discussion at IETF 115 (\n> https://datatracker.ietf.org/doc/minutes-115-lake-202211081630/):\n>\n> MV: I volunteer to provide a first sketch of state machine for an\n> appendix.\n> DN: Maybe too optimistic. If the state machine in the figure is not\n> perfectly aligned with the specification, this will create problem.\n> GS: Can we give it a try with a sketch in an appendix, before\n> deciding to keep it or not?\n> SF: Yes, and we can have a quick check on the mailing list about\n> keeping it.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/lake-wg/edhoc/issues/354#issuecomment-1326187881>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AB2M6Q6Y2BQ7I2OOYJDFUODWJ4ZCRANCNFSM6AAAAAARX425YY>\n> .\n> You are receiving this because you commented.Message ID:\n> ***@***.***>\n>\n",
          "createdAt": "2022-11-24T11:36:04Z",
          "updatedAt": "2022-11-24T11:36:04Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as state machine now has its own issue #372 ",
          "createdAt": "2022-11-28T21:59:08Z",
          "updatedAt": "2022-11-28T21:59:08Z"
        }
      ]
    },
    {
      "number": 355,
      "id": "I_kwDOEItXAM5Vpyw4",
      "title": "Some more thoughts on AES-CTR encryption for large message_2",
      "url": "https://github.com/lake-wg/edhoc/issues/355",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "EDHOC-17 uses HMAC and KMAC as stream ciphers for encryption of message_2.\r\n\r\n`KEYSTREAM_2   = EDHOC-KDF( PRK_2e,   0, TH_2,      plaintext_length )\r\n`\r\nA reason for this is that COSE does not have IND-CPA encryption algorithms like AES-CTR and ChaCha20. It was also seen as hard to do remove the tag from an AEAD call such as AES-CCM(K_2, P_2, A, N). Something I think was missed in the discussion was to use the AEAD with a plaintext consisting of zeroes.\r\n\r\n`KEYSTREAM_2   = AES-CCM(K_2, 0000000......, A, N) and then XOR PLAINTEXT_2 with the beginning of KEYSTREAM_2. This implements AES-CTR with AES-CCM.",
      "createdAt": "2022-11-05T12:32:21Z",
      "updatedAt": "2022-11-08T17:07:15Z",
      "closedAt": "2022-11-08T17:07:15Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed and decided not to do",
          "createdAt": "2022-11-08T17:07:14Z",
          "updatedAt": "2022-11-08T17:07:14Z"
        }
      ]
    },
    {
      "number": 359,
      "id": "I_kwDOEItXAM5WF6hB",
      "title": "Add guidance on how to calculate Y coodinate for old APIs",
      "url": "https://github.com/lake-wg/edhoc/issues/359",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "",
      "createdAt": "2022-11-10T18:40:56Z",
      "updatedAt": "2022-11-21T11:37:57Z",
      "closedAt": "2022-11-21T11:37:57Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged PR to master that addresses this",
          "createdAt": "2022-11-21T11:37:57Z",
          "updatedAt": "2022-11-21T11:37:57Z"
        }
      ]
    },
    {
      "number": 361,
      "id": "I_kwDOEItXAM5WLH27",
      "title": "Encoding of ID_CRED_R in lake-traces",
      "url": "https://github.com/lake-wg/edhoc/issues/361",
      "state": "CLOSED",
      "author": "mrdeep1",
      "authorAssociation": "NONE",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "PR exists"
      ],
      "body": "In [draft-ietf-lake-traces-03](https://datatracker.ietf.org/doc/html/draft-ietf-lake-traces-03#page-37), there is\r\n````\r\n   ID_CRED_R =\r\n   {\r\n    4 : h'32'\r\n   }\r\n\r\n   ID_CRED_R (CBOR Data Item) (4 bytes)\r\n   a1 04 41 32\r\n````\r\nI would have expected this to be\r\n````\r\n   ID_CRED_R =\r\n   {\r\n    4 : h'32'\r\n   }\r\n\r\n   ID_CRED_R (CBOR Data Item) (1 byte)\r\n   32\r\n````\r\nas per [draft-ietf-lake-edhoc-17 Section 3.5.3](https://datatracker.ietf.org/doc/html/draft-ietf-lake-edhoc-17#section-3.5.3) or have I missed something?\r\n\r\nThere is a degree of ambiguity in [draft-ietf-lake-edhoc-17 Section 3.5.2](https://datatracker.ietf.org/doc/html/draft-ietf-lake-edhoc-17#section-5.3.2)\r\n````\r\no  If ID_CRED_R contains a single 'kid' parameter, i.e.,\r\n            ID_CRED_R = { 4 : kid_R }, then only the byte string is\r\n            included in the plaintext, represented as described in\r\n            [Section 3.3.2](https://datatracker.ietf.org/doc/html/draft-ietf-lake-edhoc-17#section-3.3.2), see examples in [Section 3.5.3](https://datatracker.ietf.org/doc/html/draft-ietf-lake-edhoc-17#section-3.5.3).\r\n````\r\nis this refers to the byte string, not necessarily the subset integer equivalent, but the lake-traces would still appear to be wrong.",
      "createdAt": "2022-11-11T16:59:48Z",
      "updatedAt": "2022-11-28T18:27:23Z",
      "closedAt": "2022-11-28T18:27:23Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@mrdeep1 That looks like a bug. As you can see further down in the same section:\r\n\r\n> PLAINTEXT_2 =\r\n(\r\n ? PAD_2,\r\n ID_CRED_R / bstr / -24..23,\r\n Signature_or_MAC_2,\r\n ? EAD_2\r\n)\r\n>\r\n> Since ID_CRED_R contains a single 'kid' parameter, only the byte string value is included in the plaintext, represented as described in [Section 3.3.2](https://datatracker.ietf.org/doc/html/draft-ietf-lake-edhoc-17#section-3.3.2) of [[I-D.ietf-lake-edhoc](https://www.ietf.org/archive/id/draft-ietf-lake-traces-03.html#I-D.ietf-lake-edhoc)]. The CBOR map { 4 : h'32' } is thus replaced, not by the CBOR byte string 0x4132, but by the CBOR int 0x32, since that is a one byte encoding of a CBOR integer (-19).\r\n>\r\n> PLAINTEXT_2 (CBOR Sequence) (10 bytes)\r\n32 48 d0 d1 a5 94 79 7d 0a af\r\n\r\nwhich is ID_CRED_R followed by 9 bytes CBOR encoding of Signature_or_MAC_2.\r\n\r\nWe should also clarify to avoid the ambiguity. Thanks!",
          "createdAt": "2022-11-11T17:20:41Z",
          "updatedAt": "2022-11-11T17:20:41Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I removed the label so we don't forget to also clarify in the spec.",
          "createdAt": "2022-11-24T10:06:16Z",
          "updatedAt": "2022-11-24T10:06:16Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I was too quick making a change in -traces which I had to revert. The implementation is right (of course). So I made a clarification in -edhoc instead, see #371. Please review. ",
          "createdAt": "2022-11-25T16:26:58Z",
          "updatedAt": "2022-11-25T16:26:58Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@mrdeep1 PR #371 is now merged. Let us know if you have any further comments.",
          "createdAt": "2022-11-28T17:08:50Z",
          "updatedAt": "2022-11-28T17:08:50Z"
        },
        {
          "author": "mrdeep1",
          "authorAssociation": "NONE",
          "body": "Thanks for the update.  When I have some spare time, I am doing a libcoap port.  I have now got as far as doing Message_2 as per the traces.",
          "createdAt": "2022-11-28T18:11:10Z",
          "updatedAt": "2022-11-28T18:11:10Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Cool, keep us updated on the progress and if you are interested in interop-testing. Closing this issue then.",
          "createdAt": "2022-11-28T18:27:23Z",
          "updatedAt": "2022-11-28T18:27:23Z"
        }
      ]
    },
    {
      "number": 363,
      "id": "I_kwDOEItXAM5WiEZD",
      "title": "P-256 Public keys in traces",
      "url": "https://github.com/lake-wg/edhoc/issues/363",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "traces and test vectors"
      ],
      "body": "- The text could be aligned when it comes to \"Diffie-Hellman\" and \"P-256\".\r\n- \"for use with P-256\" should be rephrased.\r\n\r\n```\r\nI creates an ephemeral key pair for use with the EDHOC key exchange algorithm:\r\nR creates an ephemeral key pair for use with the EDHOC key exchange algorithm:\r\nR's static Diffie-Hellman key pair for use with P-256:\r\nI's static Diffie-Hellman key pair for use with P-256:\r\n\r\n```\r\n\r\n- Should maybe be clear that the 'y'-coordinate is optional (could also use no y or y = false/true or 0/1) Should be made clear that this is one of two possible 'y'-coordinate\r\n\r\n```\r\nInitiator's ephemeral public key, 'x'-coordinate\r\nG_X (Raw Value) (32 bytes)\r\n8a f6 f4 30 eb e1 8d 34 18 40 17 a9 a1 1b f5 11 c8 df f8 f8 34 73 0b\r\n96 c1 b7 c8 db ca 2f c3 b6\r\n\r\nInitiator's ephemeral public key, 'y'-coordinate\r\n(Raw Value) (32 bytes)\r\n51 e8 af 6c 6e db 78 16 01 ad 1d 9c 5f a8 bf 7a a1 57 16 c7 c0 6a 5d\r\n03 85 03 c6 14 ff 80 c9 b3\r\n```\r\n\r\nWhile it is clear what G_X and G_Y are, it is not defined what PK_R is. If your API requires a y coordinate you would probably have that stored and consider it part of PK_R.\r\n\r\n```\r\nResponder's public authentication key, 'x'-coordinate\r\nPK_R (Raw Value) (32 bytes)\r\nbb c3 49 60 52 6e a4 d3 2e 94 0c ad 2a 23 41 48 dd c2 17 91 a1 2a fb\r\ncb ac 93 62 20 46 dd 44 f0\r\n\r\nResponder's public authentication key, 'y'-coordinate\r\n(Raw Value) (32 bytes)\r\n45 19 e2 57 23 6b 2a 0c e2 02 3f 09 31 f1 f3 86 ca 7a fd a6 4f cd e0\r\n10 8c 22 4c 51 ea bf 60 72\r\n\r\n```\r\n\r\n\r\n",
      "createdAt": "2022-11-16T15:05:41Z",
      "updatedAt": "2023-04-20T08:04:12Z",
      "closedAt": "2023-04-20T08:04:12Z",
      "comments": []
    },
    {
      "number": 365,
      "id": "I_kwDOEItXAM5XH976",
      "title": "\"compact representation\" should be reserved for ECC",
      "url": "https://github.com/lake-wg/edhoc/issues/365",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [],
      "body": "`For a more compact representation`\r\n\r\nLet's formulate the above",
      "createdAt": "2022-11-23T12:51:45Z",
      "updatedAt": "2022-11-24T14:36:52Z",
      "closedAt": "2022-11-24T14:36:52Z",
      "comments": []
    },
    {
      "number": 372,
      "id": "I_kwDOEItXAM5Xcteb",
      "title": "State machine",
      "url": "https://github.com/lake-wg/edhoc/issues/372",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "Remaining issue from #354:\r\n\r\n>> Discussion at IETF 115 (\r\n https://datatracker.ietf.org/doc/minutes-115-lake-202211081630/):\r\n\r\n>> MV: I volunteer to provide a first sketch of state machine for an\r\n appendix.\r\n DN: Maybe too optimistic. If the state machine in the figure is not\r\n perfectly aligned with the specification, this will create problem.\r\n GS: Can we give it a try with a sketch in an appendix, before\r\n deciding to keep it or not?\r\n SF: Yes, and we can have a quick check on the mailing list about\r\n keeping it.\r\n\r\n\r\n> Just as an update on this, the current version of the state machine is at:\r\n>\r\n> https://docs.google.com/presentation/d/1ai-ypkBlsjIhTjNglaMXsCqvgw99Lq8j9YrbAkSxgdg/edit\r\n>\r\n> It\u2019d be great to get comments on that.\r\n\r\n\r\n\r\n",
      "createdAt": "2022-11-28T21:57:27Z",
      "updatedAt": "2022-12-16T16:52:36Z",
      "closedAt": "2022-12-16T16:52:36Z",
      "comments": []
    },
    {
      "number": 374,
      "id": "I_kwDOEItXAM5YTlqv",
      "title": "Shepherd's review of the IANA Considerations section",
      "url": "https://github.com/lake-wg/edhoc/issues/374",
      "state": "CLOSED",
      "author": "malishav",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "As part of my shepherding write-up, I had a closer look at the IANA considerations section.\r\n\r\n- Section 9.5: EDHOC External Authorization Data Registry is not properly initialized and the text in the draft seems inconsistent. Section 9.5 requests the label be registered as a positive integer while section 3.8 mentions non-negative values for non-critical usage, and negative values of label for critical usage. ead_label of 0 for padding is not registered. \r\n\r\nFurther, in the text of Section 3.8, the draft states:\r\n\r\n> A security application using external authorization data needs to register a positive ead_label and optionally an associated ead_value format, for each EAD item it uses (see [Section 9.5](https://www.ietf.org/archive/id/draft-ietf-lake-edhoc-18.html#iana-ead)).\r\n\r\nPlease remove the notion of positive ead_label here, as it is expanded further down in the text.\r\n\r\n\r\n- Just to confirm, the `info_label` for usage with EDHOC-KDF is an internal parameter and therefore does not need its own registry. Correct?",
      "createdAt": "2022-12-07T10:10:46Z",
      "updatedAt": "2023-02-02T10:31:56Z",
      "closedAt": "2023-02-02T10:31:56Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "One commit intended to clarify.\r\n\r\nYes, info_label is only used within EDHOC.",
          "createdAt": "2022-12-07T11:49:21Z",
          "updatedAt": "2022-12-07T11:49:21Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Further update of this text in #378. \r\n\r\n@malishav Please have a look if this is fixed.",
          "createdAt": "2022-12-09T10:42:37Z",
          "updatedAt": "2022-12-09T10:42:37Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as no objection received.",
          "createdAt": "2023-02-02T10:31:56Z",
          "updatedAt": "2023-02-02T10:31:56Z"
        }
      ]
    },
    {
      "number": 375,
      "id": "I_kwDOEItXAM5YU3NN",
      "title": "Protected error, EDHOC-exporter, and responder processing of message_3",
      "url": "https://github.com/lake-wg/edhoc/issues/375",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander",
        "emanjon"
      ],
      "labels": [
        "Close?"
      ],
      "body": "See\r\n\r\nAfter sending message_3 the Initiator can use the exporter. When the responder receives message_3 the message might parse perfectly and the responder can use the exporter. The responder might still not want to talk to the Initiator. In general it makes sense that the Responder can use the derived application keys to protect the EDHOC error message. This corresponds to protected alert messages in e.g., TLS.\r\n\r\nAs far as I can see -17 does not say anything about this. It propably should say a sentence or two about this.\r\n\r\nReleted issues.\r\nhttps://github.com/core-wg/oscore-edhoc/issues/8\r\nhttps://github.com/lake-wg/edhoc/issues/372",
      "createdAt": "2022-12-07T12:57:27Z",
      "updatedAt": "2023-07-03T12:21:08Z",
      "closedAt": "2023-07-03T12:21:07Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Current processing of message_3:\r\n\r\n> Verify Signature_or_MAC_3 using the algorithm in the selected cipher suite. The verification process depends on the method, see [Section 5.4.2]. Make the result of the verification available to the application.\r\n\r\n> After verifying message_3, the Responder can compute PRK_out, see Section 4.1.3, derive application keys using the EDHOC-Exporter interface, see Section 4.2.1, persistently store the keying material, and send protected application data.\r\n\r\nThe application is in charge of using or not using the EDHOC session, this seems out of scope of EDHOC?\r\n\r\n",
          "createdAt": "2022-12-16T16:28:14Z",
          "updatedAt": "2022-12-16T16:28:14Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "```\r\n* Make ID_CRED_R and (if present) EAD_2 available to the application for authentication- and EAD processing.\r\n\r\n* Obtain the authentication credential (CRED_R) and the authentication key of R from the application (or by other means).\r\n\r\n* Verify Signature_or_MAC_2 using the algorithm in the selected cipher suite. The verification process depends on the method, see [Section 5.3.2](https://datatracker.ietf.org/doc/html/draft-ietf-lake-edhoc#asym-msg2-proc). Make the result of the verification available to the application.\r\n\r\nIf any processing step fails, then the Initiator MUST send an EDHOC error message back as defined in [Section 6](https://datatracker.ietf.org/doc/html/draft-ietf-lake-edhoc#error), and the protocol MUST be discontinued.\r\n```\r\nSome thought on the processing\r\n\r\nDo we want as strong focus on the the authentication credential is coming from the application? Maybe these would be improvements.\r\n\r\n* Obtain the authentication credential (CRED_R) and the authentication key of R.\r\n* Obtain the authentication credential (CRED_R) and the authentication key of R (from the application or by other means).\r\n\r\nThe current text is missing parts of the authentication step. Deciding on if you want to talk with the other party might include doing revocation checking, syncing time to verify the cert, or a human pressing yes or no. These things might happen after \"Obtain the authentication credential (CRED_R) and the authentication key of R \". The EDHOC library might also find the key itself and then ask the application if it wants to continue.\r\n\r\nThe current specification does not fobid anything of this but also does not discuss it. The is more going on than the step `\"Obtain the authentication credential (CRED_R) and the authentication key of R.\" ` Waitnig and answering with an EDHOC error is one alternative. Continuing and then letting the applicaion cancel the OSCORE connection is another alternative. Both should be allowed.\r\n\r\nI think this needs some more discussion in the draft. It needs to be clear that  `\"Obtain the authentication credential (CRED_R) and the authentication key of R.\" `is not necesarily the step where the application says ok to talking to the peer.\r\n\r\n\r\n\r\n",
          "createdAt": "2022-12-17T10:59:47Z",
          "updatedAt": "2022-12-17T10:59:47Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Processing notes of today's chat:\r\n\r\n* It may help to separately consider whether a credential allows establishing an EDHOC session, and what the authorizations at the application level are that are encoded in it. If extracting the latter takes longer time, that's fine, although I think that it would be good practice to not let EDHOC sessions be established that'd later carry no authorizations at all.\r\n* In phrasing the steps, maybe we can focus more on what is possible and less on what needs to happen when. In the case of message 3 processing, this could be expressed as:\r\n  * Decrypt message 3.\r\n  * At earliest after successful decryption, the application can be queried for the CRED_I that is referenced in ID_CRED_I (if the EDHOC library(?) can not do that on its own) or to inform the application that some CRED_I is being used in a session that has not been authenticated yet.\r\n  * Verify.\r\n  * Compute RPK_OUT and prepare message 4 or extracted key material.\r\n  * At latest before sending message 4 or making the extracted key material accessible, the EDHOC library(?) needs to learn whether the used CRED_I is sufficient to establish an EDHOC context.\r\n  * Send message 4.",
          "createdAt": "2023-04-28T18:02:34Z",
          "updatedAt": "2023-04-28T18:02:34Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #375 is merged. Any remaining comment to address?",
          "createdAt": "2023-06-12T14:52:36Z",
          "updatedAt": "2023-06-12T14:52:36Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "You probably meant PR #398; looks done to me.",
          "createdAt": "2023-06-12T18:22:38Z",
          "updatedAt": "2023-06-12T18:22:38Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes I meant #398 is merged. Closing this now.",
          "createdAt": "2023-07-03T12:21:07Z",
          "updatedAt": "2023-07-03T12:21:07Z"
        }
      ]
    },
    {
      "number": 376,
      "id": "I_kwDOEItXAM5YVRkT",
      "title": "Why are RFC 7624 and RFC 8376 listed as normative references?",
      "url": "https://github.com/lake-wg/edhoc/issues/376",
      "state": "CLOSED",
      "author": "malishav",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Could these two references be listed as informative?",
      "createdAt": "2022-12-07T13:48:12Z",
      "updatedAt": "2022-12-09T10:40:08Z",
      "closedAt": "2022-12-09T10:40:08Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I-D nits additionally lists these:\r\n\r\n  ** Downref: Normative reference to an Informational RFC: RFC 5869\r\n  ** Downref: Normative reference to an Informational RFC: RFC 6090\r\n  ** Downref: Normative reference to an Informational RFC: RFC 6979\r\n  ** Downref: Normative reference to an Informational RFC: RFC 7748\r\n  ** Downref: Normative reference to an Informational RFC: RFC 9053",
          "createdAt": "2022-12-08T15:33:01Z",
          "updatedAt": "2022-12-08T15:33:01Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From these above, all but RFC 9053 are in the downref registry [1]. I argued in my write-up that 9053 should be included in that registry, as well.\r\n\r\n[1] https://datatracker.ietf.org/doc/downref",
          "createdAt": "2022-12-08T17:02:43Z",
          "updatedAt": "2022-12-08T17:02:43Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "OK. So can we close this?",
          "createdAt": "2022-12-09T09:46:04Z",
          "updatedAt": "2022-12-09T09:46:04Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "fine by me",
          "createdAt": "2022-12-09T09:53:25Z",
          "updatedAt": "2022-12-09T09:53:25Z"
        }
      ]
    },
    {
      "number": 377,
      "id": "I_kwDOEItXAM5YmVBF",
      "title": "Stephen's pre-last-call comments",
      "url": "https://github.com/lake-wg/edhoc/issues/377",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "Stephen's pre-last-call comments:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/lake/_5eVv4p8epYbA1yls471jqETyTU/\r\n\r\n\r\nnon-nits:\r\n\r\n1) 3.5.2, 2nd para: on what basis is rfc5280 a normative ref\r\nwhilst [I-D.ietf-cose-cbor-encoded-cert] is informative?\r\nThey seem to be equally required for implementation based\r\non this text.  Given [I-D.ietf-cose-x509] is normative,\r\nperhaps it wouldn't add delay if both were?\r\n\r\n2) 3.5.2: I forget if use of the full DER-encoded X.509 cert\r\nwas discussed on the list or not? If not, the alternative\r\nwould have been to use the SPKI which has some slightly\r\ndifferent properties that can sometimes be beneficial\r\n(potentially easier use of different CAs on each side). I'm\r\nnot asking for a change here btw, just to check was this\r\ndiscussed on the list. (I see appendix D.2 talks a bit\r\nabout this.)\r\n\r\n3) 5.2.3: what happens if the decode of message_1 fails?\r\n(Say due to an unknown suite.) Does EAD_1 get provided to\r\nthe application?  I hope not! Maybe the text after the\r\nbullets needs to specify this explicitly? Same for other\r\nsections wrt providing EAD to the application (esp EAD_1\r\nand EAD_2).\r\n\r\n4) 9.4: As the method field is how we handle breaking\r\nchanges, do we really want that registry to be\r\nspecification required? The alternative might be standards\r\naction, if we prefer the IESG to be involved in such\r\nchanges.\r\n\r\nnits:\r\n\r\n- section 1.3: this only mentions appendix A - is there a\r\n   good reason for that or is it just text that's not\r\nchanged in ages? Probably omitting or including mention of\r\nall appendices is better.\r\n\r\n- section 2, p8 bullet says \"Verification of the selected\r\n   cipher suite.\" - that puzzled me a bit as I'd have\r\nassumed that the transcript hashes provide/cover that\r\nvalidation? If that's the case maybe this bullet could be\r\ndeleted, if not, be interested in what's meant.\r\n\r\n- reference to [I-D.ietf-lake-traces]: not really a comment\r\n   on edhoc, but we should probably ask the WG if we want to\r\nhold publication of edhoc as an RFC until the traces work\r\nis also done (i.e. create a small cluster for those two in\r\nthe RFC editor queue).\r\n\r\n- 3.4.1, 2nd last para: the \"MUST\" statements here seem a\r\n   bit bogus in 2119 interop terms. If those are only for\r\nemphasis, then s/MUST/must/might be better to avoid other\r\npeople commenting on this later.\r\n\r\n- 3.5.3: the two example definitions for ID_CRED_X seem to\r\n   be introducing a notation \"{ 4: kid_x }...\" before that\r\nnotation is defined/referenced. Maybe add at least a\r\nforward pointer to 1.3 about such notations? Or, if 1.4 is\r\nconsidered to cover this, then that's fine. (I didn't read\r\nall the referred things from 1.4:-)\r\n\r\n- 3.8: I bet a beer EAD item criticality won't work as\r\n   planned:-)\r\n\r\n- 3.8: since zero is used for padding it's not true to say\r\n   \"non-negative\" means non-critical.\r\n\r\n- 3.8: Am I getting this right? If I define a new EAD item\r\n   \"foo\" with a codepoint of 17 then sending 17 means\r\nnon-critical but sending -17 means \"treat as critical\"? The\r\ntext isn't quite clear (here) as to whether +x and -x mean\r\nthe same EAD type, just with different criticality, or,\r\nwhether +x and -x correspond to independent EAD item types.\r\n\r\n- 3.8.1: This leaves the reader wondering what is an\r\n   \"appropriate length\" of padding? I'm also left wondering\r\nwhat is the point of padding in EAD_1 which is not\r\nencrypted? (Is it only useful if there's also some lower\r\nlayer confidentiality?)\r\n\r\n- 3.9: \"incompliance\" - that's a very uncommon word, maybe\r\n   that'd be better rephrased e.g. s/incompliance/lack of\r\ncompliance/?\r\n\r\n- 3.9: it correctly says here >1 transport may be used, but\r\n   earlier (last para of 3.4 before 3.4.1) it said I and R\r\n\"need to have agreed on a transport\" (note the singular).\r\nI'd change or delete the text in 3.4 rather than that in\r\n3.9 probably.\r\n\r\n- 4.1.1 refers to Figure 8 but that's a few pages ahead and\r\n   the names of the keys (e.g. PRK_3e2m) aren't intuitive.\r\nIt'd be good to somehow introduce those names earlier,\r\nmaybe just by moving Figure 8 earlier, but at least by\r\npointing out the naming scheme (that PRK_2 refers to\r\nmessage 2 and how etc.). In any case, it'd be good to do an\r\neditorial pass with the goal of making understanding the\r\nkey derivation easier for a new reader. (Requiring readers\r\nto reverse engineer that seems sub-optimal:-)\r\n\r\n- 4.1.1/4.1.2 maybe \"Extract()\" and \"Expand()\" aren't the\r\n   best function names? Those probably exist already in lots\r\nof libraries.  Perhaps \"EDHOC_Expand()\" etc. would make it\r\neasier to map implementations to the spec? Or whatever\r\nnames are used in current implementations. (I'd also\r\ns/EDHOC-KDF/EDHOC_KDF/g to get a name that works for\r\ncompilers and same for EDHOC-Exporter.)\r\n\r\n- Figure 8 looks more like a table than a figure:-)\r\n\r\n- 4.1.3: TEE is used without expansion.\r\n\r\n- 4.2.1: just checking - there's a lowercase \"must\" there -\r\n   is that intentional? (It could be correct as it says\r\n\"must be unique\" which is always tricky:-)\r\n\r\n- section 5: As a non-implementer, I didn't understand the\r\n   \"MAY contain parameters\" sentence there.\r\n\r\n- 5.1: What's a \"session\"? I think that's a nit, but wonder\r\n   a bit if someone's tested/analysed in case there's any\r\nodd state that can be reached if a node has forgotten state\r\nbut receives a message assuming the state is known/stored.\r\nIt's probably ok though.\r\n\r\n- 5.1: is \"SHALL be processed\" right? Maybe just \"are\r\n   processed\" is ok? (Just trying to avoid others asking\r\nthis again, I don't really care myself:-)\r\n\r\n- 5.3.2: \"the length of the protocol\" seems to mean \"for\r\n   that session\" but neither is that well defined - could\r\nthis be made more precise?\r\n\r\n- 5.3.2: The \"<<...>>\" notation wasn't described so far.\r\n   (See earlier comment wrt 1.4)\r\n\r\n- 6.3.2, figure 11: Shouldn't G_X in the 2nd message_1 be\r\n   G_X' or something to indicate a different DH public\r\nvalue? Is the same C_I meant to be sent in both message_1's\r\nor not?\r\n\r\n- Appendix A.2: This has an RFC2119 SHOULD. If the intent\r\n   was that none of the appendices had such terms, that'd be\r\nwrong, but I'm not sure if that was the intent of the WG.\r\n(There are more examples of 2119 terms in appendices.)\r\nMight be good to say (e.g. in 1.4) whether or not such 2119\r\nterms are important for implementers who might otherwise\r\nignore 'em.\r\n\r\n- Appendix C.1 ends with a table (with no label/caption)\r\n   that doesn't seem to have text describing it anywhere?\r\n\r\n- Appendix I: This seems to describe an optional to\r\n   implement thing that has two internal options. I don't\r\nsee that the text tells me which I ought implement, if I\r\nchoose to try support long plaintexts.  The problem is\r\nindicated by the paras beginning \"A potential\r\nwork-around...\" and the following one starting \"Another\r\nsolution...\" I read those as two different ways to handle\r\nlong plaintexts.)\r\n\r\n- Appendix J: If you do s/EDHOC-KDF/EDHOC_KDF/ then I guess\r\n   you'll also do s/EDHOC-KeyUpdate/EDHOC_KeyUpdate/ maybe.\r\n\r\n- Acks: Sad to say it, and I'm not sure which is best, but\r\n   maybe consider s/Jim Schaad/the late Jim Schaad/? Hard to\r\nknow how to phrase that well though:-(\r\n\r\n",
      "createdAt": "2022-12-09T09:48:19Z",
      "updatedAt": "2022-12-19T16:10:52Z",
      "closedAt": "2022-12-19T16:10:51Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "nits:\r\n\r\n    section 1.3: this only mentions appendix A - is there a\r\n    good reason for that or is it just text that's not\r\n    changed in ages? Probably omitting or including mention of\r\n    all appendices is better.\r\n\r\nIncluded all sections before security considerations.\r\n\r\n    section 2, p8 bullet says \"Verification of the selected\r\n    cipher suite.\" - that puzzled me a bit as I'd have\r\n    assumed that the transcript hashes provide/cover that\r\n    validation? If that's the case maybe this bullet could be\r\n    deleted, if not, be interested in what's meant.\r\n\r\nchange to \"negotiation of ciphersuite\", with added clarification\r\n\r\n    reference to [I-D.ietf-lake-traces]: not really a comment\r\n    on edhoc, but we should probably ask the WG if we want to\r\n    hold publication of edhoc as an RFC until the traces work\r\n    is also done (i.e. create a small cluster for those two in\r\n    the RFC editor queue).\r\n\r\nOK, let's keep that in mind :-)\r\n\r\n    3.4.1, 2nd last para: the \"MUST\" statements here seem a\r\n    bit bogus in 2119 interop terms. If those are only for\r\n    emphasis, then s/MUST/must/might be better to avoid other\r\n    people commenting on this later.\r\n\r\nDidn't find any MUSTs in 3.4.1, did you mean 3.5.0? \r\n> EDHOC MUST allow the application to read received information about credential (ID_CRED_R, ID_CRED_I). EDHOC MUST have access to the authentication key and the authentication credential.\r\n\r\nThe interaction between EDHOC and application is kinda critical on this point, but perhaps is not a compliance requirement?\r\n\r\n    3.5.3: the two example definitions for ID_CRED_X seem to\r\n    be introducing a notation \"{ 4: kid_x }...\" before that\r\n    notation is defined/referenced. Maybe add at least a\r\n    forward pointer to 1.3 about such notations? Or, if 1.4 is\r\n    considered to cover this, then that's fine. (I didn't read\r\n    all the referred things from 1.4:-)\r\n\r\nCheck updated text and see if it reads better.\r\n\r\n    3.8: I bet a beer EAD item criticality won't work as\r\n    planned:-)\r\n\r\nSo I obviously had to rewrite stuff to not lose the beer :-) Check updated text and see if it reads better.\r\n\r\n    3.8: since zero is used for padding it's not true to say\r\n    \"non-negative\" means non-critical.\r\n\r\n    3.8: Am I getting this right? If I define a new EAD item\r\n    \"foo\" with a codepoint of 17 then sending 17 means\r\n    non-critical but sending -17 means \"treat as critical\"? The\r\n    text isn't quite clear (here) as to whether +x and -x mean\r\n    the same EAD type, just with different criticality, or,\r\n    whether +x and -x correspond to independent EAD item types.\r\n\r\nCheck updated text and see if it reads better.\r\n\r\n    3.8.1: This leaves the reader wondering what is an\r\n    \"appropriate length\" of padding? I'm also left wondering\r\n    what is the point of padding in EAD_1 which is not\r\n    encrypted? (Is it only useful if there's also some lower\r\n    layer confidentiality?)\r\n\r\nI added reasons for padding. Check updated text and see if it reads better.\r\n\r\n    3.9: \"incompliance\" - that's a very uncommon word, maybe\r\n    that'd be better rephrased e.g. s/incompliance/lack of\r\n    compliance/?\r\n\r\nDone.\r\n\r\n    3.9: it correctly says here >1 transport may be used, but\r\n    earlier (last para of 3.4 before 3.4.1) it said I and R\r\n    \"need to have agreed on a transport\" (note the singular).\r\n    I'd change or delete the text in 3.4 rather than that in\r\n    3.9 probably.\r\n\r\nCheck updated text and see if it reads better.\r\n\r\n    4.1.1 refers to Figure 8 but that's a few pages ahead and\r\n    the names of the keys (e.g. PRK_3e2m) aren't intuitive.\r\n    It'd be good to somehow introduce those names earlier,\r\n    maybe just by moving Figure 8 earlier, but at least by\r\n    pointing out the naming scheme (that PRK_2 refers to\r\n    message 2 and how etc.). In any case, it'd be good to do an\r\n    editorial pass with the goal of making understanding the\r\n    key derivation easier for a new reader. (Requiring readers\r\n    to reverse engineer that seems sub-optimal:-)\r\n\r\nI did an editorial pass. Check updated text and see if it reads better.\r\n\r\n    4.1.1/4.1.2 maybe \"Extract()\" and \"Expand()\" aren't the\r\n    best function names? Those probably exist already in lots\r\n    of libraries. Perhaps \"EDHOC_Expand()\" etc. would make it\r\n    easier to map implementations to the spec? Or whatever\r\n    names are used in current implementations. (I'd also\r\n    s/EDHOC-KDF/EDHOC_KDF/g to get a name that works for\r\n    compilers and same for EDHOC-Exporter.)\r\n\r\nDone. This was discussed before, and changed in the opposite direction, but I think your argument makes sense.\r\n\r\n    Figure 8 looks more like a table than a figure:-)\r\n\r\nNoted. That applies to many of the \"figures\". Not done :-)\r\n\r\n    4.1.3: TEE is used without expansion.\r\n\r\nDone.\r\n\r\n    4.2.1: just checking - there's a lowercase \"must\" there -\r\n    is that intentional? (It could be correct as it says\r\n    \"must be unique\" which is always tricky:-)\r\n\r\nYes, that is intentional. The MUST comes in the following sentence.\r\n\r\n    section 5: As a non-implementer, I didn't understand the\r\n    \"MAY contain parameters\" sentence there.\r\n\r\nGood question. It is a correct statement in terms of COSE formats, but I'm not convinced it is relevant. I make a separate issue of that.\r\n\r\n    5.1: What's a \"session\"? I think that's a nit, but wonder\r\n    a bit if someone's tested/analysed in case there's any\r\n    odd state that can be reached if a node has forgotten state\r\n    but receives a message assuming the state is known/stored.\r\n    It's probably ok though.\r\n\r\nEDHOC session is used throughout the document. Check updated text and see if it reads better.\r\n\r\n    5.1: is \"SHALL be processed\" right? Maybe just \"are\r\n    processed\" is ok? (Just trying to avoid others asking\r\n    this again, I don't really care myself:-)\r\n\r\nThis is actually an important statement. If e.g. message_2 is received it shall not be processed unless the protocol state indicates that it is waiting for message_2 as it might e.g. be a replay. Can we state this more clearly?\r\n\r\n    5.3.2: \"the length of the protocol\" seems to mean \"for\r\n    that session\" but neither is that well defined - could\r\n    this be made more precise?\r\n\r\nChanged to \"EDHOC session\". \r\n\r\n    5.3.2: The \"<<...>>\" notation wasn't described so far.\r\n    (See earlier comment wrt 1.4)\r\n\r\nCheck updated text and see if it reads better.\r\n\r\n    6.3.2, figure 11: Shouldn't G_X in the 2nd message_1 be\r\n    G_X' or something to indicate a different DH public\r\n    value? Is the same C_I meant to be sent in both message_1's\r\n    or not?\r\n\r\nGood catch, thanks!\r\n\r\n    Appendix A.2: This has an RFC2119 SHOULD. If the intent\r\n    was that none of the appendices had such terms, that'd be\r\n    wrong, but I'm not sure if that was the intent of the WG.\r\n    (There are more examples of 2119 terms in appendices.)\r\n    Might be good to say (e.g. in 1.4) whether or not such 2119\r\n    terms are important for implementers who might otherwise\r\n    ignore 'em.\r\n\r\nCheck updated text in 1.4 and see if it reads better.\r\n\r\n    Appendix C.1 ends with a table (with no label/caption)\r\n    that doesn't seem to have text describing it anywhere?\r\n\r\nCheck updated text and see if it reads better.\r\n\r\n    Appendix I: This seems to describe an optional to\r\n    implement thing that has two internal options. I don't\r\n    see that the text tells me which I ought implement, if I\r\n    choose to try support long plaintexts. The problem is\r\n    indicated by the paras beginning \"A potential\r\n    work-around...\" and the following one starting \"Another\r\n    solution...\" I read those as two different ways to handle\r\n    long plaintexts.)\r\n\r\nCheck updated text and see if it reads better.\r\n\r\n    Appendix J: If you do s/EDHOC-KDF/EDHOC_KDF/ then I guess\r\n    you'll also do s/EDHOC-KeyUpdate/EDHOC_KeyUpdate/ maybe.\r\n\r\nDone.\r\n\r\n    Acks: Sad to say it, and I'm not sure which is best, but\r\n    maybe consider s/Jim Schaad/the late Jim Schaad/? Hard to\r\n    know how to phrase that well though:-(\r\n\r\nCheck updated text and see if it reads better.",
          "createdAt": "2022-12-09T11:10:23Z",
          "updatedAt": "2022-12-09T11:10:23Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> but we should probably ask the WG if we want to\r\n> hold publication of edhoc as an RFC until the traces work\r\n> is also done (i.e. create a small cluster for those two in\r\n> the RFC editor queue).\r\n> \r\n\r\nYes, that seems like a good thing to ask the WG.",
          "createdAt": "2022-12-17T11:39:38Z",
          "updatedAt": "2022-12-17T11:39:38Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Nits merged. Question sent to WG. Closing now.",
          "createdAt": "2022-12-19T16:10:51Z",
          "updatedAt": "2022-12-19T16:10:51Z"
        }
      ]
    },
    {
      "number": 379,
      "id": "I_kwDOEItXAM5YmzOm",
      "title": "Comment from Stephen about COSE headers",
      "url": "https://github.com/lake-wg/edhoc/issues/379",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": " \r\nFrom #377 \r\n\r\n    section 5: As a non-implementer, I didn't understand the\r\n    \"MAY contain parameters\" sentence there.\r\n\r\nDo we need this normative statement?",
      "createdAt": "2022-12-09T11:11:58Z",
      "updatedAt": "2022-12-19T16:13:17Z",
      "closedAt": "2022-12-19T16:13:17Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's reformulate that sentence. It is very unclear. It should probably say something about the recipient having to add parameters like alg before sending the singature or ciphertext to COSE.",
          "createdAt": "2022-12-17T11:02:01Z",
          "updatedAt": "2022-12-17T11:02:01Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Missed that there was a change made already. The new text looks good to me.",
          "createdAt": "2022-12-19T09:24:52Z",
          "updatedAt": "2022-12-19T09:24:52Z"
        }
      ]
    },
    {
      "number": 380,
      "id": "I_kwDOEItXAM5Ym5aW",
      "title": "Stephen's non-nits",
      "url": "https://github.com/lake-wg/edhoc/issues/380",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "\r\nFrom #377 \r\n\r\nnon-nits:\r\n\r\n    3.5.2, 2nd para: on what basis is rfc5280 a normative ref\r\n    whilst [I-D.ietf-cose-cbor-encoded-cert] is informative?\r\n    They seem to be equally required for implementation based\r\n    on this text. Given [I-D.ietf-cose-x509] is normative,\r\n    perhaps it wouldn't add delay if both were?\r\n\r\nI made RFC 5820 informative.\r\n\r\n    3.5.2: I forget if use of the full DER-encoded X.509 cert\r\n    was discussed on the list or not? If not, the alternative\r\n    would have been to use the SPKI which has some slightly\r\n    different properties that can sometimes be beneficial\r\n    (potentially easier use of different CAs on each side). I'm\r\n    not asking for a change here btw, just to check was this\r\n    discussed on the list. (I see appendix D.2 talks a bit\r\n    about this.)\r\n\r\n\r\nThe use of (full DER-encoded) X.509 is described and planned to be used in deployments. I think Marek mentioned that in his presentation at IETF 113. Should be known. I don't think SPKI has been discussed. Any action you propose?\r\n\r\n    5.2.3: what happens if the decode of message_1 fails?\r\n    (Say due to an unknown suite.) Does EAD_1 get provided to\r\n    the application? I hope not! Maybe the text after the\r\n    bullets needs to specify this explicitly? Same for other\r\n    sections wrt providing EAD to the application (esp EAD_1\r\n    and EAD_2).\r\n\r\nThe current text says:\r\n> The Responder SHALL process message_1 as follows:\r\n>\r\n> * Decode message_1 (see [Appendix C.1]\r\n> * Verify that the selected cipher suite is supported and that no prior cipher suite in SUITES_I is supported.\r\n> * If EAD_1 is present then make it available to the application for EAD processing.\r\n>\r\n> If any processing step fails, then the Responder MUST send an EDHOC error message back as defined in [Section 6], and the protocol MUST be discontinued.\r\n\r\nThe intent here and all other message processing is that you carry out the processing in steps and if any step fail then you don't carry out the subsequent steps. Is that clear enough? Then that would cover the case of unknown suite. But perhaps it doesn't cover other errors occuring at reception of message_1.\r\n\r\nDoes the state machine #373 make this more clear (though just an example)? Should we move some of that text here?\r\n\r\n    9.4: As the method field is how we handle breaking\r\n    changes, do we really want that registry to be\r\n    specification required? The alternative might be standards\r\n    action, if we prefer the IESG to be involved in such\r\n    changes.\r\n\r\nThis has been discussed. One option is to require standards action for low method numbers. Anyone else has an opinion?\r\n",
      "createdAt": "2022-12-09T11:28:56Z",
      "updatedAt": "2022-12-19T16:47:34Z",
      "closedAt": "2022-12-19T16:47:34Z",
      "comments": [
        {
          "author": "sftcd",
          "authorAssociation": "COLLABORATOR",
          "body": "> I made RFC 5820 informative.\r\n\r\nHmm - is that the right plan? If they're all informative references that'd imply that the CRED_I/R handling code (whether x.509, cbor or whatever) wasn't really part of an edhoc implementation. Is/should one of 'em be mandatory to implement (and hence normative)?",
          "createdAt": "2022-12-09T12:51:34Z",
          "updatedAt": "2022-12-09T12:51:34Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "COLLABORATOR",
          "body": "> The use of (full DER-encoded) X.509 is described and planned to be used in deployments. I think Marek mentioned that in his presentation at IETF 113. Should be known. I don't think SPKI has been discussed. Any action you propose?\r\n\r\nOnly action I'm proposing is checking we're ok with that as I don't recall it being discussed on the list. On the basis that it's been in the draft for >1 year and implementers haven't complained and it's been raised on the list (in my recent review), I think we're good as-is (unless someone yells).\r\n\r\nEdit [GS]: OK, I wait for further input or else done.",
          "createdAt": "2022-12-09T12:59:26Z",
          "updatedAt": "2022-12-09T14:10:50Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "COLLABORATOR",
          "body": "> The intent here and all other message processing is that you carry out the processing in steps and if any step fail then you don't carry out the subsequent steps. Is that clear enough?\r\n\r\nI'm not sure it's clear enough - esp wrt passing on EAD which can have side-effects that could be bad (e.g. if some identifier were stored even though message processing had failed for some reason). I think the EAD stuff is the only way that kind of thing might happen - if so, then maybe saying that EAD should only be passed to applications after all processing steps have succeeded might be right?\r\n\r\nEdit [GS]: Proposal in #381",
          "createdAt": "2022-12-09T13:03:45Z",
          "updatedAt": "2022-12-09T14:11:13Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "COLLABORATOR",
          "body": "> One option is to require standards action for low method numbers. Anyone else has an opinion?\r\n\r\nTo be clear - I'm fine with it as-is, but just wanted to check. As it's been raised on the list, people there can express their opinions as they wish so I don't see a need to specifically survey opinions further.\r\n\r\nEdit [GS]: OK, I wait for further input or else done.",
          "createdAt": "2022-12-09T13:05:36Z",
          "updatedAt": "2022-12-09T14:11:49Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": ">> I made RFC 5820 informative.\r\n>\r\n> Hmm - is that the right plan? If they're all informative references that'd imply that the CRED_I/R handling code (whether x.509, cbor or whatever) wasn't really part of an edhoc implementation. Is/should one of 'em be mandatory to implement (and hence normative)?\r\n\r\nHmm - certs and RPK are quite different cases. It is not clear why mandate one if some only use the other. If something must to be mandated, I would say it is the use of CCS identified with a kid, i.e. RPK, not certs. Should we mandate this?",
          "createdAt": "2022-12-09T13:30:20Z",
          "updatedAt": "2022-12-09T13:30:20Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "COLLABORATOR",
          "body": "To be honest, I'd have to re-read the draft to be sure, but I thought raw public keys were in practice mandatory:-) If all the implementations do support those (which I guess is the case), then it'd probably be no harm to explicitly say that's mandatory to implement maybe, if that's not already there somewhere.",
          "createdAt": "2022-12-09T14:01:36Z",
          "updatedAt": "2022-12-09T14:01:36Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "No credential or identification of credential is mandatory currently. ",
          "createdAt": "2022-12-09T14:07:00Z",
          "updatedAt": "2022-12-09T14:07:00Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "COLLABORATOR",
          "body": "ok so I guess if they're all optional to implement then yes having them be informative references is defensible - it might come up in later reviews I guess but can be dealt with then if needed. Might be no harm if you can summarise that as the response to that comment on the list (though maybe wait a bit to see if someone else chimes in here)\r\n\r\nEdit: Mail sent to the list",
          "createdAt": "2022-12-09T14:21:41Z",
          "updatedAt": "2022-12-19T16:47:15Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The use of (full DER-encoded) X.509 has been included since -00. Actually even draft-selander-lake-edhoc-00. I think the use of 'x5t' (which is full DER-encoded X.509) has been discussed quite a lot. Full DER-encoded X.509 is also part of the test vectors and the traces document.\r\n\r\nIf anybody wants SPKI in EDHOC/COSE they just need to define a COSE header parameter at a later stage.\r\n",
          "createdAt": "2022-12-17T11:30:10Z",
          "updatedAt": "2022-12-17T11:34:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> One option is to require standards action for low method numbers.\r\nI would personally prefer that...\r\n",
          "createdAt": "2022-12-17T11:33:11Z",
          "updatedAt": "2022-12-17T11:33:11Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #383 is merged. Separate issue #385 opened for the remaining comment. Closing this.",
          "createdAt": "2022-12-19T16:47:34Z",
          "updatedAt": "2022-12-19T16:47:34Z"
        }
      ]
    },
    {
      "number": 384,
      "id": "I_kwDOEItXAM5ZmXUr",
      "title": "Don't send error message when waiting for the next message",
      "url": "https://github.com/lake-wg/edhoc/issues/384",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "Make a normative statement in relevant section",
      "createdAt": "2022-12-19T16:25:27Z",
      "updatedAt": "2023-02-02T10:28:35Z",
      "closedAt": "2023-02-02T10:28:35Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolved with indicated commit.",
          "createdAt": "2023-02-02T10:28:35Z",
          "updatedAt": "2023-02-02T10:28:35Z"
        }
      ]
    },
    {
      "number": 385,
      "id": "I_kwDOEItXAM5ZmZqm",
      "title": "Registering new methods",
      "url": "https://github.com/lake-wg/edhoc/issues/385",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "Making a separate issue of the remaining comment from Stephen's non-nits (#380)\r\n\r\n\r\n    9.4: As the method field is how we handle breaking\r\n    changes, do we really want that registry to be\r\n    specification required? The alternative might be standards\r\n    action, if we prefer the IESG to be involved in such\r\n    changes.\r\n\r\n@gselander: This has been discussed. One option is to require standards action for low method numbers. Anyone else has an opinion?\r\n\r\n\r\n@sftcd: To be clear - I'm fine with it as-is, but just wanted to check. As it's been raised on the list, people there can express their opinions as they wish so I don't see a need to specifically survey opinions further.\r\n\r\n\r\n> One option is to require standards action for low method numbers.\r\n\r\n@emanjon: I would personally prefer that...\r\n\r\n\r\n",
      "createdAt": "2022-12-19T16:33:22Z",
      "updatedAt": "2023-02-02T10:16:58Z",
      "closedAt": "2023-02-02T10:16:57Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This was one of the inputs taken into account in the overhaul of IANA section, see PR #392. Can we close this issue when we merged that PR?",
          "createdAt": "2023-01-26T07:39:57Z",
          "updatedAt": "2023-01-26T07:40:58Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "No comments received, so we close this.",
          "createdAt": "2023-02-02T10:16:57Z",
          "updatedAt": "2023-02-02T10:16:57Z"
        }
      ]
    },
    {
      "number": 386,
      "id": "I_kwDOEItXAM5Zzn2z",
      "title": "Genart review",
      "url": "https://github.com/lake-wg/edhoc/issues/386",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Q1: The document talks about the Initiator and Responder roles, what messages\r\nthey send etc. But I can't find a definition of what the roles. I assume the\r\nInitiator initiates something, but unless I have missed it it would be good to\r\nhave a few word of role definitions.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/lake/9UEzSkskRAnlh43N6M4Hf5fr9pg/",
      "createdAt": "2022-12-21T17:54:48Z",
      "updatedAt": "2023-01-26T13:05:11Z",
      "closedAt": "2023-01-26T13:05:11Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, we will add that",
          "createdAt": "2023-01-13T09:31:15Z",
          "updatedAt": "2023-01-13T09:31:15Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as PR is merged.",
          "createdAt": "2023-01-26T13:05:07Z",
          "updatedAt": "2023-01-26T13:05:07Z"
        }
      ]
    },
    {
      "number": 387,
      "id": "I_kwDOEItXAM5Z2haJ",
      "title": "Clarifying difference with SIGMA",
      "url": "https://github.com/lake-wg/edhoc/issues/387",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "PR exists"
      ],
      "body": "Comment from Lo\u00efc:\r\n \r\n\r\nI am wondering if the computational independence of the intermediary secret keys has been discussed. I looked among the different issues on the Github repository but did not find any reference to that point.\r\n\r\n \r\nIndeed in his [paper](https://webee.technion.ac.il/~hugo/sigma-pdf.pdf) on SIGMA, Krawczyk stresses that the (intermediary) authentication keys, encryption keys and the session key must be computationally independent:\r\n- (\u00a75.1, p. 17) \u201cIt is essential for the protocol security that the keys Km [MAC key] and Ks [session key] be \u201ccomputationally independent\u201d (namely no information on Ks can be learned from Km and vice-versa).\u201d\r\n- (\u00a75.2, p. 19) \u201cKe [intermediary encryption key] must be computationally independent from the authentication key Km and the session key Ks\u201d\r\n \r\nIt happens that this is not always true in EDHOC depending on the authentication mode. The most demonstrative example is with the Sig-Sig mode. PRK_2e is used to compute the authentication tag MAC_2. If this key is disclosed, all the intermediary secret parameters (tags, keys, IVs) and the session key PRK_out can be computed.\r\nUsing a static DH key to authenticate adds more independence. For example, with the Sig-Stat mode, the disclosure of PRK_4e3m = PRK_3e2m used to compute MAC_3 does not allow computing the session key PRK_out unless TH_4 = H(TH_3, PLAINTEXT_3, CRED_I) is revealed (and PLAINTEXT_3, ID_CRED_I are encrypted, as well as PLAINTEXT_2, ID_CRED_R where TH_3 = H(TH_2, PLAINTEXT_3, CRED_R)). In addition, this shows that the computational independence does not rely only on the function used to compute the intermediary keys but also on the encryption schemes used to protect PLAINTEXT_2, ID_CRED_R and PLAINTEXT_3, ID_CRED_I.\r\n \r\nSo I wanted to know if this has already been discussed (and possibly discarded since one way to leverage this lack of independence is to get one these intermediary keys, which may not be trivial in practice).",
      "createdAt": "2022-12-22T08:35:29Z",
      "updatedAt": "2023-02-02T10:35:58Z",
      "closedAt": "2023-02-02T10:35:57Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue was discussed and actually concluded in an email exchange before Christmas but we forgot to update the issue. \r\n\r\nThe conditions on SIGMA listed in this issue does not apply to EDHOC. This is one example of a difference with SIGMA. The security analysis papers of EDHOC listed in Section 8.1 show that the relevant security properties still apply.\r\n\r\nThe clarifications of security properties in PR #395 cover also this issue.",
          "createdAt": "2023-01-26T12:05:17Z",
          "updatedAt": "2023-01-26T12:05:17Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this, as #395 is merged.",
          "createdAt": "2023-02-02T10:35:51Z",
          "updatedAt": "2023-02-02T10:35:51Z"
        }
      ]
    },
    {
      "number": 388,
      "id": "I_kwDOEItXAM5aAXUw",
      "title": "Tsvart review",
      "url": "https://github.com/lake-wg/edhoc/issues/388",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/F3ok87ybtvkg6My_0mPV7KZd3ww/\r\n\r\nNits in Section 3.4:\r\n\r\n- The wording \"In addition to the transport of messages including errors\" does\r\nnot explain whether (bit) errors in messages need to be handled in the\r\nunderlying transport. If the protocol assumes error-free transport of messages,\r\na better wording would be \"In addition to reliable transport of messages\r\nwithout errors\", or the like.\r\n\r\n- \"Flow control\" is not listed as requirement in Section 3.4. That could be a\r\nbug or a feature. Yet, as the protocol targets devices with low memory that may\r\nrun out of buffer space, it may make sense to be explicit whether flow control\r\nis needed to deal with scarce memory. If not, it would make sense to explain\r\nhow an implementation running out of send/receive buffer space would deal with\r\nthat.\r\n\r\n- While the document stresses in various places that the message sizes are\r\nsmall, and example values are also included, neither a required minimum nor a\r\nworst-case maximum is mentioned. As the underlying transport has to support\r\nfragmentation, a definition may not be required. Yet, if min/max numbers can be\r\nderived, it could be useful to better explain them in Section 3.4 in order to\r\nillustrate the requirements on the underlying transport. If min/max numbers\r\ncannot be derived, a corresponding heads-up could be added instead to emphasize\r\nthat the transport protocol needs to support arbitrarily large messages.\r\n\r\nNits in Appendix A:\r\n\r\n- It is not fully clear whether the content of Appendix A, or subsets thereof,\r\nare normative requirements for an implementation. This in particular applies to\r\nthe RFC2119/RFC8174 language.\r\n\r\n- The relationship between Appendix A and draft-ietf-core-oscore-edhoc is quite\r\nhard to understand.",
      "createdAt": "2022-12-24T10:44:21Z",
      "updatedAt": "2023-02-02T10:15:04Z",
      "closedAt": "2023-02-02T10:15:04Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "- error-free. EDHOC does not require error free. EDHOC will detect errors but it might be detected later in the message flow. We will add some considerations.\r\n\r\n- We will think about what to write about flow control\r\n\r\n- A min number can be derived. We will add min numbers and some considerations on large messages. \r\n\r\n- We agree with the Nits. We will improve this.\r\n",
          "createdAt": "2023-01-13T09:37:19Z",
          "updatedAt": "2023-01-13T09:40:18Z"
        }
      ]
    },
    {
      "number": 389,
      "id": "I_kwDOEItXAM5aYD-p",
      "title": "INTDIR Review",
      "url": "https://github.com/lake-wg/edhoc/issues/389",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "I found this to be a relatively long, detailed, and intricate draft which assumed knowledge of multiple other documents concerning CBOR, COSE, CWT, and CDDL. The document specifies Ephemeral Diffie-Hellman Over COSE (EDHOC), a lightweight authenticated key exchange protocol including forward secrecy, identity protection, and cipher suite negotiation. I do not see any particular INT Area concerns with this document.\r\n\r\nBased on my review, if I were on the IESG I would ballot this document as NO OBJECTION\r\n\r\nThe following are issues that SHOULD be corrected before publication:\r\n\r\nSection 3.8, Page 21: In the last paragraph of the section, \"must not\" -> \"MUST NOT\"\r\n\r\nSection 3.8.1: I would recommend against the use of random padding and in favor of deterministic padding (perhaps dependent on the padding length, e.g., pad with bytes whose value is the padding length modulo 256). Random padding provides a convenient covert channel and will use up some pseudorandom number generator entropy. As long as it is going to get strongly encrypted, there seems to be no advantage to using random padding material.\r\n\r\nSections 5.2.1/5.2.2, Pages 30/31: I found it quite confusing, on first reading, how the explanation of SUITES_I is split between these two sections and the way \"preference\" is used in two different ways: as the preference the Initiator has for different cipher suites but also as the suite the Responder prefers among those supported by the Initiator. And the text in 5.2.2 may be inconsistent because it says the Initiator MUST select its most preferred cipher suite based \"on what it can assume to be supported by the Responder\" but later says this SHOULD change for certain error messages from a Responder. (There is also an extraneous close curly brace (\"}\") in the last line on page 30.)\r\n     The text for SUITES_I in Section 5.2.1 is nice and clear and almost complete. The text on constructing SUITES_I in Section 5.2.2 seems to me to be long, complicated, and confusing. I suggest changing the text for SUITES_I in Section 5.2.1 to something like \" - array of cipher suites which the Initiator supports constructed as specified in Section 5.2.2\". The change the text in Section 5.2.2 for the SUITES_I bullet item to something like:\r\n* Construct SUITES_I as an array of cipher suites which the Initiator supports in order of preference with the first in network byte order being the most preferred and ending with the one selected by I for this session. If the cipher suite most preferred by I is selected then SUITES_I contains only that cipher suite and is encoded as an int. All cipher suites, if any, preferred by the Initiator over the selected one MUST be included. (See also Section 6.3.)\r\n- The selected suite is based on what the Initiator can assume to be supported by the Responder; however, if the Initiator previously received from the Responder an error message with error code 2 containing SUITES_R (see Section 6.3) indicating cipher suites supported by the Responder, then the Initiator SHOULD select its most preferred supported cipher suite among those (bearing in mind that error messages are not authenticated and may be forged).\r\n- The Initiator MUST NOT change its order of preference for cipher suites and MUST NOT omit a cipher suite preferred to the selected one because of previous error messages received from the Responder.\"\r\n\r\nFigures 11 and 12, Page 42: It looks like these figures have gigantic captions of 9 or 10 lines. Is that what you intended? I think that Figure captions need to be like Section names, usually one line although occasionally two lines is OK. While I do not think it is required for this document, sometimes relatively long RFCs with many figures have a Table of Figures after the Table of Contents (see RFC 6325 for an example); that wouldn't work with a 9-line caption. I suggest changing these to short captions (maybe \"Cipher Suite Negotiation Example 1\" and \"Cipher Suite Negotiation Example 2\" although that isn't very specific or creative). Then move the current caption text to a paragraph referencing the Figure.\r\n\r\nSection 8.8, Page 51: \"a random seed must\" -> \"a random seed MUST\"\r\n\r\nSection 8.8, Page 53: There should be a definition or a reference for \"Trusted Execution Environment\"\r\n\r\nSection 9: GENERAL IANA CONSIDERATIONS PROBLEMS\r\n     If additional values can be specified in future documents, which is true for these registries you are creating, there must be a \"Reference\" column saying where that value was assigned and its meaning specified.\r\n     In almost all cases there should be a Reserved value that can be used as some sort of escape if a future extension needs to be defined.\r\n     I notice that all of these requests to create registries and assign code points are written as if they have already been done but a spot check of several seems to indicate that these have not yet been done by IANA. It is true that an Internet Draft should generally be written so that it reads correctly when published as an RFC. However, I think the IANA Considerations are somewhat of an exception. Because code points are frequently assigned in advance of the publication or approval of a protocol, to avoid confusion between those that have and have not yet been done, the usual wording is to say that IANA is \"requested\" to do something unless it has actually already been done. So I would re-word all of these as requests (except for any that have actually been done).\r\n     I would also add text between the 9. and 9.1. headers, something like \"This Section gives IANA Considerations and, unless otherwise noted, conforms with [RFC8126].\" Then you can pull out all the [RFC8126] references in the Section.\r\n\r\nSection 9.1, Page 54:  It is unreasonable to expect IANA to know what a \"uint\" is or what its range is. It is best to be as explicit and exact as practical in the IANA Considerations so a complete table is better than just a list of a few values. I suggest replacing this Section with something like\r\n\r\nIANA is requested to create a new registry under the new registry group \"Ephemeral Diffie-Hellman Over COSE (DHOC)\" as follows:\r\n\r\nRegistry Name:  EHOC Exporter Label\r\nAssignment Policy:  Expert Review\r\nReference:  [this document]\r\n\r\n Label     Description                   Reference\r\n------    ----------------------------   ---------\r\n     0    Derived OSCORE Master Secret   [this document]\r\n     1    Derived OSCORE Master Salt     [this document]\r\n2-65534   unassigned\r\n65535     Reserved                       [this document]\r\n\r\nSections 9.2, 9.3, 9.4, 9.5, and 9.6: All of these should be changed in a way analogous to that indicated above.\r\n\r\nSection 9.11, Page 60: In first sentence\r\nOLD\r\n   \"Expert Review\"\r\nNEW\r\n   \"Expert Review\" or \"Specification Required\"\r\n\r\nSection 9.11, Page 60:\r\nOLD\r\n   *  Specifications are recommended.  When specifications are not\r\n      provided, \r\nNEW\r\n   *  Even for \"Expert Review\" specifications are recommended.  When specifications are not\r\n      provided for a request where Expert Review is the assignment policy, \r\n\r\nAppendix B: I assume \"ceil\" is the ceiling function but this is not specified anywhere. Suggest adding to the end of the first sentence in which it is used \"where ceil(x) is the smallest integer not less than x\".\r\n\r\nThe following are minor wording issues with the document:\r\n\r\nSection 1.1, Page 4:\r\nOLD\r\n   This specification emphasizes the possibility to reference rather\r\n   than to transport credentials in order to reduce message overhead,\r\n   but the latter is also supported.\r\nNEW\r\n   This specification emphasizes the possibility of referencing rather\r\n   than transporting credentials in order to reduce message overhead,\r\n   but the latter is also supported.\r\n\r\nSection 1.3: Claims to talk about the remainder of the document but says nothing about Appendices B through J. (I do not think it needs to mention K. (Actually, when I have a \"changes\" appendix like K I usually label it as \"Appendix Z\" to make it clear it is not part of the sequence of any other appendices.) )\r\n\r\nSection 3.5.3, Pages 16/17, in the two bulleted items:\r\n\"for the Initiator to retrieve\" -> \"the Initiator retrieving\"\r\n\"for the Responder to retrieve\" -> \"the Responder retrieving\" \r\n\r\nSection 1.2, Page 5, this is just a bit too verbose for my taste:\r\nOLD\r\n   Compared to the DTLS 1.3 handshake [RFC9147] with ECDHE and\r\n   connection ID, the EDHOC message size when transferred in CoAP can\r\n   be less than 1/6 when RPK authentication is used, see\r\n   [I-D.ietf-lwig-security-protocol-comparison].\r\nNEW\r\n   When RPK authentication is used, the EDHOC message size transferred\r\n   in CoAP can be less than 1/6 that of a DTLS 1.3 handshake [RFC9147]\r\n   with ECDHE and connection ID\r\n   [I-D.ietf-lwig-security-protocol-comparison].\r\n\r\nSection 3.9, Page 23: \"incompliance\" -> \"noncompliance\" (2 occurrences)\r\n\r\nSection 5.1, Pages 29/30: I found the last two sentences of the last paragraph of Section 5.1 a bit confusing and wordy. Suggest the following:\r\nOLD\r\n   This assumes that message duplication due to re-transmissions is\r\n   handled by the transport protocol, see Section 3.4.  The case when\r\n   the transport does not support message deduplication is addressed in\r\n   Appendix G.\r\nNEW\r\n   Message deduplication MUST be done by the transport protocol (see\r\n   Section 3.4) or as described in Appendix G.\r\n\r\nSection 7, Page 43: In the next to last sentence \"supporting one or both of these is no essential difference\" does not read well. Suggest replacing it with \"supporting one or both of these is not significantly different\".\r\n\r\nSection 8.2, Page 48: In the last sentence:\r\nOLD\r\n         it is recommended to\r\n   use a freshly generated authentication key as identity in each\r\n   initial TOFU exchange.\r\nNEW\r\n   using a freshly generated authentication key as identity in each\r\n   initial TOFU exchange is RECOMMENDED.\r\n\r\nSection 8.3, Pages 48/49:\r\nOLD\r\n   it is RECOMMENDED to use the\r\n   same hash algorithm as in the cipher suite but with as much\r\n   truncation as possible, i.e., when the EDHOC hash algorithm is\r\n   SHA-256 it is RECOMMENDED to use SHA-256/64 in x5t and c5t.\r\nNEW\r\n   using the\r\n   same hash algorithm as in the cipher suite, but with as much\r\n   truncation as possible, is RECOMMENDED.  That is, when the EDHOC hash algorithm is\r\n   SHA-256, using SHA-256/64 in x5t and c5t is RECOMMENDED.\r\n\r\nSection 8.8, Page 54:\r\nOLD\r\n      It is RECOMMENDED to discontinue the protocol if\r\n   the received EDHOC message is not deterministic CBOR.\r\nNEW\r\n      Discontinuing the protocol if\r\n   the received EDHOC message is not deterministic CBOR is RECOMMENDED.\r\n\r\nSection 9.6: The table in this section should probably have a figure number and caption since other tables in this document do.\r\n\r\nSection 9.11, Page 60: \"approving point assignment\" -> \"approving code point assignment\"\r\n\r\nAppendix C, Page 75: \"implementors to get used to\" -> \"implementors get used to\"\r\n\r\nThanks,\r\nDonald\r\n===============================\r\n Donald E. Eastlake 3rd   +1-508-333-2270 (cell)\r\n 2386 Panoramic Circle, Apopka, FL 32703 USA\r\n [d3e3e3@gmail.com](mailto:d3e3e3@gmail.com)",
      "createdAt": "2023-01-02T10:45:04Z",
      "updatedAt": "2023-02-02T10:17:39Z",
      "closedAt": "2023-02-02T10:17:39Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> Figures 11 and 12, Page 42: It looks like these figures have gigantic captions of 9 or 10\r\n> lines. Is that what you intended? I think that Figure captions need to be like Section names,\r\n> usually one line although occasionally two lines is OK.\r\n\r\nI totally agree, but I think this differs from depending on academic area and style guide. Especially biology paper often have absurdly long captions. But given that all the other figures follow \"Figure captions need to be like Section names\", I think that the captions on figure 9 and 10 should be aligned with the rest of the document.",
          "createdAt": "2023-01-02T10:52:54Z",
          "updatedAt": "2023-01-02T10:54:08Z"
        }
      ]
    },
    {
      "number": 393,
      "id": "I_kwDOEItXAM5cctmS",
      "title": "Improve text on message correlation",
      "url": "https://github.com/lake-wg/edhoc/issues/393",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "@marco-tiloca-sics  provided some comments based on PR #391.\r\n\r\nThe specification was already before quite open for various means to provide correlation. This may lead to interoperability problems even in the case of using EDHOC over CoAP (it did in one of the recent interop tests, where one party was not using prepended identifiers). If we are now reworking this text we should try to fix this.\r\n\r\nCorrelation may be provided without the use of transport (which was the reason why prepended identifiers was not used). This should be mentioned.\r\n\r\nSo on the one hand, the specification is limiting the description to the case when transport provides correlation, on the other hand is it a bit loose on how to achieve correlation even over CoAP, leading to interoperability problems. It is proposed to use a formulation like \"Unless correlation is provided by other means\" then SHOULD use <a well-defined way of getting correlation>. The only candidate for well-defined way is prepended identifiers.\r\n\r\nFormulations like this:\r\n\u201cPrepended identifiers MAY be omitted in case the transport provides such correlation.\u201d \r\nshould be omitted since it could be a problem in case of proxying between TCP and UDP.\r\n\r\nText referring to \u201cthe integer representation\u201d should be rephrased, since it is a representation of identifiers which sometimes may be represented as integers.\r\n\r\nA sanity check of the processing steps in the new forward / reverse message flow sections showed one missing case when error message can be sent. \r\n\r\nWhen working with the changes I realized some other quirks:\r\n\r\nThroughout the draft, references about correlation are made to appendix A.2 (EDHOC over CoAP) instead of section 3.4.1 which contains the general description. I think it is better to reference the section in the body (which includes a reference to the appendix)\r\n\r\nSection 3.4.1 is not only about connection identifiers so the title is misleading. Change from \"Use of Connection Identifiers for EDHOC Message Correlation\" to \"EDHOC Message Correlation\"\r\n\r\nAfter making these updates, the text in Appendix H becomes essentially redundant and can be removed and the remnants distributed over 3.4.1 and A.2.\r\n\r\n\r\n\r\n\r\n",
      "createdAt": "2023-01-20T15:20:27Z",
      "updatedAt": "2023-02-02T10:29:13Z",
      "closedAt": "2023-02-02T10:29:13Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "A proposal included in PR #391: 1c4ebe7f",
          "createdAt": "2023-01-20T15:25:51Z",
          "updatedAt": "2023-01-20T15:25:51Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as #391 is merged.",
          "createdAt": "2023-02-02T10:29:13Z",
          "updatedAt": "2023-02-02T10:29:13Z"
        }
      ]
    },
    {
      "number": 394,
      "id": "I_kwDOEItXAM5cyy07",
      "title": "Secdir review",
      "url": "https://github.com/lake-wg/edhoc/issues/394",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "\r\nFrom: Radia Perlman <radiaperlman@gmail.com>\r\nDate: Tuesday, 24 January 2023 at 03:49\r\nTo: secdir@ietf.org <secdir@ietf.org>, The IESG <iesg@ietf.org>, draft-ietf-lake-edhoc.all@ietf.org <draft-ietf-lake-edhoc.all@ietf.org>\r\nSubject: Secdir review of draft-ietf-lake-edhoc-18\r\n\r\nI have reviewed this document as part of the security directorate's ongoing effort to review all IETF documents being processed by the IESG.  These comments were written primarily for the benefit of the security area directors.  Document editors and WG chairs should treat these comments just like any other last call comments.\r\n\r\nThere are a family of \"lightweight\" protocols designed for us in \"constrained\" environments (think IoT) that replace other IETF protocols that would be otherwise be used. The constraints may include lack of CPU power, lack of bandwidth, lack of non-volatile memory, and running over a non-IP network.\r\n\r\nEDHOC (Ephemeral Diffie-Hellman over COSE) specifies a protocol for establishing session keys for use with OSCORE that specifies how to cryptographically protect a session. So you can think of EDHOC as corresponding to IKE while OSCORE corresponds to ESP, or you can think of the pair EDHOC/OSCORE as corresponding to TLS. As you would expect, the protocol is functionally quite similar to both TLS and IKE, and the interesting security discussions would be around the justifications for the differences.\r\n\r\nThe name EDHOC is misleading, since EDHOC supports four authentication variants, only one of which is Ephemeral Diffie-Hellman. The other three are where one of both endpoints use a static Diffie-Hellman key. TLS 1.3 decided to abandon all such variants because they do not provide forward secrecy, but I suppose it reasonable to revisit that decision in the context of a constrained environment. But I can think of no justification for the misleading name. The working group name (Lightweight Authenticated Key Exchange - LAKE) would be a more accurately descriptive name. The authors may be confused about the definition of forward secrecy, since in Security Considerations they say this protocol provides forward secrecy and in Appendix J they refer to a key refresh technique that has some nice security properties but does not provide what is generally regarded as forward secrecy.\r\n\r\nOther differences:\r\n\r\nThey simplify the protocol compared to TLS by not including the variations allowing restart of a security context based on cached information. While this makes the code to implement the protocol simpler, it hurts performance.\r\n\r\nThe negotiation of cryptographic algorithms is based on suites (as early versions of TLS did) rather than a more ala carte approach that TLS has evolved towards. Further, while TLS has a system of initiator proposes and responder chooses cryptographic algorithms, in EDHOC's system  the responder is constrained to choose the most preferred of the initiator's suites that it supports. Further, the initiator must guess the suite the responder will choose and the protocol may be very \"chatty\" the first time the protocol is run (or every time if the initiator does not cache the preferred suite of the responder). There would be an extra pair of messages for each suite the initiator prefers over the first one the responder accepts.\r\n\r\nWhether authentication is going to be based on Ephemeral or Static Diffie-Hellman keys is not negotiated. The initiator is expected to know (or the protocol gets more chatty).\r\n\r\nFinally, rather than negotiating a symmetric encryption algorithm for use within EDHOC itself, EDHOC generates an extended PRF output which it XORs into messages to encrypt them. In practice, this strikes me as a clever hack to greatly simpify the specification while not substantially hurting performance. But others may disagree.\r\n\r\nThere was a reference to an analysis of the security of the protocol (which is based on SIGMA). I didn't read it, but the design of the protocol looks sound to me.\r\n\r\nNits:\r\n\r\nFrom Section 1.1:\r\n\r\n\"This specification emphasizes the possibility to reference\r\nrather than to transport credentials in order to reduce message\r\noverhead, but the latter is also supported.\"\r\n\r\n->\r\n\r\n\"This specification supports the referencing of credentials in order to reduce message\r\noverhead, but credentials may alternatively be embedded.\"\r\n\r\nIn Section 3.9:\r\n\r\n\"incompliance\" -> \"non-compliance\"\r\n\r\n\r\nRadia\r\n",
      "createdAt": "2023-01-25T15:12:38Z",
      "updatedAt": "2023-02-02T10:35:20Z",
      "closedAt": "2023-02-02T10:35:20Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in #395",
          "createdAt": "2023-02-02T10:35:14Z",
          "updatedAt": "2023-02-02T10:35:14Z"
        }
      ]
    },
    {
      "number": 396,
      "id": "I_kwDOEItXAM5c_ohE",
      "title": "Security of using the same key for Initiator and Responder roles",
      "url": "https://github.com/lake-wg/edhoc/issues/396",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "PR exists"
      ],
      "body": "The document writes:\r\n\r\n```\r\nAs noted in Section 12 of [RFC9052] the use of a single key for\r\n   multiple algorithms is strongly discouraged unless proven secure by a\r\n   dedicated cryptographic analysis.  In particular this recommendation\r\n   applies to using the same private key for static Diffie-Hellman\r\n   authentication and digital signature authentication.  A preliminary\r\n   conjecture is that a minor change to EDHOC may be sufficient to fit\r\n   the analysis of secure shared signature and ECDH key usage in\r\n   [Degabriele11] and [Thormarker21].\r\n```\r\n\r\nWhat can we say about using the same key for Initiator and Responder roles? We should probably say something",
      "createdAt": "2023-01-27T18:05:32Z",
      "updatedAt": "2023-04-20T08:20:38Z",
      "closedAt": "2023-04-20T08:20:38Z",
      "comments": [
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In principles, a signature for the initiator role cannot be confused with a responder's one (it would require crazy hash and mac collision I guess), so this does not seem to pose any particular problem. Our models did include this possibility, by default a key could be used for both roles, which gives some additional confidence toward this intuition.\r\n\r\nDid you have any particular threat in mind?",
          "createdAt": "2023-02-03T16:23:49Z",
          "updatedAt": "2023-02-03T16:23:49Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": ">a signature for the initiator role cannot be confused with a responder's one \r\n>by default a key could be used for both roles, which gives some additional confidence toward this intuition.\r\n\r\nThanks. I will add text that the same key for Initiator and Responder roles.\r\n\r\n>Did you have any particular threat in mind?\r\nNo. Just if a signature for the initiator role can be confused with a responder's one.",
          "createdAt": "2023-02-27T07:36:49Z",
          "updatedAt": "2023-02-27T07:36:49Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One additional thought on this -> if we want to completely rule out any potential issue here, we can add inside the signature payload a constant flag, with two distinct values for the responder and initiator side.\r\n\r\nThat simplifies the overall crypto argument for the security, potentially at no cost?",
          "createdAt": "2023-03-01T09:21:11Z",
          "updatedAt": "2023-03-01T09:21:11Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "We discussed this among the authors. This is a good idea, but we wouldn't like to change the test vectors at this late stage unless we think it is necessary. Let's bring it up for discussion if we for some other reason need to update the test vectors. Closing this now.",
          "createdAt": "2023-04-20T08:20:38Z",
          "updatedAt": "2023-04-20T08:20:38Z"
        }
      ]
    },
    {
      "number": 400,
      "id": "I_kwDOEItXAM5fidsR",
      "title": "Request for \"unknown credential referenced\" / \u201ccredential not accepted, try another\u201d error",
      "url": "https://github.com/lake-wg/edhoc/issues/400",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Mail thread here:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/lake/-PSbOYNgRgkUABW3lXzPqcrW-Dk/\r\n",
      "createdAt": "2023-02-28T11:33:17Z",
      "updatedAt": "2023-06-02T07:56:49Z",
      "closedAt": "2023-06-02T07:56:49Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-06-02T07:56:49Z",
          "updatedAt": "2023-06-02T07:56:49Z"
        }
      ]
    },
    {
      "number": 402,
      "id": "I_kwDOEItXAM5gLztE",
      "title": "Update to error processing",
      "url": "https://github.com/lake-wg/edhoc/issues/402",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [],
      "body": "Creating a new issue to overview the various new issues raised around error processing. First set:\r\n\r\nA. Request for an error indicating unknown referenced credential\r\n  * #400 \r\n  * #401\r\n\r\nB. Request for a dedicated ERR_CODE to indicate failure in EAD processing + potential new registry for error cases.\r\n\r\nC. Protected error messages\r\n* #398 ",
      "createdAt": "2023-03-07T15:39:02Z",
      "updatedAt": "2023-06-12T14:54:37Z",
      "closedAt": "2023-06-12T14:54:36Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Just as a reminder, at IETF 110 we had the following candidate EDHOC error classes:\r\n\r\n1. Selected cipher suite not supported\r\n2. Message (field) error (syntax error or incorrect protocol field of expected message)\r\n3. Credential/context error (error related to establish certificate/raw public key context for processing message, including certificate expired, revoked, unsupported, corrupt, unknown CA, or other issue in processing the credential)\r\n4. Decrypt error (a cryptographic operation failed, including being unable to correctly verify a signature or a MAC in the protocol message)\r\n5. EAD error (unsupported or missing data)\r\n6. Access denied (credential valid but peer not allowed access)\r\n7. Internal error (error not related to the protocol or the peer)\r\n\r\nCurrently in the draft, only 1. is included (ERR_CODE = 2), 2-7 are \"unspecified error\" (ERR_CODE = 1).",
          "createdAt": "2023-03-07T15:43:23Z",
          "updatedAt": "2023-03-07T15:43:23Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Regarding item B above. One way is to register an ERR_CODE for EAD, reuse the ead_label in indicate first EAD item to fail, and let the EAD application define ead_error.\r\n\r\n   error = (\r\n     ERR_CODE : int,\r\n     ERR_INFO : any,\r\n   )\r\n\r\nERR_INFO = (\r\n       ead_label : int,\r\n       ? ead_error : any,\r\n)\r\n",
          "createdAt": "2023-03-09T09:37:43Z",
          "updatedAt": "2023-03-09T13:12:28Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "About B, I don't think this fits the criterion of only doing errors that are actionable, at least initially.\r\n\r\nIf the sender of the EAD were willing to do the EDHOC exchange even without that particular EAD item, it would have made it non-critical. So if it's critical, then the sender already stated things will not continue.",
          "createdAt": "2023-03-30T00:52:02Z",
          "updatedAt": "2023-03-30T00:52:02Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "This means that an EAD application would simply register the ERR_CODE values it needs in the \"EDHOC Error Codes\" registry, together with the semantics for the accompanying ERR_INFO.\r\n\r\nThat's also fine; regardless the exact approach, my main point was enabling an EAD application to indicate which exact EAD item processing failed.\r\n\r\nAt the same time, I was (maybe too) worried about overpopulating the \"EDHOC Error Codes\" registry by doing so, hence the proposed hierarchical approach of having a single ERR_CODE value registered there (meaning \"something went wrong with an EAD item, see ERR_INFO for details that will tell you which EAD item and what went wrong with it).\r\n\r\nRegardless, as I understand Section 3.8 of -lake-edhoc-19, an EAD application might be designed to fail and return an EDHOC error message also if the processed of a non-critical EAD item has failed. It's just not a must like in the case of critical EAD items.",
          "createdAt": "2023-03-30T08:01:04Z",
          "updatedAt": "2023-03-30T08:01:04Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "To be clear: I'm not saying that \"something was wrong with your EADs\" would not make a sensible error code (and I don't have a clear picture of whether it makes sense to distinguish \"Understood but your cert is bad\" from \"Understood but I don't like your EAD\"). I'm just saying that it's not actionable, and working under the actionability criterion thus not eligible.\r\n\r\nThe point about non-critical failed-to-process items is an important one -- \"ignore if you don't know it\" is not the same as \"ignore if processing whatever is in their failed. But looking at how that those are recoverable points to the general topic of recoverability, which it may make sense to think up examples of. When recovering from cipher suite mismatches, much deliberation went into the prevention of downgrade attacks. If the actionability of of an (even non-critical) EAD that failed to process is to retry without it (or with an altered form of it), that is a kind of downgrade attack again for EAD1, as the on-path attacker can deny the peers that EAD without being discovered.\r\n\r\nSo maybe the requirement for error codes to only be registered (initially) when they are recoverable is a good opportunity to get review of whether the recovery implied by the error code is safe. The error code you suggest for \"EAD caused failure\" would pass here if it described well which kind of recovery is allowed with it. (The addition would consist mainly of seccons, I figure -- maybe to the extent where it's better done in a document that may be informationally referenced in EDHOC already). (Or it's shorter than I think or can for other reasons fit well in EDHOC, dunno, but my gut feeling is that such a characterization would be large).",
          "createdAt": "2023-03-30T08:19:42Z",
          "updatedAt": "2023-03-30T08:19:42Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "> So maybe the requirement for error codes to only be registered (initially) when they are recoverable is a good opportunity to get review of whether the recovery implied by the error code is safe. The error code you suggest for \"EAD caused failure\" would pass here if it described well which kind of recovery is allowed with it.\r\n\r\nUnless we have a simple/trivial characterization of \"safe recoverability\" (which I don't have out of my hat), I think it's just better for the time being to go for the the first requirement you propose on registering error codes :-)",
          "createdAt": "2023-03-30T08:29:47Z",
          "updatedAt": "2023-03-30T08:29:47Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "A & C are done, and we agree to no to B, so closing this.",
          "createdAt": "2023-06-12T14:54:36Z",
          "updatedAt": "2023-06-12T14:54:36Z"
        }
      ]
    },
    {
      "number": 403,
      "id": "I_kwDOEItXAM5iDLsi",
      "title": "kccs and kcwt security considerations.",
      "url": "https://github.com/lake-wg/edhoc/issues/403",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [
        "Close?"
      ],
      "body": "The document registers two new COSE header parameters that can be used for COSE in general (not only EDHOC) but does not give any security considerations for them. As a comparision, the COSE X509 has quite a lot of things to say for those 4 new header parameters.\r\n\r\nSecurity considerations are explicitly important for kccs that transport a new public key but not any information to verify that the key is trusted. That kind of information need to be come from elsewhere. If not the best security is TOFU. This is quite different from kcwt and x5t, kid, x5chain, etc.",
      "createdAt": "2023-03-29T04:10:19Z",
      "updatedAt": "2023-07-07T14:20:45Z",
      "closedAt": "2023-07-07T14:20:45Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "https://datatracker.ietf.org/doc/rfc9360/ gives an example of the type of considerations that might be needed",
          "createdAt": "2023-04-08T12:19:46Z",
          "updatedAt": "2023-04-08T12:19:46Z"
        }
      ]
    },
    {
      "number": 404,
      "id": "I_kwDOEItXAM5i6hPM",
      "title": "Mention that EDHOC is  self-describing",
      "url": "https://github.com/lake-wg/edhoc/issues/404",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "emanjon"
      ],
      "labels": [],
      "body": "We should mention somewhere that EDHOC is self-describing in the meaning that the length and type of all field are described by the messages themselves (and the EDHOC specification). This is different from how cTLS is designed where you need a compresiion template to be able to decode the messages. The application profile in EDHOC is very different.",
      "createdAt": "2023-04-08T12:24:14Z",
      "updatedAt": "2023-06-12T15:02:08Z",
      "closedAt": "2023-06-12T15:02:08Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "  Some parameters can be negotiated through the\r\n   protocol execution (specifically, cipher suite, see Section 3.6) but\r\n   other parameters are only communicated and may not be negotiated\r\n   (e.g., which authentication method is used, see Section 3.2).  Yet\r\n   other parameters need to be known out-of-band. \r\n   \r\n   \r\n   @gselander what are \"Yet other parameters need to be known out-of-band. \" ?",
          "createdAt": "2023-06-11T08:36:22Z",
          "updatedAt": "2023-06-11T08:36:22Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The use of message_4 is not conveyed except if it appears.",
          "createdAt": "2023-06-12T07:53:49Z",
          "updatedAt": "2023-06-12T07:53:49Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "With PR #409 and d2ccf17 this is issue is addressed.",
          "createdAt": "2023-06-12T15:02:08Z",
          "updatedAt": "2023-06-12T15:02:08Z"
        }
      ]
    },
    {
      "number": 405,
      "id": "I_kwDOEItXAM5j7nU4",
      "title": "Defining a new IANA Registry for EDHOC application profiles",
      "url": "https://github.com/lake-wg/edhoc/issues/405",
      "state": "CLOSED",
      "author": "rikard-sics",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "wontfix",
        "Close?"
      ],
      "body": "It can be a good idea for the EDHOC draft (or coming documents in LAKE or even elsewhere) to define a new registry for EDHOC application profiles. This can be useful for instance for the web linking that is being defined in the draft [Using EDHOC with CoAP and OSCORE](https://datatracker.ietf.org/doc/html/draft-ietf-core-oscore-edhoc-07) to describe an EDHOC resource together with a new target attribute \u201ced-prof\u201d.\r\n\r\nThis was previously raised and discussed in the [CoRE interim meeting on March 1st](https://datatracker.ietf.org/meeting/interim-2023-core-04/session/core), and again in the [CoRE session during IETF 116](https://datatracker.ietf.org/meeting/116/session/core). Originally this topic was triggered by feedback from Christian Ams\u00fcss on the CoRE mailing list [here](https://mailarchive.ietf.org/arch/msg/core/Rs9EMsszA-QzRue7QJDIZN280WU/) (see the paragraph starting with \"EDHOC treats application profiles\").\r\n\r\nA proposed format can look as the following:\r\n`(Name | Description | Reference)`\r\n\r\nAt the same time the EDHOC draft could then also register the first application profile in this new registry. The Appendix F of the EDHOC draft can be used to define an application profile to be registered, instead of a simply being an example. Also this point was triggered by a comment in the review from Christian linked above.",
      "createdAt": "2023-04-20T11:53:57Z",
      "updatedAt": "2023-07-13T21:28:19Z",
      "closedAt": "2023-07-13T21:28:19Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is a good idea but I think it is a bit late in the process to add to the EDHOC document itself. This likely leads to a lot of discussion and do not really need to be done in the EDHOC document. Adding it to the EDHOC specification could delay publication.\r\n\r\nAs \"Using EDHOC with CoAP and OSCORE\" is also late in the publication process, maybe a separate draft is best? The new document could be in LAKE or CORE.",
          "createdAt": "2023-06-02T07:34:18Z",
          "updatedAt": "2023-06-02T07:34:18Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @emanjon - I think the best option is a separate, new documet in LAKE. That can define the registry, the target attribute \"ed-prof\" for web-linking mentioned in the first comment, and hopefully a well-known application profile to be registered as first entry.",
          "createdAt": "2023-06-02T07:44:18Z",
          "updatedAt": "2023-06-02T07:44:18Z"
        },
        {
          "author": "rikard-sics",
          "authorAssociation": "NONE",
          "body": "Makes sense for me also to do this in separate document.",
          "createdAt": "2023-06-07T07:29:13Z",
          "updatedAt": "2023-06-07T07:29:13Z"
        }
      ]
    },
    {
      "number": 408,
      "id": "I_kwDOEItXAM5oRrcq",
      "title": "Nit: Redundant sentence",
      "url": "https://github.com/lake-wg/edhoc/issues/408",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "5.4.2. Initiator Processing of Message 3\r\n\r\n\"Compute the transcript hash TH_4 =  ...\r\nNote that TH_4 can be computed and cached already in the processing of message_3.\"\r\n\r\nWhy is the last sentence needed?\r\n\r\nEdit: Looks like copy-paste inheritance from the analogue text about TH_3 and message_2, which is needed since  that text is the section about processing of message_3.",
      "createdAt": "2023-06-09T09:02:19Z",
      "updatedAt": "2023-06-11T08:31:01Z",
      "closedAt": "2023-06-11T08:31:01Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "ce6e38d2",
          "createdAt": "2023-06-09T09:08:43Z",
          "updatedAt": "2023-06-09T09:08:43Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree",
          "createdAt": "2023-06-11T08:31:01Z",
          "updatedAt": "2023-06-11T08:31:01Z"
        }
      ]
    },
    {
      "number": 412,
      "id": "I_kwDOEItXAM5q4C_6",
      "title": "or a pseudorandom number such as a hash",
      "url": "https://github.com/lake-wg/edhoc/issues/412",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "A hash is deterministic and not pseudorandom. A digest is only pseudorandom is the input is pseudorandom.",
      "createdAt": "2023-07-07T08:38:01Z",
      "updatedAt": "2023-07-07T14:20:28Z",
      "closedAt": "2023-07-07T14:20:28Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "\"e.g., be a counter or a pseudorandom number such as a hash\"",
          "createdAt": "2023-07-07T08:38:23Z",
          "updatedAt": "2023-07-07T08:38:23Z"
        }
      ]
    },
    {
      "number": 414,
      "id": "I_kwDOEItXAM5t9fEv",
      "title": "Compliance with new ERR_CODE 3",
      "url": "https://github.com/lake-wg/edhoc/issues/414",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "When we introduced the new error code 3 \"Unknown credential referenced\" we didn't take an active decision on compliance. Current text says:\r\n\r\n\"Error codes (ERR_CODE) 1 and 2 MUST be supported.\"\r\n\r\nAny reason why not mandatory to also support 3?",
      "createdAt": "2023-08-10T09:51:49Z",
      "updatedAt": "2023-08-24T16:32:10Z",
      "closedAt": "2023-08-24T16:32:10Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Marco pointed out that mandatory support for ERR_CODE 3 may be interpreted as mandatory support for credential identifiers for both reference and value of credential. Which is undesirable in use cases which never transports the credentials. For this reason it may be good to not mandate support for this error code, i.e., leave the compliance requirements as they are and change nothing.\r\n\r\nOther thoughts?",
          "createdAt": "2023-08-17T14:11:40Z",
          "updatedAt": "2023-08-17T14:11:40Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": ">leave the compliance requirements as they are and change nothing.\r\nSounds good to me",
          "createdAt": "2023-08-24T16:32:10Z",
          "updatedAt": "2023-08-24T16:32:10Z"
        }
      ]
    },
    {
      "number": 415,
      "id": "I_kwDOEItXAM5uqnAQ",
      "title": "Martin Duke's review",
      "url": "https://github.com/lake-wg/edhoc/issues/415",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/GaGzmZ6djvxSXT8IQkxM1y3g6lc/\r\n\r\n\r\n\r\n----------------------------------------------------------------------\r\nCOMMENT:\r\n----------------------------------------------------------------------\r\n\r\nThanks to Michael Scharf for the TSVART review.\r\n\r\nI appreciate the clear statement of transport requirements in S3.4.\r\n\r\nYou state that deduplication is a requirement of the transport, but then in S7\r\nyou state that some transports don't actually meet the requirement, and what to\r\ndo in that case. So it really isn't a requirement, is it? Just a nice to have!\r\nIt would be good to state that in 3.4.\r\n\r\nIs it really necessary for the transport to handle reordering? IIUC this\r\nprotocol consists of up to 4 atomic messages that fit in a datagram, and each\r\none is input to the next. How could there be reordered messages in this\r\ncontext? (Similarly, I fail to see how a transport could support ordering but\r\nnot deduplication -- perhaps I'm not imaginative enough).\r\n",
      "createdAt": "2023-08-18T12:44:10Z",
      "updatedAt": "2023-08-29T16:24:39Z",
      "closedAt": "2023-08-29T16:24:39Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this since PR is merged",
          "createdAt": "2023-08-24T18:05:11Z",
          "updatedAt": "2023-08-24T18:05:11Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": " ... perhaps keep these issues open a little while pending potential comments",
          "createdAt": "2023-08-24T18:06:59Z",
          "updatedAt": "2023-08-24T18:06:59Z"
        }
      ]
    },
    {
      "number": 417,
      "id": "I_kwDOEItXAM5u9Dm4",
      "title": "Lars Eggert's review",
      "url": "https://github.com/lake-wg/edhoc/issues/417",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/BxQZLgOSX7_jZs3gZaTEzfXgqC8/\r\n\r\n\r\n----------------------------------------------------------------------\r\nDISCUSS:\r\n----------------------------------------------------------------------\r\n\r\n# GEN AD review of draft-ietf-lake-edhoc-20\r\n\r\nCC @larseggert\r\n\r\nThanks to Christer Holmberg for the General Area Review Team (Gen-ART) review\r\n(https://mailarchive.ietf.org/arch/msg/gen-art/tvJRHUSdUtXJpishMcOd0KwR4O0).\r\n\r\n## Discuss\r\n\r\n### Section 3.4, paragraph 6\r\n```\r\n     *  denial-of-service protection,\r\n```\r\nNo IETF transport protocol provides DDoS protection. If this is an\r\nactual requirement, how will it be provided?\r\n\r\n### Section 8, paragraph 3\r\n```\r\n     An implementation MAY support only a single method.  None of the\r\n     methods are mandatory-to-implement.\r\n```\r\nHow is interoperability guaranteed without at least a single\r\nmandatory-to-implement method?\r\n\r\n### Section 9.7, paragraph 1\r\n```\r\n     state, perform cryptographic operations, and amplify messages.  To\r\n     mitigate such attacks, an implementation SHOULD rely on lower layer\r\n     mechanisms.  For instance, when EDHOC is transferred as an exchange\r\n     of CoAP messages, the CoAP server can use the Echo option defined in\r\n     [RFC9175] which forces the CoAP client to demonstrate reachability at\r\n     its apparent network address.  To avoid an additional roundtrip the\r\n     Initiator can reduce the amplification factor by padding message_1,\r\n     i.e., using EAD_1, see Section 3.8.1.\r\n```\r\nWhile the Echo option prevents some resource exhaustion aspects of\r\nspoofing, it does not prevent DDoS by actual CoAP clients. Likewise,\r\nwhile limiting amplification reduces the impact of a DDoS attack by\r\nactual clients, it does not prevent it. It is hence incorrect to say\r\nthat these attacks are mitigated by COAP. (They also wouldn't be\r\nmitigated by any other IETF transport protocol.)\r\n\r\n### \"A.2.\", paragraph 1\r\n```\r\n     duplication.  CoAP can also perform fragmentation and protect against\r\n     denial-of-service attacks.  The underlying CoAP transport should be\r\n```\r\nPer above, COAP does not protect against DDoS.\r\n\r\n### \"A.2.\", paragraph 6\r\n```\r\n     To protect against denial-of-service attacks, the CoAP server MAY\r\n     respond to the first POST request with a 4.01 (Unauthorized)\r\n     containing an Echo option [RFC9175].  This forces the Initiator to\r\n```\r\nPer above, this mitigates some aspects of spoofing, but does not\r\nprotect against DDoS.\r\n\r\n### IANA\r\n\r\nThis document seems to have unresolved IANA issues. Holding a DISCUSS for IANA,\r\nso we can determine next steps during the telechat.\r\n\r\n\r\n----------------------------------------------------------------------\r\nCOMMENT:\r\n----------------------------------------------------------------------\r\n\r\n\r\n## Comments\r\n\r\n### Section 3.4, paragraph 5\r\n```\r\n     *  flow control,\r\n```\r\nBut not congestion control?\r\n\r\n### Section 10.2, paragraph 17\r\n```\r\n     | -20 to 23      | Standards Action with Expert Review |\r\n```\r\nWhy still Expert Review if this already requires a Standards Action?\r\n(Same comment for other registry ranges with this policy.)\r\n\r\n### Inclusive language\r\n\r\nFound terminology that should be reviewed for inclusivity; see\r\nhttps://www.rfc-editor.org/part2/#inclusive_language for background and more\r\nguidance:\r\n\r\n * Term `master`; alternatives might be `active`, `central`, `initiator`,\r\n   `leader`, `main`, `orchestrator`, `parent`, `primary`, `server`\r\n * Term `man`; alternatives might be `individual`, `people`, `person`\r\n * Term `dummy`; alternatives might be `placeholder`, `sample`, `stand-in`,\r\n   `substitute`\r\n * Term `native`; alternatives might be `built-in`, `fundamental`, `ingrained`,\r\n   `intrinsic`, `original`\r\n\r\n## Nits\r\n\r\nAll comments below are about very minor potential issues that you may choose to\r\naddress in some way - or ignore - as you see fit. Some were flagged by\r\nautomated tools (via https://github.com/larseggert/ietf-reviewtool), so there\r\nwill likely be some false positives. There is no need to let me know what you\r\ndid with these suggestions.\r\n\r\n### Outdated references\r\n\r\nDocument references `draft-selander-lake-authz-02`, but `-03` is the latest\r\navailable revision.\r\n\r\nDocument references `draft-ietf-core-oscore-key-update-04`, but `-05` is the\r\nlatest available revision.\r\n\r\nDocument references `draft-ietf-teep-architecture`, but that has been published\r\nas `RFC9397`.\r\n\r\nDocument references `draft-ietf-cose-cbor-encoded-cert-05`, but `-06` is the\r\nlatest available revision.\r\n\r\nDocument references `draft-ietf-core-oscore-edhoc-07`, but `-08` is the latest\r\navailable revision.\r\n\r\n### URLs\r\n\r\nThese URLs in the document did not return content:\r\n\r\n * https://apps.nsa.gov/iaarchive/programs/iad-initiatives/cnsa-suite.cfm\r\n * https://webee.technion.ac.il/~hugo/sigma-pdf.pdf\r\n\r\nThese URLs in the document can probably be converted to HTTPS:\r\n\r\n * http://cbor.me/\r\n\r\n### Grammar/style\r\n\r\n#### Section 3.5.1, paragraph 2\r\n```\r\nn used by Initiator or Responder. Similarly for CRED_I, see Section 5.4.2. Th\r\n                                  ^^^^^^^^^\r\n```\r\nA comma may be missing after the conjunctive/linking adverb \"Similarly\".\r\n\r\n#### Section 4.1.1.3, paragraph 5\r\n```\r\n used for two different purposes. However an application can re-derive the s\r\n                                  ^^^^^^^\r\n```\r\nA comma may be missing after the conjunctive/linking adverb \"However\".\r\n\r\n#### Section 4.1.2, paragraph 1\r\n```\r\nal times as long as it is done in a secure way. For example, in most encrypt\r\n                               ^^^^^^^^^^^^^^^\r\n```\r\nConsider replacing this phrase with the adverb \"securely\" to avoid wordiness.\r\n\r\n#### Section 5.3.2, paragraph 17\r\n```\r\ns is similar to waiting for an acknowledgement (ACK) in a transport protocol.\r\n                               ^^^^^^^^^^^^^^^\r\n```\r\nDo not mix variants of the same word (\"acknowledgement\" and \"acknowledgment\")\r\nwithin a single text.\r\n\r\n#### Section 6, paragraph 11\r\n```\r\ns 8 and 9, and prefers suite 8, so therefore selects suite 8 in the second m\r\n                                ^^^^^^^^^^^^\r\n```\r\nConsider using \"so\" or \"therefore\".\r\n\r\n#### Section 6.3.1, paragraph 3\r\n```\r\n multiple times due to missing acknowledgement on the CoAP messaging layer.\r\n                               ^^^^^^^^^^^^^^^\r\n```\r\nDo not mix variants of the same word (\"acknowledgement\" and \"acknowledgment\")\r\nwithin a single text.\r\n\r\n#### Section 9.1, paragraph 6\r\n```\r\ne use of authenticated encryption. Hence the message authenticating function\r\n                                   ^^^^^\r\n```\r\nA comma may be missing after the conjunctive/linking adverb \"Hence\".\r\n\r\n#### Section 9.5, paragraph 1\r\n```\r\nrves such as Ed25519 and Ed448 can mapped to and from short-Weierstrass form\r\n                                   ^^^^^^\r\n```\r\nThe modal verb \"can\" requires the verb's base form.\r\n\r\n#### Section 9.8, paragraph 1\r\n```\r\nH_3, TH_4) does not make use of a so called running hash. This is a design c\r\n                                  ^^^^^^^^^\r\n```\r\nThe expression \"so-called\" is usually spelled with a hyphen.\r\n\r\n#### Section 11.2, paragraph 11\r\n```\r\nsage flow\" (see Appendix A.2.2). By default we assume the forward message flo\r\n                                 ^^^^^^^^^^\r\n```\r\nDid you mean: \"By default,\"?\r\n\r\n#### \"A.1.\", paragraph 4\r\n```\r\nt representation trivially avoids so called \"benign malleability\" attacks whe\r\n                                  ^^^^^^^^^\r\n```\r\nThe expression \"so-called\" is usually spelled with a hyphen.\r\n\r\n#### \"A.1.\", paragraph 6\r\n```\r\nyte 0x02 (i.e., M = 0x02 || X). * If a uncompressed y-coordinate is required,\r\n                                     ^\r\n```\r\nUse \"an\" instead of \"a\" if the following word starts with a vowel sound, e.g.\r\n\"an article\", \"an hour\".\r\n\r\n#### \"A.2.\", paragraph 2\r\n```\r\nhe major type. CBOR supports several different types of data items, in addit\r\n                             ^^^^^^^^^^^^^^^^^\r\n```\r\nConsider using \"several\".\r\n\r\n#### \"A.2.\", paragraph 7\r\n```\r\n CDDL C.2. CDDL Definitions This sections compiles the CDDL definitions for e\r\n                                 ^^^^^^^^\r\n```\r\nConsider using the singular form after the singular determiner \"This\".\r\n\r\n#### \"A.2.1.\", paragraph 8\r\n```\r\ning. What verifications are needed depend on the deployment, in particular th\r\n                                   ^^^^^^\r\n```\r\nDid you mean \"to depend\"?\r\n\r\n#### \"D.3.\", paragraph 1\r\n```\r\ncation message is successful, then the the Initiator transitions from COMPLET\r\n                                   ^^^^^^^\r\n```\r\nPossible typo: you repeated a word.\r\n\r\n#### \"Appendix E.\", paragraph 7\r\n```\r\n with example state machine o Acknowledgements o Language improvements by na\r\n                              ^^^^^^^^^^^^^^^^\r\n```\r\nDo not mix variants of the same word (\"acknowledgement\" and \"acknowledgment\")\r\nwithin a single text.\r\n\r\n",
      "createdAt": "2023-08-22T13:44:28Z",
      "updatedAt": "2023-08-29T16:24:31Z",
      "closedAt": "2023-08-29T16:24:31Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "- Yes cbor.me now supports https\r\n\r\n    https://cbor.me/\r\n\r\n- NSA seems to have removed all documentation on CNSA 1.0 now that CNSA 2.0 has been published. The reference in the CNSA RFCs like RFC 9212 is also not working. DoD has a working document.\r\n\r\nhttps://media.defense.gov/2021/Sep/27/2002862527/-1/-1/0/CNSS%20WORKSHEET.PDF\r\n\r\nIf we think DoD will also remove the webpage we could refer to Wikipedia.\r\n\r\nhttps://en.wikipedia.org/wiki/Commercial_National_Security_Algorithm_Suite\r\n\r\nI think we should change \"CNSA\" to \"CNSA 1.0\" in the body.\r\n\r\n- It seems like the (Long version) of the SIGMA paper is no longer available anywhere. I don't remember how much differences there were between the short and long versions. The short version can be found here\r\n\r\nhttps://www.iacr.org/cryptodb/archive/2003/CRYPTO/1495/1495.pdf\r\nhttps://link.springer.com/chapter/10.1007/978-3-540-45146-4_24\r\n\r\nIf we want the long version we probably have to ask Hugo to make it available somewhere.",
          "createdAt": "2023-08-23T10:02:30Z",
          "updatedAt": "2023-08-23T10:02:30Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "NONE",
          "body": "Please see if there is an archive.org link you could use (for all broken links).",
          "createdAt": "2023-08-23T10:05:17Z",
          "updatedAt": "2023-08-23T10:05:38Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "> Please see if there is an archive.org link\r\n\r\nDid you mean arxiv.org? Unfortunately, SIGMA isn't there.",
          "createdAt": "2023-08-23T10:45:38Z",
          "updatedAt": "2023-08-23T10:45:38Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "But it seems the short version of the paper covers all referrals in the draft so we can use the iacr URL for example.",
          "createdAt": "2023-08-23T10:56:17Z",
          "updatedAt": "2023-08-23T10:56:17Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "NONE",
          "body": "No, I mean https://archive.org/\r\n\r\nLike \r\n* https://web.archive.org/web/20200418054209/https://apps.nsa.gov/iaarchive/programs/iad-initiatives/cnsa-suite.cfm\r\n* https://web.archive.org/web/20220517151931/https://webee.technion.ac.il/~hugo/sigma-pdf.pdf\r\n\r\nYou just need to check if those are the correct versions.",
          "createdAt": "2023-08-23T11:05:05Z",
          "updatedAt": "2023-08-23T11:08:41Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, thanks. I did a workaround, but good to know we can fall back to this.",
          "createdAt": "2023-08-23T11:59:09Z",
          "updatedAt": "2023-08-23T11:59:09Z"
        }
      ]
    },
    {
      "number": 418,
      "id": "I_kwDOEItXAM5u9EWI",
      "title": "Erik Kline's review",
      "url": "https://github.com/lake-wg/edhoc/issues/418",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/NOQNTQazMn3_F58eucc6B6ztbzY/\r\n\r\n----------------------------------------------------------------------\r\nCOMMENT:\r\n----------------------------------------------------------------------\r\n\r\n# Internet AD comments for draft-ietf-lake-edhoc-20\r\nCC @ekline\r\n\r\n* comment syntax:\r\n  - https://github.com/mnot/ietf-comments/blob/main/format.md\r\n\r\n* \"Handling Ballot Positions\":\r\n  - https://ietf.org/about/groups/iesg/statements/handling-ballot-positions/\r\n\r\n## Comments\r\n\r\n### S6.2\r\n\r\n* I'm not sure about \"MUST be ... written in English\".  Does it not suffice\r\n  to say \"MUST be a human-readable string\" and \"SHOULD be English\", since the\r\n  exact written language is not protocol-critical?\r\n\r\n### Appendix B\r\n\r\n* Do any of the Certicom patents as notified to SECG:\r\n\r\n      https://www.secg.org/certicom_patent_letter_SECG.pdf\r\n\r\n  apply the text in this section?  If so, has the working group been made\r\n  aware and collectively agreed to proceed?\r\n\r\n  I just found this linked off the https://www.secg.org/ site and it seemed\r\n  to mention \"point compression\", but I'm not really qualified to make any\r\n  reasonable assessment about whether readers of this I-D should be made\r\n  aware of this stuff or not.\r\n\r\n## Nits\r\n\r\n### S3.3.2\r\n\r\n* Figure 5 could make it more clear that the CBOR encoding values are\r\n  in hex (right?)\r\n\r\n### S3.9\r\n\r\n* \"because of wrong credential\"\r\n\r\n  Either \"because of wrong credentials\" or maybe \"because of a wrong\r\n  credential\" might read better.\r\n\r\n### S5.2.2, S5.3.2, S5.4.2, S5.5.2\r\n\r\n* I found the use of \"Processing\" in the section heading to somewhat\r\n  misleading.  I don't think of the sender as \"processing\" a message that\r\n  it's going to send.  Perhaps, \"Preparation\" or \"Composition\" might be more\r\n  natural?\r\n\r\n### Appendix D.5\r\n\r\n* You might be asked by the Editor about alternative language for\r\n  \"man-in-the-middle\" (e.g., \"on-path attacker\" or something).\r\n\r\n\r\n",
      "createdAt": "2023-08-22T13:46:08Z",
      "updatedAt": "2023-08-29T16:24:23Z",
      "closedAt": "2023-08-29T16:24:23Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Regarding ECC IPR. We are not not aware of any IPR that apply to the draft. This topic has been discussed several times in the working group. EDHOC does not use \"point compression\", EDHOC just throws away the y-coordinate which is known as \"compact representation\" and works for ECDH but not for ECDSA. The remaining x-coordinate is no longer a point. All the patents on point compression has expired, the last one in 2018 [1]. We are not aware of any patents (expired or not) on \"compact representation\". \r\n\r\n[1] https://en.wikipedia.org/wiki/ECC_patents",
          "createdAt": "2023-08-23T09:14:55Z",
          "updatedAt": "2023-08-23T09:14:55Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do any of the Certicom patents as notified to SECG:\r\n>\r\n> https://www.secg.org/certicom_patent_letter_SECG.pdf\r\n>\r\n>apply the text in this section? If so, has the working group been made aware and collectively agreed to proceed?\r\n>\r\n> I just found this linked off the https://www.secg.org/ site and it seemed to mention \"point compression\", but I'm not really qualified to make any reasonable assessment about whether readers of this I-D should be made aware of this stuff or not.\r\n\r\n\r\nEDHOC does not use \"point compression\", EDHOC just throws away the y-coordinate, which is called \"compact representation\" and works for ECDHE but not for ECDSA. What remains is no longer a point but an x-coordinate. Furthermore, to our knowledge, all patents on point compression has expired, the last one in 2018 [1]. \r\nThis topic has been discussed several times in the working group, and there has not been anyone declaring awareness of IPR (expired or not) on \"compact representation\" or other techniques used.\r\n\r\n[1] https://en.wikipedia.org/wiki/ECC_patents",
          "createdAt": "2023-08-23T09:54:53Z",
          "updatedAt": "2023-08-23T09:54:53Z"
        },
        {
          "author": "ekline",
          "authorAssociation": "NONE",
          "body": "Ack on the ECC IPR.  Thanks!",
          "createdAt": "2023-08-24T03:33:24Z",
          "updatedAt": "2023-08-24T03:33:24Z"
        }
      ]
    },
    {
      "number": 419,
      "id": "I_kwDOEItXAM5vBYke",
      "title": "IANA expert review",
      "url": "https://github.com/lake-wg/edhoc/issues/419",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/BU4zDcEpoaFs8WW7BZ2pKoufakU/\r\n\r\n\r\nFundamentally, the two registration requests in Section 10.6 are appropriate, each with an integer label to be assigned out of the Standards Action space (e.g., 13 and 14).\r\n\r\nI have asked for a slight update of the registration request based on the following observations:\r\n\r\n* The Value Type for the kccs parameter is listed as `map/#6(map)`. This appears to be an incomplete specification, waiting for a tag to be assigned for a CCS in draft-ietf-rats-uccs.  Since EDHOC seems to be completing faster than that draft, and the alternative that includes the tag for CCS also is not strongly required, I propose to change the Value Type to just `map`.\r\n\r\n* The supplementary information about both kccs and kcwt in the paragraph preceding the registry template is unlikely to be picked up by people consulting just the registry.  I have requested making the \u201cdescription\u201d column more complete, in particular also pointing to RFC 8392 as the source of the \u201cCWT\u201d and \u201cCCS\u201d definitions.\r\n\r\n* As an editorial observation, the description \"A CBOR Web Token (CWT)/... containing a COSE_Key in a 'cnf\u2019 claim\u201d could be read as saying that only that one claim is to be contained in the token.  Section 3.5.3.1 clarifies this by also saying \"There may be any number of additional claims present in the CWT/CCS.\u201d.  Adding an \u201cand possibly others\u201d or similar to the description column might make this information more accessible to readers coming from the registry.\r\n\r\nI have discussed the first two items with the authors, who agree with the suggestions, and expect them to be open to the third one as well.\r\n",
      "createdAt": "2023-08-23T06:10:57Z",
      "updatedAt": "2023-08-29T16:24:17Z",
      "closedAt": "2023-08-29T16:24:17Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a PR addressing the comments. I also added a reference to RFC 9052 which @cabo  suggested in an earlier discussion.\r\n\r\n#424",
          "createdAt": "2023-08-23T09:02:55Z",
          "updatedAt": "2023-08-23T12:19:05Z"
        }
      ]
    },
    {
      "number": 420,
      "id": "I_kwDOEItXAM5vBZLX",
      "title": "Zahed Sarker's review",
      "url": "https://github.com/lake-wg/edhoc/issues/420",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/qy10k_k1SJlx6_cqAvtyn_0hGV8/\r\n\r\nI would like to have responses on the following points as I believe clarity\r\nwould help this specification -\r\n\r\n   - It appeared to me that reliable transport is preferred while EDHOC\r\n   messages are transmitted, however, this is not clearly mentioned. I think if\r\n   this is the case then it should be clear in this specification.\r\n\r\n   - I also like section 3.4, however, it is not clear to me if the list\r\n   provided, is a \"must to meet\" criteria for any transport or fulfilling any\r\n   subset of features is good enough. If the later then this specification\r\n   should describe how the missing criteria should be fulfilled or ignore or\r\n   describe the impact.\r\n\r\nFor the similar reason, I am also supporting Lars's discuss on clarification\r\nrequired for DoS protection by the transport.\r\n",
      "createdAt": "2023-08-23T06:13:14Z",
      "updatedAt": "2023-08-29T16:24:11Z",
      "closedAt": "2023-08-29T16:24:11Z",
      "comments": []
    },
    {
      "number": 421,
      "id": "I_kwDOEItXAM5vBZwF",
      "title": "John Scudder's review",
      "url": "https://github.com/lake-wg/edhoc/issues/421",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/LhnykON_QDd8ngZpB-pzYYH8ssM/\r\n\r\nOne nit (and it is the smallest of nits) is that the backslash (\"\\\") character\r\nthat occurs in Figure 17 seemed odd.",
      "createdAt": "2023-08-23T06:15:16Z",
      "updatedAt": "2023-08-29T16:24:03Z",
      "closedAt": "2023-08-29T16:24:03Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a PR addressing the comments.\r\n\r\n#423",
          "createdAt": "2023-08-23T09:03:48Z",
          "updatedAt": "2023-08-23T09:03:48Z"
        }
      ]
    },
    {
      "number": 422,
      "id": "I_kwDOEItXAM5vBaCU",
      "title": "Roman Danyliw's review",
      "url": "https://github.com/lake-wg/edhoc/issues/422",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/alBWh_cyhMnPA6FcGQM5YWs8w9A/\r\n\r\n----------------------------------------------------------------------\r\nDISCUSS:\r\n----------------------------------------------------------------------\r\n\r\n** Section 3.5.2\r\nWhen the identified credential is a\r\n   chain or a bag, the authentication credential CRED_x is just the end\r\n   entity X.509 or C509 certificate / CWT.\r\n\r\nPer Section 2 of RFC9360, the x5bag claim is:\r\n\r\n\"This header parameter contains a bag of X.509 certificates. The set of\r\ncertificates in this header parameter is unordered and may contain self-signed\r\ncertificates. Note that there could be duplicating certificates. The\r\ncertificate bag can contain certificates which are completely extraneous to the\r\nmessage.\"\r\n\r\nHow does one pick-out the \u201cend entity\u201d if the list contains self-signed or\r\nextraneous certificates?\r\n\r\n\r\n----------------------------------------------------------------------\r\nCOMMENT:\r\n----------------------------------------------------------------------\r\n\r\nThank you to Radia Perlman for the SECDIR review.\r\n\r\n** Section 3.4.\r\n   EDHOC is not bound to a particular transport layer and can\r\n   even be used in environments without IP.\r\n\r\nIs there a minimum transport PDU for EDHOC? That is, if too small, EDHOC would\r\nfragment and eliminate all of the design benefits of limited round trips?\r\n\r\n** Section 3.5.2\r\n   It is RECOMMENDED that the COSE 'kid' parameter, when used to\r\n   identify the authentication credential, refers to a specific\r\n   encoding.\r\n\r\nIn what way does the \u201ckid\u201d claim convey a \u201cspecific encoding\u201d?\r\n\r\n** Section 7.  This section seems to be discussing how EDHOC implementations\r\nhandle message duplication.  However, Section 3.4 says that \u201c\u2026 the transport is\r\nresponsible \u2026 to handle \u2026 message duplication\u201d.  Is it a transport requirement\r\nor not to handle duplication?\r\n\r\n** Section 9.4\r\n   Symmetric algorithms used in EDHOC such as SHA-256 and AES-CCM-\r\n   16-64-128 are practically secure against even large quantum\r\n   computers.\r\n\r\nCould \u201cAES-CCM-16-16-128\u201d being \u201cpractically secure\u201d be better explained or\r\ncited.\r\n\r\n** Section 9.6.\r\n   Implementations and users SHOULD consider\r\n   these threat models.\r\n\r\nWhat does a normative \u201cSHOULD\u201d to \u201cconsider\u201d a threat model mean?\r\n\r\n** Section 9.7\r\nEDHOC itself does not provide countermeasures against Denial-of-\r\n   Service attacks.\r\n...\r\nTo\r\n   mitigate such attacks, an implementation SHOULD rely on lower layer\r\n   mechanisms.\r\n\r\nWhat is the intent of this normative guidance?  If EDHOC doesn\u2019t have DoS\r\nprotection, what is the alternative relying on a lower level (stated as a\r\nSHOULD here)?  Is it an application mechanism?\r\n\r\n** Section 9.8\r\n   NIST\r\n   generally forbids deriving secret and non-secret randomness from the\r\n   same KDF instance,\r\n\r\nCan the basis of this prohibition be cited?\r\n\r\n** Section 9.8.\r\n\r\n   Implementations might consider deriving secret and non-secret\r\n   randomness from different PRNG/PRF/KDF instances to limit the damage\r\n   if the PRNG/PRF/KDF turns out to be fundamentally broken.\r\n   ...\r\n\r\nI\u2019m confused on the position this entire paragraph is taking.  It\u2019s framed as\r\n\u201cmight consider.\u201d It then describes that there is conflicting advice from NIST\r\nand [HKDFpaper].  Either removing this text or state an explicit position.\r\n\r\n** Section 9.8\r\n   Verification of validity may require the use of a Real-Time Clock\r\n   (RTC).  The private authentication keys MUST be kept secret, only the\r\n   Responder SHALL have access to the Responder's private authentication\r\n   key and only the Initiator SHALL have access to the Initiator's\r\n   private authentication key.\r\n\r\nCan the link between the two sentences in this paragraph be clarified?  How is\r\nthe need for a clock connected to keeping the authentication keys secret?\r\n",
      "createdAt": "2023-08-23T06:16:15Z",
      "updatedAt": "2023-08-29T16:23:55Z",
      "closedAt": "2023-08-29T16:23:55Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> ** Section 3.5.2\r\n> When the identified credential is a\r\n> chain or a bag, the authentication credential CRED_x is just the end\r\n> entity X.509 or C509 certificate / CWT.\r\n> \r\n> Per Section 2 of RFC9360, the x5bag claim is:\r\n> \r\n> \"This header parameter contains a bag of X.509 certificates. The set of\r\n> certificates in this header parameter is unordered and may contain self-signed\r\n> certificates. Note that there could be duplicating certificates. The\r\n> certificate bag can contain certificates which are completely extraneous to the\r\n> message.\"\r\n> \r\n> How does one pick-out the \u201cend entity\u201d if the list contains self-signed or\r\n> extraneous certificates?\r\n> \r\n\r\nAs you already noticed, x5bag is defined by RFC 9360. When using x5bag in COSE without EDHOC the endpoint already have to find the end entity certificate. The key in the end entity cert is need to process the COSE message. EDHOC does not add any requirements beyond what COSE already requires. My understanding is that the Certificate Message in TLS can also be a bag.\r\n\r\nWe agree that processing a bag adds complexity that are not well suited for constrained IoT devices. In the worst case I assume you might end-up with several potential end entity certificates and you have to try several to find the correct one.\r\n\r\nAs EDHOC does not add any additional requirements on top of COSE I don't thing it makes sense to detail bag processing in the EDHOC specification. Given the problems for constrained IoT devices and bag, we added a few sentences describing the problems with bag and a recommendation of using chain. We also changed the reference from RFC 5280 to RFC 9360 which defined x5bag and x5chain.",
          "createdAt": "2023-08-23T09:31:23Z",
          "updatedAt": "2023-08-24T05:40:30Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> ** Section 9.4\r\n> Symmetric algorithms used in EDHOC such as SHA-256 and AES-CCM-\r\n> 16-64-128 are practically secure against even large quantum\r\n> computers.\r\n> \r\n> Could \u201cAES-CCM-16-16-128\u201d being \u201cpractically secure\u201d be better explained or\r\n> cited.\r\n\r\nYes, I added an explaination and a cited NIST.",
          "createdAt": "2023-08-23T09:33:18Z",
          "updatedAt": "2023-08-24T05:34:31Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> ** Section 9.6.\r\n> Implementations and users SHOULD consider\r\n> these threat models.\r\n> \r\n> What does a normative \u201cSHOULD\u201d to \u201cconsider\u201d a threat model mean?\r\n> \r\n\r\nRemoved the normative SHOULD and reformulated to:\r\nImplementations and users should take these threat models into account and consider actions to reduce the risk of tracking by other endpoints.",
          "createdAt": "2023-08-24T05:35:42Z",
          "updatedAt": "2023-08-24T05:37:02Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> ** Section 9.8\r\n> Verification of validity may require the use of a Real-Time Clock\r\n> (RTC). The private authentication keys MUST be kept secret, only the\r\n> Responder SHALL have access to the Responder's private authentication\r\n> key and only the Initiator SHALL have access to the Initiator's\r\n> private authentication key.\r\n> \r\n> Can the link between the two sentences in this paragraph be clarified? How is\r\n> the need for a clock connected to keeping the authentication keys secret?\r\n\r\nThere is not link between them. I moved the two sentences to two other paragraphs were they fit nicely.",
          "createdAt": "2023-08-24T05:38:11Z",
          "updatedAt": "2023-08-24T05:38:11Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> ** Section 9.8\r\n> NIST\r\n> generally forbids deriving secret and non-secret randomness from the\r\n> same KDF instance,\r\n> \r\n> Can the basis of this prohibition be cited?\r\n\r\nI provided a lot of comments to NIST SP 800-108 which led to NIST updating that specification.\r\nhttps://csrc.nist.gov/files/pubs/sp/800/108/r1/final/docs/sp800-108r1-draft-comments-resolutions.pdf\r\n\r\nSP 800-108 now aligns with [HKDFpaper] in that a secure KDF needs to handle non-secret information as well. I added references to both 800-56A and 800-108 to capture this. I also moved the paragraph to \"cryptographic considerations\" as this is not implementation considerations.\r\n\r\n\r\n\r\n> \r\n> ** Section 9.8.\r\n> \r\n> Implementations might consider deriving secret and non-secret\r\n> randomness from different PRNG/PRF/KDF instances to limit the damage\r\n> if the PRNG/PRF/KDF turns out to be fundamentally broken.\r\n> ...\r\n> \r\n> I\u2019m confused on the position this entire paragraph is taking. It\u2019s framed as\r\n> \u201cmight consider.\u201d It then describes that there is conflicting advice from NIST\r\n> and [HKDFpaper]. Either removing this text or state an explicit position.\r\n\r\nI am fine with removing the text. I don't think there a taking a position that implementations should do this is appropriate. And if taking a stance that it does not need to be done the sentence fills not purpose.\r\n",
          "createdAt": "2023-08-24T06:36:06Z",
          "updatedAt": "2023-08-24T06:36:06Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "> ** Section 3.4.\r\nEDHOC is not bound to a particular transport layer and can\r\neven be used in environments without IP.\r\n>\r\n> Is there a minimum transport PDU for EDHOC? That is, if too small, EDHOC would\r\nfragment and eliminate all of the design benefits of limited round trips?\r\n\r\nFragmentation can occur on different layers and the effect of fragmentation depends on technology. For radio links, like LoRAWAN with duty cycle in some regions the penalty of splitting a message is large. For cellular IoT, like NB-IoT there are less visible threshold effects, more a gradual decrease of characteristics with increasing message size. But there are lots of other effects to consider. For example, the probability and effects of bit errors. which in turn depends on message size since a larger message has a higher probability for error. Considering these types of effects it may be difficult to specify a minimum PDU with the properties you request. In the requirements phase (draft-ietf-lake-reqs-04) we looked at deployments of NB-IoT, 6TiSCH and LoRaWAN. Even for this small set of technologies, there are a number of assumptions to make. What we did find in this work was that with messages of size of 45 bytes and less, common deployments of these radio technologies exhibit good performance, and that this size is achievable with CBOR, COSE and CoAP.\r\n",
          "createdAt": "2023-08-24T06:40:16Z",
          "updatedAt": "2023-08-24T06:40:16Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "> ** Section 3.5.2\r\nIt is RECOMMENDED that the COSE 'kid' parameter, when used to\r\nidentify the authentication credential, refers to a specific\r\nencoding.\r\n>\r\n> In what way does the \u201ckid\u201d claim convey a \u201cspecific encoding\u201d?\r\n\r\nReferring to specific encoding of authentication credential specified in the application profile. Attempted clarification at the end of this commit: https://github.com/lake-wg/edhoc/pull/426/commits/f936bb6e8",
          "createdAt": "2023-08-24T06:43:53Z",
          "updatedAt": "2023-08-24T06:43:53Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "> ** Section 7. This section seems to be discussing how EDHOC implementations\r\nhandle message duplication. However, Section 3.4 says that \u201c\u2026 the transport is\r\nresponsible \u2026 to handle \u2026 message duplication\u201d. \r\n>\r\n> Is it a transport requirement\r\nor not to handle duplication?\r\n\r\nSee response to Martin Duke's review\r\nhttps://mailarchive.ietf.org/arch/msg/lake/wuoYFmItMlbtNMYzHDH1ZAOHlno/\r\nand proposed update of section 3.4 in #429\r\n",
          "createdAt": "2023-08-24T06:46:15Z",
          "updatedAt": "2023-08-24T06:46:15Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> ** Section 3.4.\r\n> EDHOC is not bound to a particular transport layer and can\r\n> even be used in environments without IP.\r\n> \r\n> Is there a minimum transport PDU for EDHOC? That is, if too small, EDHOC would\r\n> fragment and eliminate all of the design benefits of limited round trips?\r\n> \r\n\r\nWhat could be stated is that 45 bytes is needed to avoid fragmentation for the options used in Figure 1 (static DH, kid, etc.). Even with fragmentation the design benefits of having small messages are significant.",
          "createdAt": "2023-08-24T06:52:42Z",
          "updatedAt": "2023-08-24T06:56:27Z"
        }
      ]
    },
    {
      "number": 427,
      "id": "I_kwDOEItXAM5vD6XF",
      "title": "Convert \"tables\" to real tables so that they render nicely in HTML",
      "url": "https://github.com/lake-wg/edhoc/issues/427",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-23T13:03:58Z",
      "updatedAt": "2023-08-25T06:04:34Z",
      "closedAt": "2023-08-25T06:04:34Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Another editorial fix is to align capitalization and punctuation in figure captions. EDHOC seems to mostly use sentence form.",
          "createdAt": "2023-08-24T03:25:41Z",
          "updatedAt": "2023-08-24T03:25:41Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Figures looks quite nice already with aasvg. Maybe not worth changing to XML-tables. Could look into aligning the tables a bit more.",
          "createdAt": "2023-08-24T09:33:48Z",
          "updatedAt": "2023-08-24T09:33:48Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I aligned the tables a bit. Not planning to put more work.",
          "createdAt": "2023-08-25T06:04:34Z",
          "updatedAt": "2023-08-25T06:04:34Z"
        }
      ]
    },
    {
      "number": 431,
      "id": "I_kwDOEItXAM5vKPi9",
      "title": "Clarify calculation of CIPHERTEXT_2 ",
      "url": "https://github.com/lake-wg/edhoc/issues/431",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/lake/Ojx69lyUx5ZfqE2zFcaKMARBnbM/\r\n\r\nComment by Lei YAN\r\n\r\nI am confused about how the  CIPHERTEXT_2 is calculated.\r\nIn Section 5.3.2 of draft-ietf-lake-edhoc-20, I found there are 2 sentences that contradict each other.\r\n\u00a1\u00b0 * CIPHERTEXT_2 is calculated by using the EDHOC_Expand function as a binary additive stream cipher over the following plaintext:\r\n- PLAINTEXT_2 =...\r\n...\r\n- CIPHERTEXT_2 = PLAINTEXT_2 XOR KEYSTREAM_2\u00a1\u00b1\r\nIs the calculation of the CIPHERTEXT_2 using the EDHOC_Expand function or just making the XOR operation?",
      "createdAt": "2023-08-24T11:29:29Z",
      "updatedAt": "2023-08-24T17:38:04Z",
      "closedAt": "2023-08-24T17:38:04Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "\"binary additive stream cipher\" is easy to look up so I don't think we should explain it here. But we could clarity the use of the EDHOC_Expand function, for example like this:\r\n\r\nOLD\r\nCIPHERTEXT_2 is calculated by using the EDHOC_Expand function as a binary additive stream cipher over the following plaintext:\r\n\r\nNEW\r\nCIPHERTEXT_2 is calculated with a binary additive stream cipher, using a keystream generated with EDHOC_Expand, over the following plaintext:\r\n",
          "createdAt": "2023-08-24T12:27:01Z",
          "updatedAt": "2023-08-24T12:27:01Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I include this in the revised I-D since it is such a minor change.",
          "createdAt": "2023-08-24T17:36:16Z",
          "updatedAt": "2023-08-24T17:36:16Z"
        }
      ]
    },
    {
      "number": 432,
      "id": "I_kwDOEItXAM5vKQGr",
      "title": "Add acknowledgments",
      "url": "https://github.com/lake-wg/edhoc/issues/432",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-24T11:31:03Z",
      "updatedAt": "2023-08-24T17:34:15Z",
      "closedAt": "2023-08-24T17:34:15Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Reviewers whose comments have resulted in at least one commit: Martin Duke, John Scudder, Lars Eggert, Roman Danyliw, Erik Kline, Zaheduzzaman Sarker.",
          "createdAt": "2023-08-24T12:34:17Z",
          "updatedAt": "2023-08-24T12:34:17Z"
        }
      ]
    },
    {
      "number": 433,
      "id": "I_kwDOEItXAM5vPpv6",
      "title": "-21 change log",
      "url": "https://github.com/lake-wg/edhoc/issues/433",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-25T06:05:37Z",
      "updatedAt": "2023-08-25T08:25:27Z",
      "closedAt": "2023-08-25T08:25:27Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Done in main",
          "createdAt": "2023-08-25T08:25:27Z",
          "updatedAt": "2023-08-25T08:25:27Z"
        }
      ]
    },
    {
      "number": 435,
      "id": "I_kwDOEItXAM5vRfAO",
      "title": "Traces: Add link to more traces",
      "url": "https://github.com/lake-wg/edhoc/issues/435",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I removed the current confusing link to -16 traces. If we have publically available traces we should add a new link, otherwise we can also live without it.",
      "createdAt": "2023-08-25T11:15:29Z",
      "updatedAt": "2023-08-25T11:35:22Z",
      "closedAt": "2023-08-25T11:35:21Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe just skip this",
          "createdAt": "2023-08-25T11:35:21Z",
          "updatedAt": "2023-08-25T11:35:21Z"
        }
      ]
    },
    {
      "number": 436,
      "id": "I_kwDOEItXAM5vRhjk",
      "title": "Traces: FIPS PUB 186-4",
      "url": "https://github.com/lake-wg/edhoc/issues/436",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "FIPS PUB 186-4 is obsolete. This is also not a real ref like the other alg refs",
      "createdAt": "2023-08-25T11:23:32Z",
      "updatedAt": "2023-08-25T11:34:52Z",
      "closedAt": "2023-08-25T11:34:52Z",
      "comments": []
    },
    {
      "number": 437,
      "id": "I_kwDOEItXAM5vRjWr",
      "title": "Traces: Units everywhere",
      "url": "https://github.com/lake-wg/edhoc/issues/437",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Paul wrote:\r\n\r\nwhere the last value is the key length of Application AEAD\r\nalgorithm.\r\n\r\nIn what unit? (bytes)\r\n\r\n\r\nThere are several more places missing unit. Should be fixed.",
      "createdAt": "2023-08-25T11:29:10Z",
      "updatedAt": "2023-08-25T12:36:00Z",
      "closedAt": "2023-08-25T12:36:00Z",
      "comments": []
    },
    {
      "number": 438,
      "id": "I_kwDOEItXAM5vRnuM",
      "title": "fo",
      "url": "https://github.com/lake-wg/edhoc/issues/438",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "No",
      "createdAt": "2023-08-25T11:42:01Z",
      "updatedAt": "2023-08-25T11:43:54Z",
      "closedAt": "2023-08-25T11:43:53Z",
      "comments": []
    },
    {
      "number": 439,
      "id": "I_kwDOEItXAM5vRr3f",
      "title": "Traces: Write out I and R as (the) Initiator and (the) Responder ?",
      "url": "https://github.com/lake-wg/edhoc/issues/439",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-25T11:53:00Z",
      "updatedAt": "2023-08-25T12:22:10Z",
      "closedAt": "2023-08-25T12:22:09Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "requested by Paul",
          "createdAt": "2023-08-25T11:53:10Z",
          "updatedAt": "2023-08-25T11:53:10Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Some are done but not all",
          "createdAt": "2023-08-25T11:54:50Z",
          "updatedAt": "2023-08-25T11:54:50Z"
        }
      ]
    },
    {
      "number": 440,
      "id": "I_kwDOEItXAM5vVutz",
      "title": "Traces: Editorial stuff",
      "url": "https://github.com/lake-wg/edhoc/issues/440",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Document uses both \"in bytes for\" or \"in bytes of\"\r\nGoogling gives that of seems three times more common.\r\n\r\n",
      "createdAt": "2023-08-26T08:05:00Z",
      "updatedAt": "2023-08-26T08:33:31Z",
      "closedAt": "2023-08-26T08:33:31Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This line is more far to the right than it should be at least in DIFF\r\n\r\nC_I (CBOR Data Item) (Connection identifier chosen by Initiator) (1 byte) | \u00a0\r\n-- | --\r\n\u00a0 | \u00a0 | \u00a0 | 2d\r\n\r\n",
          "createdAt": "2023-08-26T08:08:34Z",
          "updatedAt": "2023-08-26T08:08:34Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This does not render as a figure\r\n\r\nID_CRED_R (CBOR Data Item) (14 bytes) ~~~~~~~~ a1 18 22 82 2e 48 79 | \u00a0\r\n-- | --\r\n\u00a0 | 51 0c 1f 9b | \u00a0 | f2 a4 1b 51 0c 1f 9b ~~~~~~~~\r\n\r\n",
          "createdAt": "2023-08-26T08:09:17Z",
          "updatedAt": "2023-08-26T08:09:17Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n\r\nC_I (CBOR Data Item) (Connection identifier chosen by Initiator) (1 byte) | \u00a0\r\n-- | --\r\n\u00a0 | \u00a0 | \u00a0 | 37\r\n\r\n",
          "createdAt": "2023-08-26T08:11:44Z",
          "updatedAt": "2023-08-26T08:11:44Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n\r\n    (142) Artwork too wide, reducing indentation from 3 to 0\r\n    (106) Section too wide, reducing indentation from 0 to 0\r\n    (194) Artwork too wide, reducing indentation from 3 to 0\r\n    (167) Section too wide, reducing indentation from 0 to 0\r\n    (93) Section too wide, reducing indentation from 0 to 0\r\n    (1344) Artwork too wide, reducing indentation from 3 to 0\r\n    (1308) Section too wide, reducing indentation from 0 to 0\r\n    (1422) Artwork too wide, reducing indentation from 3 to 0\r\n    (1379) Section too wide, reducing indentation from 0 to 0\r\n    (1480) Artwork too wide, reducing indentation from 3 to 0\r\n    (1447) Section too wide, reducing indentation from 0 to 0\r\n    (1295) Section too wide, reducing indentation from 0 to 0\r\n    (70) Middle too wide, reducing indentation from 0 to 0\r\n    (142) Too long line found (L246), 1 characters longer than 72 characters:\r\n    (194) Too long line found (L307), 2 characters longer than 72 characters:\r\n    (1344) Too long line found (L1785), 1 characters longer than 72 characters:\r\n    (1422) Too long line found (L1880), 1 characters longer than 72 characters:\r\n    (1480) Too long line found (L1945), 1 characters longer than 72 characters: \r\n\r\n",
          "createdAt": "2023-08-26T08:15:06Z",
          "updatedAt": "2023-08-26T08:15:06Z"
        }
      ]
    },
    {
      "number": 441,
      "id": "I_kwDOEItXAM5vlK0J",
      "title": "Traces: invalid test vector with an invalid G_X?",
      "url": "https://github.com/lake-wg/edhoc/issues/441",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Implementations not following requirements is unfortunatly more common than they should be [1]. To minimize the risk for non-compliant EDHOC implementations, should we add an invalid test vector with an invalid G_X? NIST (and EDHOC) mandates point validation. Around half of the G_X values are invalid so it is easy to find one.\r\n\r\n[1] https://eprint.iacr.org/2018/298\r\n\"We estimate that 0.77% of HTTPS hosts, 0.04% of SSH hosts, and 4.04% of IKEv2 hosts that support elliptic curves do not perform curve validity checks as specified in elliptic curve standards.\"\r\n",
      "createdAt": "2023-08-29T16:25:03Z",
      "updatedAt": "2023-09-14T04:28:54Z",
      "closedAt": "2023-09-14T04:28:54Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a PR #442\r\n\r\n- I relalised that there are several more ways G_X can be invalid.\r\n- There are also several other ways that message_1 can be invalid.\r\n\r\nAdded all relevant examples I could think of.\r\n\r\nI think a section like this would be good to have to catch implementation errors. The implementation errors concerning G_X could be security problems.",
          "createdAt": "2023-08-30T14:46:08Z",
          "updatedAt": "2023-08-30T14:46:08Z"
        }
      ]
    },
    {
      "number": 443,
      "id": "I_kwDOEItXAM5v4JDW",
      "title": "EDHOC: be a bit more precise on encoding",
      "url": "https://github.com/lake-wg/edhoc/issues/443",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "Druing the discussion on invalid traces it has been suggested that the text on deterministic CBOR encoding and Representation of Byte String Identifiers could be improved. I.e. no technical changes and very much in scope for AUTH48 improvements.",
      "createdAt": "2023-09-01T08:28:40Z",
      "updatedAt": "2024-01-22T09:57:55Z",
      "closedAt": "2024-01-22T09:57:55Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Marco pointed out that the text on deterministic encoding is spread out and that more details could be added in section 3.1 and 3.5.3.\r\n\r\n> \r\n> I think it is better to refer to Section 3.1 of -lake-edhoc (instead of Section 1.4).\r\n> \r\n> That's where deterministic encoding is mentioned as a property of the protocol (emphasis mine):\r\n> \r\n> All EDHOC messages are CBOR Sequences [[RFC8742](https://www.rfc-editor.org/info/rfc8742)], and are deterministically encoded.\r\n> \r\n> while Section 1.4 is more about terminology and language for the document (emphasis mine):\r\n> \r\n> When referring to CBOR, this specification always refers to Deterministically Encoded CBOR as specified in Sections 4.2.1 and 4.2.2 of [[RFC8949](https://www.rfc-editor.org/info/rfc8949)].\r\n\r\n> \r\n> Instead of Section 1.4 of -lake-edhoc, I think it is better to refer to both Sections 3.1 (as mentioning deterministic encoding) and Section 3.5.3 (as talking about ID_CRED_X and its encoding).\r\n> \r\n> Note that Section 3.5.3 is not explicitly saying that the CBOR map encoding ID_CRED_X has to be deterministically encoded; it is just silently inheriting that requirement from Section 3.1.\r\n> \r\n> Is it worth adding an explicit reminder in Section 3.5.3 in -lake-edhoc? Such a reminder is in fact present in Section 3.5.2 when discussing authentication credentials instead.\r\n\r\nAlso is the reference to 4.2.2 needed? I think 4.2.1 is enough.\r\n\r\n\r\n",
          "createdAt": "2023-09-01T08:34:12Z",
          "updatedAt": "2023-09-01T08:34:12Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it could be clearer in the EDHOC specification exactly which bytestrings are encoded as integers according to Section 3.3.2 and which are not.",
          "createdAt": "2023-09-01T08:36:17Z",
          "updatedAt": "2023-09-01T08:36:17Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "To complement, I was specifically thinking of the order of the map keys in the ID_CRED_X CBOR map, when this has more than one element like in the newly added invalid message in -lake-traces.\r\n\r\nBased on that invalid message, my interpretation was that, if ID_CRED_X includes multiple elements, those have to be lexicographically ordered, just like it is expected also for authentication credentials. That should actually involve also Section 4.2.3 of RFC 8949.",
          "createdAt": "2023-09-01T08:46:42Z",
          "updatedAt": "2023-09-01T08:46:42Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> That should actually involve also Section 4.2.3 of RFC 8949.\r\n\r\nWhen would 4.2.3 be involved? 4.2.3 and 4.2.1 are not compatible. My current view would be that 4.2.3 must not be used.\r\n\r\n>just like it is expected also for authentication credentials\r\n\r\nIs the sorting order for CCS and CWT specified somewhere?",
          "createdAt": "2023-09-01T11:06:33Z",
          "updatedAt": "2023-09-01T11:31:11Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Please scratch the suggestion about 4.2.3 of RFC 8949.\r\n\r\nOn the sorting of map keys in CCS and CWT used as credentials, maybe I misinterpret the content of Section 3.5.2 of -lake-edhoc. It suggests the use of lexicographic order of CBOR based credentials specifically in case of their possible re-encoding (if this has to happen for some reason), and it also shows a consistent example of CCS.\r\n\r\nIf we consider the use of deterministic encoding mentioned in Sections 1.4 and 3.1, does it generally apply also to CBOR based credentials as they are when originally issued (i..e, without any possible re-encoding)? I thought so, since those credentials might be transported by value in ID_CRED_X (technically in PLAINTEXT_X), where deterministic encoding is also expected to be used.",
          "createdAt": "2023-09-01T11:33:15Z",
          "updatedAt": "2023-09-01T11:33:15Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Need to read again, but CRED_x (3.5.2) and ID_CRED_X (3.5.3) are different things. Not sure we do or should say something about how header parameter values are encoded.",
          "createdAt": "2023-09-01T12:08:15Z",
          "updatedAt": "2023-09-01T12:08:15Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "more details on deterministic encoding of CCS in section 3.5.2 should be added. This is not clear.\r\n\r\nShould we have some requirement on the header parameter value encoding in kccs?\r\nIt is clear that you need to sort before using as CRED_x, but my understanding is that the draft does not say that the kccs value needs to be deterministically encoded. Maybe it should.",
          "createdAt": "2023-09-01T12:14:39Z",
          "updatedAt": "2023-09-01T12:14:39Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi,\r\n\r\nWhile working on invalid test vectors with the implementors it has been suggested by Marco that explicit reminders about deterministic CBOR should be added in e.g., 3.5.3 of the EDHOC specification. I agree that this is a good idea.\r\n\r\nBackground:\r\n\r\n- Section 1.4 states\r\n\"When referring to CBOR, this specification always refers to Deterministically Encoded CBOR as specified in Sections 4.2.1 and 4.2.2 of [RFC8949].\"\r\n- Section 3.1 states\r\n\"All EDHOC messages are CBOR Sequences [RFC8742], and are deterministically encoded.\"\r\n- Section 3.5.2 states\r\n\"If for some reason re-encoding of the authentication credential may\r\noccur, then a potential common encoding for CBOR based credentials is\r\nbytewise lexicographic order of their deterministic encodings as\r\nspecified in Section 4.2.1 of [RFC8949].\"\r\n- Section 9 states\r\n\"It is RECOMMENDED to abort the EDHOC session if the\r\nreceived EDHOC message is not encoded using deterministic CBOR.\"\r\n\r\n\r\nSome notes and thoughts:\r\n\r\n- The sentence in 3.1 should be changed to \"encoded using deterministic encoded CBOR as specified in Section 4.2.1 of [RFC8949].\" With randomized algorithms, EDHOC is not deterministic.\r\n- I don't think 4.2.2 of [RFC8949] is relevant for EDHOC. I suggest only refering to 4.2.1. Stating that 4.2.2. is not relevant and that 4.2.3 shall not be used.\r\n- Deterministic CBOR encoding affects all integers and all maps. Maps occur in ID_CRED_x and CRED_x.\r\n- I note that there is no normative RFC2119 terms to use deterministic CBOR, but there is a SHOULD abort. This is a bit strange.\r\n- The reason deterministic CBOR was introduces was to limit an attackers possibilities in the case the hash funtion has weaknesses. Does deterministic encoding cause implementation complexity? Not sure it makes sense to mandate if the ECDSA signatures are randomized anyway.\r\n- It is not clear when a CCS is deterministicly encoded. That should be fixed. My understanding is\r\n- EDHOC does not mandate deterministic encoding of the kccs value\r\n- When receiving a kccs the kccs value is used as CRED_x without reencoding.\r\n- When identifying a CCS with a kid and there is risk for different encodings, both sides need to encode deterministically.\r\n\r\nHappy with any thought, feedback, and suggestions on this topic.\r\n\r\nCheers,\r\nJohn",
          "createdAt": "2023-09-04T08:02:23Z",
          "updatedAt": "2023-09-04T08:02:23Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "I think you are getting into this discussion only because the traces document presents values in diag format that could potentially be encoded in different ways.  It most cases, (all I think, but I'm not certain) the encoded thing is what is signed, so it does not matter.  It does matter, at the document level, that multiple parties can come up with the same encoding as the author of the document: so don't use BIGINT to encode 1.\r\n",
          "createdAt": "2023-09-04T16:36:11Z",
          "updatedAt": "2023-09-04T16:36:11Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> It most cases, (all I think, but I'm not certain) the encoded thing is what is signed, so it does not matter. \r\n\r\nYes. One discussion with one of the teams doing formal verification was that non-deterministic encoding of some fields in message_1 could increase the capability of the attacker when the hash function turned out to be broken. I will read up on that discussion and see if we should add something in the security considerations about that.\r\n\r\nMost CBOR encoders will probably not use indefinate length arrays and maps, and will probable use the prefered way to encode arguments in integers, arrays, and maps.\r\n\r\nThe order or things in maps is not so very important as by default there will only be one key in the ID_CRED_x map\r\n",
          "createdAt": "2023-09-07T06:12:55Z",
          "updatedAt": "2023-09-07T06:12:55Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "A lot of the discussion was here:\r\n\r\nhttps://github.com/lake-wg/edhoc/issues/271\r\n\r\nThis following seems to have been forgotten:\r\n\r\n> The issue is when the attacker can give an element h to the responder such that h^y will be a predictable constant. This occurs both with the identity element, as well as some low-order points over the curves.\r\n> \r\n>     EDHOC implementations are already required to check that the ephemeral public keys are not the identity element, see Section 8.2 of the EDHOC specification.\r\n> \r\n> What I found in section 8.2 is \"Requirements for how to securely generate, validate, and process the ephemeral public keys depend on the elliptic curve. For X25519 and X448, the requirements are defined in {{RFC7748}}. For secp256r1, secp384r1, and secp521r1, the requirements are defined in Section 5 of {{SP-800-56A}}. For secp256r1, secp384r1, and secp521r1, at least partial public-key validation MUST be done.\". I don't think this is enough to clearly forbid such behaviors. Maybe the mentioned specs do enforce an identity check, but they only mention as an optional feature to check for low-order points, which are also an issue.\r\n> \r\n> From [RFC7748], the interesting bit is the following one:\r\n> \"Protocol designers using Diffie-Hellman over the curves defined in this document must not assume \"contributory behaviour\". Specially, contributory behaviour means that both parties' private keys contribute to the resulting shared key. Since curve25519 and curve448 have cofactors of 8 and 4 (respectively), an input point of small order will eliminate any contribution from the other party's private key. This situation can be detected by checking for the all-zero output, which implementations MAY do, as specified in [Section 6](https://datatracker.ietf.org/doc/html/rfc7748#section-6). However, a large number of existing implementations do not do this.\"\r\n> \r\n> This part only specifies \"MAY\", which should become a MUST in our setting.\r\n\r\n1. Should we mandate checking for the all-zero output when using Curve25519?\r\n2. As currently written the point validation only applies to ephemeral public keys. Should it apply to public keys used for authentication as well.\r\n\r\nThoughts? @charlie-j ?\r\n\r\nThe all-zero check is trivial to implement so adding a SHOULD or MUST would not be a big problem.\r\n\r\nMy preference would be yes on both 1 and 2 to be on the safe side.\r\n\r\n\r\n      \r\n",
          "createdAt": "2023-09-08T06:56:14Z",
          "updatedAt": "2023-09-08T06:56:14Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The PR #446 has been sent to the RFC editor.",
          "createdAt": "2023-10-17T16:49:29Z",
          "updatedAt": "2023-10-17T16:49:29Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged, closing this as completed.",
          "createdAt": "2024-01-22T09:57:55Z",
          "updatedAt": "2024-01-22T09:57:55Z"
        }
      ]
    },
    {
      "number": 444,
      "id": "I_kwDOEItXAM5wB4OE",
      "title": "Traces: Joel Halpern Gen-ART review",
      "url": "https://github.com/lake-wg/edhoc/issues/444",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Summary: This document is technically ready, but has what appears to me to be a\r\nsignificant procedural error that should be fixed before resolving publication.\r\n\r\nMajor issues:\r\n    The draft lists [I-D.ietf-lake-edhoc] as an informative reference.  As that\r\n    is the definition of the protocol for which this is providing traces, this\r\n    appears to be meaningless without that, and thus [I-D.ietf-lake-edhoc]\r\n    should be a normative reference.",
      "createdAt": "2023-09-04T05:34:35Z",
      "updatedAt": "2023-09-04T07:31:29Z",
      "closedAt": "2023-09-04T07:31:28Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with #445 ",
          "createdAt": "2023-09-04T07:31:28Z",
          "updatedAt": "2023-09-04T07:31:28Z"
        }
      ]
    },
    {
      "number": 447,
      "id": "I_kwDOEItXAM5w01qd",
      "title": "INTDIR Review by Donald E. Eastlake 3rd ",
      "url": "https://github.com/lake-wg/edhoc/issues/447",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The following is an issue I found with this document that SHOULD be\r\ncorrected before publication:\r\n\r\nSection 5, must->MUST\r\n\r\nThe following are minor issues (typos, misspelling, minor text\r\nimprovements) with the document:\r\n\r\nCWT should be expanded on first use.\r\n\r\nIn certificates, the hex values of successive octets are separated by\r\ncolon whereas elsewhere, when they are separated, they are separated\r\nby spaces. Seems better to be consistent.",
      "createdAt": "2023-09-12T16:46:23Z",
      "updatedAt": "2023-09-13T11:29:17Z",
      "closedAt": "2023-09-13T11:27:10Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I thought the comments were straightforward and just fixed them. If anyone disagrees we can reopen the issue.",
          "createdAt": "2023-09-13T11:29:17Z",
          "updatedAt": "2023-09-13T11:29:17Z"
        }
      ]
    },
    {
      "number": 448,
      "id": "I_kwDOEItXAM5xOAGF",
      "title": "Traces: IESG Roman Danyliw comments",
      "url": "https://github.com/lake-wg/edhoc/issues/448",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?",
        "Fixed in master"
      ],
      "body": "Thank you for writing this document.  I am confident that it will help future implementers.\r\n\r\nI did not personally verify the encodings.\r\n\r\n** Section 1.1\r\n   The traces in this draft are valid for version -22 of\r\n   [[I-D.ietf-lake-edhoc](https://datatracker.ietf.org/doc/draft-ietf-lake-edhoc/)].  The traces has been verified by two\r\n   independent implementations.\r\n\r\nI appreciate the precision of this statement.  In the long term, shouldn\u2019t these traces be valid for whatever RFC this EDHOC becomes.  Recommend providing instructions to the RFC Editor to replace [[I-D.ietf-lake-edhoc](https://datatracker.ietf.org/doc/draft-ietf-lake-edhoc/)] with the yet-to-be-assigned RFC number.",
      "createdAt": "2023-09-16T16:42:19Z",
      "updatedAt": "2023-09-22T11:36:55Z",
      "closedAt": "2023-09-22T11:36:54Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Close as completed.",
          "createdAt": "2023-09-22T11:36:54Z",
          "updatedAt": "2023-09-22T11:36:54Z"
        }
      ]
    },
    {
      "number": 449,
      "id": "I_kwDOEItXAM5xn-SP",
      "title": "Traces: IESG Murray Kucherawy's comments",
      "url": "https://github.com/lake-wg/edhoc/issues/449",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR exists"
      ],
      "body": "I don't think you want [BCP 14](https://datatracker.ietf.org/doc/bcp14/) here.  The solitary \"MUST\" you do have is actually citing another document; this one is Informational and not actually stating any of its own requirements.  I'd suggest removing the [BCP 14](https://datatracker.ietf.org/doc/bcp14/) references and the matching boilerplate, but quote the \"MUST\" or even just say that document \"requires\" (lowercase) something specific.",
      "createdAt": "2023-09-21T07:30:05Z",
      "updatedAt": "2023-09-22T11:35:40Z",
      "closedAt": "2023-09-22T11:35:40Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This was added based on the INTDIR review. I agree with INTDIR that we need BCP 14. There is a MUST NOT that is not citing another document.\r\n\r\n> The keys printed in these examples cannot be considered secret and MUST NOT be used.\r\n\r\nAgree with Murray that we should reformulate the cited MUST.\r\n\r\n> Correct is the deterministic encoding 03 according to Section 3.1 of [I-D.ietf-lake-edhoc] and Section 4.2.1 of [RFC8949], which states that the arguments for integers, lengths in major types 2 through 5, and tags MUST be as short as possible.",
          "createdAt": "2023-09-21T07:34:39Z",
          "updatedAt": "2023-09-21T07:34:39Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed as completed.",
          "createdAt": "2023-09-22T11:35:40Z",
          "updatedAt": "2023-09-22T11:35:40Z"
        }
      ]
    },
    {
      "number": 452,
      "id": "I_kwDOEItXAM5xrKeV",
      "title": "Traces: References on validating coordinates",
      "url": "https://github.com/lake-wg/edhoc/issues/452",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "In draft-ietf-lake-traces-07, Section 4.2.4 \"Curve point of low order\" says:\r\n\r\n> Curve25519 point of low order which fails the all-zero output check. Requirement to perform the all-zero output check according to Section 9.2 of [I-D.ietf-lake-edhoc].\r\n\r\nLike done in the previous Sections 4.2.1 and 4.2.2, the sentence can be extended with one additional, specific reference, i.e.:\r\n\r\n> Curve25519 point of low order which fails the all-zero output check. Requirement to perform the all-zero output check according to Section 9.2 of [I-D.ietf-lake-edhoc] and Section 6.1 of [RFC7748].",
      "createdAt": "2023-09-21T14:37:29Z",
      "updatedAt": "2023-09-22T13:58:23Z",
      "closedAt": "2023-09-22T13:58:22Z",
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in c611c60f:\r\n\r\n> Curve25519 point of low order which fails the check for all-zero output according to Section 9.2 of {{I-D.ietf-lake-edhoc}}.\r\n\r\nReference to section 6 of RFC 7748 is instead made in Section 9.2 of EDHOC, see PR #446.",
          "createdAt": "2023-09-22T11:43:45Z",
          "updatedAt": "2023-09-22T11:43:45Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Close as completed.",
          "createdAt": "2023-09-22T13:58:22Z",
          "updatedAt": "2023-09-22T13:58:22Z"
        }
      ]
    },
    {
      "number": 453,
      "id": "I_kwDOEItXAM5xrO4i",
      "title": "EDHOC: clarifications on check for the all-zero value",
      "url": "https://github.com/lake-wg/edhoc/issues/453",
      "state": "CLOSED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander"
      ],
      "labels": [
        "Close?"
      ],
      "body": "In draft-ietf-lake-edhoc-22, Section 9.2 \"Cryptographic Considerations\" says:\r\n\r\n> Requirements for how to securely generate, validate, and process the ephemeral public keys depend on the elliptic curve. For X25519 and X448, the requirements are defined in [RFC7748].\r\n\r\n* The second sentence can be expanded to include more precise pointers, i.e.:\r\n\r\n   > For X25519 and X448, the requirements are defined in Sections 6.1 and 6.2 of [RFC7748], respectively.\r\n\r\n* Even if one follows those pointers, it's not fully clear which exact checks to perform and how. Quoting Section 6.1 of RFC 7748 about Curve 25519:\r\n\r\n   > The check for the all-zero value results from the fact that the X25519 function produces that value if it operates on an input corresponding to a point with small order, where the order divides the cofactor of the curve (see Section 7). The check may be performed by ORing all the bytes together and checking whether the result is zero, as this eliminates standard side-channels in software implementations.\r\n\r\n   The second sentence suggests that one computes the shared secret anyway, and then aborts if the result is all zero (based on a safe check that relies on consecutive ORing steps).\r\n\r\n   However, the first paragraph suggests that one might (or should?) check first of all the considered input values, i.e., whether they \"correspond to a point with small order, where the order divides the cofactor of the curve\". Then, the later Section 7 of RFC 7748 mentions the cofactor values 8 and 4 for the two curves. At that point, one can imagine to perform this check by checking the remainder of the division between each input value and the cofactor value for the used curve.\r\n\r\n   That said, could Section 9.2 of draft-ietf-lake-edhoc give a high-level clarification of which exact checks have to be done and a method for doing that? (of course keeping the reference to RFC 7748 for completeness)\r\n\r\n\r\nThe same reasoning above would call for additional references and high-level clarification of required checks also for the immediately following sentence about ECDSA, i.e.:\r\n\r\n> For secp256r1, secp384r1, and secp521r1, the requirements are defined in Section 5 of [SP-800-56A].",
      "createdAt": "2023-09-21T14:45:20Z",
      "updatedAt": "2023-09-22T13:58:42Z",
      "closedAt": "2023-09-22T13:58:41Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This should probably be a comment on PR 446 instead.\r\nhttps://github.com/lake-wg/edhoc/pull/446\r\n\r\nI made some smaller changes based on this issue. Current suggestion is\r\n\r\n> For X25519 and X448, checking for the all-zero output, as specified in {{RFC7748}}, MUST be done.\r\n\r\nHesitant to provide any more detailed references. The easy way to do this is to check the output, but imlementation are of course free to check the input instead with a black list of invalid points (they are just a handful). Some implementations do that.\r\n\r\nUsing \"checking for the all-zero output\" from RFC 7748. In theory I would like to have some more general formulation but I don't really want to talk about input point of small order.... \r\n\r\n",
          "createdAt": "2023-09-22T09:38:49Z",
          "updatedAt": "2023-09-22T09:38:49Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, it looks good. Then it's ok to simply check the output.",
          "createdAt": "2023-09-22T11:41:02Z",
          "updatedAt": "2023-09-22T11:41:02Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Close as completed.",
          "createdAt": "2023-09-22T13:58:41Z",
          "updatedAt": "2023-09-22T13:58:41Z"
        }
      ]
    },
    {
      "number": 454,
      "id": "I_kwDOEItXAM5yi2tq",
      "title": "Add security consderation referencing recent paper",
      "url": "https://github.com/lake-wg/edhoc/issues/454",
      "state": "OPEN",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Paper on Hidden Stream Ciphers and TMTO Attacks:\r\nhttps://eprint.iacr.org/2023/913",
      "createdAt": "2023-10-02T11:32:24Z",
      "updatedAt": "2023-10-02T11:32:24Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 457,
      "id": "I_kwDOEItXAM6MdcQa",
      "title": "Potential errata/updates",
      "url": "https://github.com/lake-wg/edhoc/issues/457",
      "state": "OPEN",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Hi,\r\n\r\nWhen discussing EDHOC during and after the Paris Hackathon on Lightweight IoT Security I noticed the following to things in RFC 9528 that does not seem optimal:\r\n\r\nStoring the information here for discussion. If people agree, this could be filed as errata, be included in implementation guidance, be included in a future document updating EDHOC, or be included in a RFC9528bis, etc, ....\r\n\r\n```\r\nOLD:\r\n   The Initiator SHOULD NOT persistently\r\n   store PRK_out or application keys until the Initiator has verified\r\n   message_4 or a message protected with a derived application key, such\r\n   as an OSCORE message, from the Responder and the application has\r\n   authenticated the Responder.\r\n\r\nNEW:\r\n   The Initiator SHOULD NOT persistently\r\n   store C_I, C_R, PRK_out, or application keys until the Initiator has verified\r\n   message_4 or a message protected with a derived application key, such\r\n   as an OSCORE message, from the Responder and the application has\r\n   authenticated the Responder.\r\n```\r\n\r\nMotivation: This applies to C_I and C_R equally much as the keys.\r\n\r\n```\r\nOLD:\r\nIn deployments where no protected application message is sent from the\r\nResponder to the Initiator, message_4 MUST be supported and MUST be used.\r\n\r\nNEW:\r\n?\r\n```\r\n\r\nMotivation: I don't think there is reason to mandate use a forth message if EHDOC is only used for authentication and receipt of messase_3 is signaled by the Responder opening a door/bridge..., i.e., message_4 can be replaced by an action in the real-world.",
      "createdAt": "2024-06-17T06:50:01Z",
      "updatedAt": "2024-06-19T10:55:37Z",
      "closedAt": null,
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Interpreting real-world actions sounds like an invitation for mismatches. (Like, if the gate opens after I sent \"please open for 6 minutes\", how do I known it's not just because someone else asked for 3 minutes open time?)\r\n\r\nBut maybe the criterion is not having received feedback through some band, but rather the lack of intention to keep communicating, which would make:\r\n\r\n```\r\nNEW:\r\nIn deployments where no protected application message is sent from the\r\nResponder to the Initiator *and the initiator uses the key material\r\nafter message 3*, message_4 MUST be supported and MUST be used.\r\n```",
          "createdAt": "2024-06-19T10:55:36Z",
          "updatedAt": "2024-06-19T10:55:36Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 14,
      "id": "MDExOlB1bGxSZXF1ZXN0NDk0NjgzNDUy",
      "title": "new test vectors",
      "url": "https://github.com/lake-wg/edhoc/pull/14",
      "state": "MERGED",
      "author": "fpalombini",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add test vectors for Static-Static DH - based on https://github.com/EricssonResearch/EDHOC/blob/4765c841ed14f2158edcd97940179e8f2dd06edb/Test%20Vectors/vectors.txt#L293",
      "createdAt": "2020-09-29T09:14:30Z",
      "updatedAt": "2020-10-20T05:27:35Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "0fd4d0274fa9591ddfb260cb524f82b0ed1941c3",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "test-vect",
      "headRefOid": "49d765dad938015647da31dc56b1ed058624b748",
      "closedAt": "2020-10-20T05:27:35Z",
      "mergedAt": "2020-10-20T05:27:35Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "2eaeba2228fef4a828bd979a5fe34df86efad36f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 15,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA2NTk3ODQ1",
      "title": "Clarify hash computation in B.1",
      "url": "https://github.com/lake-wg/edhoc/pull/15",
      "state": "MERGED",
      "author": "fpalombini",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See #13",
      "createdAt": "2020-10-20T08:42:08Z",
      "updatedAt": "2021-08-19T14:55:04Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "c63851d87b7e73c8b5ab22feec4a9a23c81a903e",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "test-vect",
      "headRefOid": "60b68c09a1df0defc105c251f307b05f17135af0",
      "closedAt": "2020-10-20T15:50:40Z",
      "mergedAt": "2020-10-20T15:50:40Z",
      "mergedBy": "fpalombini",
      "mergeCommit": {
        "oid": "e26929e4d8abb2c37dfc209ad5d604110f64e59f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 16,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA2OTU4NTgw",
      "title": "Add sections for cred_id encoding and bstr_identifier encoding",
      "url": "https://github.com/lake-wg/edhoc/pull/16",
      "state": "MERGED",
      "author": "fpalombini",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-20T16:56:12Z",
      "updatedAt": "2021-08-19T14:55:15Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "e26929e4d8abb2c37dfc209ad5d604110f64e59f",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "v-02-fp",
      "headRefOid": "fc77115f18753823d80fd320b3b17a8f5c8265ed",
      "closedAt": "2020-11-02T14:32:39Z",
      "mergedAt": "2020-11-02T14:32:39Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "7f978a4c206f7c0d0bc19f9baff99eab80393c5b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 27,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE5MTI5ODg0",
      "title": "Fix typo test case (authentication with DH keys)",
      "url": "https://github.com/lake-wg/edhoc/pull/27",
      "state": "MERGED",
      "author": "TimothyClaeys",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Description of the length for key K_2e has a typo. It states that the key should have the same length as the plaintext, which is 10 bytes long, not 80 bytes.",
      "createdAt": "2020-11-11T11:15:16Z",
      "updatedAt": "2020-11-28T08:32:27Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "1f853ac3dd5590ae1de2132c21812f4ef3807f18",
      "headRepository": "TimothyClaeys/edhoc",
      "headRefName": "pr_fix_typo_testcase",
      "headRefOid": "7905613dc0690733884d49adf61ee26c33121787",
      "closedAt": "2020-11-28T08:32:27Z",
      "mergedAt": "2020-11-28T08:32:27Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "589ad325c8c231479d73e86c2035c3467827ee2c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 36,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIxMzg4OTU0",
      "title": "example applicability template",
      "url": "https://github.com/lake-wg/edhoc/pull/36",
      "state": "MERGED",
      "author": "mcr",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "add an appendix as per discussion in meeting today.\r\nProbably the example should be retwigged (as it contains my obscure humour), and likely I've missed some of the detail that needs to be determined.",
      "createdAt": "2020-11-16T06:22:26Z",
      "updatedAt": "2020-12-09T15:21:17Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "39dcf90f303611c84cf818c0a4e46325677aa131",
      "headRepository": "mcr/edhoc",
      "headRefName": "example-applicability-template",
      "headRefOid": "a2b3afaa8fab1bf74d6046eb29c0a1dda328f30c",
      "closedAt": "2020-12-09T15:21:17Z",
      "mergedAt": "2020-12-09T15:21:17Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "2fe5b2b5a499cf928cf3e4d76a668c27a1f203d6"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I merge this and make updates to it on the master branch:\r\n",
          "createdAt": "2020-12-04T11:04:58Z",
          "updatedAt": "2020-12-09T15:20:34Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 37,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI4NzIxMzQz",
      "title": "Update draft-ietf-lake-edhoc.md",
      "url": "https://github.com/lake-wg/edhoc/pull/37",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "1. Should be discussed in LAKE if this is the right approch\r\n2. Should be discussed what the best way is to calculate the hash chain The nonce is included to make sure that the hash chain does not have short cycles.\r\n3. It should be discussed if the nonce is provided by the application (OSCORE) or by EDHOC itself. If provided by OSCOREbis it could be a random string or a counter. If the nonce is provided by EDHOC it has to be a deterministic. E.g. a counter (or theoretically a LFSR....)",
      "createdAt": "2020-11-27T17:17:57Z",
      "updatedAt": "2021-08-19T14:55:14Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "6469cb8dd1865eb19ad049c28b3781688fcb1aef",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "emanjon-patch-FS",
      "headRefOid": "918487c90c807e63a3cda50769543bd3c1c4fb45",
      "closedAt": "2020-12-03T09:17:51Z",
      "mergedAt": "2020-12-03T09:17:51Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "daa5b14e18f1288d476482e6c376cf45e2f772ef"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 38,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI5MDc5NzU1",
      "title": "HPKE KEM (test)",
      "url": "https://github.com/lake-wg/edhoc/pull/38",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The change would mainly affect key derivation of PRKs",
      "createdAt": "2020-11-29T09:05:11Z",
      "updatedAt": "2021-08-19T14:55:12Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "589ad325c8c231479d73e86c2035c3467827ee2c",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "emanjon-patch-1-1",
      "headRefOid": "a4a5163af0aaa6307ee43d130231b49a65f53597",
      "closedAt": "2021-01-26T05:16:32Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "See #17",
          "createdAt": "2021-01-26T05:16:32Z",
          "updatedAt": "2021-01-26T05:16:32Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 41,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM2OTkxMjk3",
      "title": "Refactor of Section 3, 4.1, 4.2",
      "url": "https://github.com/lake-wg/edhoc/pull/41",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Targeting #40 ",
      "createdAt": "2020-12-11T15:09:26Z",
      "updatedAt": "2021-08-19T14:55:39Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "c73dc6affe2d7a47fa8eac97be4d4bbd8bd7c667",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "refactor-overview",
      "headRefOid": "f54e4ac7c7c3064b982fd91b26ccc7c8d7963afe",
      "closedAt": "2020-12-17T14:22:58Z",
      "mergedAt": "2020-12-17T14:22:58Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "9264c5d7ed521efb739c16afc014f4f0a87f8408"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNzUxNzYy",
          "commit": {
            "abbreviatedOid": "021e752"
          },
          "author": "fpalombini",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Great improvement in my opinion (I am thinking from the point of view of implementers/new readers)! Thanks @gselander !\r\n\r\nI haven't reviewed all the reference (those that have not been modified in the message formatting sections) to make sure they all point to the right thing.\r\n\r\nThe changes I suggest can be done in the next update, I'm ok with merging first.",
          "createdAt": "2020-12-16T14:41:37Z",
          "updatedAt": "2020-12-16T15:21:02Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "I don't think it helps readability to add all these details at this point in the document... the reader does not know what all the parameters above stand for, and without that I don't know what it adds to the understanding of the protocol.",
              "createdAt": "2020-12-16T14:41:38Z",
              "updatedAt": "2020-12-17T13:59:29Z"
            },
            {
              "originalPosition": 70,
              "body": "Starting reading the next section, I see that it refers to this figure. Maybe all I am missing is a sentence saying \"The details of the parameters are specified in the following sub-sections\".",
              "createdAt": "2020-12-16T14:45:00Z",
              "updatedAt": "2020-12-17T13:59:29Z"
            },
            {
              "originalPosition": 78,
              "body": "> see {{method-types}}\r\n\r\nThis points to the IANA registration... I'd rather have the important text here and the IANA registration section point here.",
              "createdAt": "2020-12-16T14:46:51Z",
              "updatedAt": "2020-12-17T13:59:29Z"
            },
            {
              "originalPosition": 80,
              "body": "General comment: I have reviewed 2 sections and I have been jumping around non-stop already, I think there is too many pointers to other sections in general. For example, we don't need to point to message_1 formatting, I think... let's see if we can slim down the text (possibly for next update).",
              "createdAt": "2020-12-16T14:49:17Z",
              "updatedAt": "2020-12-17T13:59:29Z"
            },
            {
              "originalPosition": 92,
              "body": "I would put this section after the Message Correlation section",
              "createdAt": "2020-12-16T14:56:28Z",
              "updatedAt": "2020-12-17T13:59:29Z"
            },
            {
              "originalPosition": 145,
              "body": "Why not calling this section \"Authentication Credentials' Identifiers\"?",
              "createdAt": "2020-12-16T15:01:44Z",
              "updatedAt": "2020-12-17T13:59:29Z"
            },
            {
              "originalPosition": 180,
              "body": "This feels somewhat out of place here... I don't have a good proposal on where to put this text, but as of now it does not read to me as a \"protocol element\", but either as considerations, or maybe should be under the \"Authentication Credentials\" as a subsection?",
              "createdAt": "2020-12-16T15:07:52Z",
              "updatedAt": "2020-12-17T13:59:29Z"
            },
            {
              "originalPosition": 197,
              "body": "This section does not introduce the term SUITES_I present in the figure, which would make it compliant with the other sections",
              "createdAt": "2020-12-16T15:12:16Z",
              "updatedAt": "2020-12-17T13:59:29Z"
            },
            {
              "originalPosition": 200,
              "body": "(Adding it here because I can't comment on l.508 - Communication/Negotiation of Protocol Features ) \r\n\r\nAgain this subsection does not seem to fit at the same level as the other \"Protocol Elements\". I would say this is either \"Features\" or an appendix, or maybe even as the first subsection of \"Message Formatting and Processing\"",
              "createdAt": "2020-12-16T15:15:20Z",
              "updatedAt": "2020-12-17T13:59:29Z"
            },
            {
              "originalPosition": 218,
              "body": "I think we can add some high level general sentence about how ephemeral keys used in \"Ephemeral Public Keys\" section.\r\n\r\nThe key derivation section also belongs better in the \"Processing\" part of \"Message Formatting and Processing\" in my opinion (as a subsection)",
              "createdAt": "2020-12-16T15:18:45Z",
              "updatedAt": "2020-12-17T13:59:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 46,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM5MzM3ODgx",
      "title": "Fixes typo in Section 4.4.3",
      "url": "https://github.com/lake-wg/edhoc/pull/46",
      "state": "MERGED",
      "author": "TimothyClaeys",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #45 ",
      "createdAt": "2020-12-14T10:27:01Z",
      "updatedAt": "2020-12-17T08:08:07Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "c73dc6affe2d7a47fa8eac97be4d4bbd8bd7c667",
      "headRepository": "TimothyClaeys/edhoc",
      "headRefName": "pr_fix_section4.4.3",
      "headRefOid": "8418a4d2086a659b3104857dc4d3421447a39d09",
      "closedAt": "2020-12-17T08:08:07Z",
      "mergedAt": "2020-12-17T08:08:07Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "cfe86335b6254b1191b97b99658342d2ad390d5f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 49,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQxMDAzMTk5",
      "title": "Refactor of Section 1",
      "url": "https://github.com/lake-wg/edhoc/pull/49",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Targeting #48",
      "createdAt": "2020-12-16T09:00:55Z",
      "updatedAt": "2021-08-19T14:55:40Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "a09570b4fe83c35444ed8fb771d8c82b3ab71b9c",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "refactor-section1",
      "headRefOid": "f62ca88ee4ff5e8dd964d16e3d86107c36736c14",
      "closedAt": "2021-01-26T04:58:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR was essentially merged with 5f5bee3 - shortcut out of merge conflicts.",
          "createdAt": "2021-01-26T04:58:52Z",
          "updatedAt": "2021-01-26T04:58:52Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 98,
      "id": "MDExOlB1bGxSZXF1ZXN0NjE4OTg2NDc1",
      "title": "bstr / int",
      "url": "https://github.com/lake-wg/edhoc/pull/98",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "",
      "createdAt": "2021-04-20T04:53:48Z",
      "updatedAt": "2021-08-19T14:55:33Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "5e9c943432fe3ab08d9649aaa6ac6f84f09af4f0",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "bstr-/-int",
      "headRefOid": "a2152518780987fa53f8c9b66f647444532741c7",
      "closedAt": "2021-08-03T11:43:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this. My understanding is that the suggested content in this PR is already merged in -08 based on another PR.",
          "createdAt": "2021-08-03T11:43:20Z",
          "updatedAt": "2021-08-03T11:43:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 102,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIwMTQyMTQ3",
      "title": "Computation of transcript hashes",
      "url": "https://github.com/lake-wg/edhoc/pull/102",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This addresses #96. I don't think we need to include names for the intermediary hashes.",
      "createdAt": "2021-04-21T12:13:31Z",
      "updatedAt": "2021-04-23T09:59:11Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "5e9c943432fe3ab08d9649aaa6ac6f84f09af4f0",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Computation-of-transcript-hashes",
      "headRefOid": "581f1998d84005e0a58295d088cc01ff278ff46a",
      "closedAt": "2021-04-23T09:59:00Z",
      "mergedAt": "2021-04-23T09:59:00Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "3fa8b1010ff08a0bbe70cfc8bbc8813604d3d75c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 106,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIyNzI4Nzgw",
      "title": "Changes to cipher suite algorithms",
      "url": "https://github.com/lake-wg/edhoc/pull/106",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#69",
      "createdAt": "2021-04-25T09:12:35Z",
      "updatedAt": "2021-05-05T10:44:23Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "3fa8b1010ff08a0bbe70cfc8bbc8813604d3d75c",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Changes-to-cipher-suite-algorithms",
      "headRefOid": "b77bfe86d71df7236727882d41d1fe5795fadef6",
      "closedAt": "2021-05-05T10:44:17Z",
      "mergedAt": "2021-05-05T10:44:17Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "55ad52b1b369568ded5c662c30e9899059493955"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Added clarification. Ready to merge?",
          "createdAt": "2021-05-04T14:53:05Z",
          "updatedAt": "2021-05-04T14:53:05Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ1Njc3MTQx",
          "commit": {
            "abbreviatedOid": "3c38cd1"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-27T10:08:17Z",
          "updatedAt": "2021-04-27T10:08:18Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@emanjon \"authentication key algorithm\" not defined or referenced",
              "createdAt": "2021-04-27T10:08:18Z",
              "updatedAt": "2021-05-05T10:43:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 108,
      "id": "MDExOlB1bGxSZXF1ZXN0NjI3MDI5OTY1",
      "title": "Compact representation",
      "url": "https://github.com/lake-wg/edhoc/pull/108",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-04-30T06:12:35Z",
      "updatedAt": "2021-08-19T14:55:31Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "57ac5116f91b81a1e9ada0d157d896eca814d331",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Compact-representation",
      "headRefOid": "1a55529f8b1d1d6d7a42377b37622aba098cc54a",
      "closedAt": "2021-05-04T14:55:38Z",
      "mergedAt": "2021-05-04T14:55:37Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "e24d07a97ab1fb3263931ae1100e810e33293e1f"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "#107",
          "createdAt": "2021-04-30T06:47:36Z",
          "updatedAt": "2021-04-30T06:47:36Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 109,
      "id": "MDExOlB1bGxSZXF1ZXN0NjI3MjcyMDIy",
      "title": "EDHOC error, availability, DoS",
      "url": "https://github.com/lake-wg/edhoc/pull/109",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-04-30T11:15:21Z",
      "updatedAt": "2021-08-19T14:55:30Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "57ac5116f91b81a1e9ada0d157d896eca814d331",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "EDHOC-error,-availability,-DoS",
      "headRefOid": "c167024ff3861b3a4568ce3dfd9578d93cefd2d1",
      "closedAt": "2021-05-21T07:52:24Z",
      "mergedAt": "2021-05-21T07:52:24Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "c069549e5faee4ff0783a2775435104b0eac68c9"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "#101",
          "createdAt": "2021-04-30T11:32:10Z",
          "updatedAt": "2021-04-30T11:32:10Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good.",
          "createdAt": "2021-05-09T14:54:00Z",
          "updatedAt": "2021-05-09T14:54:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 111,
      "id": "MDExOlB1bGxSZXF1ZXN0NjI5NjIwOTAw",
      "title": "\"external authorization data\" EAD",
      "url": "https://github.com/lake-wg/edhoc/pull/111",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-05-04T08:38:01Z",
      "updatedAt": "2021-08-19T14:55:26Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "6ae2bcd5dbdf2e7703330c08cb0875d5cd7e941c",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "\"external-authorization-data\"-EAD",
      "headRefOid": "82e1b51b9d614960c61b14b262dd42cce0b2df63",
      "closedAt": "2021-05-24T12:18:43Z",
      "mergedAt": "2021-05-24T12:18:43Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "c14434fe5237fd355da2dfdde8fe734388e23877"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The definition says array but the CDDL is a CBOR sequence. In this case it works to use a sequence.\r\n\r\nThe CDDL for message_1, 2 3 4 needs to be updated. Right now they say \r\n\r\n? EAD_1 : any,\r\n\r\n",
          "createdAt": "2021-05-06T15:22:33Z",
          "updatedAt": "2021-05-06T15:22:33Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Might also want to allow more that one CBOR item. The following would be quite general:\r\n\r\n```\r\nEAD = (\r\n  type : int,\r\n  + ext_authz_data,\r\n)\r\n\r\n? EAD_1 : EAD,\r\n```\r\n\r\nShould probably write that \"+ ext_authz_data,\" follows from \"type : int,\"",
          "createdAt": "2021-05-06T16:06:26Z",
          "updatedAt": "2021-05-06T16:07:02Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good.",
          "createdAt": "2021-05-09T14:54:04Z",
          "updatedAt": "2021-05-09T14:54:04Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Was there any reason that this was not merged today. The new IANA registry for Aux Data should probably be another PR.",
          "createdAt": "2021-05-21T19:10:54Z",
          "updatedAt": "2021-05-21T19:10:54Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The reason for not merging this yet was to first conclude the discussion about CWT in EAD_2 and EAD_3 in #90.",
          "createdAt": "2021-05-24T06:58:54Z",
          "updatedAt": "2021-05-24T06:58:54Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "By moving out the IANA type to a separate issue #126 and waiting with the CWT related part of #90 we are ready to merge.",
          "createdAt": "2021-05-24T12:11:06Z",
          "updatedAt": "2021-05-24T12:11:06Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 113,
      "id": "MDExOlB1bGxSZXF1ZXN0NjMwNDUzMDc2",
      "title": "Error codes and definitions.",
      "url": "https://github.com/lake-wg/edhoc/pull/113",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This should address all open issues regarding errors.\r\n- Align with very common standard that 0 means success and everything else means error\r\n- Specify that success is for internal use in the application, it therefore makes sense to use any and let the application define what to store.\r\n- No sense in forcign application to support 0, it is not needed for interoperability over the wire.",
      "createdAt": "2021-05-05T09:51:18Z",
      "updatedAt": "2021-08-19T14:55:25Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "e24d07a97ab1fb3263931ae1100e810e33293e1f",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Error-codes-and-definitions",
      "headRefOid": "0176883283dc57be1cc5ea13ec9bdc208bc10b55",
      "closedAt": "2021-05-21T07:54:36Z",
      "mergedAt": "2021-05-21T07:54:36Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "244f87acb47c204008abf92ab04604de32002f75"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I kept error codes positive as proposed by IOTOPS, but changed the more general error \"unspecified\" comes before the more specific \"wrong ciphersuite\" because \r\n1. that allows for more specific errors to follow in a structured way in the table\r\n2. that aligned better with the subsubsections describing the cipher suite negotiation.",
          "createdAt": "2021-05-06T08:54:13Z",
          "updatedAt": "2021-05-06T08:54:13Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "John and I are happy with this now. Unless there are any comments we will soon merge this.",
          "createdAt": "2021-05-06T08:56:41Z",
          "updatedAt": "2021-05-06T08:56:41Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good.",
          "createdAt": "2021-05-09T14:54:08Z",
          "updatedAt": "2021-05-09T14:54:08Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 114,
      "id": "MDExOlB1bGxSZXF1ZXN0NjMxNDQyNjk4",
      "title": "Exporter labels, IANA, context, requirements",
      "url": "https://github.com/lake-wg/edhoc/pull/114",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-05-06T13:29:46Z",
      "updatedAt": "2021-08-19T14:54:48Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "d87282c593d0f68abf3dbf7b99cfe45ef9ca2631",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Exporter-labels,-IANA,-context,-requirements",
      "headRefOid": "68d039d53074027ce92529c210f9ede5e8c99b79",
      "closedAt": "2021-05-21T08:01:12Z",
      "mergedAt": "2021-05-21T08:01:12Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "fa0abe787b8c7299078a897b205b2530930f14fa"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "(Last two commits on wrong branch.)",
          "createdAt": "2021-05-07T14:15:13Z",
          "updatedAt": "2021-05-07T14:15:13Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "The prototype of EDHOC-Exporter() has remained EDHOC-Exporter(label, length), while it should be EDHOC-Exporter(label, context, length) as per Alternative 3 discussed in issue https://github.com/lake-wg/edhoc/issues/97. Correct?",
          "createdAt": "2021-05-09T14:54:37Z",
          "updatedAt": "2021-05-09T14:54:37Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @marco-tiloca-sics, your comment is addressed in the latest commit. I merge this now.",
          "createdAt": "2021-05-21T08:01:03Z",
          "updatedAt": "2021-05-21T08:01:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 116,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQzOTMyMzcy",
      "title": "COSE header parameter for CWT",
      "url": "https://github.com/lake-wg/edhoc/pull/116",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-05-13T12:22:52Z",
      "updatedAt": "2021-08-19T14:53:32Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "7f1ef760e62fd56fd6ac16fdca36bcd16e98be8a",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "COSE-header-parameter-for-CWT",
      "headRefOid": "f16dfb937937cf91f0b5b70ebc0f7686b3f1fbc0",
      "closedAt": "2021-06-18T09:15:51Z",
      "mergedAt": "2021-06-18T09:15:51Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "dddde969ef78f466e930b49261825a92fc4ad000"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 117,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQ2MDc0NjE3",
      "title": "Move the prepended C_x from the messages to CoAP section",
      "url": "https://github.com/lake-wg/edhoc/pull/117",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "... and add an appendix telling other protocol binding authors to do as\r\nCoAP does.\r\n\r\nThis is an initial rough change, primarily guided by search for a few\r\nkeywords, so some spots that need changed wording may have been missed.\r\n\r\nThe test vectors were left unmodified. Some data structurs were modified\r\nminimally to be now empty; removing them completely can only be done\r\ninformed my their relevance to the transcripts.",
      "createdAt": "2021-05-17T18:21:30Z",
      "updatedAt": "2021-08-03T11:44:39Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "ba134c697b853d1780a30bd0dd27bc31d2b58a2e",
      "headRepository": "chrysn-pull-requests/edhoc",
      "headRefName": "initial-105",
      "headRefOid": "5390c73cd1002a8d83ff285da49558f39587f508",
      "closedAt": "2021-08-03T11:44:39Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "The stats (which seem to indicate that more text was added than removed) are skewed a bit by my aversion to long lines, the change log, and a few lines explaining why some empty data structures were left around for further editing. Compensating for those, the text was shortened by 11 lines or 116 words, and can possibly be shortened a bit more now that data_3 and data_4 are empty and might go away completely.",
          "createdAt": "2021-05-17T18:30:30Z",
          "updatedAt": "2021-05-17T18:30:30Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Spelling out the changes from this PR a bit more explicitly, the messages now all have zeros in the place where they used to have corr (METHOD may be shifted down to by two bits, not done here yet), and crypto-operation-wise behave as if it were 3 (as data_n now do not contain their leading C_x any more even in the client-to-server direction).\r\n\r\nFor messages 3 and 4 this means that these are now always empty. Right now I left them as empty arrays, but for data_3 that means that one hashing step is really just a double hashing (`TH_3 = H( H(TH_2, CIPHERTEXT_2), data_3 )` where data_3 is always the empty bytestring) -- can that hashing operation be removed?",
          "createdAt": "2021-05-17T18:38:02Z",
          "updatedAt": "2021-05-17T18:38:02Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am having a hard time understanding how this change is intended to be implemented: EDHOC messages still include the mandatory connections identifiers; optional identifiers are moved and handled by the transport. Part of the logic seems to be within the EDHOC machinery, part of the logic within the transport handler. @chrysn please let me know if I am missing something.",
          "createdAt": "2021-06-04T08:59:15Z",
          "updatedAt": "2021-06-04T08:59:15Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@malishav Some reflections: \r\n\r\n> EDHOC messages still include the mandatory connections identifiers\r\n\r\nEDHOC messages still include the negotiation of connections identifiers but strictly speaking they are not used by EDHOC anymore.\r\n\r\n> Part of the logic seems to be within the EDHOC machinery, part of the logic within the transport handler.\r\n\r\nAlready with the previous version, in the case of CoAP, part of the logic was outside the EDHOC machinery and in the transport handler, like the use of the CoAP Token. Also, in case of OSCORE, part of the logic was outside the EDHOC machinery because EDHOC could not unilaterally decide on the values of connection identifiers without considering existing OSCORE Recipient Identifiers.\r\n\r\nIs this really so different?\r\n",
          "createdAt": "2021-06-11T14:18:43Z",
          "updatedAt": "2021-06-11T14:18:43Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "See #129",
          "createdAt": "2021-06-12T10:31:16Z",
          "updatedAt": "2021-06-12T10:31:16Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am not arguing that this is impossible to implement, I am arguing that it is not the cleanest design. See my comment on #129  on how I think we could cleanly describe the separation of concerns.",
          "createdAt": "2021-06-24T14:49:36Z",
          "updatedAt": "2021-06-24T14:49:36Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this. My understanding is that the suggested content in this PR is already merged in -08 based on another PR.",
          "createdAt": "2021-08-03T11:44:39Z",
          "updatedAt": "2021-08-03T11:44:39Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 119,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQ2NzY1NDA1",
      "title": "move to \"main\" branch",
      "url": "https://github.com/lake-wg/edhoc/pull/119",
      "state": "MERGED",
      "author": "mcr",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "git wants us to call our lead branches \"main\", and MT makefile now does that, so switch.\r\nto avoid warning \"rm -rf lib\", and run make after.\r\n",
      "createdAt": "2021-05-18T13:37:39Z",
      "updatedAt": "2021-08-19T14:55:41Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "ba134c697b853d1780a30bd0dd27bc31d2b58a2e",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "update-makefile-to-main",
      "headRefOid": "7162d6ac6087f4680fc0a2a07e470a0596a0a067",
      "closedAt": "2021-06-23T13:55:42Z",
      "mergedAt": "2021-06-23T13:55:42Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "4b73250d79333c6b12dbea0ac0bec39d66f4026b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 122,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQ3NjcwMzcz",
      "title": "Drop bstr_identifier, allow bstr / int in C_x instead",
      "url": "https://github.com/lake-wg/edhoc/pull/122",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "The largest fall-out of this will be in draft-ietf-core-oscore-edhoc\r\nsince https://github.com/lake-wg/edhoc/issues/75.\r\n\r\nClose: #79\r\n\r\n---\r\n\r\nAs with #117, the test vectors are untouched. (I don't expect actual change in the numbers, just in the text).\r\n\r\nThis is incomplete on its own due to the #75 changes; I'm opening a separate PR there.\r\n\r\nAnother piece of incompleteness is that this references (with a remark) the kid-int variant suggested in #79, without actually defining it. (But that would be merely an IANA item; the big question to COSE being whether we can up-spec kid to bstr / int in-place or really need kid-int).",
      "createdAt": "2021-05-19T13:31:08Z",
      "updatedAt": "2021-08-03T11:44:48Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "ba134c697b853d1780a30bd0dd27bc31d2b58a2e",
      "headRepository": "chrysn-pull-requests/edhoc",
      "headRefName": "initial-79",
      "headRefOid": "cdc99c5a2fe09ca52dba2fcfcbf6da0388c0cbeb",
      "closedAt": "2021-08-03T11:44:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "See also #98",
          "createdAt": "2021-05-21T07:49:14Z",
          "updatedAt": "2021-05-21T07:49:14Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this. My understanding is that the suggested content in this PR is already merged in -08 based on another PR.",
          "createdAt": "2021-08-03T11:44:48Z",
          "updatedAt": "2021-08-03T11:44:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 123,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQ5MTM3Njkw",
      "title": "Simplify MAC calculation",
      "url": "https://github.com/lake-wg/edhoc/pull/123",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-05-20T16:40:16Z",
      "updatedAt": "2021-08-19T14:54:37Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "9dbd704cf5d726aad834fa65d0f55cf37d03d0a7",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Simplify-MAC-calculation",
      "headRefOid": "bc2b8a7189f2a8b8e5963c15839fb677957e4e5d",
      "closedAt": "2021-07-26T12:11:59Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Considering this PR on the MAC computation and the recent update to the Exporter interface, the EDHOC-KDF() interface in Section 4 \"Key Derivation\" now generally takes a CBOR sequence as third argument \"label\".\r\n\r\nIf I haven't missed anything in other PRs or commits, this should be reflected also in the definition of the 'info' array in that same section, which is still specifying its \"label\" element as a text string. Correct?",
          "createdAt": "2021-06-01T15:11:10Z",
          "updatedAt": "2021-06-01T15:11:10Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Replaces by #136 and #137",
          "createdAt": "2021-07-26T12:11:58Z",
          "updatedAt": "2021-07-26T12:11:58Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 127,
      "id": "MDExOlB1bGxSZXF1ZXN0NjU5MzE1NTYy",
      "title": "cipher suites",
      "url": "https://github.com/lake-wg/edhoc/pull/127",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-06-01T20:18:24Z",
      "updatedAt": "2021-08-19T14:54:49Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "74c380616eb3401ac942f8e7ba6f79f5a6cb6769",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "cipher-suites",
      "headRefOid": "27aa3b76f37d67d5b9211ce00fd40bd8ba79c057",
      "closedAt": "2021-06-18T07:55:11Z",
      "mergedAt": "2021-06-18T07:55:11Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "b7ea1277a80fa8fd614a25df30eaeba446ada35a"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good. One inconsistency is that there is no cipher suite with AES-GCM and NIST curves, like (A128GCM, SHA-256, P-256, ES256, A128GCM, SHA-256).\r\n\r\nThis could be a new cipher suite 5. Then all non-CNSA suites would come in pairs.",
          "createdAt": "2021-06-02T06:00:58Z",
          "updatedAt": "2021-06-02T06:00:58Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> Looks good. One inconsistency is that there is no cipher suite with AES-GCM and NIST curves, like (A128GCM, SHA-256, P-256, ES256, A128GCM, SHA-256).\r\n> \r\n> This could be a new cipher suite 5. Then all non-CNSA suites would come in pairs.\r\n\r\nThat is very intentional. The GCM cipher suite uses X25519 for key exchange and ECDSA for authentication. This seems to be the dominant choice for HTTPS on the Web. Unless you are constrained you typically use X25519 for key exchange for speed and ECDSA for authentication as that is what the CAs support.\r\n\r\nFor an IoT device you probably want to have a single curve implemented. Also it might be much easier to switch to EdDSA as you might not have to rely on Global CAs and all other HTTPS nodes to support EdDSA. You can just deploy you own CWT server and make sure the nodes in you new IoT deployment support EdDSA.\r\n\r\nI have not heard any IoT people very interested in GCM. People seems far more interested in ChaCha20.",
          "createdAt": "2021-06-02T09:40:11Z",
          "updatedAt": "2021-06-02T09:40:11Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Ready to merge?",
          "createdAt": "2021-06-17T09:15:00Z",
          "updatedAt": "2021-06-17T09:15:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 129,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY4ODI1MTgx",
      "title": "PR#117 rebased on master",
      "url": "https://github.com/lake-wg/edhoc/pull/129",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-06-12T09:35:58Z",
      "updatedAt": "2021-07-29T12:22:35Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "5fe30bf7b5311b318e3102d4bae4efbeb5dbe88d",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "gselander-pr-chrysn-pr-117",
      "headRefOid": "d6bfe77c35e877902f165332210cfde6c911568a",
      "closedAt": "2021-06-18T07:46:59Z",
      "mergedAt": "2021-06-18T07:46:59Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "f97a5c51af61ceea5c1066d051c1165f09324770"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Didn't manage to make a PR on #117, but this should just be rebasing on current master",
          "createdAt": "2021-06-12T09:38:03Z",
          "updatedAt": "2021-06-12T09:38:03Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I reviewed #117 and updated it with my proposed changes in the commit above. Pending resolution of comments in #117 and further quick comments I think we are ready to merge.",
          "createdAt": "2021-06-12T10:35:34Z",
          "updatedAt": "2021-06-12T10:35:34Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I updated the example message sizes, I think it makes most sense to describe EDHOC itselft without any transport parameters.\r\n\r\nTwo editorials\r\n\r\n\"may need ... no, they don't need anything special\"\r\n\r\n\"For use of EDHOC in the XX protocol\"\r\n\r\nOtherwise I think this is ready to merge",
          "createdAt": "2021-06-17T09:13:01Z",
          "updatedAt": "2021-06-17T09:13:01Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Christian had a comment that one of the hashes became useless. I am not sure it should be removed. New methods may specify things send in message_3.",
          "createdAt": "2021-06-17T09:14:31Z",
          "updatedAt": "2021-06-17T09:14:31Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's not do the editorials now, current text can be kept as placeholders. \r\n\r\nLet's remove data_3 and the iterated hash until there is a concrete method that needs it, but let's merge first to avoid further conflicts.",
          "createdAt": "2021-06-18T05:23:48Z",
          "updatedAt": "2021-06-18T05:23:48Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In general, I think that this approach is a cleaner way to solve the issue than what we had with CORR. Still, as discussed in #117, in order to implement this, interaction between three different protocol implementations is needed: EDHOC to negotiate connection identifiers, OSCORE/application for uniqueness requirements and CoAP/transport layer to transport them. The text is not very clear on how this interaction happens. While this is an implementation decision, it would still be good to organize the text in such a way that a clean separation of concerns is described. \r\n\r\nOne way of doing this would be to split \"Connection Identifiers and Transport\" into two separate sections: \r\n* \"Connection Identifiers\", and \r\n* \"Transport\". \r\n\r\nI would further split the \"Connection Identifiers\" section into three subsections, e.g:\r\n \r\n1) \"CID Negotiation\", \r\n2) \"CID Selection\", and \r\n3) \"CID Transport\".\r\n\r\nThe goal is to describe a clear flow and who does what. For instance, EDHOC calls an OSCORE API which proposes the CID, EDHOC negotiates the CID by exchanging EDHOC messages, EDHOC sets the CIDs to the underlying transport as soon as the CIDs are available. Transport module decides when to send and when to omit the CIDs depending on its correlation properties. The text should be general of course to account for other applications and transports. Would that make sense?\r\n\r\nP.S. I am missing normative text in the CoAP transport case mandating the transport of connection identifiers for different messages (in Section 7.2 ?). Am I missing the reason why there is no normative text at all in Section 7?",
          "createdAt": "2021-06-24T14:46:13Z",
          "updatedAt": "2021-06-24T14:46:13Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I forgot to respond to @malishav. The PR which was merged addressed much of these comments.\r\n* split \"Connection Identifiers and Transport\" into two separate sections\r\n* split the \"Connection Identifiers\" section into subsections \r\n    * CID Selection\r\n    * Use of CID in EDHOC\r\n    * Use of CID in OSCORE\r\n    * and expanded text about CID transport in the new Transport section\r\n\r\nThe second split was not exactly what was requested but it made more sense to me: The concept of \"CID negotation\" was redundant in the draft and replaced with \"CID Selection\" in a few occurences, wherefore a separate section of CID negotation was not needed. Having one section about CID Transport and then immediately followed by a section about Transport lead to duplicated text so I settled for a reference to the latter section. \r\n\r\nI did not include any text about OSCORE API which seemed too implementation specific. \r\n\r\nAbout normative text for CoAP transport of connection identifier, I don't know why that is needed. How EDHOC messages are transported is application dependent. If desirable an applicability statement can state that they use connection identifiers as described in A.3. I don't think adding normative text makes a difference. \r\n\r\nIf you think this is missing, or something else was missed in this comment, please make separate issues. Thanks.\r\n",
          "createdAt": "2021-07-29T12:22:35Z",
          "updatedAt": "2021-07-29T12:22:35Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjkxNzcxOTUx",
          "commit": {
            "abbreviatedOid": "d6bfe77"
          },
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "A couple of editorial comments while going through the PR.",
          "createdAt": "2021-06-24T13:44:04Z",
          "updatedAt": "2021-06-24T13:55:58Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "Proposal to rephrase for clarity to:\r\n\r\nIf EDHOC connection identifiers are used by an application protocol for which EDHOC established keys (such as OSCORE), then the selected connection identifiers SHALL adhere to the requirements for that protocol. For OSCORE, the choice of a connection identifier results in the endpoint selecting its Recipient ID (see Section 3.1 of {{RFC8613}}), for which the uniqueness requirements from Section 3.3 of {{RFC8613}} apply.",
              "createdAt": "2021-06-24T13:44:05Z",
              "updatedAt": "2021-06-24T13:55:58Z"
            },
            {
              "originalPosition": 113,
              "body": "How come it is \"recommended\" to transport EDHOC in CoAP? The fact that CoAP is the most frequent use case for transporting EDHOC does not make it a \"recommended\" transport IMO.",
              "createdAt": "2021-06-24T13:46:06Z",
              "updatedAt": "2021-06-24T13:55:58Z"
            },
            {
              "originalPosition": 326,
              "body": "s/enable/enables",
              "createdAt": "2021-06-24T13:50:20Z",
              "updatedAt": "2021-06-24T13:55:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE3OTk5ODk1",
          "commit": {
            "abbreviatedOid": "d9dd81f"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-29T11:53:49Z",
          "updatedAt": "2021-07-29T11:53:49Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "Thanks, included (with minor modification) as you can see.",
              "createdAt": "2021-07-29T11:53:49Z",
              "updatedAt": "2021-07-29T11:53:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 130,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY5MDA1Nzk3",
      "title": "Drop bstr_identifier rebased on PR #129",
      "url": "https://github.com/lake-wg/edhoc/pull/130",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Rebase PR #98 and PR #122 on PR #129",
      "createdAt": "2021-06-13T07:17:41Z",
      "updatedAt": "2021-08-19T14:54:17Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "gselander-pr-chrysn-pr-117",
      "baseRefOid": "85d08a6739d51ae2a2c3778f222daf06c6f94966",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "gselander-bstr_identifier",
      "headRefOid": "066c587fc41c65c7c3edc66fd573f1609bb0bdbd",
      "closedAt": "2021-06-18T08:11:08Z",
      "mergedAt": "2021-06-18T08:11:08Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "a867fdaa142025010a43d7ff4f9e518b8bd6cc22"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks very good. I think it is ready to merge.",
          "createdAt": "2021-06-17T09:23:52Z",
          "updatedAt": "2021-06-17T09:23:52Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "kid2 in COSE Key Common Parameters is missing I think",
          "createdAt": "2021-06-17T10:55:11Z",
          "updatedAt": "2021-06-17T10:55:11Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merge ignoring Travis issue.",
          "createdAt": "2021-06-18T08:10:54Z",
          "updatedAt": "2021-06-18T08:10:54Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 131,
      "id": "MDExOlB1bGxSZXF1ZXN0NjczMjY3OTI5",
      "title": "Revert \"Drop bstr_identifier rebased on PR #129\"",
      "url": "https://github.com/lake-wg/edhoc/pull/131",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Reverts lake-wg/edhoc#130",
      "createdAt": "2021-06-18T08:18:16Z",
      "updatedAt": "2021-08-19T14:55:07Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "gselander-pr-chrysn-pr-117",
      "baseRefOid": "a867fdaa142025010a43d7ff4f9e518b8bd6cc22",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "revert-130-gselander-bstr_identifier",
      "headRefOid": "6294571c29e6dfa6102521486cb6cdc1fd3f1dc3",
      "closedAt": "2021-06-18T08:41:31Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 135,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk2OTQ5MjEy",
      "title": "Update draft-ietf-lake-edhoc.md",
      "url": "https://github.com/lake-wg/edhoc/pull/135",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-07-26T11:38:32Z",
      "updatedAt": "2021-08-19T14:53:35Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "Simplify-MAC-calculation",
      "baseRefOid": "bc2b8a7189f2a8b8e5963c15839fb677957e4e5d",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Simplify-MAC-calculation-dummy",
      "headRefOid": "ec37f6910be6cf227b447ab22f3a2fa533ab0b93",
      "closedAt": "2021-07-26T12:11:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Replaces by #136 and #137",
          "createdAt": "2021-07-26T12:11:48Z",
          "updatedAt": "2021-07-26T12:11:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 136,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk2OTU1OTQ5",
      "title": "Simpler more secure MAC calculation (CBOR sequence)",
      "url": "https://github.com/lake-wg/edhoc/pull/136",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-07-26T11:49:46Z",
      "updatedAt": "2021-08-19T14:53:41Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "4ea461c5f637e3c1c4ae4a0cab032df1258df6f3",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Simpler-more-secure-MAC-calculation-(CBOR-sequence)",
      "headRefOid": "0180955e3ec3f2695913d64504365ec13707c3cf",
      "closedAt": "2021-08-11T12:26:21Z",
      "mergedAt": "2021-08-11T12:26:21Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "70045ab12c2ed62c9a33e9a61941bcf52f0b34a6"
      },
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "At first glance, I like this better than #137, as here I don't have to keep the number of elements in EAD_3 around. (I'll have to have processed them at some point, but that doesn't mean I'm keeping the count around).",
          "createdAt": "2021-07-29T19:43:45Z",
          "updatedAt": "2021-07-29T19:43:45Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on Christians comment. I would suggest that we merge this. I think allowing a CBOR sequence in the exporter migth also be a good idea. That allows external applications to input a CBOR sequence. The implementation allows a implementation to input tsrt, bsrt. That is just a special case when the CBOR sequence consist of a single bstr.",
          "createdAt": "2021-08-02T08:02:25Z",
          "updatedAt": "2021-08-02T08:02:25Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIxMDQxNjg5",
          "commit": {
            "abbreviatedOid": "92a0e4a"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-03T10:34:51Z",
          "updatedAt": "2021-08-03T10:34:51Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "Here the PRK should be PRK_3e2m.",
              "createdAt": "2021-08-03T10:34:51Z",
              "updatedAt": "2021-08-03T10:34:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIxMDQzMTA4",
          "commit": {
            "abbreviatedOid": "92a0e4a"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-03T10:36:38Z",
          "updatedAt": "2021-08-03T10:36:38Z",
          "comments": [
            {
              "originalPosition": 135,
              "body": "It should be:\r\n\r\nIf the Initiator authenticates with a static Diffie-Hellman key (method equals 2 or 3) ... If the Initiator authenticates with a signature key (method equals 0 or 1)",
              "createdAt": "2021-08-03T10:36:38Z",
              "updatedAt": "2021-08-03T10:36:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIxMDY5OTUy",
          "commit": {
            "abbreviatedOid": "bfa4b3f"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-03T11:10:45Z",
          "updatedAt": "2021-08-03T11:10:45Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "fixed",
              "createdAt": "2021-08-03T11:10:45Z",
              "updatedAt": "2021-08-03T11:10:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIxMDc1NzMx",
          "commit": {
            "abbreviatedOid": "0866431"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-03T11:18:12Z",
          "updatedAt": "2021-08-03T11:18:13Z",
          "comments": [
            {
              "originalPosition": 135,
              "body": "Fixed",
              "createdAt": "2021-08-03T11:18:13Z",
              "updatedAt": "2021-08-03T11:18:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI2NDQ3OTc0",
          "commit": {
            "abbreviatedOid": "df11f8d"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-10T13:37:42Z",
          "updatedAt": "2021-08-10T13:37:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 137,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk2OTcxNTE1",
      "title": "Simpler more secure MAC calculation (CBOR array)",
      "url": "https://github.com/lake-wg/edhoc/pull/137",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-07-26T12:11:04Z",
      "updatedAt": "2021-08-19T14:53:36Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "Simpler-more-secure-MAC-calculation-(CBOR-sequence)",
      "baseRefOid": "b681e6206bf9b76db521870eac4a9ee2055abf3c",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Simpler-more-secure-MAC-calculation-(CBOR-array)",
      "headRefOid": "0a218a287077f8264afd563517af24fa92e64722",
      "closedAt": "2021-08-03T11:40:18Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This is now a change bases on #136. The reader need to first look at #136 to understand the suggested changes to the main branch.\r\n\r\nThe diff gives a good overview of the difference between a sequence solution and a array solution.\r\n\r\nIf approved. #137 needs to be merged before #136. ",
          "createdAt": "2021-07-26T22:21:05Z",
          "updatedAt": "2021-07-26T22:21:05Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this, the plan is to merge #136",
          "createdAt": "2021-08-03T11:40:18Z",
          "updatedAt": "2021-08-03T11:40:18Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 143,
      "id": "MDExOlB1bGxSZXF1ZXN0NzAwMTg3MDg5",
      "title": "Optimization of message_2 to 45 bytes",
      "url": "https://github.com/lake-wg/edhoc/pull/143",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-07-30T10:31:48Z",
      "updatedAt": "2021-08-19T14:53:37Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "dd1f4e9c78771c5b3a5ee0eba7e292c79d5c074a",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Optimization-of-message_2-to-45-bytes",
      "headRefOid": "1a2d0387961094e91f198781f6b0cb577509665b",
      "closedAt": "2021-08-11T12:18:50Z",
      "mergedAt": "2021-08-11T12:18:50Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "adc594b495659384b26012ddddea5ffb40b865e1"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "message_2 could be made 44 bytes by using the known length of SIGNATURE_OR_MAC_2",
          "createdAt": "2021-07-30T10:49:10Z",
          "updatedAt": "2021-07-30T10:49:10Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "I suggest to have C_R as the last element of the CBOR sequence (which shouldn't be a problem and still allows for a sequential sequence parsing), i.e.:\r\n\r\n```\r\n~~~~~~~~~~~ CDDL\r\ndata_2 = (\r\n  G_Y_CIPHERTEXT_2 : bstr,\r\n  C_R : bstr / int\r\n)\r\n~~~~~~~~~~~\r\n```\r\n\r\nWhen using CoAP (or other transports with the same correlation properties), this would preserve a current good pattern as useful for message recognition: if a response transporting an EDHOC message starts with a CBOR integer, then it's an EDHOC error message.\r\n\r\nIt would be good to preserve this, hence why keeping C_R at the end of the new message_2, since it can now be either a CBOR byte string or a CBOR integer.",
          "createdAt": "2021-07-30T13:06:43Z",
          "updatedAt": "2021-07-30T13:06:43Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this now as there was no objection to:\r\nhttps://mailarchive.ietf.org/arch/msg/lake/wFREGTMBkR5LEcw3JAksJ782eCk/\r\n\r\nThis provides a solution to the concrete issue raised in #103.",
          "createdAt": "2021-08-11T12:16:50Z",
          "updatedAt": "2021-08-11T12:16:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Mistake, I intended to merge, not close.",
          "createdAt": "2021-08-11T12:18:23Z",
          "updatedAt": "2021-08-11T12:18:23Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE5MDc4NTAx",
          "commit": {
            "abbreviatedOid": "23fd42e"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-30T13:29:24Z",
          "updatedAt": "2021-07-30T13:29:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 148,
      "id": "MDExOlB1bGxSZXF1ZXN0NzAzNjEzNTUz",
      "title": "CRED_x is not bstr",
      "url": "https://github.com/lake-wg/edhoc/pull/148",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#147 ",
      "createdAt": "2021-08-04T15:12:21Z",
      "updatedAt": "2021-08-05T07:14:24Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "972f839a39c59d348cff794a8bdc54082e9739a8",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "CRED_x-is-not-bstr-(e.g.-C509)",
      "headRefOid": "10a2f24bbedbb491fee51de50579330ab8519bdf",
      "closedAt": "2021-08-05T07:14:16Z",
      "mergedAt": "2021-08-05T07:14:16Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "4f889f23eadc50441219a26b2f716c9659d871fa"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 150,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA0NTI5MTc4",
      "title": "RFC 7624 and Forward Secrecy",
      "url": "https://github.com/lake-wg/edhoc/pull/150",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-05T09:19:20Z",
      "updatedAt": "2021-08-05T11:36:36Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "1359ef4e328c7f09d89910c1198087291627f581",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "RFC-7624-and-Forward-Secrecy",
      "headRefOid": "dbbc13a6c198ccd6c385638a939d6deeff19eb02",
      "closedAt": "2021-08-05T11:36:32Z",
      "mergedAt": "2021-08-05T11:36:32Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "d34d56e95913c0be20e505af4701e10220e68f8a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 152,
      "id": "MDExOlB1bGxSZXF1ZXN0NzIzMzYwNzQw",
      "title": "SUITES and kid (#151 #155 #156)",
      "url": "https://github.com/lake-wg/edhoc/pull/152",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addressing #151",
      "createdAt": "2021-08-31T13:11:23Z",
      "updatedAt": "2021-09-03T16:09:15Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "efaa7ccba40adc3291c05faab884229ece009908",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "simplified-suites",
      "headRefOid": "d2b8b6cd912cf091de20ca237ccd1fa90fd14470",
      "closedAt": "2021-09-03T15:51:00Z",
      "mergedAt": "2021-09-03T15:51:00Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "1046f528d02dcfe159db834e87f30bedb062e27c"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics Please check if your comments are addressed.",
          "createdAt": "2021-09-03T15:34:26Z",
          "updatedAt": "2021-09-03T15:34:26Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "> @marco-tiloca-sics Please check if your comments are addressed.\r\n\r\nYes, especially in [1]. Thanks!\r\n\r\n[1] https://github.com/lake-wg/edhoc/pull/152/commits/1a44dfc8c2015278a3e4eb08399f0a153b8362c1",
          "createdAt": "2021-09-03T15:57:12Z",
          "updatedAt": "2021-09-03T15:57:12Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ1ODk0NDk4",
          "commit": {
            "abbreviatedOid": "c535701"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-03T09:11:52Z",
          "updatedAt": "2021-09-03T09:11:53Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "The paragraph before the CDDL notation mentions also one more error situation:\r\n\r\n> or if the Responder supports a cipher suite more preferred by the Initiator than the selected cipher suite\r\n\r\nThe handling of this case seems not present in this paragraph, which focuses on the case where the Responder does not support the selected cipher suite. I suppose the missing sentence is something like:\r\n\r\n\"If the Responder supports the selected cipher suite but it also supports a cipher suite more preferred by the Initiator than the selected cipher suite, then SUITES_R MUST include such more preferred cipher suite\".",
              "createdAt": "2021-09-03T09:11:52Z",
              "updatedAt": "2021-09-03T09:11:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ1ODk2OTUw",
          "commit": {
            "abbreviatedOid": "c535701"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-03T09:14:42Z",
          "updatedAt": "2021-09-03T09:14:42Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "> then SUITES_R MUST include the first supported cipher suite in SUITES_I\r\n\r\nThis probably means to include **only** that cipher suite, with SUITE_R simply as an integer. Correct?\r\n\r\nThe same applies to my comment above for SUITE_R including \"such more preferred cipher suite\".",
              "createdAt": "2021-09-03T09:14:42Z",
              "updatedAt": "2021-09-03T09:14:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 160,
      "id": "MDExOlB1bGxSZXF1ZXN0NzI2NjY1Mzc1",
      "title": "mac_length and info (#153 and #154)",
      "url": "https://github.com/lake-wg/edhoc/pull/160",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-09-03T09:50:56Z",
      "updatedAt": "2021-09-03T16:09:14Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "536018de7873b25d1512f543cbdd4a704fafc991",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "mac_length-and-info-(#153-and-#154)",
      "headRefOid": "8e0ccec530d0a9c0aa2a761bc8409f5390a0b45b",
      "closedAt": "2021-09-03T15:24:46Z",
      "mergedAt": "2021-09-03T15:24:46Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "efaa7ccba40adc3291c05faab884229ece009908"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 164,
      "id": "MDExOlB1bGxSZXF1ZXN0NzMwNDQzOTA3",
      "title": "Core resource type",
      "url": "https://github.com/lake-wg/edhoc/pull/164",
      "state": "MERGED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-09-09T10:31:14Z",
      "updatedAt": "2021-09-09T13:24:00Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "eb3ad1450181a8938771ae6f031fc8ab86e4a48f",
      "headRepository": "marco-tiloca-sics/edhoc",
      "headRefName": "core-resource-type",
      "headRefOid": "49d5d0490b99181c31b14b7a6ed0e86dd7a3220d",
      "closedAt": "2021-09-09T13:24:00Z",
      "mergedAt": "2021-09-09T13:24:00Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "7702ed137f46af09a0e2f08508d787ecaf70e588"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 168,
      "id": "MDExOlB1bGxSZXF1ZXN0NzMxNzk2Njg2",
      "title": "Small restructure of 3.3 and 3.4",
      "url": "https://github.com/lake-wg/edhoc/pull/168",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There was quite a lot of overlap between 3.3.2 and 3.4. Tried to integrate 3.3.2 in 3.4 to avoid that.",
      "createdAt": "2021-09-10T22:34:10Z",
      "updatedAt": "2021-09-14T08:32:39Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "8b05f6f41a547e7dab86d30dd7a07f9a7d576cc5",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Small-restructure-of-3.3-and-3.4",
      "headRefOid": "ae7fc4d2d54addb3f4956a7c2c1471c773913197",
      "closedAt": "2021-09-14T07:29:27Z",
      "mergedAt": "2021-09-14T07:29:27Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "ed3bd711ffbb64c98f80b1912e0e80562be73cee"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUyODA5MDgw",
          "commit": {
            "abbreviatedOid": "ae7fc4d"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-09-13T14:14:47Z",
          "updatedAt": "2021-09-13T14:14:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 173,
      "id": "PR_kwDOEItXAM4r4lCq",
      "title": "selected_suite in info #172",
      "url": "https://github.com/lake-wg/edhoc/pull/173",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This simplify things. The selected cipher suite also covers more than just the aead algorithm.\r\n\r\nI think the \"suite = int\" definition can be removed. It does not add much in the current version. In older versions suite was a more advances construction.",
      "createdAt": "2021-09-17T10:17:31Z",
      "updatedAt": "2021-09-24T11:42:23Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "33f0fbfdad94ab31be21795f7d410ace6ff36e7c",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "selected_suite-in-info-#172",
      "headRefOid": "356e1d5f71c23ff94a9c7fcdc78ed2a60ef229c0",
      "closedAt": "2021-09-17T11:05:53Z",
      "mergedAt": "2021-09-17T11:05:52Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "1b096dd6d9dd0097d9fe2d607a268b0c2d01cc3e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 176,
      "id": "PR_kwDOEItXAM4sITKO",
      "title": "Authentication parameters",
      "url": "https://github.com/lake-wg/edhoc/pull/176",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Here is a rough first suggestion for changes.",
      "createdAt": "2021-09-22T11:28:22Z",
      "updatedAt": "2021-09-24T11:42:21Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "e504e20621097eded0fdf4cdbdc8d7a4d693d499",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Authentication-parameters",
      "headRefOid": "0114f7aefe971fd87ba641fc4becfd86330bc4e8",
      "closedAt": "2021-09-24T07:40:14Z",
      "mergedAt": "2021-09-24T07:40:14Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "43cc862c7cf3b12dc66687f4c440d902b4a2adfa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM4tXdmp",
          "commit": {
            "abbreviatedOid": "f6504f4"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good. Two other things we discussed: 1. using credential \"as received\" instead of canonicalization. 2. Examples of multiple CBOR header maps.",
          "createdAt": "2021-09-22T16:06:39Z",
          "updatedAt": "2021-09-22T16:06:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 179,
      "id": "PR_kwDOEItXAM4sUrN3",
      "title": "Clarifying processing",
      "url": "https://github.com/lake-wg/edhoc/pull/179",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-09-27T16:11:24Z",
      "updatedAt": "2021-10-18T19:50:00Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "5dd0a227778a776b0dff9d16bb5d7d406c8b774c",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "clarifying-processing",
      "headRefOid": "9e39e34d8179430d4c2926b188a7aa90ba20d138",
      "closedAt": "2021-10-11T08:56:12Z",
      "mergedAt": "2021-10-11T08:56:12Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "82d8aa41dd635f4fb40bc45908ee6e8b35f23bdd"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "As discussed, the \"COSE construct\" parts should be moved to the appendix instead of subsection as discussed in the issues.\r\n\r\nMight be good to write that the text is an explanation of how COSE calls the AEAD/Signature interface. This description was used to generate the current test vectors.",
          "createdAt": "2021-10-07T10:58:56Z",
          "updatedAt": "2021-10-07T10:58:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Look good. One minor questions:\r\n\r\n\"prepended C_I, see {{ci-oscore}\"\r\n\r\nThe OSCORE ref is ok, but is that the best ref for the general C_I prepending?\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-10-10T15:10:06Z",
          "updatedAt": "2021-10-10T15:10:06Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Ready to merge now?",
          "createdAt": "2021-10-11T06:49:22Z",
          "updatedAt": "2021-10-11T06:49:22Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 181,
      "id": "PR_kwDOEItXAM4syVb3",
      "title": "MTI section #73",
      "url": "https://github.com/lake-wg/edhoc/pull/181",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Suggestion base the discussion during the October interim. There was no strong opinions. This PR updates the MTI for header parameters and credential types to align with the choices made for method (none is MTI).\r\n\r\nEAD is explicitly optional to support. It is used in specific cases and requires additional mechanics for each use case.\r\n\r\n#73",
      "createdAt": "2021-10-06T10:46:30Z",
      "updatedAt": "2021-10-18T19:49:55Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "5dd0a227778a776b0dff9d16bb5d7d406c8b774c",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "MTI-section-#73",
      "headRefOid": "7d57bd3ab3df17052f41402a42f8d6d773f9ae7b",
      "closedAt": "2021-10-07T08:40:36Z",
      "mergedAt": "2021-10-07T08:40:36Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "a9a9807e1b92f9e0b7efe4d6b3b3bb48404a710a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 182,
      "id": "PR_kwDOEItXAM4s4-F0",
      "title": "COSE algorithms, KEMs, and PQC",
      "url": "https://github.com/lake-wg/edhoc/pull/182",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-07T12:24:18Z",
      "updatedAt": "2021-10-18T19:49:53Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "a9a9807e1b92f9e0b7efe4d6b3b3bb48404a710a",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "COSE-algorithms,-KEMs,-and-PQC",
      "headRefOid": "aefb33d746562a947b49017ebfb1a390e4043146",
      "closedAt": "2021-10-11T09:03:19Z",
      "mergedAt": "2021-10-11T09:03:19Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "eb8f3273b9aee3dff4b7ecfbf04ee8edaf9049aa"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR addresses #17 and #180 as well as parts of  #171 and #177. \r\n\r\n- I also thought is was good to point out that AES-CCM-16-64-128 and AES-CCM-16-64-128 are compatible with the IEEE CCM* mode.\r\n\r\n- I also corrected the sentence \"wrapped in a bstr\" that Carsten pointed out during the interim. #162",
          "createdAt": "2021-10-07T12:28:49Z",
          "updatedAt": "2021-10-07T12:28:49Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks ready to merge",
          "createdAt": "2021-10-10T14:54:07Z",
          "updatedAt": "2021-10-10T14:54:07Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Duplicated text in 3.5.2. and 3.6: \r\n\"The authentication key algorithm needs to be compatible with the EDHOC key exchange algorithm when static Diffie-Hellman authentication is used, and compatible with the EDHOC signature algorithm when signature authentication is used.\" \r\n\r\n",
          "createdAt": "2021-10-11T07:24:06Z",
          "updatedAt": "2021-10-11T07:24:06Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 184,
      "id": "PR_kwDOEItXAM4tNA75",
      "title": "Limie use of COSE header parameters",
      "url": "https://github.com/lake-wg/edhoc/pull/184",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-14T14:05:40Z",
      "updatedAt": "2021-10-30T09:55:11Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "2f580aa2a243b6fa51a85e52d094dc99d7a41412",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "limit-cose-headers",
      "headRefOid": "d05024dbf74d6d408c8ac51750edb7806237d8a3",
      "closedAt": "2021-10-19T14:26:52Z",
      "mergedAt": "2021-10-19T14:26:52Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "29ba69b9acde18ac429d2c27d7a605041c2b8656"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Ready to merge I think.",
          "createdAt": "2021-10-19T08:13:14Z",
          "updatedAt": "2021-10-19T08:13:14Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Fine by me, but I find this unesthetical:\r\n\r\n\"* ID_CRED_R is intended to facilitate for the Initiator to retrieve the Responder's authentication key.\"\r\n\r\nthen a few lines later:\r\n\r\n\"parameters in ID_CRED_R are used to identify the Responder's public key\"\r\n\r\n+ same for ID_CRED_I. \r\n\r\nSeems redundant to have two slightly different formulations like this.\r\n",
          "createdAt": "2021-10-19T08:29:26Z",
          "updatedAt": "2021-10-19T08:29:26Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's merge this anyway  - need to prepare for submission.",
          "createdAt": "2021-10-19T14:26:37Z",
          "updatedAt": "2021-10-19T14:26:37Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 190,
      "id": "PR_kwDOEItXAM4t4IFk",
      "title": "Padding and Privacy (issue #189)",
      "url": "https://github.com/lake-wg/edhoc/pull/190",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-30T09:54:48Z",
      "updatedAt": "2022-04-18T12:44:30Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "f81fd80acd3a62d5100f76f2fda6233d9c911936",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Padding-and-Privacy",
      "headRefOid": "d26f56b65d0b1b5e440ad9c70f93e3330fcce634",
      "closedAt": "2022-01-21T11:01:33Z",
      "mergedAt": "2022-01-21T11:01:33Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "8464fd6c556f3d20e0f956b93027207931f6a676"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@emanjon \r\n@marco-tiloca-sics \r\n\r\nCan we merge this?",
          "createdAt": "2022-01-19T10:14:04Z",
          "updatedAt": "2022-01-19T10:14:04Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, the latest updates look good.",
          "createdAt": "2022-01-19T10:21:28Z",
          "updatedAt": "2022-01-19T10:21:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM4v-uQ-",
          "commit": {
            "abbreviatedOid": "7545b2f"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-12T16:05:23Z",
          "updatedAt": "2021-11-12T16:05:23Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "Perhaps you mean \"Including padding to an EDHOC message is OPTIONAL to support.\"\r\n\r\nThat is, I would expect the active use of padding from a sender node to be indeed optional.\r\n\r\nHowever, a recipient node always has to be able to parse an EDHOC message, also in case padding is included. This is already what seems to be intended above in this PR, about the updated message format and processing.",
              "createdAt": "2021-11-12T16:05:23Z",
              "updatedAt": "2021-11-12T16:05:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM4x4BAw",
          "commit": {
            "abbreviatedOid": "7545b2f"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-12-20T20:00:52Z",
          "updatedAt": "2021-12-20T20:00:52Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "\"That is, I would expect the active use of padding from a sender node to be indeed optional.\"\r\nYes, I think that is already in the PR.\r\n\r\n\"However, a recipient node always has to be able to parse an EDHOC message, also in case padding is included.\"\r\nNot necerasy as discussed by Carsten during the last COSE meeting. You could live when the\r\nrecipient failing nicely. CBOR makes this possible. The recipient would know just now that does not expect\r\ntrue in the beginning of the plaintext and fail. It does not need to know the meaning of the true. But\r\nmandatory to support padding removal for recipient might be good.",
              "createdAt": "2021-12-20T20:00:52Z",
              "updatedAt": "2021-12-20T20:00:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 197,
      "id": "PR_kwDOEItXAM4uMY-i",
      "title": "Update to randomness considerations",
      "url": "https://github.com/lake-wg/edhoc/pull/197",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-07T16:01:48Z",
      "updatedAt": "2022-04-18T12:43:36Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "c6d8a560a1eb9f478dfc432c57e5a22fa3f321af",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "randomness-considerations",
      "headRefOid": "ad80d1beb67b73e6c441ae3cda38d6bf922c2b4b",
      "closedAt": "2022-01-19T09:50:28Z",
      "mergedAt": "2022-01-19T09:50:28Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "8ac2ebbae25705b1ea6ba2f97738f79ea3d27779"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 199,
      "id": "PR_kwDOEItXAM4uVGBo",
      "title": "Updates following Marco's review",
      "url": "https://github.com/lake-wg/edhoc/pull/199",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-10T06:55:07Z",
      "updatedAt": "2022-04-18T12:43:37Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "34e9c0b823f9dc2466523fa909b6a74cf03db7f1",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "updates-following-Marco's-review",
      "headRefOid": "8c807e7a899dad38d44fae925197ba5254df0677",
      "closedAt": "2021-12-14T07:07:50Z",
      "mergedAt": "2021-12-14T07:07:50Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "777b1554a065a06ae9b44c000a5e05d2c0a35826"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "> \r\n> \r\n> \"By default, the message flow is as follows:\"\r\n> \r\n>     Text misses error as a result from 4, that is not very default, but none of the error are....\r\n>\r\n\r\nDone\r\n\r\n \r\n> \"but intended to enable the use short identifiers in combination with simplifying the retrieval of the right security context in the application protocol.\"\r\n> \r\n>     of in \"the use short\" is missing\r\n>     Why would \"enable\" be better than \"simplify\"? Don't remember what EDHOC says, but simplify is absolutely a better word than enable for the use in COSE/OSCORE.\r\n>     Retrieval of the right security context is also for EDHOC. This change remove that by specifying \"application protocol\".\r\n>\r\n\r\nMarco's comment was about interpretation of \"security context\", I reverted and bring up that in the response to his review mail.\r\n \r\n>\r\n> \"identities to verify the 'sub' (subject) claim of the CWT.\"\r\n> \r\n>     Should use the same text for X509 and CWT.\r\n>     Not added in this PR, but \"sub\" claim is just an example. CTW might add AltSub in the future.\r\n> \r\n\r\nMarco's comment was an editorial, which I kept. Your comment is a separate issue which i opened as #215\r\n\r\n>\r\n> \"message_4 MUST be supported and the Responder MUST send message_4.\"\r\n> \r\n>     Good change, but the \"Responder MUST send message_4\" is still strange, would about I? Maybe just \"message_4 MUST be used\"?\r\n> \r\n> \r\n\r\nDone",
          "createdAt": "2021-12-11T13:58:14Z",
          "updatedAt": "2021-12-11T13:58:14Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM4xZzMK",
          "commit": {
            "abbreviatedOid": "22b0653"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "\"By default, the message flow is as follows:\"\r\n- Text misses error as a result from 4, that is not very default, but none of the error are....\r\n\r\n\r\n\"but intended to enable the use short identifiers in combination with simplifying the retrieval of the right security context in the application protocol.\"\r\n\r\n- of in \"the use short\" is missing\r\n- Why would \"enable\" be better than \"simplify\"? Don't remember what EDHOC says, but simplify is absolutely a better word than enable for the use in COSE/OSCORE.\r\n- Retrieval of the right security context is also for EDHOC. This change remove that by specifying \"application protocol\".\r\n\r\n\r\n\"identities to verify the 'sub' (subject) claim of the CWT.\"\r\n- Should use the same text for X509 and CWT.\r\n- Not added in this PR, but \"sub\" claim is just an example. CTW might add AltSub in the future.\r\n\r\n\r\n\"message_4 MUST be supported and the Responder MUST send message_4.\"\r\n- Good change, but the \"Responder MUST send message_4\" is still strange, would about I? Maybe just \"message_4 MUST be used\"?\r\n",
          "createdAt": "2021-12-10T12:38:56Z",
          "updatedAt": "2021-12-10T12:41:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 200,
      "id": "PR_kwDOEItXAM4uWas1",
      "title": "Updates following Stefan's review",
      "url": "https://github.com/lake-wg/edhoc/pull/200",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-10T14:01:50Z",
      "updatedAt": "2022-04-18T12:43:39Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "ba75570ffc86d7e342f32b5fe8a170ddbb9f4197",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "updates-following-Stefan's-review",
      "headRefOid": "4a50e764fd73648a3f1cf0e08cca3796cc6a9d1e",
      "closedAt": "2021-12-14T14:20:01Z",
      "mergedAt": "2021-12-14T14:20:01Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "54048e87b01d93ea17499f39c4d1a65182916b85"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Added references to revocation according to final comment. ",
          "createdAt": "2021-12-14T14:19:44Z",
          "updatedAt": "2021-12-14T14:19:44Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM4xZe2T",
          "commit": {
            "abbreviatedOid": "c548777"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me. I have just read the PR, not checked how the PR corresponds to the review.",
          "createdAt": "2021-12-10T10:59:57Z",
          "updatedAt": "2021-12-10T10:59:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 205,
      "id": "PR_kwDOEItXAM4vWMjT",
      "title": " Length of labels, removal of master (issue #204)",
      "url": "https://github.com/lake-wg/edhoc/pull/205",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#204",
      "createdAt": "2021-12-03T07:42:03Z",
      "updatedAt": "2022-01-19T10:10:13Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "7be24e41ee04a83db1911190b56a566c949b7631",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Length-of-labels,-removal-of-master-(issue-#204)",
      "headRefOid": "febb2babece014921ba7ded6385c5d77faab839a",
      "closedAt": "2022-01-19T10:10:07Z",
      "mergedAt": "2022-01-19T10:10:07Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "7c6cdd7e23cc7a775d9817e46badb7b93f1f85ad"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this as announced on the mailing list. ",
          "createdAt": "2022-01-19T10:09:55Z",
          "updatedAt": "2022-01-19T10:09:55Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 206,
      "id": "PR_kwDOEItXAM4vWT6e",
      "title": " EAD internal structure and the EAD API (issue #186)",
      "url": "https://github.com/lake-wg/edhoc/pull/206",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#186",
      "createdAt": "2021-12-03T08:31:51Z",
      "updatedAt": "2021-12-14T10:46:35Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "851fb6c5584a0ab09fd8bafec26ae85c59e9bf00",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "EAD-internal-structure-and-the-EAD-API-(issue-#186)",
      "headRefOid": "77532a24c38933cfbf085b59cec6e282c9461ffc",
      "closedAt": "2021-12-14T10:46:23Z",
      "mergedAt": "2021-12-14T10:46:23Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "e6c3e9752629178c6f0403487d60157458f9759b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 207,
      "id": "PR_kwDOEItXAM4vWxrx",
      "title": " Updated Internet Threat Model considerations (issue #198)",
      "url": "https://github.com/lake-wg/edhoc/pull/207",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#198",
      "createdAt": "2021-12-03T11:18:06Z",
      "updatedAt": "2021-12-03T13:10:55Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "851fb6c5584a0ab09fd8bafec26ae85c59e9bf00",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Updated-Internet-Threat-Model-considerations-(issue-#198)",
      "headRefOid": "e555c2ef5fd170ade138c40363baa22fab6cb0ec",
      "closedAt": "2021-12-03T13:10:51Z",
      "mergedAt": "2021-12-03T13:10:51Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "e507069040911f177187397cdded6bbc303d285e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM4xCASr",
          "commit": {
            "abbreviatedOid": "e555c2e"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good, I made some editorials.",
          "createdAt": "2021-12-03T12:45:03Z",
          "updatedAt": "2021-12-03T12:45:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 211,
      "id": "PR_kwDOEItXAM4vih0o",
      "title": "Updates following Stephen's review",
      "url": "https://github.com/lake-wg/edhoc/pull/211",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-08T08:02:55Z",
      "updatedAt": "2022-04-18T12:44:21Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "7c6cdd7e23cc7a775d9817e46badb7b93f1f85ad",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "updates-following-review-by-Stephen",
      "headRefOid": "af7d5d2f7fa3c84c43fb8bc52fe14fac8dc49408",
      "closedAt": "2022-01-20T18:18:29Z",
      "mergedAt": "2022-01-20T18:18:28Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "e07867e3450468f6eaef871a1ad79219744865ac"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Just first commit, more to come  . . . ",
          "createdAt": "2021-12-08T08:04:09Z",
          "updatedAt": "2021-12-08T08:04:09Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this now to avoid conflicts when rewriting 3.5. Further comments are still welcome.",
          "createdAt": "2022-01-20T18:18:19Z",
          "updatedAt": "2022-01-20T18:18:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM4xidL6",
          "commit": {
            "abbreviatedOid": "ec7ea9c"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "- Oxford comma\r\n  OLD \"X.509 and\"\r\n  NEW \"X.509, and\"\r\n\r\n- I don't think this figure text is appropriate here. It mixes EDHOC and SIGMA, claim wrong things about SIGMA, and includes normative text in the caption. AEAD is defined earlier.\r\n   OLD\r\n   The SIGMA construction allows message_2 to include a plain encryption Enc(), whereas message_3 includes an authenticated encryption with additional data AEAD() that MUST NOT be replaced by a plain encryption. More details in Section 8.2.\"} {: artwork-align=\"center\"}\r\n   NEW\r\n   The SIGMA construction allows message_2 to include a plain encryption Enc(), whereas message_3 is required to be authenticated encryption.\r\n\r\n- I am not a big fan of the long caption in fig-error1 and fig-error2. For fig-error2 there is similar text \"above\" the figure \"In the second example ({{fig-error2}}),\" ans in the caption....\r\n",
          "createdAt": "2021-12-14T07:47:40Z",
          "updatedAt": "2021-12-14T07:47:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 216,
      "id": "PR_kwDOEItXAM4vxB4Y",
      "title": "Minor update on method support",
      "url": "https://github.com/lake-wg/edhoc/pull/216",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-13T15:20:41Z",
      "updatedAt": "2022-01-19T09:53:46Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "066b52f0fe1ca04f95ab77d819ef8f3bad4be595",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "new-method-text",
      "headRefOid": "7276292810df4ad7704ac84f59e2aa6f82988a38",
      "closedAt": "2022-01-19T09:53:36Z",
      "mergedAt": "2022-01-19T09:53:35Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "87ecbd40925f2c10aae2194bbf8dff41ace67fc3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM4xidRc",
          "commit": {
            "abbreviatedOid": "7276292"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me",
          "createdAt": "2021-12-14T07:48:06Z",
          "updatedAt": "2021-12-14T07:48:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 219,
      "id": "PR_kwDOEItXAM4wCAvy",
      "title": "Security considerations on connection IDs",
      "url": "https://github.com/lake-wg/edhoc/pull/219",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#213",
      "createdAt": "2021-12-18T11:20:59Z",
      "updatedAt": "2022-01-19T09:56:13Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "bde77d95a0d699e6cb8242edef50fa3b41b33c71",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Security-considerations-on-connection-IDs",
      "headRefOid": "78aff16d120ea39d6e927799a2f7053a89efdad0",
      "closedAt": "2022-01-19T09:56:07Z",
      "mergedAt": "2022-01-19T09:56:07Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "cafd35ece381f8b4fdd8801ff9159397307d7409"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 220,
      "id": "PR_kwDOEItXAM4wHisu",
      "title": "Minor cryptographic explanations",
      "url": "https://github.com/lake-wg/edhoc/pull/220",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#201",
      "createdAt": "2021-12-21T07:58:59Z",
      "updatedAt": "2022-04-18T12:44:29Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "bde77d95a0d699e6cb8242edef50fa3b41b33c71",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Minor-cryptographic-explanations",
      "headRefOid": "a4441da431c298e7a6edd69bc8b66d5de1d53ddb",
      "closedAt": "2022-01-21T16:21:10Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This could not be merges for some reason so I made a separate commit 678619c. The commit also includes the fix to Paters comment above.",
          "createdAt": "2022-01-21T16:21:10Z",
          "updatedAt": "2022-01-21T16:21:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM4yquwg",
          "commit": {
            "abbreviatedOid": "4ffbae1"
          },
          "author": "pbtgit",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-12T07:36:35Z",
          "updatedAt": "2022-01-12T07:36:35Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "\"An attacker can affect which of the two nodes\u2019 preferred cipher suites will be used by blocking the other exchange.\"\r\nWhat are the exact pre-conditions for such an attack? ",
              "createdAt": "2022-01-12T07:36:35Z",
              "updatedAt": "2022-01-12T07:36:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM4zDvRu",
          "commit": {
            "abbreviatedOid": "0723d96"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-19T10:46:25Z",
          "updatedAt": "2022-01-19T10:46:26Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "I opened a separate issue #226 ",
              "createdAt": "2022-01-19T10:46:25Z",
              "updatedAt": "2022-01-19T10:46:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM4zPkxv",
          "commit": {
            "abbreviatedOid": "a4441da"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-21T15:56:11Z",
          "updatedAt": "2022-01-21T15:56:11Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "This is wrong, I don't know if it was true in an early version or if has always been wrong.\r\n\r\nI tried to fix this in PR #231",
              "createdAt": "2022-01-21T15:56:11Z",
              "updatedAt": "2022-01-21T15:56:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 221,
      "id": "PR_kwDOEItXAM4wIxAt",
      "title": " Ed25519 instead of EdDSA #218",
      "url": "https://github.com/lake-wg/edhoc/pull/221",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": " Ed25519 instead of EdDSA #218",
      "createdAt": "2021-12-21T14:46:38Z",
      "updatedAt": "2022-04-18T12:43:40Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "bde77d95a0d699e6cb8242edef50fa3b41b33c71",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Ed25519-instead-of-EdDSA-#218",
      "headRefOid": "6328163381dc8f4ce855a672645f674a6dad98f4",
      "closedAt": "2022-01-19T10:00:28Z",
      "mergedAt": "2022-01-19T10:00:28Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "560e7d66a7cea2c580669ef45ca030ee99205369"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 225,
      "id": "PR_kwDOEItXAM4wvhSh",
      "title": "Updates following review by Sean",
      "url": "https://github.com/lake-wg/edhoc/pull/225",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-01-10T15:59:33Z",
      "updatedAt": "2022-04-18T12:44:25Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "e07867e3450468f6eaef871a1ad79219744865ac",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "updates-following-review-by-Sean",
      "headRefOid": "11b12d6b46344c871d0d55b02ff9be9ba5116045",
      "closedAt": "2022-01-20T18:41:25Z",
      "mergedAt": "2022-01-20T18:41:25Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "f81fd80acd3a62d5100f76f2fda6233d9c911936"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this now to avoid conflicts when rewriting 3.5. Further comments are still welcome.",
          "createdAt": "2022-01-20T18:41:16Z",
          "updatedAt": "2022-01-20T18:41:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM4yjrFl",
          "commit": {
            "abbreviatedOid": "ba09c07"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": ">The algorithms of cipher suite 24 are included in the CNSA suite {{CNSA}}.\r\n\r\nSounds backwards. Maybe \"Cipher suite 24 includes algorithms from the CNSA suite {{CNSA}}.\"\r\n\r\n\r\n>transport of error messages,\r\n\r\nSeems strange to single out error messages. The transport is responsible for transport of all types of EDHOC messages including error.....",
          "createdAt": "2022-01-10T18:46:48Z",
          "updatedAt": "2022-01-10T18:46:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 230,
      "id": "PR_kwDOEItXAM4xVtLF",
      "title": "Adding Test Vectors for P-256 keys and Certificates",
      "url": "https://github.com/lake-wg/edhoc/pull/230",
      "state": "MERGED",
      "author": "stoprocent",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed I'm adding test vectors for P-256 keys with x509 Certificates used as credentials.\r\nI have generated them with a test vectors generator from my fork with the following calls:\r\n\r\n```\r\ntest_vectors( sig, cred_x509, x5t, sig, cred_x509, x5t, 2, 37400 );\r\ntest_vectors( sig, cred_x509, x5bag, sig, cred_x509, x5bag, 2, 37400 );\r\n```\r\n\r\nExact code used to generate can be found here: https://github.com/stoprocent/edhoc/blob/feature/mbedtls/test-vectors-11/vectors.cpp",
      "createdAt": "2022-01-20T17:39:18Z",
      "updatedAt": "2022-01-21T12:13:55Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "7c6cdd7e23cc7a775d9817e46badb7b93f1f85ad",
      "headRepository": "stoprocent/edhoc",
      "headRefName": "test-vectors-rfc-p256",
      "headRefOid": "c2347bd9042170afc5f5971ff7b9dca4b5e81cb8",
      "closedAt": "2022-01-21T12:13:54Z",
      "mergedAt": "2022-01-21T12:13:54Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "d14311436f87d7c069d89a1263970e4da8edb2ec"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 231,
      "id": "PR_kwDOEItXAM4xZGzb",
      "title": "Blocking one of multiple simultaneous EDHOC exchanges (#226)",
      "url": "https://github.com/lake-wg/edhoc/pull/231",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#226",
      "createdAt": "2022-01-21T15:54:28Z",
      "updatedAt": "2022-01-21T16:21:41Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "955c94d40f3126a8e892ff1a057a26f289763c8d",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Blocking-one-of-multiple-simultaneous-EDHOC-exchanges-(#226)",
      "headRefOid": "e492214f9085685839a10cab21a4fdde3e13b772",
      "closedAt": "2022-01-21T16:21:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This was fixed in commit 678619c. ",
          "createdAt": "2022-01-21T16:21:40Z",
          "updatedAt": "2022-01-21T16:21:40Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 232,
      "id": "PR_kwDOEItXAM4xcPg0",
      "title": " State diagram #224",
      "url": "https://github.com/lake-wg/edhoc/pull/232",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#224",
      "createdAt": "2022-01-22T12:59:14Z",
      "updatedAt": "2022-01-25T11:02:19Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "fbfa8acda261363e4def600f6cc3a29d0c341699",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "State-diagram-#224",
      "headRefOid": "d8ff3676529ba6ff866537f069ebd9271529d99b",
      "closedAt": "2022-01-25T11:02:09Z",
      "mergedAt": "2022-01-25T11:02:09Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "0682135bd778164c86ae170d1cfb9947802573a7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 233,
      "id": "PR_kwDOEItXAM4xcn4z",
      "title": "Security considerations on gererating secret material and public material such as connection IDs. #214 ",
      "url": "https://github.com/lake-wg/edhoc/pull/233",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "#214",
      "createdAt": "2022-01-22T19:15:15Z",
      "updatedAt": "2022-04-18T12:44:41Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "fbfa8acda261363e4def600f6cc3a29d0c341699",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Security-considerations-on-gererating-secret-material-and-public-material-such-as-connection-IDs.-#214",
      "headRefOid": "42ac300514d5dc52514043af133322e0e0bece52",
      "closedAt": "2022-02-18T10:50:23Z",
      "mergedAt": "2022-02-18T10:50:23Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "4d48d3b433a791ed3226d08364d1daf863af75d6"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this can be merged.",
          "createdAt": "2022-02-18T05:38:03Z",
          "updatedAt": "2022-02-18T05:38:03Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed the problem with ':' in refs. Now merging.",
          "createdAt": "2022-02-18T10:50:15Z",
          "updatedAt": "2022-02-18T10:50:15Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 234,
      "id": "PR_kwDOEItXAM4xdHBF",
      "title": " Error message => Discontinue #208",
      "url": "https://github.com/lake-wg/edhoc/pull/234",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "#208",
      "createdAt": "2022-01-23T10:04:02Z",
      "updatedAt": "2022-04-18T12:46:12Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "fbfa8acda261363e4def600f6cc3a29d0c341699",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Error-message-=>-Discontinue-#208",
      "headRefOid": "dad9b4cf2394e96807e029de7a95dabff3f0fe9d",
      "closedAt": "2022-02-18T15:13:47Z",
      "mergedAt": "2022-02-18T15:13:47Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "510d6772871dc82af0e90f37e0554c3902c44647"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is ready to merge. This addresses Marcos and Seans comments. Remaining discussions should be handled by separate PRs.",
          "createdAt": "2022-02-18T07:25:51Z",
          "updatedAt": "2022-02-18T07:25:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 236,
      "id": "PR_kwDOEItXAM4xkQC5",
      "title": " Decision to use SHA-256/64 for I_CRED_R #235",
      "url": "https://github.com/lake-wg/edhoc/pull/236",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "#235",
      "createdAt": "2022-01-25T15:32:29Z",
      "updatedAt": "2022-02-18T11:03:10Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "0682135bd778164c86ae170d1cfb9947802573a7",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Decision-to-use-SHA-256/64-for-I_CRED_R-#235",
      "headRefOid": "81e3a4b57dc75f7d4e12bdba60fcc1e92552d60d",
      "closedAt": "2022-02-18T11:03:03Z",
      "mergedAt": "2022-02-18T11:03:03Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "55bb9eae9b969bf5ee401fee08e48ddae57dac68"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I added a recommendation as well. I think this can be merged.",
          "createdAt": "2022-02-18T05:38:41Z",
          "updatedAt": "2022-02-18T05:38:41Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks fine to me, merging",
          "createdAt": "2022-02-18T11:02:57Z",
          "updatedAt": "2022-02-18T11:02:57Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 237,
      "id": "PR_kwDOEItXAM4xuRZM",
      "title": "Updated p-256 test vectors to use SHA256/64 in ID_CRED_x",
      "url": "https://github.com/lake-wg/edhoc/pull/237",
      "state": "MERGED",
      "author": "stoprocent",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Required due to issue #235\r\nUpdated code again can be found here: https://github.com/stoprocent/edhoc/commit/a8d4c1d6ae4f8a7460c88a50481ec5b49a0185e4",
      "createdAt": "2022-01-28T08:35:21Z",
      "updatedAt": "2022-02-07T18:25:06Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "0682135bd778164c86ae170d1cfb9947802573a7",
      "headRepository": "stoprocent/edhoc",
      "headRefName": "test-vectors-rfc-p256",
      "headRefOid": "a78a8519948c2abec7af8c485589538c449f3c15",
      "closedAt": "2022-02-07T18:25:06Z",
      "mergedAt": "2022-02-07T18:25:06Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "a4f1aa72386b168504145c6a769d20b55e0e03a8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 239,
      "id": "PR_kwDOEItXAM4xxrdX",
      "title": "Compliance requirements update #238",
      "url": "https://github.com/lake-wg/edhoc/pull/239",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "When does the Compliance requirements apply #238",
      "createdAt": "2022-01-29T11:24:15Z",
      "updatedAt": "2022-04-18T12:44:36Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "0682135bd778164c86ae170d1cfb9947802573a7",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "When-does-the-Compliance-requirements-apply-#238",
      "headRefOid": "406029ed274b11c5c4d4a07fb14502e576b0c642",
      "closedAt": "2022-02-22T07:41:49Z",
      "mergedAt": "2022-02-22T07:41:49Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "a72646e0830779508520f376d202dd1d9fb5cac5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 240,
      "id": "PR_kwDOEItXAM4xyuXu",
      "title": "Section 3.5 rewrite",
      "url": "https://github.com/lake-wg/edhoc/pull/240",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "",
      "createdAt": "2022-01-30T14:23:41Z",
      "updatedAt": "2022-04-18T12:44:45Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "e2e93a4f73d981de8986604812c98456bf03835f",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "section-3.5-update",
      "headRefOid": "92250c31ddde635195a3d5f56f5538c2db005556",
      "closedAt": "2022-02-22T07:47:54Z",
      "mergedAt": "2022-02-22T07:47:54Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "beac4ba53b6d5daee6108be3858e05d6b15e0b2c"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "John requested the basic authentication services by EDHOC being highlighted in the beginning of the document. I tried to fit that in but didn't find a good place. Here is some text if someone wants to try:\r\n\r\n\r\n> EDHOC performs proof-of-possession that the other endpoint has the private key corresponding to its public key. EDHOC also transports information about the authentication credential (e.g., X.509 certificate or CBOR Web Token) containing the public key. Other authentication related verifications are out of scope for EDHOC, and is the responsibility of the application.\r\n",
          "createdAt": "2022-02-08T10:22:53Z",
          "updatedAt": "2022-02-08T10:22:53Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "A lot of changes are good and needed. Comments\r\n\r\nHard to get an overview of this PR. Especially which of the deleted text that has been removed and what has just been moved around.\r\n\r\n>EDHOC MUST allow the application to read the authentication credential.\r\nShould this be \"information about authentication credentials\", i.e. ID_CRED_x?\r\n\r\n>EDHOC MUST have access to the authentication key of the authentication credential.\r\nEDHOC also need the authentication credentials, i.e. CRED_x?\r\n\r\n- Not sure all the EAD text belongs in the body.\r\n  - Lot of duplication in processing.\r\n  - A lot of the text is talking about unfinished drafts.\r\n\r\n- The new text is Authentication Related Verifications {#auth-validation} has several issues.\r\n\r\n- \"match the algorithm\"\r\n- \"The validation needs to be made\"\r\n- \"The issuer of the authentication credential needs to be trusted with issuing the credential.\"\r\n- \"the trust anchor is a Certification Authority (CA) certificate\"\r\n- \"at least one CA public key certificate\"\r\n- \"subject of the certificate owns the public key\"\r\n\r\nI am also not sure it should be added. The comment was to shorten down 3.5. This seems to expand things. \r\n",
          "createdAt": "2022-02-10T07:10:45Z",
          "updatedAt": "2022-02-10T07:10:45Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I've made an attempt at all comments by @emanjon, have a look.",
          "createdAt": "2022-02-14T18:26:33Z",
          "updatedAt": "2022-02-14T18:26:33Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This looks quite good now. I just checked the greed part of the diff (I have not checked the parts, i.e., if something important was removed).\r\n\r\nComments (but most of them minor)\r\n\r\n\r\n- \"When the identified credential is a chain or a bag, the authentication credential CRED_x is just the end-entity X.509 or C509 certificate / CWT.\"\r\n\r\nThat is always true.\r\n\r\n\r\n\r\n- \"Since CRED_x is used in the integrity verification, see {{asym-msg2-proc}} and {{asym-msg3-proc}}, it needs to be specified such that it is identical when used by Initiator or Responder.\"\r\n\r\nI don't understand why this was added.\r\n\r\n\r\n\r\n\r\n- \"When the authentication credential is an (end-entity) X.509\"\r\n\r\nIf \"end-entity\" should be added it is better to not have the parathesis\r\n\r\nCan we make the end-entity text more general. Applies to CWT as well even\r\nif you cannot transfer more then one.\r\n\r\n\r\n\"If EAD_1 is present, make message_1 content available to the application for EAD processing.\"\r\n\r\nDo we want to force that everything is available. Maybe goood. As it is simple.\r\n\r\n\r\n- \"Make ID_CRED_R and EAD_2 (if present) available to the application for authentication- and EAD processing.\"\r\n\r\nAre you sure G_Y, C_R is not needed? This seems different from message_1 where the whole message is made available.\r\n\r\n\r\n\r\n- \"Message is 1,2,3 or 4,\"\r\n\r\n?\r\n\r\n\r\n\"* Similarly, when a PKI is used with CWTs, each endpoint needs a specific identity or set of identities it is allowed to communicate with\"\r\n\r\nThis is not PKI specific\r\n\r\n\r\n\r\n\"When PKI is not used (CCS, self-signed certificate/CWT)\"\r\n\r\nIs it \"self-signed\" or is pre-configured?\r\n\r\n\r\n\r\n\"For example, the name of the subject may be a canonical representation of the public key.\"\r\n\r\nWhat should the reader do with this. Might be confusing.\r\n\r\n\r\n\r\n\"To prevent misbinding attacks in systems where an attacker can\"\r\n\r\nShould this come a bit earlier?\r\n\r\n\r\n\r\nOLD\r\nWhen a Public Key Infrastructure (PKI) is used with certificates, the trust anchor is a Certification Authority (CA) certificate. Each party needs at least one CA public key certificate, or just the CA public key.\r\n\r\nNEW\r\nWhen a Public Key Infrastructure (PKI) is used with certificates, the trust anchor is a Certification Authority (CA) certificate, or just the CA public key.\r\n\r\n\r\n- \"The issuer of the authentication credential needs to be trusted with issuing the credential. X.509 and C509 certificates includes the \u201cIssuer\u201d field. In CWT and CCS, the \u201ciss\u201d claim has a similar meaning.\"\r\n\r\nNot sure this is needed.\r\n\r\n\r\n\r\n- TOFU is misssing that is ok for now\r\n- How ead_label is not defined.\r\n\r\n",
          "createdAt": "2022-02-18T12:08:48Z",
          "updatedAt": "2022-02-18T12:08:48Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The section are now using different terms for CRED_x and ID_CRED_x than other parts of the document. The intro defines them as `credentials` and `credential identifiers`. `credential identifiers` is also used in the security considerations.\r\n\r\n   *  CRED_I and CRED_R are the `credentials` containing the public\r\n      authentication keys of I and R, respectively.\r\n\r\n   *  ID_CRED_I and ID_CRED_R are `credential identifiers` enabling the\r\n      recipient party to retrieve the credential of I and R,\r\n      respectively.\r\n\r\n\r\n",
          "createdAt": "2022-02-18T15:53:51Z",
          "updatedAt": "2022-02-18T15:53:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM405ekj",
          "commit": {
            "abbreviatedOid": "793144a"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-18T16:14:14Z",
          "updatedAt": "2022-02-18T16:14:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEItXAM41BJ8g",
          "commit": {
            "abbreviatedOid": "92250c3"
          },
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Thanks for doing these changes. Section 3.5 reads nice. A couple of comments inline.",
          "createdAt": "2022-02-22T09:16:43Z",
          "updatedAt": "2022-02-22T09:34:42Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "Appendix D contains the information I was missing when going through this paragraph. However, the sentence referencing Appendix D is a bit obscure and did not give me an incentive to go read it. Can we rephrase as follows:\r\n\r\ns/see {{auth-validation}}/.For examples, see {{auth-validation}.",
              "createdAt": "2022-02-22T09:16:43Z",
              "updatedAt": "2022-02-22T09:34:42Z"
            },
            {
              "originalPosition": 316,
              "body": "A proposal to rename the title of the appendix to:\r\n\r\n# Out-of-scope Authentication-related Verifications {#auth-validation}",
              "createdAt": "2022-02-22T09:16:52Z",
              "updatedAt": "2022-02-22T09:34:42Z"
            },
            {
              "originalPosition": 55,
              "body": "s/signature_or_MAC/Signature_or_MAC ",
              "createdAt": "2022-02-22T09:18:32Z",
              "updatedAt": "2022-02-22T09:34:42Z"
            },
            {
              "originalPosition": 72,
              "body": "I don't understand why this section is presented independently from the presentation of the EDHOC method in Section 3.2",
              "createdAt": "2022-02-22T09:21:07Z",
              "updatedAt": "2022-02-22T09:34:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 245,
      "id": "PR_kwDOEItXAM4yM2Av",
      "title": "Update labels in test vectors according to #204",
      "url": "https://github.com/lake-wg/edhoc/pull/245",
      "state": "MERGED",
      "author": "stoprocent",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is addressing #204 and  #244.\r\nAs usual, code can be found here: https://github.com/stoprocent/edhoc/commit/864aa6918b9b8c871a8bebd86ee6ff7014d5849b",
      "createdAt": "2022-02-07T22:29:51Z",
      "updatedAt": "2022-02-08T07:15:22Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "a4f1aa72386b168504145c6a769d20b55e0e03a8",
      "headRepository": "stoprocent/edhoc",
      "headRefName": "test-vectors-rfc-p256",
      "headRefOid": "5047bd2ce2f592d68b527d0f692f12c8ce9e046c",
      "closedAt": "2022-02-08T07:15:22Z",
      "mergedAt": "2022-02-08T07:15:22Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "1c61585211e66f90802fd501b0d8f74c355e6a72"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 248,
      "id": "PR_kwDOEItXAM4yWu_e",
      "title": "Identity protection attack description",
      "url": "https://github.com/lake-wg/edhoc/pull/248",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "#241\r\n\r\nGood to describe that the known attack on Sigma is that the attacker create a new message_1, no attack is known where an active attacker modifies the ongoing connection (even if the lack of such attacks is likely not proven).",
      "createdAt": "2022-02-10T07:37:09Z",
      "updatedAt": "2022-04-18T12:46:10Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "4a8b62968a266dd4b9ce93e2851b6af08249f893",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Identity-protection-attack-description",
      "headRefOid": "eafafd495aff3c7387167b2a6def7a277e7f5b07",
      "closedAt": "2022-02-22T07:43:02Z",
      "mergedAt": "2022-02-22T07:43:02Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "e2e93a4f73d981de8986604812c98456bf03835f"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems ready to merge",
          "createdAt": "2022-02-18T05:45:55Z",
          "updatedAt": "2022-02-18T05:45:55Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 251,
      "id": "PR_kwDOEItXAM4zECeZ",
      "title": "Checking G_X in EDHOC Message 1 #243",
      "url": "https://github.com/lake-wg/edhoc/pull/251",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Removed the G_X checking that is heavy for implementations. That was a left over from the PSK mehtod.",
      "createdAt": "2022-02-18T09:12:35Z",
      "updatedAt": "2022-04-18T12:46:03Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "4a8b62968a266dd4b9ce93e2851b6af08249f893",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Checking-G_X-in-EDHOC-Message-1-#243",
      "headRefOid": "f107fdc1ed59cdeb6a11c1d8d783c1044091708f",
      "closedAt": "2022-02-22T07:42:45Z",
      "mergedAt": "2022-02-22T07:42:44Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "810e854bf9a5e174e61582817daef29151b7948f"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on Marco's comment. Maybe we should not have details....\r\n\r\n- Remoded details on ID_CRED\r\n- Reforormulated in split into tofu and non tofu\r\n- Renamed to selfie attack. (reflection attack was used earlier for the same thing but can also be other types of attacks)\r\n\r\n\r\n`So-called selfie attacks are mitigated as long as the Initiator does not have its own identity in the set of Responder identities it is allowed to communicate with. In trust on first use (TOFU) use cases the Initiator should verify that the the Responder's identity is not equal to its own. Any future EHDOC methods using e.g., pre-shared keys might need to mitigate this in other ways.\r\n`",
          "createdAt": "2022-02-18T15:49:28Z",
          "updatedAt": "2022-02-18T15:49:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 252,
      "id": "PR_kwDOEItXAM4zFjK2",
      "title": "Limited crypto support",
      "url": "https://github.com/lake-wg/edhoc/pull/252",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "In PR #239 statements about expected limitations in crypto support was lost. Now moved to security considerations.",
      "createdAt": "2022-02-18T14:04:43Z",
      "updatedAt": "2022-04-18T12:44:44Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "55bb9eae9b969bf5ee401fee08e48ddae57dac68",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "limited-crypto-support",
      "headRefOid": "057e1e863baf113f44516bb3d7b9456b25af4baf",
      "closedAt": "2022-02-22T07:42:11Z",
      "mergedAt": "2022-02-22T07:42:11Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "2d566f35fb3fa92df5a809befe9c96babab5463c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM4042nN",
          "commit": {
            "abbreviatedOid": "057e1e8"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-18T14:06:24Z",
          "updatedAt": "2022-02-18T14:06:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 254,
      "id": "PR_kwDOEItXAM4zhXzt",
      "title": "Updated Test Vectors according to request from #253",
      "url": "https://github.com/lake-wg/edhoc/pull/254",
      "state": "MERGED",
      "author": "stoprocent",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "So changes according to #253\r\n\r\n- Added Vectors in txt format\r\n- I have now hardcoded X and Y in the generator \r\n- I have switched ECDSA to deterministic \r\n\r\nChanges which are done to the test vector generator can be reviewed here: https://github.com/stoprocent/edhoc/commit/cab937d6cb04adf7651fbeaa2d6210e0cde6f5d6\r\n\r\nPlease let me know if all of this is ok.\r\n\r\nAlso as usual test vectors generator can be found here: https://github.com/stoprocent/edhoc/tree/feature/mbedtls",
      "createdAt": "2022-02-26T08:56:45Z",
      "updatedAt": "2022-03-02T06:51:15Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "4f56898808989e449cc412a8b136674202a0ddce",
      "headRepository": "stoprocent/edhoc",
      "headRefName": "test-vectors-rfc-p256",
      "headRefOid": "54cbf1f178af9cc6596cf2a12a8ce3679a31de21",
      "closedAt": "2022-03-02T06:51:15Z",
      "mergedAt": "2022-03-02T06:51:15Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "460712fec8d0f5dc978ad2d8a01174b767fd27a3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 255,
      "id": "PR_kwDOEItXAM4z1oOJ",
      "title": "Fixing Connection Identifiers in p-256 vectors",
      "url": "https://github.com/lake-wg/edhoc/pull/255",
      "state": "MERGED",
      "author": "stoprocent",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-02T15:41:38Z",
      "updatedAt": "2022-03-02T17:24:02Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "460712fec8d0f5dc978ad2d8a01174b767fd27a3",
      "headRepository": "stoprocent/edhoc",
      "headRefName": "test-vectors-rfc-p256",
      "headRefOid": "3603b75c4cd2aa38a3c4dc44bd6b0ee633dbdf67",
      "closedAt": "2022-03-02T17:24:02Z",
      "mergedAt": "2022-03-02T17:24:01Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "0f6f141a56ba962cea5346f22d62080021ddfc6a"
      },
      "comments": [
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is addressing #253",
          "createdAt": "2022-03-02T15:42:43Z",
          "updatedAt": "2022-03-02T15:42:43Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 256,
      "id": "PR_kwDOEItXAM4z6ZDB",
      "title": "Updated test vectors to include G_X and G_Y compact representable keys.",
      "url": "https://github.com/lake-wg/edhoc/pull/256",
      "state": "CLOSED",
      "author": "stoprocent",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- Updated test vectors to include G_X and G_Y compact representable keys.\r\n- Added uncompressed p256 G_X and G_Y public keys in vectors",
      "createdAt": "2022-03-03T19:29:24Z",
      "updatedAt": "2022-03-16T15:08:21Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "5c06c04ab29a4bb8ea2e72b9382cb669b06f9323",
      "headRepository": "stoprocent/edhoc",
      "headRefName": "test-vectors-rfc-p256",
      "headRefOid": "e3222d1ad924c3beba475956e88193cf9d81f05a",
      "closedAt": "2022-03-16T15:08:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As usual updates to generator are here: https://github.com/stoprocent/edhoc/commit/92adddac2d808495c5c67b3058c84e98b551f247",
          "createdAt": "2022-03-03T19:30:15Z",
          "updatedAt": "2022-03-03T19:30:15Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I summarize below my understanding of EC point representation and encoding.\r\n\r\nIn the affine representation, the point on an elliptic curve is defined as (X,Y), where X is the x coordinate, and Y is the y coordinate. There are 3 different ways to serialize a point:\r\n\r\n## Compressed\r\n\r\n`Output = Y || X`\r\n\r\n`Y`: 1 byte that encodes the sign: `0x02` if y coordinate is positive; `0x03` if y coordinate is negative.\r\n`X`: 32 bytes\r\nTotal serialized length: 33 bytes\r\n\r\nComment: Point `Y` is calculated from `X` based on the curve equation and the byte that encodes the sign. The procedure is at [1].\r\n\r\n## Uncompressed\r\n\r\n`Output = 0x04 || X || Y`\r\n\r\n`0x04`: 1 byte\r\n`X`: 32 bytes\r\n`Y`: 32 bytes\r\nTotal serialized length: 65 bytes\r\n\r\nComment: Both points are fully encoded.\r\n\r\n## Compact (called \"raw\" in the traces draft)\r\n\r\n`Output = X`\r\n\r\n`X`: 32 bytes\r\nTotal: 32 bytes\r\n\r\nComment: Defined in RFC6090, Section 4.2. Only the `X` coordinate is encoded. `Y` is calculated as either +Y or -Y.  Used in EDHOC. \r\n[1] https://www.secg.org/sec1-v2.pdf, Section 2.3.3",
          "createdAt": "2022-03-07T12:39:24Z",
          "updatedAt": "2022-03-07T12:42:54Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The traces draft uses the term \"raw\" for what I believe is compact representation. I would propose that we only keep the compact representation in the draft, sicne this is what is used by EDHOC. \r\n\r\n\r\n@emanjon @gselander @franziskuskiefer : I tag you here to sanity check my understanding of the different representation and if you have any input related for this discussion",
          "createdAt": "2022-03-07T12:41:53Z",
          "updatedAt": "2022-03-07T12:41:53Z"
        },
        {
          "author": "franziskuskiefer",
          "authorAssociation": "NONE",
          "body": "Thanks for tagging @malishav. The comment generally looks correct to me with one nit.\r\n\r\n> Comment: Defined in RFC6090, Section 4.2. Only the `X` coordinate is encoded. `Y` is calculated as either +Y or -Y. Used in EDHOC.\r\n\r\n`Y` is not either + or - as the edhoc draft specifies that the result is supposed to be equivalent to the compressed form with `0x02` for the sign byte (Appendix B. Compact Representation).\r\n\r\n\r\n",
          "createdAt": "2022-03-07T14:39:49Z",
          "updatedAt": "2022-03-07T14:39:49Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@franziskuskiefer That's what I have said on the email thread with the guys. \r\n\r\n> Message 1 is a cbor sequence where G_X is placed as bstr not as COSE_key\r\n> 0, [6, 2], h'0250A76B38EA840FA1B1A51152591D4CD52C75892152C870277225B1ED998ED953', -24\r\n \r\nand the spec states that \r\n\r\n> For such use, the compact representation can be transformed into the SECG point compressed format by prepending it with the single byte 0x02 (i.e., M = 0x02 || X).\r\n\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-lake-edhoc-12#appendix-B",
          "createdAt": "2022-03-07T15:13:52Z",
          "updatedAt": "2022-03-07T15:13:52Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@stoprocent in my understanding, the text in the spec does not relate to the bytes on the wire, only explains how *compact* representation is transformed into *compressed* form for compliance with different libraries. ",
          "createdAt": "2022-03-07T15:22:38Z",
          "updatedAt": "2022-03-07T15:23:07Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@malishav is right, but I think I understand where the confusion may come from. \r\n\r\nSection 3.7 states:\r\n\r\n>    EDHOC always uses compact representation of elliptic curve points,\r\n>    see Appendix B. In COSE compact representation is achieved by\r\n>    formatting the ECDH ephemeral public keys as COSE_Keys of type EC2 or\r\n>    OKP according to Sections 7.1 and 7.2 of\r\n>    [I-D.ietf-cose-rfc8152bis-algs], but only including the 'x' parameter\r\n>    in G_X and G_Y. \r\n\r\nSo this text does two things, it states that compact representation only includes the 'x' parameter, and it references appendix B. The former is what @malishav is referring to.\r\n\r\nNow, appendix B first paragraph states\r\n\r\n>    One example is ECDH with compact output, where only the x-coordinate\r\n>    of the computed value is used as the shared secret.\r\n\r\nand the rest of the appendix defines a format for the compact representation. \r\n\r\nThe text @stoprocent quoted is prepended with a condition: \r\n\r\n>   If a y-coordinate is required for validation or compatibily with APIs the\r\n>    value ~yp SHALL be set to zero.  For such use, the compact\r\n>    representation can be transformed into the SECG point compressed\r\n>    format by prepending it with the single byte 0x02 (i.e., M = 0x02 || X).\r\n\r\nAs stated in Section 3.7, the y-coordinate is not used (edit:) *on the wire*, but appendix B may give the impression that it should be used.\r\n\r\nIs this the confusion?\r\n",
          "createdAt": "2022-03-07T16:15:17Z",
          "updatedAt": "2022-03-07T16:19:05Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So to make it clear `G_X` and `G_Y` in vectors must be a raw `x` so `32b`?",
          "createdAt": "2022-03-07T21:09:51Z",
          "updatedAt": "2022-03-07T21:09:51Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "For the wire / message format, only use the 'x' parameter, i.e. compact format. For the test vectors I remember Marco and others have additionally requested both 'x' and 'y', i.e. the uncompressed format.",
          "createdAt": "2022-03-08T07:06:05Z",
          "updatedAt": "2022-03-08T07:06:05Z"
        },
        {
          "author": "franziskuskiefer",
          "authorAssociation": "NONE",
          "body": "> For the wire / message format, only use the 'x' parameter, i.e. compact format. For the test vectors I remember Marco and others have additionally requested both 'x' and 'y', i.e. the uncompressed format.\r\n\r\n\ud83d\udc4d\ud83c\udffb Having the uncompressed point in addition to the compact form is nice because it allows testing the conversion. Not all P256 implementations will support compressed points such that EDHOC implementations will need to implement the conversion from compact representation to uncompressed.\r\n\r\nBut the test vectors must make clear whether the uncompressed point is the actual point or the point after converting from the compact representation since the sign gets lost.",
          "createdAt": "2022-03-08T07:34:13Z",
          "updatedAt": "2022-03-08T07:34:13Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please have a look. I've updated G_X and G_Y keys in vectors.",
          "createdAt": "2022-03-10T07:32:38Z",
          "updatedAt": "2022-03-10T07:32:38Z"
        },
        {
          "author": "franziskuskiefer",
          "authorAssociation": "NONE",
          "body": "> Please have a look. I've updated G_X and G_Y keys in vectors.\r\n\r\nThanks. They look good. But I think a little more is needed. I presume `g_x_uncompressed_raw` is the actual point `g^x` (this must be noted somewhere).\r\nThen we have a test vector here that covers the case where the sign bit happens to be \"unchanged\". At least one test vector where this is not the case is needed, i.e. where `g^x` is _not_ equal to `0x02 || X`",
          "createdAt": "2022-03-10T11:52:26Z",
          "updatedAt": "2022-03-10T11:52:26Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "`g_x_uncompressed_raw` is `0x04 || X || Y`",
          "createdAt": "2022-03-10T14:39:30Z",
          "updatedAt": "2022-03-10T14:39:40Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe all information is available in the latest update:\r\n\r\n> \r\n> X (Raw Value) (Initiator's ephemeral private key) (32 bytes)\r\n> 36 8e c1 f6 9a eb 65 9b a3 7d 5a 8d 45 b2 1b dc 02 99 dc ea a8 ef 23\r\n> 5f 3c a4 2c e3 53 0f 95 25\r\n> \r\n> G_X (Raw Value) (Initiator's ephemeral public key) (32 bytes)\r\n> 8a f6 f4 30 eb e1 8d 34 18 40 17 a9 a1 1b f5 11 c8 df f8 f8 34 73 0b\r\n> 96 c1 b7 c8 db ca 2f c3 b6\r\n> \r\n> G_X (Uncompressed Raw Value) (Initiator's ephemeral public key) (65 bytes)\r\n> 04 8a f6 f4 30 eb e1 8d 34 18 40 17 a9 a1 1b f5 11 c8 df f8 f8 34 73\r\n> 0b 96 c1 b7 c8 db ca 2f c3 b6 51 e8 af 6c 6e db 78 16 01 ad 1d 9c 5f\r\n> a8 bf 7a a1 57 16 c7 c0 6a 5d 03 85 03 c6 14 ff 80 c9 b3\r\n> \r\n> G_X (CBOR Data Item) (Initiator's ephemeral public key) (34 bytes)\r\n> 58 20 8a f6 f4 30 eb e1 8d 34 18 40 17 a9 a1 1b f5 11 c8 df f8 f8 34\r\n> 73 0b 96 c1 b7 c8 db ca 2f c3 b6\r\n\r\n but would it be better with a different representation? \r\n\r\nFor example:\r\n\r\n\r\nX (Raw Value) (Initiator's ephemeral private key) (32 bytes)\r\n36 8e c1 f6 9a eb 65 9b a3 7d 5a 8d 45 b2 1b dc 02 99 dc ea a8 ef 23\r\n5f 3c a4 2c e3 53 0f 95 25\r\n\r\nG_X (Raw Value) (Initiator's ephemeral public key, 'x'-coordinate) (32 bytes)\r\n8a f6 f4 30 eb e1 8d 34 18 40 17 a9 a1 1b f5 11 c8 df f8 f8 34 73 0b\r\n96 c1 b7 c8 db ca 2f c3 b6\r\n\r\nG_X (Raw Value) (Initiator's ephemeral public key, 'y'-coordinate) (32 bytes)\r\n 51 e8 af 6c 6e db 78 16 01 ad 1d 9c 5f a8 bf 7a a1 57 16 c7 c0 6a 5d\r\n03 85 03 c6 14 ff 80 c9 b3\r\n\r\nG_X (CBOR Data Item) (Initiator's ephemeral public key, 'x'-coordinate) (34 bytes)\r\n58 20 8a f6 f4 30 eb e1 8d 34 18 40 17 a9 a1 1b f5 11 c8 df f8 f8 34\r\n73 0b 96 c1 b7 c8 db ca 2f c3 b6\r\n\r\nWhat do you think @franziskuskiefer @marco-tiloca-sics @malishav \r\n",
          "createdAt": "2022-03-10T16:07:44Z",
          "updatedAt": "2022-03-10T16:07:44Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good! One comment:\r\n\r\n> G_X (Raw Value) (Initiator's ephemeral public key, 'y'-coordinate) (32 bytes)\r\n\r\nshould probably just be\r\n\r\nInitiator's ephemeral public key, 'y'-coordinate (32 bytes)\r\n\r\nWhile this is part of the Initiator's ephemeral public key used for deriving the Diffie-Hellman secret (though not playing a role in that process), it is not part of the EDHOC G_X, which is about the 'x' coordinate only.",
          "createdAt": "2022-03-10T17:04:07Z",
          "updatedAt": "2022-03-10T17:04:07Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Have a look in latest commit",
          "createdAt": "2022-03-10T21:51:27Z",
          "updatedAt": "2022-03-10T21:51:27Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me. \r\n\r\nPlease all have a look at #258. Once we decided on that I think we are ready to update -traces.",
          "createdAt": "2022-03-11T06:22:28Z",
          "updatedAt": "2022-03-11T06:22:28Z"
        },
        {
          "author": "franziskuskiefer",
          "authorAssociation": "NONE",
          "body": "> Have a look in latest commit\r\n\r\nlgtm \ud83d\udc4d\ud83c\udffb ",
          "createdAt": "2022-03-16T09:02:22Z",
          "updatedAt": "2022-03-16T09:02:22Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "I have just successfully validated the P-256 \"Test Vector 1\" from @stoprocent at https://github.com/stoprocent/edhoc/blob/test-vectors-rfc-p256/test-vectors-11/p256/vectors.txt\r\n\r\nAs a suggestion, it would be good to use the uncompressed notation also for the public authentication keys, specifying the 'x' and 'y' coordinates separately. That is:\r\n```\r\n\r\nG_R (Raw Value) (Responder's public authentication key, 'x'-coordinate) (32 bytes)\r\nbb c3 49 60 52 6e a4 d3 2e 94 0c ad 2a 23 41 48 dd c2 17 91 a1 2a fb cb ac 93 62 20 46 dd 44 f0\r\n\r\nG_R (Raw Value) (Responder's public authentication key, 'y'-coordinate) (32 bytes)\r\n45 19 e2 57 23 6b 2a 0c e2 02 3f 09 31 f1 f3 86 ca 7a fd a6 4f cd e0 10 8c 22 4c 51 ea bf 60 72\r\n\r\nG_I (Raw Value) (Initiator's public authentication key, 'x'-coordinate) (32 bytes)\r\n8a 93 ca 7e 1b c8 46 47 d7 e7 eb 4c 61 07 c4 dc 4e 53 df 81 df d1 98 1c 7f 82 4a 7c 1b 61 a6 fc\r\n\r\nG_I (Raw Value) (Initiator's public authentication key, 'y'-coordinate) (32 bytes)\r\n91 36 28 13 c2 5d b6 af 93 be 22 c3 50 ce b2 51 89 5b 9f 3a 8d 85 a3 58 23 a2 22 2b 9d e2 c8 c8\r\n```",
          "createdAt": "2022-03-16T10:03:15Z",
          "updatedAt": "2022-03-16T10:03:15Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics Per your comment above I assume you mean the following headings for the 'y'-coordinates?\r\n\r\n```\r\nG_R (Raw Value) (Responder's public authentication key, 'x'-coordinate) (32 bytes)\r\nbb c3 49 60 52 6e a4 d3 2e 94 0c ad 2a 23 41 48 dd c2 17 91 a1 2a fb cb ac 93 62 20 46 dd 44 f0\r\n\r\nResponder's public authentication key, 'y'-coordinate (32 bytes)\r\n45 19 e2 57 23 6b 2a 0c e2 02 3f 09 31 f1 f3 86 ca 7a fd a6 4f cd e0 10 8c 22 4c 51 ea bf 60 72\r\n\r\nG_I (Raw Value) (Initiator's public authentication key, 'x'-coordinate) (32 bytes)\r\n8a 93 ca 7e 1b c8 46 47 d7 e7 eb 4c 61 07 c4 dc 4e 53 df 81 df d1 98 1c 7f 82 4a 7c 1b 61 a6 fc\r\n\r\nInitiator's public authentication key, 'y'-coordinate (32 bytes)\r\n91 36 28 13 c2 5d b6 af 93 be 22 c3 50 ce b2 51 89 5b 9f 3a 8d 85 a3 58 23 a2 22 2b 9d e2 c8 c8\r\n```",
          "createdAt": "2022-03-16T10:13:54Z",
          "updatedAt": "2022-03-16T10:13:54Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Right, that's consistent with the notation used for the ephemeral keys. I was too fast when copy-pasting :-)",
          "createdAt": "2022-03-16T10:16:23Z",
          "updatedAt": "2022-03-16T10:16:23Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Replaced by #261 ",
          "createdAt": "2022-03-16T15:08:20Z",
          "updatedAt": "2022-03-16T15:08:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 259,
      "id": "PR_kwDOEItXAM40g0uO",
      "title": "Clarification of prepended identifiers, issue #257",
      "url": "https://github.com/lake-wg/edhoc/pull/259",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-16T07:19:22Z",
      "updatedAt": "2022-04-18T12:44:47Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "5c06c04ab29a4bb8ea2e72b9382cb669b06f9323",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "A.3-clarifications",
      "headRefOid": "3a651140f100c9f2978bdc5a5ed8495ea50328b1",
      "closedAt": "2022-03-19T17:09:15Z",
      "mergedAt": "2022-03-19T17:09:15Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "c5fa2031e3ac5a89cdc75beb03a04be5731167de"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This is being discussed at Hackathon now, so I'm merging to simplify for people to find the updated explanation.",
          "createdAt": "2022-03-19T17:08:55Z",
          "updatedAt": "2022-03-19T17:08:55Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 260,
      "id": "PR_kwDOEItXAM40hP84",
      "title": "Update to IANA registration, issue #167",
      "url": "https://github.com/lake-wg/edhoc/pull/260",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "",
      "createdAt": "2022-03-16T09:37:24Z",
      "updatedAt": "2022-05-10T13:21:47Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "004acf0773c2257f10fc5bf960a8e36dd4031677",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "IANA-reg-updates",
      "headRefOid": "ad8b003d981b4f479b6e9eeaaaa959c74ef232a1",
      "closedAt": "2022-05-10T13:21:47Z",
      "mergedAt": "2022-05-10T13:21:47Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "23729c778ef0ab38a2a933443b660a869a5a4ccd"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I am against adding a stupid reference column.",
          "createdAt": "2022-03-16T11:05:45Z",
          "updatedAt": "2022-03-16T11:05:45Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@emanjon Noted. Is the rest OK?",
          "createdAt": "2022-03-16T11:10:20Z",
          "updatedAt": "2022-03-16T11:10:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 261,
      "id": "PR_kwDOEItXAM40iinw",
      "title": "Update Test Vectors for RFC",
      "url": "https://github.com/lake-wg/edhoc/pull/261",
      "state": "MERGED",
      "author": "stoprocent",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR replaces https://github.com/lake-wg/edhoc/pull/256 and is addressing this https://github.com/lake-wg/edhoc/issues/258",
      "createdAt": "2022-03-16T15:07:31Z",
      "updatedAt": "2022-03-17T18:56:48Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "4b9fa966fa7b99e814ce630ead847f417571bd6c",
      "headRepository": "stoprocent/edhoc",
      "headRefName": "test-vectors-rfc",
      "headRefOid": "91f8f5dc0031cebf8b3c3ee0c41d3b0b206d6808",
      "closedAt": "2022-03-17T16:25:11Z",
      "mergedAt": "2022-03-17T16:25:11Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "8154ad4df34b4ceb4110062ae37abda7feef3c3d"
      },
      "comments": [
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Code available here:\r\nEd25519 - https://github.com/stoprocent/edhoc/tree/feature/ed25519/test-vectors-11\r\nP256 - https://github.com/stoprocent/edhoc/tree/feature/mbedtls/test-vectors-11",
          "createdAt": "2022-03-16T15:10:21Z",
          "updatedAt": "2022-03-16T15:10:21Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Both are now fixed",
          "createdAt": "2022-03-16T20:34:23Z",
          "updatedAt": "2022-03-16T20:34:23Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I had to regenerate Initiator P256 Identity and I have updated G_R and G_I in vectors to only use x coordinate and have added a new field for G_R and G_I y coordinate.\r\n",
          "createdAt": "2022-03-17T08:38:46Z",
          "updatedAt": "2022-03-17T08:38:46Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@stoprocent @marco-tiloca-sics Should we have a short chat to sync the input with expectations :-)",
          "createdAt": "2022-03-17T09:34:37Z",
          "updatedAt": "2022-03-17T09:34:37Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Just successfully validated the new trace for EdDSA with method 0 :-)",
          "createdAt": "2022-03-17T09:49:27Z",
          "updatedAt": "2022-03-17T09:49:27Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, this was caused by just a typo which is now fixed. I was compressing the public key which was already compressed and some random bytes from memory were pulled.",
          "createdAt": "2022-03-17T10:15:39Z",
          "updatedAt": "2022-03-17T10:15:39Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Just successfully validated the trace for ECDSA P-256 with method 3, based on the last updates.",
          "createdAt": "2022-03-17T11:07:11Z",
          "updatedAt": "2022-03-17T11:07:11Z"
        },
        {
          "author": "stoprocent",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@marco-tiloca-sics Nice! ",
          "createdAt": "2022-03-17T11:26:38Z",
          "updatedAt": "2022-03-17T11:26:38Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good, merging now.",
          "createdAt": "2022-03-17T16:24:54Z",
          "updatedAt": "2022-03-17T16:24:54Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "thanks for providing these @stoprocent !",
          "createdAt": "2022-03-17T16:40:48Z",
          "updatedAt": "2022-03-17T16:40:48Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Forgot to mention: I've updated the -traces draft based on the new test vectors:\r\nhttps://lake-wg.github.io/edhoc/draft-ietf-lake-traces.html\r\n\r\nPlease report any errors to me.\r\n",
          "createdAt": "2022-03-17T16:44:54Z",
          "updatedAt": "2022-03-17T16:44:54Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Just checked the -traces draft and tested again. It looks good to me.",
          "createdAt": "2022-03-17T18:40:27Z",
          "updatedAt": "2022-03-17T18:40:27Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Marco!",
          "createdAt": "2022-03-17T18:56:48Z",
          "updatedAt": "2022-03-17T18:56:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM42XjUF",
          "commit": {
            "abbreviatedOid": "e48bdfb"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-16T19:15:32Z",
          "updatedAt": "2022-03-16T19:15:33Z",
          "comments": [
            {
              "originalPosition": 158,
              "body": "This is:\r\n\r\n```\r\n{\r\n 2: \"example.edu\",\r\n 8: {\r\n      1: {\r\n            1: 1,\r\n            2: -19,\r\n           -1: 1,\r\n           -2: h'04BBC34960526EA4D32E940CAD2A234148DDC21791A12AFBCBAC93622046DD44F04519E257236B2A0CE2023F0931F1F386CA7AFDA64FCDE0108C224C51EABF6072'\r\n         }\r\n    }\r\n}\r\n\r\n```\r\n\r\nHowever, the value of the 'x' (-2) parameter should be only the 'x' coordinate of the public key, not the whole public key in compressed notation.\r\n\r\nAlso consistently with the explicit mentioning of both the 'x' and 'y' coordinate, the CCS should include also the 'y' coordinate and be as follows.\r\n\r\n\r\n\r\n```\r\nCRED_R (CBOR Data Item) (94 bytes)\r\nA2 02 6B 65 78 61 6D 70 6C 65 2E 65 64 75 08 A1 01 A5 01 01 02 32 20\r\n01 21 58 20 BB C3 49 60 52 6E A4 D3 2E 94 0C AD 2A 23 41 48 DD C2 17\r\n91 A1 2A FB CB AC 93 62 20 46 DD 44 F0 22 58 20 45 19 E2 57 23 6B 2A\r\n0C E2 02 3F 09 31 F1 F3 86 CA 7A FD A6 4F CD E0 10 8C 22 4C 51 EA BF\r\n60 72\r\n```\r\n\r\nThat is:\r\n\r\n```\r\n{\r\n 2: \"example.edu\",\r\n 8: {\r\n      1: {\r\n            1: 1,\r\n            2: -19,\r\n           -1: 1,\r\n           -2: h'bbc34960526ea4d32e940cad2a234148ddc21791a12afbcbac93622046dd44f0',\r\n           -3: h'4519e257236b2a0ce2023f0931f1f386ca7afda64fcde0108c224c51eabf6072'\r\n         }\r\n    }\r\n}\r\n```",
              "createdAt": "2022-03-16T19:15:33Z",
              "updatedAt": "2022-03-16T19:15:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM42Xjs-",
          "commit": {
            "abbreviatedOid": "e48bdfb"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-16T19:16:59Z",
          "updatedAt": "2022-03-16T19:17:00Z",
          "comments": [
            {
              "originalPosition": 244,
              "body": "See the comment above about CRED_R. The same applies here to CRED_I.",
              "createdAt": "2022-03-16T19:17:00Z",
              "updatedAt": "2022-03-16T19:17:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM42Z9xi",
          "commit": {
            "abbreviatedOid": "ce450a7"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-17T08:18:59Z",
          "updatedAt": "2022-03-17T08:18:59Z",
          "comments": [
            {
              "originalPosition": 158,
              "body": "Why the change to CRED_R (and CRED_I below) ? Now its content does not reflect the 'x' and 'y' coordinate of the public key. The value of CRED_R before this commit seemed correct.",
              "createdAt": "2022-03-17T08:18:59Z",
              "updatedAt": "2022-03-17T08:18:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 263,
      "id": "PR_kwDOEItXAM40tLQA",
      "title": "Define new media type application/edhoc+cbor-seq, issue #262",
      "url": "https://github.com/lake-wg/edhoc/pull/263",
      "state": "MERGED",
      "author": "dnav",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "Signed-off-by: David Navarro <david.navarro@ioterop.com>",
      "createdAt": "2022-03-20T21:01:09Z",
      "updatedAt": "2022-05-10T13:16:41Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "227a0923dded7e8e698919e1ef6ebf2d02c952cc",
      "headRepository": "dnav/edhoc",
      "headRefName": "dnav_coap_content-format",
      "headRefOid": "8db72967a1bbb3e022916d1cd4c90aa84b752595",
      "closedAt": "2022-05-10T13:16:41Z",
      "mergedAt": "2022-05-10T13:16:41Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "004acf0773c2257f10fc5bf960a8e36dd4031677"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@cabo @chrysn and others: Any response to John's comment?",
          "createdAt": "2022-04-26T14:52:09Z",
          "updatedAt": "2022-04-26T14:52:09Z"
        },
        {
          "author": "dnav",
          "authorAssociation": "NONE",
          "body": "@gselander I included John's suggestion in the PR.",
          "createdAt": "2022-04-27T08:59:50Z",
          "updatedAt": "2022-04-27T08:59:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me. Other opinions?",
          "createdAt": "2022-05-09T06:17:11Z",
          "updatedAt": "2022-05-09T06:17:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM44eild",
          "commit": {
            "abbreviatedOid": "b6503a8"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-20T17:39:48Z",
          "updatedAt": "2022-04-20T17:39:49Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "Not my area of expertise. So I don't have any strong opinions.\r\n\r\nThe need seem to have a different media type for \"connection ID\", EDHOC\r\n\r\nBut what is the difference between \"application/edhoc\" and \"application/edhoc+cbor-seq\"? Do we need both?\r\n\r\n- EDHOC (application/edhoc) is already always cbor-seq. \r\n- My understanding is that is that \"edhoc+cbor-seq\" means that this is edhoc but cbor-seq encoded.\r\n\r\nMy understanding would that that it would make more sense with\r\n\r\nedhoc+cbor-seq\r\ncid-edhoc+cbor-seq\r\n\r\n(Feel free to ignore this comments)",
              "createdAt": "2022-04-20T17:39:48Z",
              "updatedAt": "2022-04-20T17:39:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM445V0p",
          "commit": {
            "abbreviatedOid": "b6503a8"
          },
          "author": "dnav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-27T08:58:59Z",
          "updatedAt": "2022-04-27T08:59:00Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "Thank you for your comment. I went for the easiest path but your suggestion totally makes sense.\r\n\r\nI updated the PR accordingly.\r\n",
              "createdAt": "2022-04-27T08:58:59Z",
              "updatedAt": "2022-04-27T08:59:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45jn6o",
          "commit": {
            "abbreviatedOid": "8db7296"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I find this distinction good and the solution consequential, still open for comments.",
          "createdAt": "2022-05-09T06:21:48Z",
          "updatedAt": "2022-05-09T06:21:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 266,
      "id": "PR_kwDOEItXAM41b_HV",
      "title": "1-byte representation of bstr",
      "url": "https://github.com/lake-wg/edhoc/pull/266",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-31T21:20:47Z",
      "updatedAt": "2022-04-01T06:49:47Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "c5fa2031e3ac5a89cdc75beb03a04be5731167de",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "int-representation-of-selected-bstr",
      "headRefOid": "97d04b9b6bd234a5130a7d7fad692d4737981546",
      "closedAt": "2022-04-01T06:49:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Refers to #265. First draft.\r\n\r\nOnly last two commits are relevant here, the rest was left-overs from debugging. I may make a clean version later, but I don't see any trace of those changes in \"Files changed\".",
          "createdAt": "2022-03-31T21:26:31Z",
          "updatedAt": "2022-03-31T21:26:31Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Replaced by #267, same changes on -edhoc but that PR does not have the traces-related commits that accidently got included in this one.",
          "createdAt": "2022-04-01T06:49:47Z",
          "updatedAt": "2022-04-01T06:49:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 267,
      "id": "PR_kwDOEItXAM41dx0G",
      "title": "Representation of bstr as 1-byte int",
      "url": "https://github.com/lake-wg/edhoc/pull/267",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "First draft to address #265",
      "createdAt": "2022-04-01T06:46:31Z",
      "updatedAt": "2022-04-27T14:07:55Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "be28885a86e38b5473e960f98cc3ddedaa8e14f9",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "int-representation",
      "headRefOid": "1c44c5d89b60805d2795039181dd67c20edf52bc",
      "closedAt": "2022-04-27T14:07:55Z",
      "mergedAt": "2022-04-27T14:07:55Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "596eff48a50fe54ae3261f5184db902b0c5d1113"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@cabo Thanks. I actually thought about the text parts you commented on but I had worked too late to do something about it.\r\n\r\nAbout the connection id type It should be \r\n\r\nC_x : bstr / -24..23,\r\n\r\nor do you see any reason to keep bstr / int?",
          "createdAt": "2022-04-01T09:16:07Z",
          "updatedAt": "2022-04-01T09:16:07Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Maybe I would give `-24..23` a name... Not enough creativity today.  `obint` (one-byte int)?  Haven't checked that in all languages :-)\r\nYes, that narrow range is a more accurate representation for what you are saying in the text.\r\n",
          "createdAt": "2022-04-01T09:20:54Z",
          "updatedAt": "2022-04-01T09:20:54Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Right, let's first hear what people think.",
          "createdAt": "2022-04-01T11:28:02Z",
          "updatedAt": "2022-04-01T11:28:02Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the PR is ready for review (thanks @cabo and @marco-tiloca-sics).\r\n\r\nShort summary: we may not be able to register `kid` as bstr / int. This proposal is based on `kid` (and connection identifiers) intrinsically being byte strings, but some can be represented as CBOR ints in EDHOC.\r\n\r\n@chrysn @malishav @TimothyClaeys and others, please have a look.\r\n\r\n",
          "createdAt": "2022-04-05T10:44:47Z",
          "updatedAt": "2022-04-05T10:50:33Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think enabling the shorter integer representation for all byte strings that parse as CBOR integers is worth it.\r\n\r\nBy staying with -24..23, the integerness can easily be tested, as in\r\n\r\nb.size == 1 && !(b[0]&0xC0) && ((b[0] & 0x1f) < 0x18)\r\n\r\nand the integer can be extracted as\r\n\r\n(b[0] & 0x1f) ^ -((b[0] >> 4) & 0x1)\r\n\r\n(untested code, but probably close).\r\n\r\nAllowing all integers means that the CBOR library needs to be called and there needs to be a way in that to handle unsuccessful results.\r\n\r\nAll for a quite questionable additional benefit.",
          "createdAt": "2022-04-05T11:00:01Z",
          "updatedAt": "2022-04-05T11:00:01Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(Assuming the conversion to integer is mandatory -- if it is not, this becomes an interop testing nightmare.)",
          "createdAt": "2022-04-05T11:01:16Z",
          "updatedAt": "2022-04-05T11:01:16Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @cabo. The changes to any length of integer representation was made for perceived simplicity by @marco-tiloca-sics. And yes, we must clarify that this is mandatory.",
          "createdAt": "2022-04-05T11:35:19Z",
          "updatedAt": "2022-04-05T11:35:19Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "Let's get some numbers on what we get from just-bytes (0), -24..23 (1) vs. any-integer (2):\r\n\r\n```\r\n+---------+-+---------+-----------+-----------+\r\n| size    | usable 0  | usable 1  | usable 2  |\r\n+---------+-+---------+-----------+-----------+\r\n| 1       | 1         | 49        | 49        |\r\n| 2       | 256       | 208       | 720       |\r\n| 3       | 64k       | 64k - 48  | ~3 x 64k  |\r\n+---------+-+---------+-----------+-----------+\r\n```\r\n\r\nClearly using any-integer is higher density (and I admit to having been the one who started going about these densities initially), but really where is it relevant? A system needs to use more than 257 identifiers before 1 vs 2 starts making a difference. And even then, things start to differ only for the EDHOC phase, there are (as there have always been) 256 1-byte and 64k 2-byte IDs for available for OSCORE, it's just that some of them (most of them, in either case) need an extra byte to inhabit CBOR encodings.\r\n\r\nConstrained systems likely get away with picking their own identifiers exclusively from -24..23 anyway.\r\n\r\nI think the larger question is \"what is simpler?\", and that depends by the use case:\r\n\r\n* Picking a value from a series of pools (sorted by preference for OSCORE use and then preference for EDHOC use) unless it is taken:\r\n  1. pools are h'', (-24..=23), h'00' to h'ff' with two holes, and the long strings.\r\n  2. pools are h'', (-24..=23), h'00' to h'ff' with two holes, (-256..=-25), (24..256), h'0000' to h'ffff' with four holes etc.\r\n* Encoding a picked value is trivial either way.\r\n* Verifying that the peer encoded its ID correctly -- does the party receiving the C_x really need to do this?\r\n* Decoding a peer's byte encoded C_x -- again, does this even ever need to be done? (The OSCORE contexts are best stored indexed by recipient ID)\r\n\r\nAt least if the latest two are answered \"no\" (but probably either way), I'd say that 1 is easier to implement, and while the coding density differs by a factor of ~3 for the 2-3 byte values, it's the same where it matters the most.",
          "createdAt": "2022-04-06T08:37:02Z",
          "updatedAt": "2022-04-06T08:37:02Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry for the delay, now reverted to (1).\r\n\r\nI didn't try to make the CDDL exclude the disallowed byte strings, but made a normative statement. \r\n\r\n@cabo @marco-tiloca-sics @chrysn Please check.",
          "createdAt": "2022-04-19T08:58:07Z",
          "updatedAt": "2022-04-19T08:58:07Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks good to me.",
          "createdAt": "2022-04-19T11:50:46Z",
          "updatedAt": "2022-04-19T11:50:46Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The PR looks quite clear to me.",
          "createdAt": "2022-04-19T15:54:49Z",
          "updatedAt": "2022-04-19T15:54:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM43WPmJ",
          "commit": {
            "abbreviatedOid": "b0c9577"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Here's a quick leaf-through.",
          "createdAt": "2022-04-01T08:12:17Z",
          "updatedAt": "2022-04-01T08:17:37Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nConnection identifiers in EDHOC are CBOR byte strings. Since most constrained devices only have a few connections, short identifiers are desirable in many cases. However, except for the empty byte string h'' which encodes as as one byte (0x40), all byte strings are CBOR encoded as two or more bytes. Therefore EDHOC specifies certain byte strings to be represented as CBOR ints on the wire, see {{bstr-repr}}.\r\n``` \r\n\r\n(add comma for readability)",
              "createdAt": "2022-04-01T08:12:17Z",
              "updatedAt": "2022-04-01T08:17:37Z"
            },
            {
              "originalPosition": 15,
              "body": "\"byte-valued\"?  I thought it was a byte string.",
              "createdAt": "2022-04-01T08:12:59Z",
              "updatedAt": "2022-04-01T08:17:37Z"
            },
            {
              "originalPosition": 46,
              "body": "```suggestion\r\nThe value of a COSE 'kid' parameter is a byte string. To allow more one-byte key identifiers, which may be useful in many scenarios since constrained devices only have a few keys, we use the same integer representation as for connection identifiers, see {{bstr-repr}}. As stated in Section 3.1 of {{I-D.ietf-cose-rfc8152bis-struct}}, applications MUST NOT assume that 'kid' values are unique and several keys associated with a 'kid' may need to be checked before the correct one is found. Applications might use additional information such as 'kid context' or lower layers to determine which key to try first. Applications should strive to make ID_CRED_x as unique as possible, since the recipient may otherwise have to try several keys.\r\n```",
              "createdAt": "2022-04-01T08:15:04Z",
              "updatedAt": "2022-04-01T08:17:37Z"
            },
            {
              "originalPosition": 55,
              "body": "Why this change?",
              "createdAt": "2022-04-01T08:16:14Z",
              "updatedAt": "2022-04-01T08:17:37Z"
            },
            {
              "originalPosition": 64,
              "body": "Why this change?",
              "createdAt": "2022-04-01T08:16:21Z",
              "updatedAt": "2022-04-01T08:17:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM43XAaT",
          "commit": {
            "abbreviatedOid": "b0c9577"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-01T11:15:06Z",
          "updatedAt": "2022-04-01T11:15:07Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Changed in 0ab48af",
              "createdAt": "2022-04-01T11:15:07Z",
              "updatedAt": "2022-04-01T11:15:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM43aUPZ",
          "commit": {
            "abbreviatedOid": "a76f626"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-03T08:55:20Z",
          "updatedAt": "2022-04-03T08:55:20Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "Also consistently with the later editing in the \"CDDL Definitions\" appendix, this should be\r\n\r\n`C_I : bstr / -24..23,`",
              "createdAt": "2022-04-03T08:55:20Z",
              "updatedAt": "2022-04-03T08:55:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM43aUPw",
          "commit": {
            "abbreviatedOid": "a76f626"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-03T08:55:32Z",
          "updatedAt": "2022-04-03T08:55:32Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Also consistently with the later editing in the \"CDDL Definitions\" appendix, this should be\r\n\r\n`C_R : bstr / -24..23,`",
              "createdAt": "2022-04-03T08:55:32Z",
              "updatedAt": "2022-04-03T08:55:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM43ceht",
          "commit": {
            "abbreviatedOid": "a76f626"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-04T11:26:06Z",
          "updatedAt": "2022-04-04T11:26:06Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Is there a reason to limit this representation only to the interval -24..23?\r\n\r\nIf it rather considered all the integer values:\r\n\r\n* There will be several more identifiers that can be transported as integers, again with 1 byte less overhead compared to the byte string representation. For example, the identifier 0x1839 can be transported as 0x1839 (CBOR integer 57) rather than 0x421839 (CBOR byte string).\r\n\r\n* I believe it would be overall simpler for an implementation, that would simply have to check about integer vs. byte string, rather than specifically integer -24..23 vs. byte string.\r\n\r\nThe same applies for 'kid' values when 'kid' is used in ID_CRED_X.",
              "createdAt": "2022-04-04T11:26:06Z",
              "updatedAt": "2022-04-04T11:26:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM43dELi",
          "commit": {
            "abbreviatedOid": "a76f626"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-04T13:24:27Z",
          "updatedAt": "2022-04-04T13:24:29Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Without commenting on this proposal, I don't think we should optimise the sheer number of short identifiers.\r\nThere needs to be a balance here between what is easily specified, understood and coded. \r\n\r\nIMO, as long as we can have a number of 1-byte connection identifiers and key identifiers in EDHOC (to comply with the LAKE requirements) and support for the empty byte string in OSCORE (to reduce bytes in the most frequent message exchange) the main effort should be spent on making the EDHOC specification and the conversion between EDHOC and OSCORE identifiers as simple as possible. \r\n\r\n@marco-tiloca-sics Have you written down the procedure for reversing the representation, and for mapping back and forth between EDHOC and OSCORE?\r\n\r\nOne concern I have (with PR #267 in general) is with the pre-pending of connection identifiers done at transport layer. If we introduce special EDHOC representations, does the transport layer also need to know about that? (This was one reason for making PR #274.)",
              "createdAt": "2022-04-04T13:24:27Z",
              "updatedAt": "2022-04-04T13:25:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM43d5Sj",
          "commit": {
            "abbreviatedOid": "a76f626"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-04T15:36:06Z",
          "updatedAt": "2022-04-04T15:36:07Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "> @marco-tiloca-sics Have you written down the procedure for reversing the representation, and for mapping back and forth between EDHOC and OSCORE?\r\n\r\n* EDHOC --> OSCORE\r\n\r\n    This should be already covered in this PR: \"Since the connection identifier is a byte string, it is converted to an OSCORE Recipient ID equal to the byte string.\"\r\n    \r\n    This conversion rule holds independently of the comment above, i.e., of how many EDHOC identifiers are intended to be transported as integers.\r\n\r\n* OSCORE --> EDHOC\r\n\r\n    Given the OSCORE Recipient ID of a peer, its value is also the byte valued EDHOC identifier of that peer. This also holds independently of the comment above, i.e., of how many EDHOC identifiers are intended to be transported as integers.\r\n    \r\n    Also, this is simpler than the conversion rule currently in -core-oscore-edhoc-03, that had to take into account EDHOC identifiers being either integers or byte valued (and of the existence of two equivalent EDHOC identifiers for one OSCORE identifier, which here is also gone).\r\n\r\n> One concern I have (with PR https://github.com/lake-wg/edhoc/pull/267 in general) is with the pre-pending of connection identifiers done at transport layer. If we introduce special EDHOC representations, does the transport layer also need to know about that? (This was one reason for making PR https://github.com/lake-wg/edhoc/pull/274.)\r\n\r\nIn general, I think that it needs to know, because what exactly to have on the wire depends on the specific value of the EDHOC identifier (to be transported as integer or not depending on its value).\r\n\r\nAlternatively, the application would have to provide the final transport-ready representation (rather than the original byte valued representation) to the tranport layer, which would still have the final decision about prepending the identifier or not to the EDHOC message, depending on the message correlation nature of the transport in question.",
              "createdAt": "2022-04-04T15:36:06Z",
              "updatedAt": "2022-04-04T15:36:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM43h3C9",
          "commit": {
            "abbreviatedOid": "a76f626"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-05T10:25:05Z",
          "updatedAt": "2022-04-05T10:25:06Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "Overtaken by later proposals",
              "createdAt": "2022-04-05T10:25:05Z",
              "updatedAt": "2022-04-05T10:25:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM43h3Ge",
          "commit": {
            "abbreviatedOid": "a76f626"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-05T10:25:18Z",
          "updatedAt": "2022-04-05T10:25:18Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Overtaken by later proposals",
              "createdAt": "2022-04-05T10:25:18Z",
              "updatedAt": "2022-04-05T10:25:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM43h6Bi",
          "commit": {
            "abbreviatedOid": "a76f626"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-05T10:36:02Z",
          "updatedAt": "2022-04-05T10:36:03Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "The proposal to apply the mapping for all integers is now included. I agree that the user of transport needs to provide the transport-ready representation, including prepended identifier, this is also noted in the update.",
              "createdAt": "2022-04-05T10:36:02Z",
              "updatedAt": "2022-04-05T10:36:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM44WHpO",
          "commit": {
            "abbreviatedOid": "a76f626"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-19T08:54:14Z",
          "updatedAt": "2022-04-19T08:54:14Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Now reverted to one-byte integers only.",
              "createdAt": "2022-04-19T08:54:14Z",
              "updatedAt": "2022-04-19T08:54:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM44dkLi",
          "commit": {
            "abbreviatedOid": "24eff45"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-20T14:33:29Z",
          "updatedAt": "2022-04-20T14:33:30Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "> is a natural mapping between the byte strings with CBOR diagnostic notation h'00', h'01', ..., h'37' (except h'18' and h'19') and integers which are CBOR encoded as one byte.\r\n\r\nThere are 54 such byte strings and 48 integers which are CBOR encoded as one byte",
              "createdAt": "2022-04-20T14:33:29Z",
              "updatedAt": "2022-04-20T14:33:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM44dnXV",
          "commit": {
            "abbreviatedOid": "24eff45"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-20T14:41:33Z",
          "updatedAt": "2022-04-20T14:41:34Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Should be (except h'18', h'19' ... h'1f')\r\n\r\nOtherwise it looks good to me.",
              "createdAt": "2022-04-20T14:41:34Z",
              "updatedAt": "2022-04-20T14:49:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM44eZYX",
          "commit": {
            "abbreviatedOid": "73b81c5"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-20T17:06:44Z",
          "updatedAt": "2022-04-20T17:06:45Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "There should be a MUST here. I assume we want a deterministic encoding",
              "createdAt": "2022-04-20T17:06:44Z",
              "updatedAt": "2022-04-20T17:07:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM44eZ0s",
          "commit": {
            "abbreviatedOid": "73b81c5"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-20T17:08:21Z",
          "updatedAt": "2022-04-20T17:08:21Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "> Implementations MUST support byte string identifiers represented as one-byte CBOR ints, as described in {{bstr-repr}}.\r\n\r\nIf we have MUST earlier in the document I think this sentence should be removed. \"supported\" gives the idea that this is not mandatory to encode as int, which would lead to a non-deterministic encoding.\r\n\r\n",
              "createdAt": "2022-04-20T17:08:21Z",
              "updatedAt": "2022-04-20T17:08:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM44eaQu",
          "commit": {
            "abbreviatedOid": "73b81c5"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-20T17:09:58Z",
          "updatedAt": "2022-04-20T17:09:58Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "> are leaked to a passive attacker.\r\n\r\nare is too strong here",
              "createdAt": "2022-04-20T17:09:58Z",
              "updatedAt": "2022-04-20T17:09:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM4446RQ",
          "commit": {
            "abbreviatedOid": "1c44c5d"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-27T07:31:03Z",
          "updatedAt": "2022-04-27T07:31:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEItXAM4466Xk",
          "commit": {
            "abbreviatedOid": "73b81c5"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-27T14:05:00Z",
          "updatedAt": "2022-04-27T14:05:00Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "Addressed by #282",
              "createdAt": "2022-04-27T14:05:00Z",
              "updatedAt": "2022-04-27T14:05:00Z"
            }
          ]
        }
      ]
    },
    {
      "number": 274,
      "id": "PR_kwDOEItXAM41h49e",
      "title": "First draft of separate integer key identifier",
      "url": "https://github.com/lake-wg/edhoc/pull/274",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR is an alternative to #267 for resolving #265. A separate integer key identifier called 'intkid' is used.",
      "createdAt": "2022-04-02T14:47:42Z",
      "updatedAt": "2022-04-05T08:16:50Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "be28885a86e38b5473e960f98cc3ddedaa8e14f9",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "kid2",
      "headRefOid": "cd3a088827cc7df58bc8dc9f53787ee397e6d90f",
      "closedAt": "2022-04-05T08:16:49Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this in favor of the proposed change to #267.",
          "createdAt": "2022-04-05T08:16:49Z",
          "updatedAt": "2022-04-05T08:16:49Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 276,
      "id": "PR_kwDOEItXAM41zSzp",
      "title": "Add a final key derivation",
      "url": "https://github.com/lake-wg/edhoc/pull/276",
      "state": "MERGED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "This pull request corresponds to #269.\r\n\r\nChanges:\r\n * `PRK_4x3m` is now `PRK_3m` only, i.e. only used for computing the MAC.\r\n * An additional key `PRK_out` is defined, which can be seen as the final session key, computed based on `PRK_3m` and `TH_4`.\r\n * The export now only depends on `PRK_out`. \r\n \r\n Comments:\r\n * The name `PRK_out` is completely arbitrary.\r\n * The `TH_4` input that was inside the exporter has been replaced by the empty string. It is a shortcut that allows to use the existing syntax, but it is also arbitrary.\r\n * This update also corresponds to the option 2) of #270. Indeed, computing both the MAC and `PRK_out` could be performed inside a TEE, and a leak of `PRK_out` once it is outside of the TEE would not allow an attacker to forge any MAC it wants, as `PRK_3m` and `PRK_out` are now disjoint values.",
      "createdAt": "2022-04-07T11:41:26Z",
      "updatedAt": "2022-04-29T11:55:54Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "861919b50fc2570bb657179c169bbe9f6222121c",
      "headRepository": "charlie-j/edhoc",
      "headRefName": "Add_final_master_PRK",
      "headRefOid": "f46a63590403e01fdee6a78525484424d79c530d",
      "closedAt": "2022-04-29T11:55:54Z",
      "mergedAt": "2022-04-29T11:55:54Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "1a4b5f8b1af54bc6cda4b1cc362f764fda18459d"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This looks like a good thing to do for several reasons. It also lowers memory requirements as the implementation only has to store PRK_out instead of (PRK_4x3m, TH_4).",
          "createdAt": "2022-04-11T07:36:53Z",
          "updatedAt": "2022-04-11T07:36:53Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "`After verifying message_3, the Responder is assured that the Initiator has calculated the key PRK_3m (explicit key confirmation) and that no other party than the Initiator can compute the key.`\r\n\r\nI assume that is enough. The document should probably say something about PRK_out as well. I assume the property we get it the the Responder knows that I can compute PRK_out.\r\n",
          "createdAt": "2022-04-13T11:04:48Z",
          "updatedAt": "2022-04-13T11:04:48Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@emanjon you can check out the last update!",
          "createdAt": "2022-04-14T15:37:34Z",
          "updatedAt": "2022-04-14T15:37:34Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I spotted a typo, otherwise the update looks ready to merge.\r\n\r\nBut following #278 there are quite a few other changes we want to make to the key schedule. To avoid merge conflicts should probably do the changes in sequence. We could start by merging this, although there will be further changes to some of the changes made here.",
          "createdAt": "2022-04-27T13:58:20Z",
          "updatedAt": "2022-04-27T13:58:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM434lAo",
          "commit": {
            "abbreviatedOid": "eddb22d"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-11T07:34:32Z",
          "updatedAt": "2022-04-11T07:34:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEItXAM44KCUe",
          "commit": {
            "abbreviatedOid": "41ccb0e"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "More text is needed on PRK_Out. What does R know about I and PRK_Out after receiveing flight 3 vs. after recieving flight 5. What does I know about R and PRK_Out after recieving flight 4.",
          "createdAt": "2022-04-14T11:32:14Z",
          "updatedAt": "2022-04-14T11:32:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 277,
      "id": "PR_kwDOEItXAM42UydU",
      "title": "Replace ciphertext with plaintext in TH_2 & TH_3",
      "url": "https://github.com/lake-wg/edhoc/pull/277",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "",
      "createdAt": "2022-04-17T08:53:09Z",
      "updatedAt": "2022-04-27T14:30:19Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "8730f0c2ace2ca76604f9d4b8387a76cea3d6455",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "th-plaintext",
      "headRefOid": "d4772d8ecfc436401611b323ffaa35a5ed2f340c",
      "closedAt": "2022-04-27T14:30:19Z",
      "mergedAt": "2022-04-27T14:30:19Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "861919b50fc2570bb657179c169bbe9f6222121c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM44TOo7",
          "commit": {
            "abbreviatedOid": "eb3c9a6"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-18T16:14:58Z",
          "updatedAt": "2022-04-18T16:14:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 282,
      "id": "PR_kwDOEItXAM42mcqL",
      "title": "Information leakage",
      "url": "https://github.com/lake-wg/edhoc/pull/282",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Rewrote the variable length information leakage section.\r\n\r\n- PR needs to be augmented with information leakage from terminated EDHOC exchanges.",
      "createdAt": "2022-04-22T06:05:24Z",
      "updatedAt": "2022-05-02T13:37:16Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "227a0923dded7e8e698919e1ef6ebf2d02c952cc",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Information-leakage",
      "headRefOid": "6cd73f4cecae05bfe612cfbe8e280f09ecb05f67",
      "closedAt": "2022-05-02T13:37:16Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this small correction for info laeakage.",
          "createdAt": "2022-05-02T13:10:49Z",
          "updatedAt": "2022-05-02T13:10:49Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 283,
      "id": "PR_kwDOEItXAM42mzB5",
      "title": "Change the input order of TH_2",
      "url": "https://github.com/lake-wg/edhoc/pull/283",
      "state": "MERGED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "This allows to future proof the protocol against a weak hash with\r\nchose-prefix collisions.\r\n\r\nIt corresponds to #271, and is also mentioned in #278.",
      "createdAt": "2022-04-22T08:06:17Z",
      "updatedAt": "2022-04-27T14:14:47Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "227a0923dded7e8e698919e1ef6ebf2d02c952cc",
      "headRepository": "charlie-j/edhoc",
      "headRefName": "Change_TH_2_input_order",
      "headRefOid": "79ea8aa14840b5d0c90b8ff6affccb65d7f4436e",
      "closedAt": "2022-04-27T14:14:46Z",
      "mergedAt": "2022-04-27T14:14:46Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "8730f0c2ace2ca76604f9d4b8387a76cea3d6455"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM44n9CG",
          "commit": {
            "abbreviatedOid": "79ea8aa"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good. I think should do this change.",
          "createdAt": "2022-04-22T12:11:48Z",
          "updatedAt": "2022-04-22T12:11:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 284,
      "id": "PR_kwDOEItXAM423L8f",
      "title": "Add recommendations for static key usages.",
      "url": "https://github.com/lake-wg/edhoc/pull/284",
      "state": "MERGED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "A static key should not be used both for X25519 and Ed25519.\r\n\r\nThis PR corresponds to #273.",
      "createdAt": "2022-04-27T10:00:14Z",
      "updatedAt": "2022-05-10T13:16:17Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "227a0923dded7e8e698919e1ef6ebf2d02c952cc",
      "headRepository": "charlie-j/edhoc",
      "headRefName": "Joint_use_of_keys_X25519_Ed25519",
      "headRefOid": "4db5c106748289cf29eacbf844569a7dd7d71069",
      "closedAt": "2022-05-10T13:16:16Z",
      "mergedAt": "2022-05-10T13:16:16Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "88b3c260872fa909b86e2532d9334954953bfce6"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Please review the proposed change.",
          "createdAt": "2022-05-05T16:20:24Z",
          "updatedAt": "2022-05-05T16:20:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 285,
      "id": "PR_kwDOEItXAM423Owq",
      "title": "Update contributors list from the formal analysis research team",
      "url": "https://github.com/lake-wg/edhoc/pull/285",
      "state": "MERGED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As mentioned by @gselander in #272 (in a slight deviation from topic)",
      "createdAt": "2022-04-27T10:10:06Z",
      "updatedAt": "2022-04-28T08:29:40Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "227a0923dded7e8e698919e1ef6ebf2d02c952cc",
      "headRepository": "charlie-j/edhoc",
      "headRefName": "Update_Contributors_from_researcher_analysis",
      "headRefOid": "d8bc4b235d1c3ebc5f9735abd2cf4bf189aeeb9b",
      "closedAt": "2022-04-28T08:29:40Z",
      "mergedAt": "2022-04-28T08:29:40Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "7a2d5d1d692e763208fe7775cf1b1a2e198acbb5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 286,
      "id": "PR_kwDOEItXAM43Etuf",
      "title": "Update key schedule",
      "url": "https://github.com/lake-wg/edhoc/pull/286",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "",
      "createdAt": "2022-04-29T15:00:31Z",
      "updatedAt": "2022-05-10T13:15:48Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "1a4b5f8b1af54bc6cda4b1cc362f764fda18459d",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "update-key-schedule",
      "headRefOid": "1071ff12365ce419d1fa77a9352399af6b60f8c7",
      "closedAt": "2022-05-10T13:15:47Z",
      "mergedAt": "2022-05-10T13:15:47Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "7d4073f3fc5251a878bc0980f2c2acc0fa6c814e"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me.",
          "createdAt": "2022-05-02T07:58:08Z",
          "updatedAt": "2022-05-02T07:58:08Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "As far as I understand, since we changed the derivation of K_4 / IV_4, verifying message_4 does not give explicit key confirmation of PRK_out. Should we change to\r\n\r\nK_4           = EDHOC-KDF( PRK_out, 8, h'',      key_length )\r\nIV_4          = EDHOC-KDF( PRK_out, 9, h'',      iv_length )\r\n\r\nor \r\n\r\nK_4           = EDHOC-KDF( PRK_exporter, 8, h'',      key_length )\r\nIV_4          = EDHOC-KDF( PRK_exporter, 9, h'',      iv_length )\r\n\r\n(in the latter case we may want to re-shuffle the labels)\r\n\r\nEdit: These changes are not necessary, rephrasing of key confirmation in 95e35bb.\r\n",
          "createdAt": "2022-05-03T07:54:38Z",
          "updatedAt": "2022-05-06T09:44:13Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Chunk ready to merge? Discussion continues in #278.",
          "createdAt": "2022-05-04T14:31:49Z",
          "updatedAt": "2022-05-04T14:31:49Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Latest commit addresses suggestion to make clearer distinction between key derivation for EDHOC processing, resulting in PRK_out, and key derivation for application, i.e. making use of PRK_out in EDHOC-Exporter and EDHOC-KeyUpdate. ",
          "createdAt": "2022-05-06T08:40:21Z",
          "updatedAt": "2022-05-06T08:40:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM45KoG8",
          "commit": {
            "abbreviatedOid": "5831c18"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-02T13:44:36Z",
          "updatedAt": "2022-05-02T13:44:37Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "OKM is now undefined. The text \"output keying material (OKM)\" was deleted in an earlier paragraph. Maybe OKM can be completely removed? But if is is used it has to be defined.",
              "createdAt": "2022-05-02T13:44:37Z",
              "updatedAt": "2022-05-02T13:44:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45Kpud",
          "commit": {
            "abbreviatedOid": "5831c18"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-02T13:50:06Z",
          "updatedAt": "2022-05-02T13:50:06Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "Remove \"ypically including one of the transcript hashes TH_2, TH_3, or TH_4\"\r\nThis is not true for the exporter",
              "createdAt": "2022-05-02T13:50:06Z",
              "updatedAt": "2022-05-02T13:50:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45KqKC",
          "commit": {
            "abbreviatedOid": "5831c18"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-02T13:51:34Z",
          "updatedAt": "2022-05-02T13:51:35Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "Oxford comma",
              "createdAt": "2022-05-02T13:51:35Z",
              "updatedAt": "2022-05-02T13:51:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45Kqiq",
          "commit": {
            "abbreviatedOid": "5831c18"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-02T13:52:55Z",
          "updatedAt": "2022-05-02T13:52:55Z",
          "comments": [
            {
              "originalPosition": 108,
              "body": "The above bullet list can be deleted I think. It is replaced by the table below.",
              "createdAt": "2022-05-02T13:52:55Z",
              "updatedAt": "2022-05-02T13:52:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45KsVb",
          "commit": {
            "abbreviatedOid": "5831c18"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-02T13:58:59Z",
          "updatedAt": "2022-05-02T13:58:59Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "It seems like the TH_4 definition is now part of the Initiator processing. Not sure that is good.",
              "createdAt": "2022-05-02T13:58:59Z",
              "updatedAt": "2022-05-02T13:58:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45KsuI",
          "commit": {
            "abbreviatedOid": "5831c18"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-02T14:00:17Z",
          "updatedAt": "2022-05-02T14:00:18Z",
          "comments": [
            {
              "originalPosition": 201,
              "body": "We now have duplicated definitions of MAC_3. Maybe a problem, maybe not.",
              "createdAt": "2022-05-02T14:00:17Z",
              "updatedAt": "2022-05-02T14:00:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45Ks0a",
          "commit": {
            "abbreviatedOid": "5831c18"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-02T14:00:39Z",
          "updatedAt": "2022-05-02T14:00:39Z",
          "comments": [
            {
              "originalPosition": 191,
              "body": "We now have duplicated definitions of MAC_2. Maybe a problem, maybe not.",
              "createdAt": "2022-05-02T14:00:39Z",
              "updatedAt": "2022-05-02T14:00:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45KwCP",
          "commit": {
            "abbreviatedOid": "5831c18"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-02T14:11:46Z",
          "updatedAt": "2022-05-02T14:11:47Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "Should add some text that PRK_exporter needs to be recalculated after KeyUpdate. ",
              "createdAt": "2022-05-02T14:11:46Z",
              "updatedAt": "2022-05-02T14:11:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45KwRC",
          "commit": {
            "abbreviatedOid": "5831c18"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-02T14:12:36Z",
          "updatedAt": "2022-05-02T14:12:36Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "We also need more guidance on the use of KeyUpdate. But that might another PR.\r\n",
              "createdAt": "2022-05-02T14:12:36Z",
              "updatedAt": "2022-05-02T14:12:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45ONjQ",
          "commit": {
            "abbreviatedOid": "950e2de"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-03T07:40:29Z",
          "updatedAt": "2022-05-03T07:40:29Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "OKM was defined in an earlier section, now also mentioned here.",
              "createdAt": "2022-05-03T07:40:29Z",
              "updatedAt": "2022-05-03T07:40:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45ONvd",
          "commit": {
            "abbreviatedOid": "950e2de"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-03T07:41:28Z",
          "updatedAt": "2022-05-03T07:41:29Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "Moved text about TH to paragraph below ",
              "createdAt": "2022-05-03T07:41:29Z",
              "updatedAt": "2022-05-03T07:41:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45OOJz",
          "commit": {
            "abbreviatedOid": "950e2de"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-03T07:43:35Z",
          "updatedAt": "2022-05-03T07:43:35Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "I'll waited with moving this. Note that since TH is defined in terms of plaintext they can be calculated earlier than with the previous definition. ",
              "createdAt": "2022-05-03T07:43:35Z",
              "updatedAt": "2022-05-03T07:43:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45OOkt",
          "commit": {
            "abbreviatedOid": "5831c18"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-03T07:45:45Z",
          "updatedAt": "2022-05-03T07:45:46Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "I've waited with these pending upcoming comment on key confirmation.",
              "createdAt": "2022-05-03T07:45:45Z",
              "updatedAt": "2022-05-03T07:46:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45VZAt",
          "commit": {
            "abbreviatedOid": "5831c18"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-04T13:54:36Z",
          "updatedAt": "2022-05-04T13:54:36Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "Added text on update of PRK_exporter in 621e726",
              "createdAt": "2022-05-04T13:54:36Z",
              "updatedAt": "2022-05-04T13:54:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM45VaF6",
          "commit": {
            "abbreviatedOid": "5831c18"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-04T13:56:20Z",
          "updatedAt": "2022-05-04T13:56:20Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "Moved TH_4 definition to new section PRK_out in 8fd50ed",
              "createdAt": "2022-05-04T13:56:20Z",
              "updatedAt": "2022-05-04T13:56:20Z"
            }
          ]
        }
      ]
    },
    {
      "number": 287,
      "id": "PR_kwDOEItXAM43q-M2",
      "title": "Deterministic encoding and decoding. CDDL",
      "url": "https://github.com/lake-wg/edhoc/pull/287",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "#281",
      "createdAt": "2022-05-11T18:23:49Z",
      "updatedAt": "2022-05-18T07:54:23Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "521d372ea5384a176384a3e1ef6ab0d5c64b7c3c",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "emanjon-patch-1",
      "headRefOid": "913cfae187d6475df226eee2b89e4cd5db5825ac",
      "closedAt": "2022-05-18T07:54:23Z",
      "mergedAt": "2022-05-18T07:54:23Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "003e0799028768d32d7f8e45259b01cf4c1a3aea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM451k0L",
          "commit": {
            "abbreviatedOid": "4182baf"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "\"All EDHOC messages are deterministically encoded CBOR Sequences {{RFC8742}}.\"\r\n\r\nDo we need to clarify the meaning of \"deterministically encoded CBOR Sequences\"? Readers may be lead to believe it is defined in RFC8742.",
          "createdAt": "2022-05-12T06:59:40Z",
          "updatedAt": "2022-05-12T06:59:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 288,
      "id": "PR_kwDOEItXAM43uSWs",
      "title": "Updates to EAD",
      "url": "https://github.com/lake-wg/edhoc/pull/288",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "",
      "createdAt": "2022-05-12T14:03:55Z",
      "updatedAt": "2022-05-18T07:40:19Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "521d372ea5384a176384a3e1ef6ab0d5c64b7c3c",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "update-ead",
      "headRefOid": "200365f3074d43cd7bc1a5b74a2e8e053f22c9d2",
      "closedAt": "2022-05-18T07:40:18Z",
      "mergedAt": "2022-05-18T07:40:18Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "2b30d62bf067e96144993b6af9191091c1b1efd7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 289,
      "id": "PR_kwDOEItXAM43w8Xb",
      "title": "Update deduplication, #268",
      "url": "https://github.com/lake-wg/edhoc/pull/289",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "",
      "createdAt": "2022-05-13T07:22:38Z",
      "updatedAt": "2022-05-18T07:36:33Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "a5dd86cda72e832d8d7884b0b9d5edafdc4d6c4e",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "update-deduplication",
      "headRefOid": "c87518f58caebda97822e4998e228870dc31de65",
      "closedAt": "2022-05-18T07:36:33Z",
      "mergedAt": "2022-05-18T07:36:33Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "a79d4777bcf77694ab071eeb0de703c61cf8dc70"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@charlie-j @chrysn",
          "createdAt": "2022-05-13T07:23:29Z",
          "updatedAt": "2022-05-13T07:23:29Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "LGTM, thanks.",
          "createdAt": "2022-05-13T08:48:57Z",
          "updatedAt": "2022-05-13T08:48:57Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM +1 :)",
          "createdAt": "2022-05-14T10:16:12Z",
          "updatedAt": "2022-05-14T10:16:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 291,
      "id": "PR_kwDOEItXAM43ye4Z",
      "title": "Changelog",
      "url": "https://github.com/lake-wg/edhoc/pull/291",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "",
      "createdAt": "2022-05-13T14:12:13Z",
      "updatedAt": "2022-05-18T07:31:43Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "77b5162e8e22c0f3c3fe2c57eb3cdebd15a6dc7f",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "changelog-14",
      "headRefOid": "908b4fec6ec92e6ab623a5348d875761db4751ad",
      "closedAt": "2022-05-18T07:31:35Z",
      "mergedAt": "2022-05-18T07:31:35Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "1605dfc817cc2dd9931a0a076c339677cfc8c3a7"
      },
      "comments": [
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "-> TH_2 input ordering also changed",
          "createdAt": "2022-05-14T10:26:20Z",
          "updatedAt": "2022-05-14T10:26:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 292,
      "id": "PR_kwDOEItXAM433If4",
      "title": "Cryptographic things to fix before submission of -14",
      "url": "https://github.com/lake-wg/edhoc/pull/292",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "- Reformulating security of expand as stream cipher instead of removing.\r\n- HKDF-Expand is very often used.\r\n\r\n- Added note of HKDF-Expand length restriction.\r\n\r\n- Key use for different algorithms is already covered by COSE.\r\n- Nothing is special with use inside of EDHOC.\r\n- The text is clearly not correct at as signate can also be used in other methods.",
      "createdAt": "2022-05-16T08:38:07Z",
      "updatedAt": "2022-05-18T07:42:14Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "77b5162e8e22c0f3c3fe2c57eb3cdebd15a6dc7f",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "emanjon-patch-2",
      "headRefOid": "432df2c927de5651b6cef88f52d8c90893477c79",
      "closedAt": "2022-05-18T07:42:14Z",
      "mergedAt": "2022-05-18T07:42:14Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "011c49dd1e7609df6ac907c0ed66d97a1785ac2f"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "#290",
          "createdAt": "2022-05-16T08:41:09Z",
          "updatedAt": "2022-05-16T08:41:09Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 293,
      "id": "PR_kwDOEItXAM442DeH",
      "title": "Input from Lo\u00efc",
      "url": "https://github.com/lake-wg/edhoc/pull/293",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Updates and consequential changes following comments by Lo\u00efc.",
      "createdAt": "2022-06-01T11:44:18Z",
      "updatedAt": "2022-06-09T15:16:35Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "33370eb4f608313ff59a26da93493732ab560c5a",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "input-loic",
      "headRefOid": "bdb94f92b8bf1a3cd5c040522c7818cc7dcd0abe",
      "closedAt": "2022-06-09T15:16:35Z",
      "mergedAt": "2022-06-09T15:16:35Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "8b7643aeb6cc800e3a22d6f8762252abe1860790"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 297,
      "id": "PR_kwDOEItXAM44-6f7",
      "title": "Clarification of key identifier encoding",
      "url": "https://github.com/lake-wg/edhoc/pull/297",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on comments by Marco",
      "createdAt": "2022-06-02T15:02:32Z",
      "updatedAt": "2022-06-28T05:56:58Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "33370eb4f608313ff59a26da93493732ab560c5a",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "input-Marco",
      "headRefOid": "4f1462d815c894cde72b3dfe8274d4b86c4ad041",
      "closedAt": "2022-06-28T05:56:58Z",
      "mergedAt": "2022-06-28T05:56:58Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "c899a88b219cb1f90ec2c14b84c7855fe45afd1a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM48yVtD",
          "commit": {
            "abbreviatedOid": "4f1462d"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-27T08:46:06Z",
          "updatedAt": "2022-06-27T08:46:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 298,
      "id": "PR_kwDOEItXAM45DFAF",
      "title": "Connection identifier privacy",
      "url": "https://github.com/lake-wg/edhoc/pull/298",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#295\r\n\r\nSome additional text on connection id privacy\r\n- New connections identifiers needs to be unpredictable to provide improved privacy\r\n- QUIC requirement to not use the same identifier in a connection seems like nonsense that lowers privacy compared to random selection and increases implementation complexity.\r\n- Christian Amsuss pointed out in a discussion in CORE that connection id privacy often does not make sense in many deployments as there are fixed identifier in lower layers",
      "createdAt": "2022-06-03T06:47:29Z",
      "updatedAt": "2022-06-12T12:23:47Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "33370eb4f608313ff59a26da93493732ab560c5a",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "emanjon-patch-3",
      "headRefOid": "4a6da4cdd853a46c3f46596c5d74e952b5b7e002",
      "closedAt": "2022-06-12T12:23:47Z",
      "mergedAt": "2022-06-12T12:23:47Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "651df8b6962b33b8d54c3e4116ed1c40f3a9797c"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "LGTM",
          "createdAt": "2022-06-03T14:35:12Z",
          "updatedAt": "2022-06-03T14:35:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 301,
      "id": "PR_kwDOEItXAM45WiMN",
      "title": "Traces for -14",
      "url": "https://github.com/lake-wg/edhoc/pull/301",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-08T22:03:38Z",
      "updatedAt": "2022-09-28T09:45:54Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "33370eb4f608313ff59a26da93493732ab560c5a",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "traces-of-14",
      "headRefOid": "3d747f5ddac4c383d5b6a93e800df68757737203",
      "closedAt": "2022-07-10T18:16:55Z",
      "mergedAt": "2022-07-10T18:16:55Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "df9335d3f195dbee3fbcafc26e9233f20271a285"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "First results, needs to be confirmed",
          "createdAt": "2022-06-08T22:04:25Z",
          "updatedAt": "2022-06-08T22:04:25Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "HTML is here: https://lake-wg.github.io/edhoc/traces-of-14/draft-ietf-lake-traces.html\r\n.txt is here: https://lake-wg.github.io/edhoc/traces-of-14/draft-ietf-lake-traces.txt",
          "createdAt": "2022-06-08T22:15:37Z",
          "updatedAt": "2022-06-08T22:15:37Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Figure of key schedule in -14\r\nhttps://openwsn.atlassian.net/wiki/spaces/LAKE/pages/1932427302/Key+Schedule",
          "createdAt": "2022-06-09T08:17:56Z",
          "updatedAt": "2022-06-09T08:17:56Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "No other issues reported besides #316, so merge this for submission of traces-01.",
          "createdAt": "2022-07-10T18:16:37Z",
          "updatedAt": "2022-07-10T18:16:37Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 302,
      "id": "PR_kwDOEItXAM45ZsNT",
      "title": "Distinct padding names for each message",
      "url": "https://github.com/lake-wg/edhoc/pull/302",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#300 ",
      "createdAt": "2022-06-09T15:25:47Z",
      "updatedAt": "2022-06-12T12:07:46Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "8b7643aeb6cc800e3a22d6f8762252abe1860790",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "distinct-paddings",
      "headRefOid": "e2f21f035a3ec00692a8bb7c2ec05ed307cbeec6",
      "closedAt": "2022-06-12T12:07:46Z",
      "mergedAt": "2022-06-12T12:07:46Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "680bf145588983769e533244c5570cb1f0829c7f"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This is an editorial change.",
          "createdAt": "2022-06-12T12:07:35Z",
          "updatedAt": "2022-06-12T12:07:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 304,
      "id": "PR_kwDOEItXAM45y5gW",
      "title": "Large message_2",
      "url": "https://github.com/lake-wg/edhoc/pull/304",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#303",
      "createdAt": "2022-06-16T18:14:27Z",
      "updatedAt": "2022-09-29T11:50:37Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "19911ca8d04a2158d0f3fef2e86da4fb5e88f4fe",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "length-message_2",
      "headRefOid": "a6619fb1d320188ee4adc0339d1c853135403028",
      "closedAt": "2022-09-29T11:50:37Z",
      "mergedAt": "2022-09-29T11:50:37Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "4af1158596aa9c818e306e15e11caf11a75d0555"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "In the latest commit there are new names to distinguish info_label and exporter_label, the former is extended to be int. \r\n\r\nI also noted an error in the CDDL reference section C.2.",
          "createdAt": "2022-09-20T14:05:31Z",
          "updatedAt": "2022-09-20T14:05:31Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 306,
      "id": "PR_kwDOEItXAM46ZFOx",
      "title": "John's review",
      "url": "https://github.com/lake-wg/edhoc/pull/306",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- There are now two different media types defined.\r\n- Padding was missing from the list that EDHOC adds.",
      "createdAt": "2022-06-27T06:55:15Z",
      "updatedAt": "2022-06-28T05:55:57Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "248be72bfd18e89ede7cda931fb8a35c12a6c906",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "John's-review",
      "headRefOid": "347678f118b799b4477bbb85a5f4b2582fd2557e",
      "closedAt": "2022-06-28T05:55:57Z",
      "mergedAt": "2022-06-28T05:55:57Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "332bc0a4d3778f1c08f9b85d04287f631b53e58c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM48yS2j",
          "commit": {
            "abbreviatedOid": "347678f"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-27T08:37:40Z",
          "updatedAt": "2022-06-27T08:37:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 307,
      "id": "PR_kwDOEItXAM46ZUNe",
      "title": "Unauthenticated Operation (TOFU)",
      "url": "https://github.com/lake-wg/edhoc/pull/307",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- I think it would be good to point out early that the EDHOC protocol (just like TLS) only provides proof-of-possesion. Authentication has to be done by the application. I have seen horrible uses of TLS where the implementors believe RFC 8446 when it says it provides authentication.\r\n\r\n- Added text for \"Unauthenticated Operation\". As pointed out by Marco, this is more general than just TOFU. \"Unauthenticated operation\" is the term used by TLS 1.3",
      "createdAt": "2022-06-27T08:02:16Z",
      "updatedAt": "2022-06-28T09:38:41Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "248be72bfd18e89ede7cda931fb8a35c12a6c906",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Unauthenticated-Operation-(TOFU)",
      "headRefOid": "f32d47896bd0ed074c9bd6ce9f5ff931d62be916",
      "closedAt": "2022-06-28T09:38:41Z",
      "mergedAt": "2022-06-28T09:38:41Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "046b0790ca4548097a2b0a4815b71bc11e3ee8cc"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "#178",
          "createdAt": "2022-06-27T08:07:42Z",
          "updatedAt": "2022-06-27T08:07:42Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is ready to merge.",
          "createdAt": "2022-06-28T08:07:11Z",
          "updatedAt": "2022-06-28T08:07:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM48ym0d",
          "commit": {
            "abbreviatedOid": "be8a007"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I made some minor updates, have a look.",
          "createdAt": "2022-06-27T09:36:12Z",
          "updatedAt": "2022-06-27T09:36:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 308,
      "id": "PR_kwDOEItXAM46ZpLV",
      "title": "When changes to EDHOC messages are detected",
      "url": "https://github.com/lake-wg/edhoc/pull/308",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#305",
      "createdAt": "2022-06-27T09:22:14Z",
      "updatedAt": "2022-06-28T05:56:40Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "248be72bfd18e89ede7cda931fb8a35c12a6c906",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "When-changes-to-EDHOC-messages-are-detected",
      "headRefOid": "e286b939e9a7168f18202c3c8a981183d5a5b438",
      "closedAt": "2022-06-28T05:56:39Z",
      "mergedAt": "2022-06-28T05:56:39Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "5b67829e2771d979bfb557a6f2ccde27ce1d6738"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM48ymhl",
          "commit": {
            "abbreviatedOid": "e286b93"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-27T09:35:15Z",
          "updatedAt": "2022-06-27T09:35:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 309,
      "id": "PR_kwDOEItXAM46an2N",
      "title": "Selfie attacks mitigation implies privacy-loss for the Initiators",
      "url": "https://github.com/lake-wg/edhoc/pull/309",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "PR to fix #279. Largely based on the text suggested by @charlie-j but will some changes.",
      "createdAt": "2022-06-27T13:19:14Z",
      "updatedAt": "2022-06-29T04:21:52Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "046b0790ca4548097a2b0a4815b71bc11e3ee8cc",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Selfie-attacks-mitigation-implies-privacy-loss-for-the-Initiators",
      "headRefOid": "a2a9f4d640193f7cc8fb4b586f2271a5b6aee646",
      "closedAt": "2022-06-29T04:21:52Z",
      "mergedAt": "2022-06-29T04:21:52Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "0399453d65c72ddbfad94dc318fa91a6fcc12a7f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM483jAq",
          "commit": {
            "abbreviatedOid": "b8eb057"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-28T06:48:58Z",
          "updatedAt": "2022-06-28T06:48:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 310,
      "id": "PR_kwDOEItXAM46ebz9",
      "title": "Clarifications of KeyUpdate and Exporter #278",
      "url": "https://github.com/lake-wg/edhoc/pull/310",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-28T07:55:40Z",
      "updatedAt": "2022-07-10T13:24:28Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "c899a88b219cb1f90ec2c14b84c7855fe45afd1a",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "clarifications-key-derivation",
      "headRefOid": "db3c45c24b5abf18caf7266e60a68f9e4667f608",
      "closedAt": "2022-07-10T13:24:27Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> PRK_exporter MUST be derived anew from PRK_out if EDHOC-KeyUpdate is used\r\n\r\nThis is very wrong\r\n\r\n> PRK_out = EDHOC-KDF( PRK_out, 11, context, hash_length )\r\n\r\nThis overwriting is also very wrong.\r\n\r\nNot sure that the changes in this PR are worth making now when these paragraphs need a complete rewrite.....\r\n",
          "createdAt": "2022-06-29T06:25:36Z",
          "updatedAt": "2022-06-29T06:25:36Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "#313",
          "createdAt": "2022-06-29T06:48:51Z",
          "updatedAt": "2022-06-29T06:48:51Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Replaced by #314",
          "createdAt": "2022-07-10T13:24:27Z",
          "updatedAt": "2022-07-10T13:24:27Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM49E9ri",
          "commit": {
            "abbreviatedOid": "db3c45c"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T11:34:46Z",
          "updatedAt": "2022-06-30T11:34:46Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"A typical mode of operation of an application is that PRK_exporter is derived from PRK_out generated by EDHOC, and application keys in turn from PRK_exporter.\"\r\n\r\nIsn't this always the case?\r\n",
              "createdAt": "2022-06-30T11:34:46Z",
              "updatedAt": "2022-06-30T11:34:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 311,
      "id": "PR_kwDOEItXAM46g2lt",
      "title": " Updated EAD processing (critical and non-critical)",
      "url": "https://github.com/lake-wg/edhoc/pull/311",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addressing #275",
      "createdAt": "2022-06-28T17:26:48Z",
      "updatedAt": "2022-07-10T14:41:04Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "046b0790ca4548097a2b0a4815b71bc11e3ee8cc",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "ead-update",
      "headRefOid": "e990b9c3f7c2b5c0113391f856c22817fae6e443",
      "closedAt": "2022-07-10T14:41:04Z",
      "mergedAt": "2022-07-10T14:41:04Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "51209f3e0e9e4b12b19aa6b3d948daae5b6b65f0"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Issue needed.",
          "createdAt": "2022-06-29T04:14:23Z",
          "updatedAt": "2022-06-29T04:14:23Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Should we allow or forbid that ead_label  = k and ead_label = -k correspond to different ead-values?\r\n\r\nFor example, if an (ead_label, ead_value) is always critical: \r\n\r\n* Say, ead_value is an ACE Access Token with ead_label = -4, always critical.\r\n\r\nThen we can either:\r\n1. forbid the use of ead_label = 4 altogether, or \r\n2. allocate an always non-critical EAD to ead_label = 4, say, ead_value is \"service indication\" as in #275\r\n\r\nIn case 1 we will have some \"holes\" in the register. One positive integer blocked for each always critical (ead_label, ead_value) , one negative blocked for each always non-critical (ead_label, ead_value), and 0 cannot be used. (It is not clear to me that there are many always non-critical, but always critical is probably common.)\r\n\r\nIn case 2, we could still have the registration policy that: if an EAD can be either critical or non-critical then two ead_label with same absolute value should be reserved for it.  \r\n\r\nWhat is the main risk with case 2? If someone misunderstands or by accident changes sign on an always /non-/critical EAD this results most likely in an error due to wrong ead_value (like in the example above), but potentially in an unintended EAD message. (Another registration policy could be that the ead_values corresponding to ead_labels k and -k should have incompatible CDDL so the error is discovered ...) The EAD specification needs anyway to specify what are the processing rules and if you violate those more or less anything could happen. \r\n\r\nComments?\r\n\r\n\r\n",
          "createdAt": "2022-06-29T20:19:13Z",
          "updatedAt": "2022-06-29T20:19:13Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "BTW, we may want a term for the ordered pair (ead_label, ead_value). The term \"EAD\" or \"EAD field\" is referring to the message field, which may consist of multiple (ead_label, ead_value).",
          "createdAt": "2022-06-29T20:21:31Z",
          "updatedAt": "2022-06-30T05:35:09Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> What is the main risk with case 2?\r\n\r\nJust seems like overoptimization to me. I would prefer if we follow the model that we agreed on for C509 which is similar to what CoAP Options is using.\r\n\r\nIf you think it is important to use the complete code point space I think it would be better not assign any functionality to the minus sign and register critical and non-critical idenpendently.\r\n\r\nThe original proposal seems to give two different meanings to the minus sign. The minus value is either a criticallity toggle or a completly different EAD.\r\n",
          "createdAt": "2022-06-30T08:16:11Z",
          "updatedAt": "2022-06-30T08:38:01Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Introducing the term \"EAD item\" for (ead_label, ead_value)",
          "createdAt": "2022-06-30T16:41:40Z",
          "updatedAt": "2022-06-30T16:41:40Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "~~Wait with this pending design team meeting, see #275.~~\r\n\r\nEdit: Let's include the main points of this PR in -15 as a input to the design team meeting. ",
          "createdAt": "2022-07-10T13:26:11Z",
          "updatedAt": "2022-07-10T13:37:12Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a proposal. The text now include the concepts \"EAD item\" and \"critical\"/\"non-critical\" EAD item. There is also more details about how applications makes use of EAD: \r\n* each application registers its own ead_labels\r\n* ead_label is a positive integer associated to a particular ead_value\r\n* if the application transports different ead_values then multiple ead_labels need to be registered\r\n* the application specifies how EAD items are transported in EDHOC messages, a particular EAD item may be transported in multiple messages (i.e. different EAD_x).\r\n\r\nI'll merge this into -15 and look forward to comments!\r\n",
          "createdAt": "2022-07-10T14:40:18Z",
          "updatedAt": "2022-07-10T14:40:18Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM489VtL",
          "commit": {
            "abbreviatedOid": "2878657"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I think critical ead is a very good discussion to have. I would suggest that we have a discussion and add any outcome to -16 shortly after IETF 114.",
          "createdAt": "2022-06-29T04:16:36Z",
          "updatedAt": "2022-06-29T04:17:47Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "\"If an endpoint does not support a received critical EAD field, the EDHOC protocol MUST be discontinued.\"\r\n\r\nThis needs more discussion and work. The handling of critical extensions in C.509 is to my understanding confusing and problematic. Both in the  specification and in implementations.\r\n\r\nWhat does support means. Can an endpoint supporting the EAD ignore it.",
              "createdAt": "2022-06-29T04:16:36Z",
              "updatedAt": "2022-06-29T04:17:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM49AMpL",
          "commit": {
            "abbreviatedOid": "2878657"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-29T14:19:43Z",
          "updatedAt": "2022-06-29T14:19:46Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "The IANA registration process for this is not clear.",
              "createdAt": "2022-06-29T14:19:44Z",
              "updatedAt": "2022-06-29T14:19:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM49AMts",
          "commit": {
            "abbreviatedOid": "2878657"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-29T14:19:52Z",
          "updatedAt": "2022-06-29T14:19:54Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": " The specification likely MUST describe",
              "createdAt": "2022-06-29T14:19:53Z",
              "updatedAt": "2022-06-29T14:19:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM49ANE0",
          "commit": {
            "abbreviatedOid": "2878657"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-29T14:20:29Z",
          "updatedAt": "2022-06-29T14:20:29Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "This should likely be non-negative integer now.",
              "createdAt": "2022-06-29T14:20:29Z",
              "updatedAt": "2022-06-29T14:20:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM49ASgS",
          "commit": {
            "abbreviatedOid": "2878657"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-29T14:33:11Z",
          "updatedAt": "2022-06-29T14:33:11Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "I did some changes to the registration procedure and the processing regarding critical EAD fields. I think the current version could be included in -15",
              "createdAt": "2022-06-29T14:33:11Z",
              "updatedAt": "2022-06-29T14:33:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 314,
      "id": "PR_kwDOEItXAM46okfe",
      "title": "Some changes needed to Key Derivation section",
      "url": "https://github.com/lake-wg/edhoc/pull/314",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-30T11:26:03Z",
      "updatedAt": "2022-07-10T13:23:43Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "0399453d65c72ddbfad94dc318fa91a6fcc12a7f",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Some-changes-needed-to-Key-Derivation-section",
      "headRefOid": "7031e65ffb150a7ffa1573a6dcf2927407a52d83",
      "closedAt": "2022-07-10T13:23:43Z",
      "mergedAt": "2022-07-10T13:23:43Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "84cf97c75982af18f1c4fad178e6adc653840b8a"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "#313 ",
          "createdAt": "2022-06-30T11:26:52Z",
          "updatedAt": "2022-06-30T11:26:52Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Should be checked for conflicts with #310",
          "createdAt": "2022-06-30T11:32:41Z",
          "updatedAt": "2022-06-30T11:32:41Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I think fixing the comments above resolves conflict with #310, so #310 can then be replaced by this.",
          "createdAt": "2022-06-30T15:59:43Z",
          "updatedAt": "2022-06-30T15:59:43Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This proposal for update in the key derivation description also addresses the clarifications requested in #278, thus replacing #310. We merge this to include it in -15 and enable further reviews.",
          "createdAt": "2022-07-10T13:23:14Z",
          "updatedAt": "2022-07-10T13:23:31Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM49GZaJ",
          "commit": {
            "abbreviatedOid": "d87cc7c"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T15:32:59Z",
          "updatedAt": "2022-06-30T15:33:00Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "\r\n\"An application using EDHOC-KeyUpdate needs to store PRK_out.\"\r\nPerhaps misleading in the context of secure storage or execution, where we don't want the application to handle PRK_out.\r\n\r\n\"as long as EDHOC-Exporter is used.\"\r\nIs EDHOC-Exporter mandatory to use?\r\n\r\nProposal: \r\n\r\nOLD\r\nAn application using EDHOC-KeyUpdate needs to store PRK_out. If EDHOC-KeyUpdate is not used, an application only needs to store PRK_out or PRK_exporter as long as EDHOC-Exporter is used.\r\n\r\nNEW\r\nPRK_out needs to be stored in order to use EDHOC-KeyUpdate. If EDHOC-KeyUpdate is not used, \r\n then PRK_out or PRK_exporter needs to be stored in order to use EDHOC-Exporter.\r\n\r\n",
              "createdAt": "2022-06-30T15:32:59Z",
              "updatedAt": "2022-06-30T15:33:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM49Gdra",
          "commit": {
            "abbreviatedOid": "d87cc7c"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T15:44:24Z",
          "updatedAt": "2022-06-30T15:44:24Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "\"Note that PRK_exporter changes everytime EDHOC-KeyUpdate is used, see {{keyupdate}}.\"\r\n\r\n{{keyupdate}} does not describe this change.\r\neverytime -> every time\r\n",
              "createdAt": "2022-06-30T15:44:24Z",
              "updatedAt": "2022-06-30T15:44:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM49GffL",
          "commit": {
            "abbreviatedOid": "d87cc7c"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T15:49:38Z",
          "updatedAt": "2022-06-30T15:49:38Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Preferably add the (optional?) derivation of new PRK_exporter within the pseudo-code so it is changed every time EDHOC-KeyUpdate is used. \r\n\r\n          new PRK_exporter = EDHOC-KDF( new PRK_out, 10, h'', hash_length )",
              "createdAt": "2022-06-30T15:49:38Z",
              "updatedAt": "2022-06-30T15:49:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM49GgEe",
          "commit": {
            "abbreviatedOid": "d87cc7c"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T15:51:16Z",
          "updatedAt": "2022-06-30T15:51:16Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "\"To provide forward secrecy the old PRK_out needs to be deleted as soon as it is not needed.\"\r\n\r\nneeds .... needed\r\n\r\nNEW\r\n\"To provide forward secrecy the old PRK_out must to be deleted as soon as it is not needed.\"",
              "createdAt": "2022-06-30T15:51:16Z",
              "updatedAt": "2022-06-30T15:51:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 315,
      "id": "PR_kwDOEItXAM464oKR",
      "title": "Vectors Updated to spec 14",
      "url": "https://github.com/lake-wg/edhoc/pull/315",
      "state": "CLOSED",
      "author": "stoprocent",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hi\r\nSending updated vectors to spec 14. For now only p256 but yet to be verified. \r\n\r\nCode to generte can be found here: \r\nhttps://github.com/stoprocent/edhoc/commit/68f93cd3884d3ff232acf0466ea0d3e8014936d7\r\n",
      "createdAt": "2022-07-05T22:39:09Z",
      "updatedAt": "2022-07-28T15:55:23Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "1e06a9d3733de33973f822dbd759cfd00a250968",
      "headRepository": "stoprocent/edhoc",
      "headRefName": "test-vectors-rfc-p256",
      "headRefOid": "d979a657625435423d4d2a0aaa6f0ae5f9f9b1ba",
      "closedAt": "2022-07-28T15:55:23Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks! This is updating test-vectors-11/p256/. Do we want to overwrite those? What do you think about instead making a new directory test-vectors-14/p256/ ?\r\n",
          "createdAt": "2022-07-10T14:58:14Z",
          "updatedAt": "2022-07-10T14:58:14Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Or maybe keep the directory. I'm submitting traces-01 now which states:\r\n\r\n\"Editor's note: update reference to test vectors below:\r\n\r\nA more extensive test vector suite and related code that was used to generate trace 1 can be found at: https://github.com/lake-wg/edhoc/tree/master/test-vectors-11. The test vector for trace 2 can be found at: https://github.com/lake-wg/edhoc/tree/master/test-vectors-11/p256.\"",
          "createdAt": "2022-07-10T18:42:53Z",
          "updatedAt": "2022-07-10T18:42:53Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 318,
      "id": "PR_kwDOEItXAM47H6SN",
      "title": "Change TH_3 and TH_4",
      "url": "https://github.com/lake-wg/edhoc/pull/318",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "Change implementing the change to TH_3 and TH_4 suggested by Marc and Felix in #317",
      "createdAt": "2022-07-08T18:18:30Z",
      "updatedAt": "2022-09-20T06:47:59Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "0399453d65c72ddbfad94dc318fa91a6fcc12a7f",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Change-TH_3-and-TH_4",
      "headRefOid": "4f00b3b47beaa5e59a40d7700c4c2835962632bb",
      "closedAt": "2022-09-20T06:47:59Z",
      "mergedAt": "2022-09-20T06:47:59Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "cd3c9824d1ea7113b4f11b99328fdbef41a392ee"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5CWoW3",
          "commit": {
            "abbreviatedOid": "4f00b3b"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-20T06:47:29Z",
          "updatedAt": "2022-09-20T06:47:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 323,
      "id": "PR_kwDOEItXAM48HQxC",
      "title": "TH_2 as salt in PRK_2e derivation",
      "url": "https://github.com/lake-wg/edhoc/pull/323",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "Not sure this change is practically needed, but it is a simple change does not hurt. Actually simplifies the specification as the discussion on HKDF and empty string can be deleted.",
      "createdAt": "2022-07-26T13:35:37Z",
      "updatedAt": "2022-09-20T06:56:35Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "1e06a9d3733de33973f822dbd759cfd00a250968",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "TH_2-as-salt-in-PRK_2e-derivation",
      "headRefOid": "5c07e243180fb9a6d3b807e7e3bfb9ab7e46a75d",
      "closedAt": "2022-09-20T06:56:35Z",
      "mergedAt": "2022-09-20T06:56:35Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "e290ed08254adcfb4d7c40239b096c1e25f823a1"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "#299",
          "createdAt": "2022-07-26T13:36:16Z",
          "updatedAt": "2022-07-26T13:36:16Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "No disagreement recorded - merging now.",
          "createdAt": "2022-09-20T06:56:21Z",
          "updatedAt": "2022-09-20T06:56:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5CWqU0",
          "commit": {
            "abbreviatedOid": "5c07e24"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-20T06:54:44Z",
          "updatedAt": "2022-09-20T06:54:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 325,
      "id": "PR_kwDOEItXAM48Ow1o",
      "title": "New encryption of message_3",
      "url": "https://github.com/lake-wg/edhoc/pull/325",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Close?"
      ],
      "body": "#324",
      "createdAt": "2022-07-28T08:15:21Z",
      "updatedAt": "2022-10-11T09:45:41Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "1e06a9d3733de33973f822dbd759cfd00a250968",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "new-k_3-derivation",
      "headRefOid": "5753e3d8e29b785ca648ebc31115367eb7406f71",
      "closedAt": "2022-10-11T09:45:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This is still experimental. Comments from implementers and reviewers are most welcome!\r\n\r\n@charlie-j @marcilunga Can you say anything how this impacts your analyses?",
          "createdAt": "2022-07-28T08:20:19Z",
          "updatedAt": "2022-07-28T08:20:47Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry, I made unnecessary mess of the key derivation table. Hang on for a short while and I'll make the diff more readable!",
          "createdAt": "2022-07-28T08:22:43Z",
          "updatedAt": "2022-07-28T08:22:43Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Now better (when using \"Files changed\" above)",
          "createdAt": "2022-07-28T08:30:01Z",
          "updatedAt": "2022-07-28T08:30:01Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am unavailable in August, so formal results will need to wait for September.\r\nAt a first glance, it looks like we are strengthening the encryption of the signature, but weakening the one of the identity, because it is now malleable and not integrity protected. So, I am unclear if this is or not an improvement overall, and this may lead to unexpected privacy breaches.\r\n\r\nWhat looks weird is that we are weakening the encryption of the identity of the initiator, in order to strengthen the encryption of the MAC, but the MAC should be a useless random value anyway. Is it really that worthwhile to be able to encrypt the MAC, based on PK_4e3m, with a key also based on PK_4e3m? \r\n",
          "createdAt": "2022-07-28T10:38:27Z",
          "updatedAt": "2022-07-28T10:38:27Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@charlie-j Thanks for good comments. For clarity: this change is not decided, but for discussion. \r\n\r\nAbout \r\n\r\n> weakening the one of the identity, because it is now malleable and not integrity protected. \r\n\r\nClearly CIPHERTEXT_3A does not integrity protect ID_CRED_R. But wouldn't appropriate use of external_aad in the COSE_Encrypt0 of CIPHERTEXT_3B  provide integrity protection in the same way as CIPHERTEXT_3 in -15? For example by including PLAINTEXT_3A in external_aad?\r\n\r\n",
          "createdAt": "2022-07-28T11:39:31Z",
          "updatedAt": "2022-07-28T11:39:31Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@charlie-j Also, thanks for sharing your timeplan!",
          "createdAt": "2022-07-28T11:40:20Z",
          "updatedAt": "2022-07-28T11:40:20Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The content of plaintext_3a would indeed be integrity protected by the later operations.  But in a sense, here we are emulating an AEAD by splitting up into two parts the decryption and the integrity check. This is often error prone, and what paved the way for some padding oracle attacks or timing attacks.\r\n\r\nA possible weird behavior:\r\n1) Assume two ID_CRED_I and ID_CRED_I' points  to the same  long term g_I (is it possible?) \r\n 2) During the third message between an anonymous initiator with ID_CRED_X talking to an honest responder, an active attacker intercepts it and xor the ID_CRED_X part with (ID_CRED_I xor ID_CRED_I'). Then, two possibilities:\r\n  2.1) ID_CRED_X is not I or I', and thus, the responder will either not find an ID_CRED corresponding to (ID_CRED_X xor ID_CRED_I xor ID_CRED_I'), or use some unrelated g_X, in both cases, decryption of cyphertextB will fail \r\n  2.2) ID_CRED_X is I or I', then we have that the responder actually receives either ID_CRED_I or ID_CRED_I', the responder then uses g_I and decryption will succeed. However, the signature check will fail.\r\n  \r\n On most implementations, it would be easy to time for an attacker the failure point, and thus know whether the decryption or the signature failed.  And in the previous scenario, the attacker can then know whether 2.1 or 2.2 happened, and thus whether the initiator is I. Thus, an active attacker could potentially break the anonymity of the initiator.  ",
          "createdAt": "2022-07-28T13:42:43Z",
          "updatedAt": "2022-07-28T13:42:43Z"
        },
        {
          "author": "baptistecottier",
          "authorAssociation": "NONE",
          "body": "> What looks weird is that we are weakening the encryption of the identity of the initiator, in order to strengthen the encryption of the MAC, but the MAC should be a useless random value anyway. Is it really that worthwhile to be able to encrypt the MAC, based on PK_4e3m, with a key also based on PK_4e3m?\r\n\r\nIn fact, with the actual protocol, message_3 is not authenticated:\r\nThe key K_3 used for the encryption in the message 3 depends only of the initiator ephemeral key (X), the responder long-term key (R) and the responder ephemeral key (Y). So an adversary can compute the key K_3 and therefore, this is not an authenticated encryption. \r\n\r\nThe idea in this request is to compute an AEAD with the key K_4 that depends on the Initiator long-term secret key I. However, the responder need credential informations from the Initiator to compute K_4. Those informations are encrypted under K_3 as the first part of message_3 that the responder will decrypt before computing the key K_4.\r\n\r\n> an active attacker intercepts it and xor the ID_CRED_X part with (ID_CRED_I xor ID_CRED_I')\r\n\r\nWe can also imagine xoring the ID_CRED_X part with (ID_CRED_I1 xor ID_CRED_I2) allowing the adversary to test two identities in the same time. This malleability indeed seems to be a weakness of this update. Considering a classic block cipher encryption with K_3 would solve this weakness but at the price of a larger message_3 (I guess).\r\n",
          "createdAt": "2022-07-28T15:59:43Z",
          "updatedAt": "2022-07-28T15:59:43Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "If some part of message_3 gets just encrypted and not immediately authenticated (eg. through a KEYSTREAM_3), I think this opens up a (very narrow) attack from a MITM attacker:\r\n\r\nAssume (and yes that's a lot of assumptions, maybe some can be dropped) an attacker knows that ID_CRED_I are of a very particular shape (say, all in the 1-byte form), that no padding or EAD_3 is used. Further assume that the responder's behavior differs between \"ID_CRED_I is not recognized\" and \"The validation failed\" (even if it's just the timing -- other behavioral differences can be forbidden, but not leaking timing would be hard. After all, that's why we use AEADs in the first place).\r\n\r\nNow assume that the attacker sees repeated EDHOC exchanges between the responder and what is apparently the same initiator. Then the attacker can\r\n* start flipping bits in where it knows the ID_CRED_I to be, and thus count how many ID_CRED_I values are recognized by the server, or alternatively\r\n* knowing that there are only two ID_CRED_I and knowing one ID_CRED_I that is usable, vary the ID_CRED_I in message_3 and thus determine which ID_CRED_I the attacked client has.\r\n  (More elaborate scenarios are probably possible with multiple initiators, jumping from one to the next).\r\n\r\nThus, I'd be very cautious about non-AEAD encryption in message 3.\r\n\r\n(I'm already unhappy about having to parse unauthenticated data in message 2, but there it's about ID_CRED_R, and EDHOC does not claim to protected that ... which gives me input for encrypted client hello at #275).",
          "createdAt": "2022-07-28T16:08:17Z",
          "updatedAt": "2022-07-28T16:08:17Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "@baptistecottier  wrote:\r\n`The key K_3 used for the encryption in the message 3 depends only of the initiator ephemeral key (X), the responder long-term key (R) and the responder ephemeral key (Y).`\r\n\r\nWhat do you mean with an attacker here? Any entity can of course take the role R, whether I wants to talk to R is determined in I's processing of message_3. But is Alice and Bob exchange message_1 and message_2 an adversary Eve cannot create a valid message_3 and R is assured that only I can read message_3 including ID_CRED_I.... or?",
          "createdAt": "2022-07-28T21:59:06Z",
          "updatedAt": "2022-07-28T21:59:36Z"
        },
        {
          "author": "baptistecottier",
          "authorAssociation": "NONE",
          "body": "@emanjon wrote:\r\n> What do you mean with an attacker here? Any entity can of course take the role R, whether I wants to talk to R is determined in I's processing of message_3. But is Alice and Bob exchange message_1 and message_2 an adversary Eve cannot create a valid message_3 and R is assured that only I can read message_3 including ID_CRED_I.... or?\r\n\r\nIn what I said, the attacker would be the Initiator. The only key that authenticates the Initiator is I. And this key is implied in the key schedule after the computation of K_3 and IV_3. So message_3 can not an authenticated ciphertext, as the key K_3 used is not authenticated. \r\n",
          "createdAt": "2022-07-29T08:08:34Z",
          "updatedAt": "2022-07-29T08:08:34Z"
        },
        {
          "author": "baptistecottier",
          "authorAssociation": "NONE",
          "body": "In fact, one can imagine that rather than stopping the protocol in case ID_CRED_I is not recognized or the verification fails, the responder chose a random credential, and keep following the protocol, avoiding some timing attack from an eavesdropper. Therefore the modifications made in this PR may work. ",
          "createdAt": "2022-08-01T10:40:53Z",
          "updatedAt": "2022-08-01T10:40:53Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "On Mon, Aug 01, 2022 at 03:41:03AM -0700, Baptiste Cottier wrote:\n> [...]  in case ID_CRED_I is not recognized or the verification fails,\n> the responder chose a random credential, and keep following the\n> protocol, avoiding some timing attack from an eavesdropper\n\nI doubt that this is a practical choice for implementers. Leaving out\nthe difficulties around random numbers (taking \"the first\" credential\nwould be good enough), this is putting extra processing in a place that\nis still security critical. It would be making requirements of\nno-side-channels that are not otherwise required of EDHOC\nimplementations. (AEAD decryption may have these requirements, but\nthat's the very point of authenticated encryption: do these properly,\nonce and for all).\n\nIf we had primitives for the sequence of decryption, then processing\nputative plaintext, and then verification in COSE, and a good\nunderstanding on what ill-effects it can have and what best practices\nare, fine -- but we don't, and it shows by us coming up with surprise\nleaks and hot-fixes in this thread. Researching such abstractions might\nbe a worthwhile endeavor, but I'd prefer not to have the exploration of\nthat as a dependency of EDHOC publication.\n",
          "createdAt": "2022-08-01T11:08:03Z",
          "updatedAt": "2022-08-01T11:08:03Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this, as agreed in the interim.",
          "createdAt": "2022-10-11T09:45:40Z",
          "updatedAt": "2022-10-11T09:45:40Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 328,
      "id": "PR_kwDOEItXAM48Qx-O",
      "title": "Vectors p256 update for version 15",
      "url": "https://github.com/lake-wg/edhoc/pull/328",
      "state": "MERGED",
      "author": "stoprocent",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I have included a few configurations with some new information.\r\nWhen Certificates are used as credentials there are new fields CA_x_CN and CA_x_PK, which are Initiators' or Responder's CA Certificate's Common Name and Public Key.\r\n\r\nThe code used to generate is available here: https://github.com/stoprocent/edhoc/tree/feature/mbedtls\r\n\r\nAll Vectors - SUITE 2\r\n\r\n1. Test Vector\r\n    - Initiator Authentication - Signature Key \r\n    - Initiator Credentials - x509\r\n    - Initiator Credentials Identification - x5chain\r\n    - Responder Authentication - Signature Key \r\n    - Responder Credentials - x509\r\n    - Responder Credentials Identification - x5chain\r\n\r\n2. Test Vector\r\n    - Initiator Authentication - Signature Key \r\n    - Initiator Credentials - x509\r\n    - Initiator Credentials Identification - x5t\r\n    - Responder Authentication - Signature Key \r\n    - Responder Credentials - x509\r\n    - Responder Credentials Identification - x5t\r\n\r\n3. Test Vector\r\n    - Initiator Authentication - Signature Key \r\n    - Initiator Credentials - x509\r\n    - Initiator Credentials Identification - x5bag\r\n    - Responder Authentication - Signature Key \r\n    - Responder Credentials - x509\r\n    - Responder Credentials Identification - x5bag\r\n\r\n4. Test Vector\r\n    - Initiator Authentication - Signature Key \r\n    - Initiator Credentials - x509\r\n    - Initiator Credentials Identification - kid\r\n    - Responder Authentication - Signature Key \r\n    - Responder Credentials - x509\r\n    - Responder Credentials Identification - kid\r\n  \r\n5. Test Vector\r\n    - Initiator Authentication - Static DH Key\r\n    - Initiator Credentials - x509\r\n    - Initiator Credentials Identification - kid\r\n    - Responder Authentication - Static DH Key\r\n    - Responder Credentials - x509\r\n    - Responder Credentials Identification - kid\r\n\r\n6. Test Vector\r\n    - Initiator Authentication - Static DH Key\r\n    - Initiator Credentials - uccs\r\n    - Initiator Credentials Identification - kid\r\n    - Responder Authentication - Static DH Key\r\n    - Responder Credentials - uccs\r\n    - Responder Credentials Identification - kid\r\n  ",
      "createdAt": "2022-07-28T16:09:02Z",
      "updatedAt": "2022-07-28T16:20:01Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "1e06a9d3733de33973f822dbd759cfd00a250968",
      "headRepository": "stoprocent/edhoc",
      "headRefName": "test-vectors-rfc-p256",
      "headRefOid": "d979a657625435423d4d2a0aaa6f0ae5f9f9b1ba",
      "closedAt": "2022-07-28T16:20:01Z",
      "mergedAt": "2022-07-28T16:20:01Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "25cfe9cc022e4a8ae5f9e3138fe4226f91d29106"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 330,
      "id": "PR_kwDOEItXAM48Q46k",
      "title": "ead_label leaks info even if ead_value is encrypted outside of EDHOC",
      "url": "https://github.com/lake-wg/edhoc/pull/330",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "#327",
      "createdAt": "2022-07-28T16:40:13Z",
      "updatedAt": "2022-09-20T06:59:33Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "25cfe9cc022e4a8ae5f9e3138fe4226f91d29106",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "ead_label-leaks-information-even-if-ead_value-is-encrypted-outside-of-EDHOC",
      "headRefOid": "dc4ea523a3b0ef4fe46cea6fcfe59fcf82090961",
      "closedAt": "2022-09-20T06:59:33Z",
      "mergedAt": "2022-09-20T06:59:33Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "e2429eee7d03eb67e4866ab3042d0d63a36ce246"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 333,
      "id": "PR_kwDOEItXAM49tjNh",
      "title": "Lightweight Authenticated Key Exchange (LAKE)",
      "url": "https://github.com/lake-wg/edhoc/pull/333",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#332",
      "createdAt": "2022-08-24T11:35:16Z",
      "updatedAt": "2022-09-20T06:34:36Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "25cfe9cc022e4a8ae5f9e3138fe4226f91d29106",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Lightweight-Authenticated-Key-Exchange-(LAKE)",
      "headRefOid": "27d1c9d7e0a15161a8ed414f510b1930973fd4fd",
      "closedAt": "2022-09-20T06:34:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "#332 is closed.",
          "createdAt": "2022-09-20T06:34:35Z",
          "updatedAt": "2022-09-20T06:34:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 334,
      "id": "PR_kwDOEItXAM4_Qe1T",
      "title": "Updating design statements",
      "url": "https://github.com/lake-wg/edhoc/pull/334",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on side comment in #299 about \"all symmetric keys are derived using as much previous information as possible\"",
      "createdAt": "2022-09-20T09:07:47Z",
      "updatedAt": "2022-09-29T11:48:51Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "e2429eee7d03eb67e4866ab3042d0d63a36ce246",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "design-statment",
      "headRefOid": "da3999c1bf550d999793597a290830bbc6b628c8",
      "closedAt": "2022-09-29T11:48:51Z",
      "mergedAt": "2022-09-29T11:48:50Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "e0f65530a77d152160e0527f4dea9d29aae686c7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 336,
      "id": "PR_kwDOEItXAM4_QyIg",
      "title": "Implementation note about byte string identifier representation",
      "url": "https://github.com/lake-wg/edhoc/pull/336",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#335. First text based on initial draft by Christian. ",
      "createdAt": "2022-09-20T10:12:59Z",
      "updatedAt": "2022-09-29T11:48:24Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "465874d516e0c0051d13fd3c4b07268750d721f7",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "clarify-bstr-repr",
      "headRefOid": "2176c4b45e72fe3cac4ee88e7cc087484dd3a7ff",
      "closedAt": "2022-09-29T11:48:24Z",
      "mergedAt": "2022-09-29T11:48:24Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "b462405ab93f2180ef1778647e405cae24fa5b79"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 337,
      "id": "PR_kwDOEItXAM4_3yqi",
      "title": "Traces 03",
      "url": "https://github.com/lake-wg/edhoc/pull/337",
      "state": "MERGED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "traces and test vectors"
      ],
      "body": "",
      "createdAt": "2022-09-29T16:31:30Z",
      "updatedAt": "2022-10-24T13:15:19Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "4af1158596aa9c818e306e15e11caf11a75d0555",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "traces-03",
      "headRefOid": "a1a13203ecd47cad42059ced48fe8386001b70e9",
      "closedAt": "2022-10-24T13:15:19Z",
      "mergedAt": "2022-10-24T13:15:19Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "6e941a3a6dd27028a1c5171bb66e88986917562f"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging in preparation for submission.",
          "createdAt": "2022-10-24T13:15:08Z",
          "updatedAt": "2022-10-24T13:15:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5EJUA7",
          "commit": {
            "abbreviatedOid": "5924fbc"
          },
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-16T12:50:06Z",
          "updatedAt": "2022-10-16T12:50:07Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "should this be TH_2 here?",
              "createdAt": "2022-10-16T12:50:06Z",
              "updatedAt": "2022-10-16T12:50:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5EJUCW",
          "commit": {
            "abbreviatedOid": "5924fbc"
          },
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-16T12:51:19Z",
          "updatedAt": "2022-10-16T12:51:19Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "Question: Should TH_2 used as salt be the raw value or the CBOR wrapping?",
              "createdAt": "2022-10-16T12:51:19Z",
              "updatedAt": "2022-10-16T12:51:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5EJXOY",
          "commit": {
            "abbreviatedOid": "fd5142d"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-16T15:11:39Z",
          "updatedAt": "2022-10-16T15:11:39Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "> should this be TH_2 here?\r\n\r\nIndeed. Now fixed, as well as the value of PRK_2e below. All should be ok after that.",
              "createdAt": "2022-10-16T15:11:39Z",
              "updatedAt": "2022-10-16T15:11:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5EJXVN",
          "commit": {
            "abbreviatedOid": "fd5142d"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-16T15:16:16Z",
          "updatedAt": "2022-10-16T15:16:16Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "> Question: Should TH_2 used as salt be the raw value or the CBOR wrapping?\r\n\r\nMy understanding is that it should be the raw value, just like G_XY used as IKM parameter.",
              "createdAt": "2022-10-16T15:16:16Z",
              "updatedAt": "2022-10-16T15:16:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5EJbsJ",
          "commit": {
            "abbreviatedOid": "5924fbc"
          },
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-16T18:27:29Z",
          "updatedAt": "2022-10-16T18:27:30Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "Thanks. With the fix above, I confirm the other values and my implementation should be ready for interop :)",
              "createdAt": "2022-10-16T18:27:29Z",
              "updatedAt": "2022-10-16T18:27:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 339,
      "id": "PR_kwDOEItXAM5ADuSS",
      "title": "Appendix on EDHOC-KeyUpdate",
      "url": "https://github.com/lake-wg/edhoc/pull/339",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#338",
      "createdAt": "2022-10-03T13:52:29Z",
      "updatedAt": "2022-10-11T09:43:46Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "9524be1a9c55c6a9df79639b48258617b1d81e44",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "keyupdate-appendix",
      "headRefOid": "3482aaaf5c48b8b064eed6571c55cbe4db12544f",
      "closedAt": "2022-10-11T09:43:45Z",
      "mergedAt": "2022-10-11T09:43:45Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "df4bb49eb5fe645d27357519ef820f747d84f391"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 341,
      "id": "PR_kwDOEItXAM5AjsS2",
      "title": "Issue #329 - Comment from Marco to clarify identifier privacy recommendations",
      "url": "https://github.com/lake-wg/edhoc/pull/341",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#329",
      "createdAt": "2022-10-11T10:20:30Z",
      "updatedAt": "2022-10-11T14:26:21Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "3b99348612733fdc41d8ebbda8039357ddd4b1c8",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Issue-#329---Comment-from-Marco-to-clarify-identifier-privacy-recommendations",
      "headRefOid": "ef4d33fb74e295a79abd412c449da812bec51855",
      "closedAt": "2022-10-11T14:26:21Z",
      "mergedAt": "2022-10-11T14:26:21Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "ce408e5241e5b7f1555da3d228248574f5ce9032"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5DyLZJ",
          "commit": {
            "abbreviatedOid": "ef4d33f"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me. @marco-tiloca-sics ?",
          "createdAt": "2022-10-11T10:30:53Z",
          "updatedAt": "2022-10-11T10:30:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEItXAM5Dyp2C",
          "commit": {
            "abbreviatedOid": "ef4d33f"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-11T11:59:45Z",
          "updatedAt": "2022-10-11T11:59:46Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "> chosen randomly among the set of unused 1-byte connection identifiers\r\n\r\n\r\nTo be sure, do you actually mean identifiers that are 1-byte in their native format, or instead that take 1 byte on the wire?\r\n\r\nIn the former case, that's up to 256 identifiers, but without including the 0-byte identifier and including mostly identifiers that take 2 bytes on the wire.\r\n\r\nIn the latter case, that's up to only 49 identifiers, but including also the 0-byte identifier and ensuring minimal size on the wire.",
              "createdAt": "2022-10-11T11:59:45Z",
              "updatedAt": "2022-10-11T11:59:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5DyuGa",
          "commit": {
            "abbreviatedOid": "ef4d33f"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-11T12:12:07Z",
          "updatedAt": "2022-10-11T12:12:07Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "It is an example, so does it matter?",
              "createdAt": "2022-10-11T12:12:07Z",
              "updatedAt": "2022-10-11T12:12:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5DyyWZ",
          "commit": {
            "abbreviatedOid": "ef4d33f"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-11T12:24:05Z",
          "updatedAt": "2022-10-11T12:24:06Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "No, either case is fine; I just tend to get the first meaning from the new text. Anyway, it looks overall good to me :-)",
              "createdAt": "2022-10-11T12:24:05Z",
              "updatedAt": "2022-10-11T12:24:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 342,
      "id": "PR_kwDOEItXAM5Akga2",
      "title": "#340 - Add text on properties of using several MACs",
      "url": "https://github.com/lake-wg/edhoc/pull/342",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-11T13:19:35Z",
      "updatedAt": "2022-10-17T13:56:19Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "3b99348612733fdc41d8ebbda8039357ddd4b1c8",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "#340---Add-text-on-properties-of-using-several-MACs",
      "headRefOid": "f7b2dffcca8ee3fbf97e7b36dc20e5ac80230f49",
      "closedAt": "2022-10-12T07:34:31Z",
      "mergedAt": "2022-10-12T07:34:31Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "b02e3bfa973b50c89c3fd90a12ebccc346fdaa6b"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@baptistecottier Do you or David have any comment on the formulation?",
          "createdAt": "2022-10-12T07:14:48Z",
          "updatedAt": "2022-10-12T07:14:48Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@baptistecottier We needed to merge this PR to prepare for -17, but we are of course still interested in your comments :-)",
          "createdAt": "2022-10-12T08:27:42Z",
          "updatedAt": "2022-10-12T08:27:42Z"
        },
        {
          "author": "baptistecottier",
          "authorAssociation": "NONE",
          "body": "> @baptistecottier Do you or David have any comment on the formulation?\r\n\r\nNo comment to do ;). It's good. ",
          "createdAt": "2022-10-17T13:56:18Z",
          "updatedAt": "2022-10-17T13:56:18Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5D03MZ",
          "commit": {
            "abbreviatedOid": "27e01e2"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Good. \r\n\r\n* Terminology comment:\r\n   * You use first \"authenticated with 128-bit security\" and \r\nthen \"128-bit mutual authentication\". I assume that means the same in security terms (although one is unilateral and the other mutual). \r\n   * No mentioning of online attacks here. Is it clear how that relates to \r\n\"64-bit security against online brute force attacks\" which is stated in another security consideration?\r\n\r\n*  \"can be achieved after verification of the first OSCORE Response\". This is correct in its brevity, but the use of \"verification\" gives the impression that it is the verification of OSCORE Response is what makes this achieved, rather than it is the completion of the processing of the OSCORE request and OSCORE response that are the moments in time when, with the appropriate measures, security *can* be achieved. Perhaps replace \"verification\" with \"completion\".",
          "createdAt": "2022-10-11T17:48:46Z",
          "updatedAt": "2022-10-11T17:48:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 343,
      "id": "PR_kwDOEItXAM5BLiYs",
      "title": "Add new formal analysis paper",
      "url": "https://github.com/lake-wg/edhoc/pull/343",
      "state": "MERGED",
      "author": "charlie-j",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hi all,\r\n\r\nOur previous formal analysis on draft 12 and 14 lead to a publication at USENIX 23 available here https://hal.inria.fr/hal-03810102/.\r\n\r\nAs the two other previous formal analysis were cited in the draft, I'm proposing to add next to them our new one with this PR.\r\n\r\nAs a side remark, our models are here (https://github.com/charlie-j/edhoc-formal-analysis), and we are trying to update everything according to draft 17 with a new overall pass. It might be tight for IETF115, but we are trying our best! And anyway, it should only be positive results by now ;)",
      "createdAt": "2022-10-20T10:06:39Z",
      "updatedAt": "2022-11-24T10:15:08Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "d012a42d6d0e649a88fe1565e0db58bc1fbbaedc",
      "headRepository": "charlie-j/edhoc",
      "headRefName": "master",
      "headRefOid": "1a7ca6657c10fac6d071aeec3e8f3e854cfda83e",
      "closedAt": "2022-11-24T10:15:08Z",
      "mergedAt": "2022-11-24T10:15:08Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "8cbf8fa13c2afb7e24feded5315ce9557cc74a28"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@charlie-j Thanks! Great that you follow up with the latest version. The latest relevant changes are probably in -16 and only adds things to the key derivation (some of which was proposed by you :-).",
          "createdAt": "2022-10-20T10:33:05Z",
          "updatedAt": "2022-10-20T10:33:05Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the pointer! Though, the biggest issue is not so much updating the model of the protocol, but rather making a new full pass on the security claims and new appendices,  trying to have a clear systematized link between claims from the draft and what we check in the model. ",
          "createdAt": "2022-10-20T10:35:13Z",
          "updatedAt": "2022-10-20T10:35:13Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "@gselander let's check if there are some other papers missing and what we want to say about them.",
          "createdAt": "2022-10-21T06:55:29Z",
          "updatedAt": "2022-10-21T06:55:29Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "We should at least add references to work by ETH and ENS. Let's merge this as a starting point and continue discussion in #350.",
          "createdAt": "2022-11-24T10:14:48Z",
          "updatedAt": "2022-11-24T10:14:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 345,
      "id": "PR_kwDOEItXAM5BwdyU",
      "title": "Clarifying session key = PRK_out",
      "url": "https://github.com/lake-wg/edhoc/pull/345",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #344 ",
      "createdAt": "2022-10-28T15:04:58Z",
      "updatedAt": "2022-11-08T17:09:32Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "43ca467138d306f8c145e0e71755b000b653c3f7",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "session-key",
      "headRefOid": "2484fc3d9934737739e502800c8a2a9e6f30d3cc",
      "closedAt": "2022-11-08T17:09:32Z",
      "mergedAt": "2022-11-08T17:09:32Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "726e5ed461d9901d26c008b35c584823a890bda4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5FJ8KV",
          "commit": {
            "abbreviatedOid": "2484fc3"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-28T15:14:18Z",
          "updatedAt": "2022-10-28T15:14:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 349,
      "id": "PR_kwDOEItXAM5CB0lQ",
      "title": "Issue #346 - Fix note in TH_3",
      "url": "https://github.com/lake-wg/edhoc/pull/349",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-11-02T06:54:47Z",
      "updatedAt": "2022-11-08T17:10:13Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "43ca467138d306f8c145e0e71755b000b653c3f7",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Issue-#346---Fix-note-in-TH_3",
      "headRefOid": "9adde5904b598834e7d0c819bf905b267c886b37",
      "closedAt": "2022-11-08T17:10:13Z",
      "mergedAt": "2022-11-08T17:10:13Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "0b7c437a0a31301550fd6d48ecd649eafd5ab9a9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 356,
      "id": "PR_kwDOEItXAM5CVCf3",
      "title": "Issue-#351---Signature-schemes-that-are-not-strongly-unforgeable",
      "url": "https://github.com/lake-wg/edhoc/pull/356",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-11-07T13:55:01Z",
      "updatedAt": "2022-11-08T17:11:53Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "43ca467138d306f8c145e0e71755b000b653c3f7",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Issue-#351---Signature-schemes-that-are-not-strongly-unforgeable",
      "headRefOid": "d995c5f59bfd737f4c6c1ba5c51a23327a62b4ed",
      "closedAt": "2022-11-08T17:11:53Z",
      "mergedAt": "2022-11-08T17:11:53Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "cf82f95c2372f07998562b23dc1b8c6e562f15d8"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "#351-",
          "createdAt": "2022-11-07T13:55:24Z",
          "updatedAt": "2022-11-07T13:55:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 357,
      "id": "PR_kwDOEItXAM5CjMxY",
      "title": "Padding of message_1",
      "url": "https://github.com/lake-wg/edhoc/pull/357",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#348 ",
      "createdAt": "2022-11-09T18:43:39Z",
      "updatedAt": "2022-11-11T18:10:20Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "cf82f95c2372f07998562b23dc1b8c6e562f15d8",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "PAD_1",
      "headRefOid": "46a2d5fc9c1ffa2d0fc660a1ea2228fbea4c5669",
      "closedAt": "2022-11-11T18:10:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this in favor of #360.",
          "createdAt": "2022-11-11T18:10:20Z",
          "updatedAt": "2022-11-11T18:10:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5GDi2N",
          "commit": {
            "abbreviatedOid": "46a2d5f"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-10T09:15:54Z",
          "updatedAt": "2022-11-10T09:15:54Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Please check CDDL",
              "createdAt": "2022-11-10T09:15:54Z",
              "updatedAt": "2022-11-10T09:15:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5GDjxJ",
          "commit": {
            "abbreviatedOid": "46a2d5f"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-10T09:18:21Z",
          "updatedAt": "2022-11-10T09:18:21Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "@cabo How about this?\r\n\r\n? PAD_1 : padding,\r\n\r\n...\r\n\r\npadding = 1* true",
              "createdAt": "2022-11-10T09:18:21Z",
              "updatedAt": "2022-11-10T09:18:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5GD4zY",
          "commit": {
            "abbreviatedOid": "46a2d5f"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-10T10:07:15Z",
          "updatedAt": "2022-11-10T10:07:16Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "1* true is not a type, but a group.  So each true would turn up as a separate item in the sequence.\r\nIf that is OK, `* PAD_1: true` makes this more transparent.\r\nIf not, `? PAD_1: [* true]` is better.\r\n(Note that I'm using * and not + (1*), because that allows more fine-grained control over the size of the padding.)",
              "createdAt": "2022-11-10T10:07:15Z",
              "updatedAt": "2022-11-10T10:07:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5GD5Rn",
          "commit": {
            "abbreviatedOid": "46a2d5f"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-10T10:08:30Z",
          "updatedAt": "2022-11-10T10:08:31Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "And don't forget to update the copy...",
              "createdAt": "2022-11-10T10:08:30Z",
              "updatedAt": "2022-11-10T10:08:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5GEYUv",
          "commit": {
            "abbreviatedOid": "46a2d5f"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-10T11:34:19Z",
          "updatedAt": "2022-11-10T11:34:20Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "? PAD_1: [* true]\r\n(this changes the wire format, and should probable by discussed with the implementors)\r\n\r\n* PAD_1: true\r\n(makes PAD_1 an item instead of a group, PAD_2, PAD_3, and PAD_4 are groups)\r\n\r\nA third alternative would be:\r\n\r\nmessage_1 = (\r\n  METHOD : int,\r\n  SUITES_I : suites,\r\n  G_X : bstr,\r\n  C_I : bstr / -24..23,\r\n  ? PAD_1,\r\n  ? EAD_1 : ead,\r\n)\r\n\r\nPAD_1 = 1* true\r\n",
              "createdAt": "2022-11-10T11:34:19Z",
              "updatedAt": "2022-11-10T11:34:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5GEdUi",
          "commit": {
            "abbreviatedOid": "46a2d5f"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-10T11:50:08Z",
          "updatedAt": "2022-11-10T11:50:08Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Of course, they should all be the same constructions (and, no, I don't want to change the wire format).\r\nAn optional sequence of at least one sounds a bit baroque.\r\nOh, and why not padding at the end?",
              "createdAt": "2022-11-10T11:50:08Z",
              "updatedAt": "2022-11-10T11:50:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5GGESZ",
          "commit": {
            "abbreviatedOid": "46a2d5f"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-10T15:26:36Z",
          "updatedAt": "2022-11-10T15:26:36Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "What is Sturm und Drang with an optional sequence of at least one:\r\nIf there is none, why should there be a sequence?\r\nMarco preferred this location of the padding, I think because it is the end of the simple EDHOC-internal processing; EAD_1 may contain multiple EAD items intended for the application.\r\n\r\n",
              "createdAt": "2022-11-10T15:26:36Z",
              "updatedAt": "2022-11-10T15:26:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5GGGNs",
          "commit": {
            "abbreviatedOid": "46a2d5f"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-10T15:29:28Z",
          "updatedAt": "2022-11-10T15:29:28Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "What you find on the wire will be multiple `true` items at the sequence level.  Why not represent this with some fidelity?",
              "createdAt": "2022-11-10T15:29:28Z",
              "updatedAt": "2022-11-10T15:29:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 358,
      "id": "PR_kwDOEItXAM5Cms6F",
      "title": "Editorial: clarify the usage of C_X as OSCORE Sender/Recipient ID.",
      "url": "https://github.com/lake-wg/edhoc/pull/358",
      "state": "MERGED",
      "author": "dnav",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Signed-off-by: David Navarro <david.navarro@ioterop.com>\r\n\r\n",
      "createdAt": "2022-11-10T10:04:11Z",
      "updatedAt": "2022-11-21T11:29:15Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "cf82f95c2372f07998562b23dc1b8c6e562f15d8",
      "headRepository": "dnav/edhoc",
      "headRefName": "dnav_oscore_editorials",
      "headRefOid": "2d8f8a6e217e9aa87e165de317f83b1a68e8f6af",
      "closedAt": "2022-11-21T11:29:15Z",
      "mergedAt": "2022-11-21T11:29:15Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "6e78fc6bd5b4f104b06b1f8c6005eba549ca75ad"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5GGZR1",
          "commit": {
            "abbreviatedOid": "2d8f8a6"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "@dnav Thanks for the table. Much clearer. I made some editorials, have a look if it is still OK.",
          "createdAt": "2022-11-10T16:06:11Z",
          "updatedAt": "2022-11-10T16:06:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEItXAM5G0AAJ",
          "commit": {
            "abbreviatedOid": "2d8f8a6"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-21T11:29:01Z",
          "updatedAt": "2022-11-21T11:29:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 360,
      "id": "PR_kwDOEItXAM5Cs571",
      "title": "EAD padding",
      "url": "https://github.com/lake-wg/edhoc/pull/360",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#348",
      "createdAt": "2022-11-11T12:54:37Z",
      "updatedAt": "2022-11-24T10:24:57Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "bdeab8f5c570c70101c07ec681ea3e019723dae8",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "EAD-padding",
      "headRefOid": "fbc13e4dd45d133c598d7adc1919d90af5a6283e",
      "closedAt": "2022-11-24T10:24:57Z",
      "mergedAt": "2022-11-24T10:24:57Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "42b4001b4cbccf14d44e7ad20851426f4aa5fc39"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Some updates. Open issues: \r\n\r\n* Still the option to do EAD_x = * ead, and make EAD fields mandatory.\r\n\r\n* There is no way padding exactly 26 bytes, is there?\r\n\r\n",
          "createdAt": "2022-11-13T08:21:27Z",
          "updatedAt": "2022-11-13T08:56:46Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "> There is no way padding exactly 26 bytes, is there?\r\n\r\nIt's possible if we admit the padding EAD item to be repeatable.\r\n\r\nIn general, a specification defining an EAD item would also define if the item is repeatable.",
          "createdAt": "2022-11-13T11:32:45Z",
          "updatedAt": "2022-11-13T11:32:45Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we are done now. Let's merge unless there are further comments.",
          "createdAt": "2022-11-21T16:59:07Z",
          "updatedAt": "2022-11-21T16:59:07Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Found an error in the CDDL (appendix C.2):\r\n\r\n  > ? EAD_1 : ead,",
          "createdAt": "2022-11-21T18:03:03Z",
          "updatedAt": "2022-11-21T18:03:03Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "All,\r\n\r\nThanks for good comments. We would like to merge this now. Any final input?\r\n\r\nLater we can still phrase the CDDL differently, make global replace of \"EAD item\", \"randomly generated\", etc. But unless people disagree with the overall change, let's do it. ",
          "createdAt": "2022-11-23T16:28:37Z",
          "updatedAt": "2022-11-23T16:28:37Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging, in the absence of any quick comments.\r\n",
          "createdAt": "2022-11-24T10:24:23Z",
          "updatedAt": "2022-11-24T10:24:23Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5GMygk",
          "commit": {
            "abbreviatedOid": "1dbc1c8"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-11T19:00:01Z",
          "updatedAt": "2022-11-11T19:00:01Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "```suggestion\r\nThe fields ID_CRED_I, ID_CRED_R, EAD_2, EAD_3, and EAD_4 have variable length and information regarding the length may leak to an attacker. An passive attacker may e.g., be able to differentiating endpoints using identifiers of different length. To mitigate this information leakage an implementation may ensure that the fields have fixed length or use padding. An implementation may e.g., only use fix length identifiers like 'kid' of length 1. Alternatively padding may be used to hide the true length of e.g., certificates by value in 'x5chain' or 'c5c'. Padding in EDHOC is achieved by using the non-critical EAD item with EAD label TBD and a random bytestring as EAD value.\r\n```\r\n\r\nNice!  But I think you mean TBD (To be defined), not TDB (threat database?).",
              "createdAt": "2022-11-11T19:00:01Z",
              "updatedAt": "2022-11-11T19:00:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5GMzM4",
          "commit": {
            "abbreviatedOid": "1dbc1c8"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-11T19:03:13Z",
          "updatedAt": "2022-11-11T19:03:13Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "Zero would be a good value for TBD.  (Would need additional text in 3.5.)\r\n",
              "createdAt": "2022-11-11T19:03:13Z",
              "updatedAt": "2022-11-11T19:08:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5GOfQ7",
          "commit": {
            "abbreviatedOid": "1dbc1c8"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-13T08:22:25Z",
          "updatedAt": "2022-11-13T08:22:26Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "I used zero. Why do we additional need text in 3.5?",
              "createdAt": "2022-11-13T08:22:25Z",
              "updatedAt": "2022-11-13T08:22:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5Gtqek",
          "commit": {
            "abbreviatedOid": "e4cef0a"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-18T16:05:06Z",
          "updatedAt": "2022-11-18T16:05:07Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Why is padding critical?",
              "createdAt": "2022-11-18T16:05:06Z",
              "updatedAt": "2022-11-18T16:05:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5GtxkO",
          "commit": {
            "abbreviatedOid": "e4cef0a"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-18T16:23:23Z",
          "updatedAt": "2022-11-18T16:23:23Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Good catch, should be non-critical. The processing of padding is equivalent to ignoring, which is the processing of non-critical EAD that are not understood.",
              "createdAt": "2022-11-18T16:23:23Z",
              "updatedAt": "2022-11-18T16:23:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5Gv8A7",
          "commit": {
            "abbreviatedOid": "e4cef0a"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-19T00:33:31Z",
          "updatedAt": "2022-11-19T00:33:32Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "The second sentence should be said much earlier and certainly not in this context.",
              "createdAt": "2022-11-19T00:33:31Z",
              "updatedAt": "2022-11-19T00:33:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5GwYWL",
          "commit": {
            "abbreviatedOid": "08907c3"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-19T15:51:56Z",
          "updatedAt": "2022-11-19T15:51:56Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "? ead_value : bstr,\r\n\r\nDo we really want this? This is parsable but  complicates parsing. That you can not pad with 1 byte is not really an issue. But it might be useful for other EAD that only wants to signal a single bit",
              "createdAt": "2022-11-19T15:51:56Z",
              "updatedAt": "2022-11-19T15:59:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5Gwe71",
          "commit": {
            "abbreviatedOid": "57f35d5"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-19T20:04:30Z",
          "updatedAt": "2022-11-19T20:04:31Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nA security application using external authorization data needs to register an ead_label and an associated optional ead_value format for each EAD item it uses (see {{iana-ead}}), and specify the processing and the security considerations. Each application registers its own EAD items and defines the associated operations. The application may define multiple uses of certain EAD items, e.g., the same EAD item may be used in different EDHOC messages with the same application. Multiple occurances of an EAD item in one EAD field may also be specified.\r\n```",
              "createdAt": "2022-11-19T20:04:31Z",
              "updatedAt": "2022-11-19T20:04:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5Gwe9F",
          "commit": {
            "abbreviatedOid": "57f35d5"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-19T20:05:44Z",
          "updatedAt": "2022-11-19T20:05:44Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Yes.  Indeed, it also provides a way to include an inexpensive \"boolean\" EAD, i.e., an EAD the mere presence of which already indicates useful information.\r\n",
              "createdAt": "2022-11-19T20:05:44Z",
              "updatedAt": "2022-11-19T20:05:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5GxDyx",
          "commit": {
            "abbreviatedOid": "57f35d5"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-20T13:19:11Z",
          "updatedAt": "2022-11-20T13:19:12Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@cabo I didn't understand the change which removed \"positive\". The idea was that security applications can only register positive values of ead_label, but can use the sign to indicate criticality. Two labels for the price of one. The exception is ead_label = 0, but that is anyway reserved for padding which is defined in this document. \r\n\r\nThe current text does not make clear that negative ead_labels cannot be registered, or may lead people to think that the positive and the negative ead_label of a given absolute value may be associated to different ead_values. This was at least not the intent. ",
              "createdAt": "2022-11-20T13:19:12Z",
              "updatedAt": "2022-11-20T14:38:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5GxGf5",
          "commit": {
            "abbreviatedOid": "e4cef0a"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-20T14:39:39Z",
          "updatedAt": "2022-11-20T14:39:39Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "@cabo Update in bf798e9, better now?",
              "createdAt": "2022-11-20T14:39:39Z",
              "updatedAt": "2022-11-20T14:39:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G2FKE",
          "commit": {
            "abbreviatedOid": "845c37a"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T16:34:33Z",
          "updatedAt": "2022-11-21T16:34:33Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "There is no objection so we do this.",
              "createdAt": "2022-11-21T16:34:33Z",
              "updatedAt": "2022-11-21T16:34:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G2Ydp",
          "commit": {
            "abbreviatedOid": "70d400c"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T17:13:58Z",
          "updatedAt": "2022-11-21T17:13:59Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "We are not saying anything about what requirements \"random\" implies here.\r\n(Clearly, the recipient cannot test on randomness \ud83d\ude04 )",
              "createdAt": "2022-11-21T17:13:58Z",
              "updatedAt": "2022-11-21T17:13:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G2Y2X",
          "commit": {
            "abbreviatedOid": "70d400c"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T17:15:06Z",
          "updatedAt": "2022-11-21T17:15:06Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "Why do you define EAD_x and do not use it here?",
              "createdAt": "2022-11-21T17:15:06Z",
              "updatedAt": "2022-11-21T17:15:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G2nxh",
          "commit": {
            "abbreviatedOid": "70d400c"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T17:58:07Z",
          "updatedAt": "2022-11-21T17:58:08Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "Other properties of the byte string has been discussed. @emanjon   ",
              "createdAt": "2022-11-21T17:58:07Z",
              "updatedAt": "2022-11-21T17:58:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G2qFj",
          "commit": {
            "abbreviatedOid": "70d400c"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T18:02:24Z",
          "updatedAt": "2022-11-21T18:02:24Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "Ambivalence. Happy to change to\r\n\r\n> EAD_x = 1* ead\r\n\r\nHow would CDDL handle the part:\r\n\r\n> for x = 1, 2, 3, 4 \r\n\r\n?",
              "createdAt": "2022-11-21T18:02:24Z",
              "updatedAt": "2022-11-21T18:02:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G287Q",
          "commit": {
            "abbreviatedOid": "70d400c"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T19:08:43Z",
          "updatedAt": "2022-11-21T19:08:43Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "CDDL has generics for this, but in this case you just want to ignore the 1, 2, 3, 4?\r\n\r\n```\r\nEAD_<x> = (+ ead)\r\n... EAD_<1> ...\r\n```\r\n\r\nNot sure why these gymnastics are needed.",
              "createdAt": "2022-11-21T19:08:43Z",
              "updatedAt": "2022-11-21T19:08:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G5vf7",
          "commit": {
            "abbreviatedOid": "70d400c"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T07:58:02Z",
          "updatedAt": "2022-11-22T07:58:03Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "\r\n>   ead = (\r\n     ead_label : int,\r\n     ? ead_value : bstr,\r\n   )\r\n\r\n>  EAD_x = 1* ead\r\n\r\n>   message_1 = (\r\n     METHOD : int,\r\n     SUITES_I : suites,\r\n     G_X : bstr,\r\n     C_I : bstr / -24..23,\r\n     ? EAD_1,\r\n   )\r\n\r\n@cabo Is this good enough?",
              "createdAt": "2022-11-22T07:58:03Z",
              "updatedAt": "2022-11-22T07:58:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G7VY6",
          "commit": {
            "abbreviatedOid": "dfeeebe"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T12:28:10Z",
          "updatedAt": "2022-11-22T12:28:11Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "No requirement on \"random\", but \"random\" is what we need for Christians use case where he wants hide information in the padding EAD without intermediaries seeing a difference.\r\n\r\nMaybe we can write that the sender sets the value to a random string and the receiver ignores it.",
              "createdAt": "2022-11-22T12:28:11Z",
              "updatedAt": "2022-11-22T12:28:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G7WRW",
          "commit": {
            "abbreviatedOid": "dfeeebe"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T12:30:43Z",
          "updatedAt": "2022-11-22T12:30:43Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "EAD_1 is not defined, this is clearly not valid ",
              "createdAt": "2022-11-22T12:30:43Z",
              "updatedAt": "2022-11-22T12:30:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G7Xbl",
          "commit": {
            "abbreviatedOid": "dfeeebe"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T12:34:02Z",
          "updatedAt": "2022-11-22T12:34:02Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "I suggested\r\n\r\n  ? ead, ; EAD_1\r\n",
              "createdAt": "2022-11-22T12:34:02Z",
              "updatedAt": "2022-11-22T12:34:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G7XuD",
          "commit": {
            "abbreviatedOid": "dfeeebe"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T12:34:53Z",
          "updatedAt": "2022-11-22T12:34:53Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "EAD_x is not used in CDDL. Having a x a variable is clearly not valid CDDL.\r\n\r\nCould do\r\n\r\n```\r\nEAD_1 = 1*ead\r\nEAD_2 = 1*ead\r\nEAD_3 = 1*ead\r\nEAD_4 = 1*ead\r\n```\r\n\r\nBut I would suggest to just delete the  EAD_x definition above and use the following in the four message definitions in the body of the document\r\n\r\n`? ead, ; EAD_1`\r\n\r\n`? ead, ; EAD_2`\r\n\r\n`? ead, ; EAD_3`\r\n\r\n`? ead, ; EAD_4`\r\n\r\n",
              "createdAt": "2022-11-22T12:34:53Z",
              "updatedAt": "2022-11-22T12:37:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G7pcU",
          "commit": {
            "abbreviatedOid": "dfeeebe"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T13:23:22Z",
          "updatedAt": "2022-11-22T13:23:23Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "> EAD_1 = 1* ead\r\nEAD_2 = 1* ead\r\nEAD_3 = 1* ead\r\nEAD_4 = 1* ead\r\n\r\nwas where we started 20 hours ago ;-)\r\n\r\nHappy to leave this to @cabo and @emanjon \r\n\r\n",
              "createdAt": "2022-11-22T13:23:23Z",
              "updatedAt": "2022-11-22T13:23:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G-zb1",
          "commit": {
            "abbreviatedOid": "dfeeebe"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T22:50:05Z",
          "updatedAt": "2022-11-22T22:50:06Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I changed my mind about leaving this. We need to merge this soon to progress on other issues.",
              "createdAt": "2022-11-22T22:50:06Z",
              "updatedAt": "2022-11-22T22:50:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G-zgH",
          "commit": {
            "abbreviatedOid": "dfeeebe"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T22:50:23Z",
          "updatedAt": "2022-11-22T22:50:23Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": " > ? ead, ; EAD_1 \r\n\r\nThis doesn't work since EAD_1 etc. is one or more ead.\r\n\r\nI reverted to having the list of EAD fields in the CDDL, see c27846a.\r\n\r\nUnless there is something wrong with the current version, I propose we merge and then people are free to make PRs against that.",
              "createdAt": "2022-11-22T22:50:23Z",
              "updatedAt": "2022-11-22T22:50:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G-2oz",
          "commit": {
            "abbreviatedOid": "c27846a"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T23:08:39Z",
          "updatedAt": "2022-11-22T23:08:39Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "We already say that the sender sets the value to a random byte string and the receiver ignores it. \r\n\r\nThe word \"random\" which always brings questions. Is \"pseudo-random\" better? Then it becomes an operational condition, use output from a PRNG; rather than a question whether the byte string is truly random. \r\n\r\nWe should also formulate to avoid questions about short paddings. The empty byte string is not random.",
              "createdAt": "2022-11-22T23:08:39Z",
              "updatedAt": "2022-11-22T23:08:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5G-5K3",
          "commit": {
            "abbreviatedOid": "70d400c"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T23:25:31Z",
          "updatedAt": "2022-11-22T23:25:31Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "Proposal in 4f5b2c2",
              "createdAt": "2022-11-22T23:25:31Z",
              "updatedAt": "2022-11-22T23:25:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5HC8sQ",
          "commit": {
            "abbreviatedOid": "70d400c"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-23T16:22:21Z",
          "updatedAt": "2022-11-23T16:22:21Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "Final bid: \"randomly generated\". \r\nIn fbc13e4",
              "createdAt": "2022-11-23T16:22:21Z",
              "updatedAt": "2022-11-23T16:22:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 362,
      "id": "PR_kwDOEItXAM5C7DuF",
      "title": "Issue #359 - calculate Y",
      "url": "https://github.com/lake-wg/edhoc/pull/362",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "First take on explaining how to calculate a Y value for old APIs not supporting the full {{SECG}} format.",
      "createdAt": "2022-11-15T11:53:58Z",
      "updatedAt": "2022-11-21T11:37:06Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "bdeab8f5c570c70101c07ec681ea3e019723dae8",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Issue-#359---calculate-Y",
      "headRefOid": "6692c0fb787932d2bbcb73ce168ffaaaa40972b6",
      "closedAt": "2022-11-21T11:37:06Z",
      "mergedAt": "2022-11-21T11:37:06Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "ae031e385689744c8e9c1c9c3e743dc31a318f9d"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Given e.g. the Julia programming language the calculations aretrivial\r\n\r\n```\r\np = 2^BigInt(256) - 2^BigInt(224) + 2^BigInt(192) + 2^BigInt(96) - 1\r\na = BigInt(-3)\r\nb = BigInt(41058363725152142129326129780047268409114441015993725554835256314039467401291)\r\n\r\nX = BigInt(115792089183396302095546807154740558443406795108653336398970697772788799766525)\r\nalpha = (X^3 + a * X + b) % p \r\nbeta = powermod(alpha, (p + 1) \u00f7 4, p)\r\n\r\nor just\r\n\r\nY = powermod(X^3 + a * X + b, (p + 1) \u00f7 4, p)\r\n```\r\n\r\nFor more constrained platforms maybe we should have some link to a paper explaining how to do this type of calculations on constrained platforms.\r\n\r\nhttps://csrc.nist.gov/csrc/media/events/workshop-on-elliptic-curve-cryptography-standards/documents/papers/session6-adalier-mehmet.pdf\r\n\r\nhttps://www.researchgate.net/publication/347528633_Fast_Implementation_of_NIST_P-256_Elliptic_Curve_Cryptography_on_8-Bit_AVR_Processor\r\n\r\nfile:///Users/emanjon/Downloads/applsci-10-08816.pdf\r\n\r\n",
          "createdAt": "2022-11-15T11:57:05Z",
          "updatedAt": "2022-11-16T15:15:44Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "`If a y-coordinate is required then the value ~yp SHALL be set to zero\r\n`\r\nThis leads to unnecesary extra code if a y value is calculated. I suggest that we reformulate this",
          "createdAt": "2022-11-15T11:58:52Z",
          "updatedAt": "2022-11-15T11:58:52Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Erik Thormarker wrote me that RFC 6090 Appendix C is a good high level reference for this.",
          "createdAt": "2022-11-16T15:17:33Z",
          "updatedAt": "2022-11-16T15:17:33Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "LGTM",
          "createdAt": "2022-11-16T16:25:56Z",
          "updatedAt": "2022-11-16T16:25:56Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@malishav and others: is the new text sufficient to support implementers which has to use a library requiring the y-coordinate?",
          "createdAt": "2022-11-16T16:26:04Z",
          "updatedAt": "2022-11-16T16:26:04Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5GtSJ5",
          "commit": {
            "abbreviatedOid": "35149d1"
          },
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Here some comments after going through the PR.",
          "createdAt": "2022-11-18T15:06:10Z",
          "updatedAt": "2022-11-18T15:09:43Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Not clear at this point what \"any of the square roots\" refers to. Consider expanding to \"Any of the square root methods from {{REFS}} can be used\".",
              "createdAt": "2022-11-18T15:06:10Z",
              "updatedAt": "2022-11-18T15:09:43Z"
            },
            {
              "originalPosition": 14,
              "body": "s/COSE always use/COSE always uses",
              "createdAt": "2022-11-18T15:08:26Z",
              "updatedAt": "2022-11-18T15:09:43Z"
            },
            {
              "originalPosition": 43,
              "body": "Note somewhere that (p+1)/4 (mod p) is actually the square root operation, as explained in RFC6090.",
              "createdAt": "2022-11-18T15:09:21Z",
              "updatedAt": "2022-11-18T15:09:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 364,
      "id": "PR_kwDOEItXAM5De4qM",
      "title": "Updates following Marco's review",
      "url": "https://github.com/lake-wg/edhoc/pull/364",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#347",
      "createdAt": "2022-11-22T17:34:35Z",
      "updatedAt": "2022-11-25T08:34:08Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "76d719e2b5db32403ad7cff9b345f76f9ef9aa05",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "WGLC-Marco",
      "headRefOid": "6626be30883dc98c073c9c004e9cb3a4ed0b12ec",
      "closedAt": "2022-11-25T08:34:08Z",
      "mergedAt": "2022-11-25T08:34:08Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "dfdd859b6ae6e4f14349ce26ad1e94348223861d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5HH5Vd",
          "commit": {
            "abbreviatedOid": "2c54c03"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-24T14:31:57Z",
          "updatedAt": "2022-11-24T14:31:57Z",
          "comments": [
            {
              "originalPosition": 475,
              "body": "I don't understand why group name should be changed to registry group\r\n\r\n```\r\n  Unfortunately, we have been inconsistent in how we refer to these\r\n   entities.  The group names, as they are referred to here, have been\r\n   variously called \"protocol category groups\", \"groups\", \"top-level\r\n   registries\", or just \"registries\".  The registries under them have\r\n   been called \"registries\" or \"sub-registries\"\r\n```.\r\n\r\nBut I don't care.",
              "createdAt": "2022-11-24T14:31:57Z",
              "updatedAt": "2022-11-24T14:32:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5HH6XY",
          "commit": {
            "abbreviatedOid": "6bd7772"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-24T14:34:54Z",
          "updatedAt": "2022-11-24T14:34:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 366,
      "id": "PR_kwDOEItXAM5Dkn3q",
      "title": "Updates following Rafa's review",
      "url": "https://github.com/lake-wg/edhoc/pull/366",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#352",
      "createdAt": "2022-11-23T15:16:35Z",
      "updatedAt": "2022-11-25T08:48:08Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "dc5cccff16393aad7956882a04843e8ada8ca443",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "WGLC-Rafa",
      "headRefOid": "d8ed10e637f721767a8ce4c02445e27be20d2d8f",
      "closedAt": "2022-11-25T08:48:08Z",
      "mergedAt": "2022-11-25T08:48:08Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "d9877729d0ed7272a6b026ceb32ebc4cf6c97db2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5HH0-_",
          "commit": {
            "abbreviatedOid": "4aa52a9"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-24T14:19:58Z",
          "updatedAt": "2022-11-24T14:19:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 367,
      "id": "PR_kwDOEItXAM5Dkqw9",
      "title": "Full validation example for P-256",
      "url": "https://github.com/lake-wg/edhoc/pull/367",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-11-23T15:23:58Z",
      "updatedAt": "2022-11-24T13:56:29Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "395e7286fd89ab7214641bf9fe4fe4b340a439ce",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Full-validation-example-for-P-256",
      "headRefOid": "571f57ac028d325eb7beb6dad28622e26732b95e",
      "closedAt": "2022-11-24T13:56:29Z",
      "mergedAt": "2022-11-24T13:56:29Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "f6ec84a6c855091e1e8aacb804429fe28dca481b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5HGul0",
          "commit": {
            "abbreviatedOid": "571f57a"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I made some editorials. Have not checked the point.",
          "createdAt": "2022-11-24T10:47:32Z",
          "updatedAt": "2022-11-24T10:47:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 368,
      "id": "PR_kwDOEItXAM5DoDOZ",
      "title": "Updates to session-related terminology",
      "url": "https://github.com/lake-wg/edhoc/pull/368",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Triggered by one of Marco's comments\r\n\r\n    [Section 8.1]\r\n\r\n    \"A single session of EDHOC does not include negotiation of cipher suites\"\r\n\r\n    Perhaps do you mean \"a single exchange of two EDHOC messages\" ?\r\n\r\nSee #347\r\n\r\n",
      "createdAt": "2022-11-24T08:27:24Z",
      "updatedAt": "2022-11-25T09:27:13Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "196e0fd8bb18d63324d2d543bed8a6cf772e7329",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "session-terminology",
      "headRefOid": "0fd92e9c8d18bde3f3ae66b91afb856d03b5b33f",
      "closedAt": "2022-11-25T09:27:12Z",
      "mergedAt": "2022-11-25T09:27:12Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "5b1fa713c722c5e7e131fa059a65c5299cf1d45c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5HHxNw",
          "commit": {
            "abbreviatedOid": "a1e89ae"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-24T14:09:30Z",
          "updatedAt": "2022-11-24T14:09:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 369,
      "id": "PR_kwDOEItXAM5DoarD",
      "title": "Updates following review by Malisa",
      "url": "https://github.com/lake-wg/edhoc/pull/369",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#354",
      "createdAt": "2022-11-24T09:46:28Z",
      "updatedAt": "2022-11-25T09:18:40Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "d9877729d0ed7272a6b026ceb32ebc4cf6c97db2",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "WGLC-Malisa",
      "headRefOid": "af531a961e3796b98c9cc591ffc689dd8628012b",
      "closedAt": "2022-11-25T09:18:40Z",
      "mergedAt": "2022-11-25T09:18:40Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "196e0fd8bb18d63324d2d543bed8a6cf772e7329"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5HHtGb",
          "commit": {
            "abbreviatedOid": "0c7088d"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-24T13:57:52Z",
          "updatedAt": "2022-11-24T13:57:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 370,
      "id": "PR_kwDOEItXAM5Do5Ms",
      "title": "EAD error processing and harmonization",
      "url": "https://github.com/lake-wg/edhoc/pull/370",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#347\r\n\r\n> Handling critical failure of EAD processing (Sections 3.8, 5.2.3, 5.3.3, 5.4.3 and 5.5.3).\r\n\r\n",
      "createdAt": "2022-11-24T11:28:57Z",
      "updatedAt": "2022-11-25T13:00:43Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "5b1fa713c722c5e7e131fa059a65c5299cf1d45c",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "EAD-error",
      "headRefOid": "4b6bc62e5cdf39f91ae99c3cd37d28387cee881f",
      "closedAt": "2022-11-25T13:00:43Z",
      "mergedAt": "2022-11-25T13:00:43Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "8467f5f781d0f7e721b41491bc3d7e845cf080d6"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this to allow comments on it with -18.",
          "createdAt": "2022-11-25T13:00:00Z",
          "updatedAt": "2022-11-25T13:00:00Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5HHs33",
          "commit": {
            "abbreviatedOid": "141fa1d"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-24T13:57:12Z",
          "updatedAt": "2022-11-24T13:57:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 371,
      "id": "PR_kwDOEItXAM5DuAfj",
      "title": "Clarifying ID_CRED for kid",
      "url": "https://github.com/lake-wg/edhoc/pull/371",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Clarification of the optimization of ID_CRED for 'kid', #361 ",
      "createdAt": "2022-11-25T16:22:05Z",
      "updatedAt": "2022-11-28T17:06:28Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "50e7d0df1d2fba90315a27a5fd4ba02969864558",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "kid-encoding",
      "headRefOid": "d254aa507846fc4d5014098247cfa2a64d5c3ef7",
      "closedAt": "2022-11-28T17:06:28Z",
      "mergedAt": "2022-11-28T17:06:28Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "04d5aee8e262237e44b38e94ae0798a99e7f1021"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging to include in -18",
          "createdAt": "2022-11-28T17:06:10Z",
          "updatedAt": "2022-11-28T17:06:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5HOARr",
          "commit": {
            "abbreviatedOid": "3f81d4d"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-26T11:35:03Z",
          "updatedAt": "2022-11-26T11:35:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEItXAM5HSkI7",
          "commit": {
            "abbreviatedOid": "09d77ff"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T15:43:47Z",
          "updatedAt": "2022-11-28T15:43:48Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "overhead seems worse than size. Overhead makes more sense for OSCORE when you have a message to send.",
              "createdAt": "2022-11-28T15:43:48Z",
              "updatedAt": "2022-11-28T15:43:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5HSoLu",
          "commit": {
            "abbreviatedOid": "09d77ff"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T15:53:07Z",
          "updatedAt": "2022-11-28T15:53:07Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@emanjon Do you prefer \"size\"? I'm neutral.",
              "createdAt": "2022-11-28T15:53:07Z",
              "updatedAt": "2022-11-28T15:53:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5HTKH3",
          "commit": {
            "abbreviatedOid": "09d77ff"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T17:05:18Z",
          "updatedAt": "2022-11-28T17:05:18Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Changed back to \"size\"",
              "createdAt": "2022-11-28T17:05:18Z",
              "updatedAt": "2022-11-28T17:05:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 373,
      "id": "PR_kwDOEItXAM5D6GCz",
      "title": "Protocol State Machine",
      "url": "https://github.com/lake-wg/edhoc/pull/373",
      "state": "MERGED",
      "author": "malishav",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "This PR adds an appendix describing an example protocol state machine with some encompassing text.\r\n\r\nCloses #372 ",
      "createdAt": "2022-11-29T17:19:55Z",
      "updatedAt": "2022-12-16T16:52:36Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "0bf9f96cbdb3ab50efca54bf4e8a2c343b26d5a8",
      "headRepository": "malishav/edhoc",
      "headRefName": "fsm",
      "headRefOid": "b8d54c5357b3e2c5d981a64ceb93d81e9a33e0ef",
      "closedAt": "2022-12-16T16:52:35Z",
      "mergedAt": "2022-12-16T16:52:35Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "6a2fbff360499eccd4fd4b4f34bc1e59beb71747"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it is good that we label this as an example.\r\n\r\nI propose to remove when to send error messages and when to discontinue from this text. When to send error messages is subject to DoS considerations and complicates the example. These actions are described elsewhere in the draft and can without loss of information be omitted here.\r\n\r\nIn the previous description I found it hard to distinguish between WAIT_M2 and RCVD_M2:\r\n\r\nIf a candidate message_2 is received we are still in WAIT_M2, because if processing fails we are transitioning from WAIT_M2 to ABORTED. So (after several versions) I added a state VRFD_M2, to distinguish between a message received and a message verified. It also enables a distinction between having decrypted message_2 (and obtained ID_CRED_R) and having verified the message with CRED_R.\r\n\r\nTo simplify the description after COMPLETED I separated the cases of message_4 or not with separate paragraphs in the text. This is known to the Initiator by the application profile. \r\n\r\nHave a look at the result. If this works, I can make the same change for the Responder section.\r\n",
          "createdAt": "2022-12-06T19:58:04Z",
          "updatedAt": "2022-12-06T19:58:04Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "> Have a look at the result. If this works, I can make the same change for the Responder section.\r\n\r\nI think it looks and reads really nice!",
          "createdAt": "2022-12-07T08:07:09Z",
          "updatedAt": "2022-12-07T08:07:09Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@malishav @marco-tiloca-sics Please read the whole appendix again.\r\n\r\nEdit: Note one more commit on the last paragraph:",
          "createdAt": "2022-12-07T08:54:49Z",
          "updatedAt": "2022-12-07T09:20:20Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@gselander This looks good and I like how you split the handling of error vs invalid messages with new states. I am only thinking whether transition names should be in present tense to denote actions: s/sent message/send message; s/received message/receive message; s/verified message/verify message",
          "createdAt": "2022-12-07T09:36:20Z",
          "updatedAt": "2022-12-07T09:36:20Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@malishav Fixed, have a look.",
          "createdAt": "2022-12-07T09:57:20Z",
          "updatedAt": "2022-12-07T09:57:20Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@dnav You commented on this at IETF 115. Could you please review this new appendix and see if it addresses your concerns?\r\n\r\nhttps://github.com/lake-wg/edhoc/pull/373/files\r\n",
          "createdAt": "2022-12-07T10:00:14Z",
          "updatedAt": "2022-12-07T10:00:14Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "> @marco-tiloca-sics Please read the whole appendix again.\r\n\r\nLooks good to me, thanks!",
          "createdAt": "2022-12-07T10:24:43Z",
          "updatedAt": "2022-12-07T10:24:43Z"
        },
        {
          "author": "dnav",
          "authorAssociation": "NONE",
          "body": "> @dnav You commented on this at IETF 115. Could you please review this new appendix and see if it addresses your concerns?\r\n> \r\n> https://github.com/lake-wg/edhoc/pull/373/files\r\n\r\nThis looks goos to me.\r\n\r\nMy concerns were that a state machine could be seen as a second source of truth instead of just an example. I am relieved by the way it is presented here.\r\n\r\nNote that now I want to rename my implementation states to WAIT_M2, RCVD_M2, etc. And I guess that during interoperability testings, people will refer to these states. This is not a bad thing.\r\n\r\nRegards,",
          "createdAt": "2022-12-07T12:26:21Z",
          "updatedAt": "2022-12-07T12:26:21Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @dnav - no, you don't have to change your implementation states :-)",
          "createdAt": "2022-12-07T12:45:53Z",
          "updatedAt": "2022-12-07T12:45:53Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "No further comments received, merging now.",
          "createdAt": "2022-12-16T16:52:29Z",
          "updatedAt": "2022-12-16T16:52:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5Hvebt",
          "commit": {
            "abbreviatedOid": "6fe74fe"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-04T09:59:19Z",
          "updatedAt": "2022-12-04T09:59:19Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Please see below proposed updated text, consistent with the updated figure further below.\r\n\r\n---\r\nThe Initiator triggers the state machine by sending message_1, transitioning from START to WAIT_M2. \r\n\r\nIn case the next incoming message is invalid or is an error message, the Initiator transitions from WAIT_M2 to ABORTED. In the former case, the Initiator sends an error message. In either case, the Initiator discontinues the protocol.\r\n\r\nIf the incoming message is an error message with error code 2 (Wrong Selected Cipher Suite), the Initiator remembers the supported cipher suites for this particular Responder and transitions from ABORTED to START. The message_1 that the Initiator subsequently sends takes into account the cipher suites supported by the Responder.\r\n\r\nUpon receiving a valid message_2, the Initiator transitions from WAIT_M2 to RCVD_M2 and processes the message. In case of successful processing, the Initiator prepares message_3 for sending.\r\n\r\nIf any error is encountered while processing message_2 or preparing message_3, the Initiator sends an error message and discontinues the protocol by transitioning from RCVD_M2 to ABORTED. Otherwise, once message_3 is prepared, the Initiator sends it by transitioning from RCVD_M2 to COMPLETED.\r\n\r\nThe Initiator transitions to PERSISTED upon achieving key confirmation from the Responder. Key confirmation can be achieved after a successful decryption and verification of either an incoming optional message_4 (if supported by the application profile) or an incoming application message protected with derived application keys.\r\n\r\nOnce in COMPLETED, the Initiator might be waiting for message_4 (if supported by the application profile). If so, in case the next incoming message is invalid or is an error message, the Initiator transitions from COMPLETED to ABORTED. In the former case, the Initiator sends an error message. In either case, the Initiator discontinues the protocol. Otherwise, the Initiator transitions from COMPLETED to RCVD_M4 and processes message_4. If any error is encountered while processing message_4, the Initiator sends an error message and discontinues the protocol by transitioning from RCVD_M4 to ABORTED.\r\n\r\n\r\n```\r\n~~~~~~~~~~~~~~~~~~~~~~~\r\n    +-------------------> START\r\n    |                       |\r\n    |    Receive invalid    | Send message_1\r\n    |    or error msg       |\r\n    |    (send error msg)   v\r\nABORTED <---------------- WAIT_M2\r\n    ^                       |\r\n    |                       | Receive message_2\r\n    |    Processing error   |\r\n    |    (send error msg)   v\r\n    +-------------------- RCVD_M2\r\n    ^                       |\r\n    |    Receive invalid    | Send message_3\r\n    |    or error msg       |\r\n    |    (send error msg)   v\r\n    +-------------------- COMPLETED ----------------------+\r\n    ^                       |                             |\r\n    |                       | (Receive message_4)         |\r\n    |    Processing error   |                             |\r\n    |    (send error msg)   v                             |\r\n    +-------------------- (RCVD_M4)      Successful decryption and\r\n                            |            verification of an incoming\r\n                            |            application message protected\r\n                            |            with derived application keys\r\n                            v                             |\r\n                          PERSISTED <---------------------+\r\n~~~~~~~~~~~~~~~~~~~~~~~\r\n```",
              "createdAt": "2022-12-04T09:59:19Z",
              "updatedAt": "2022-12-04T09:59:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5HveeL",
          "commit": {
            "abbreviatedOid": "6fe74fe"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-04T10:00:47Z",
          "updatedAt": "2022-12-04T10:00:47Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "Please see below proposed updated text, consistent with the updated figure further below.\r\n\r\n---\r\n\r\nThe responder transitions from START to RCVD_M1 upon the reception of a valid message_1.\r\n\r\nIf any error is encountered while processing message_1, the Responder sends back an error message and discontinues the protocol by transitioning from RCVD_M1 to ABORTED. The sent error message has error code 2 (Wrong Selected Cipher Suite) in case the selected cipher suite is not supported by the Responder, or if the Responder supports a cipher suite more preferred by the Initiator than the selected cipher suite.\r\n\r\nOtherwise, the Responder prepares message_2 for sending. If any error is encountered while preparing message_2, the Responder sends an error message and discontinues the protocol by transitioning from RCVD_M1 to ABORTED. Once message_2 is successfully prepared, the Responder sends it by transitioning from RCVD_M1 to WAIT_M3.\r\n\r\nIn case the next incoming message is invalid or is an error message, the Responder transitions from WAIT_M3 to ABORTED. In the former case, the Responder sends an error message. In either case, the Responder discontinues the protocol.\r\n\r\nUpon receiving a valid message_3, the Responder transitions from WAIT_M3 to RCVD_M3 and processes the message. \r\n\r\nIf any error is encountered while processing message_3, the Responder sends back an error message and discontinues the protocol by transitioning from RCVD_M3 to ABORTED.\r\n\r\nOtherwise, in case of successful processing, the Responder transitions to COMPLETED.\r\n\r\nOnce in COMPLETED, the Responder transitions either to PERSISTED or to PREP_M4 for preparing message_4 (if supported by the application profile). Once in PREP_M4, if any error is encountered while preparing message_4, the Responder sends an error message and discontinues the protocol by transitioning to ABORTED. Otherwise, the Responder sends message_4 by transitioning from PREP_M4 to PERSISTED.\r\n\r\n```\r\n~~~~~~~~~~~~~~~~~~~~~~~\r\n                          START\r\n                            |\r\n                            | Receive message_1\r\n         Processing error   |\r\n         (send error msg)   v\r\nABORTED <---------------- RCVD_M1\r\n    ^                       |\r\n    |    Receive invalid    | Send message_2\r\n    |    or error msg       |\r\n    |    (send error msg)   v\r\n    +-------------------- WAIT_M3\r\n    ^                       |\r\n    |                       | Receive message_3\r\n    |    Processing error   |\r\n    |    (send error msg)   v\r\n    +-------------------- RCVD_M3\r\n    ^                       |\r\n    |                       |\r\n    |                       v\r\n    |                     COMPLETED -----------------+\r\n    |                       |                        |\r\n    |    Processing error   |                        |\r\n    |    (send error msg)   v                        |\r\n    +-------------------- (PREP_M4)                  |\r\n                            |                        |\r\n                            | (Send message_4)       |\r\n                            v                        |\r\n                          PERSISTED <----------------+\r\n~~~~~~~~~~~~~~~~~~~~~~~\r\n```\r\n",
              "createdAt": "2022-12-04T10:00:47Z",
              "updatedAt": "2022-12-04T10:00:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5IAT1c",
          "commit": {
            "abbreviatedOid": "3811dcf"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-07T09:13:20Z",
          "updatedAt": "2022-12-07T09:13:20Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "New version was inspired by this. Now obsolete, so I close this conversation.",
              "createdAt": "2022-12-07T09:13:20Z",
              "updatedAt": "2022-12-07T09:13:20Z"
            }
          ]
        }
      ]
    },
    {
      "number": 378,
      "id": "PR_kwDOEItXAM5E5J4t",
      "title": "Stephen's nits",
      "url": "https://github.com/lake-wg/edhoc/pull/378",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#377 \r\n",
      "createdAt": "2022-12-09T10:39:30Z",
      "updatedAt": "2022-12-19T10:35:34Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "7766b340749d355bb0adf3e140706f471d1e9ce4",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Stephens-nits",
      "headRefOid": "f7ac492be8f5b53da6c3ee6a04db8b83e6a1b600",
      "closedAt": "2022-12-19T10:35:34Z",
      "mergedAt": "2022-12-19T10:35:34Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "b548d85e98e82fc7bfec2517f422041e18b977bc"
      },
      "comments": [
        {
          "author": "sftcd",
          "authorAssociation": "COLLABORATOR",
          "body": "Reading through those changes now will note things arising here, first one is below.\r\n\r\nIf an EAD item can occur more than once, do all occurrences of a given ead_label in one message or one session need to have the same criticality? Presumably if any are marked critical then all could be, and vice-versa, so not sure if mixing is needed, and it might lead to unexpected outcomes maybe?",
          "createdAt": "2022-12-09T12:24:51Z",
          "updatedAt": "2022-12-09T12:24:51Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually that's my only comment on these changes - otherwise they look good.",
          "createdAt": "2022-12-09T12:29:12Z",
          "updatedAt": "2022-12-09T12:29:12Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@sftcd Please check fc60780",
          "createdAt": "2022-12-16T16:56:34Z",
          "updatedAt": "2022-12-16T16:56:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5I0tyS",
          "commit": {
            "abbreviatedOid": "58a6575"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-17T10:24:21Z",
          "updatedAt": "2022-12-17T10:24:22Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "\"more specifically verification by Responder of most preferred cipher suite by Initiator\"\r\n\r\nNot sure this makes thing easier to understand. This sentence is not correct, but a correct sentence would be even longer and complicated....\r\n",
              "createdAt": "2022-12-17T10:24:22Z",
              "updatedAt": "2022-12-17T10:24:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5I0tz2",
          "commit": {
            "abbreviatedOid": "58a6575"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-17T10:25:59Z",
          "updatedAt": "2022-12-17T10:26:00Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "That is good!",
              "createdAt": "2022-12-17T10:25:59Z",
              "updatedAt": "2022-12-17T10:26:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5I0uBE",
          "commit": {
            "abbreviatedOid": "6384546"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-17T10:36:53Z",
          "updatedAt": "2022-12-17T10:36:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEItXAM5I4CRy",
          "commit": {
            "abbreviatedOid": "58a6575"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-19T10:29:18Z",
          "updatedAt": "2022-12-19T10:29:18Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Abbreviated, see 67947ff below.\r\n",
              "createdAt": "2022-12-19T10:29:18Z",
              "updatedAt": "2022-12-19T10:29:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 381,
      "id": "PR_kwDOEItXAM5E6K2k",
      "title": "Stephen's non-nits",
      "url": "https://github.com/lake-wg/edhoc/pull/381",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#380",
      "createdAt": "2022-12-09T13:59:43Z",
      "updatedAt": "2022-12-19T15:58:32Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "0cc529730582c8d156cb2aa015cbbb7a56767d5c",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Stephens-non-nits",
      "headRefOid": "7631715a1c40065c5af1a82e65393b1ba591c048",
      "closedAt": "2022-12-19T15:58:32Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a PR on top of the Stephen's-nits PR. The recent commit addressed this non-nit:\r\n\r\n>> The intent here and all other message processing is that you carry out the processing in steps and if any step fail then you don't carry out the subsequent steps. Is that clear enough?\r\n>\r\n> I'm not sure it's clear enough - esp wrt passing on EAD which can have side-effects that could be bad (e.g. if some identifier were stored even though message processing had failed for some reason). I think the EAD stuff is the only way that kind of thing might happen - if so, then maybe saying that EAD should only be passed to applications after all processing steps have succeeded might be right?\r\n\r\n",
          "createdAt": "2022-12-09T14:01:54Z",
          "updatedAt": "2022-12-09T14:01:54Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@sftcd Please check 7631715",
          "createdAt": "2022-12-16T16:57:12Z",
          "updatedAt": "2022-12-16T16:57:12Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This is hard to review due to the overlap with the nits PR. The nits PR seems ready to merge, this is not.",
          "createdAt": "2022-12-17T10:40:14Z",
          "updatedAt": "2022-12-17T10:40:14Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I looked at the commits 89b46cc and 5d6913d\r\n\r\nThey look good and ready to merge",
          "createdAt": "2022-12-19T11:33:21Z",
          "updatedAt": "2022-12-19T11:33:21Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this in favor of #383",
          "createdAt": "2022-12-19T15:58:32Z",
          "updatedAt": "2022-12-19T15:58:32Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 382,
      "id": "PR_kwDOEItXAM5FAvhd",
      "title": "Add formal analyses CottierPointcheval22 and GuentherIlunga22",
      "url": "https://github.com/lake-wg/edhoc/pull/382",
      "state": "MERGED",
      "author": "fxguenther",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Adding two further analyses that contributed to EDHOC (#350):\r\n\r\n- Cottier, Pointcheval: \"Security Analysis of the EDHOC protocol\". Sep 2022. https://arxiv.org/abs/2209.03599\r\n- G\u00fcnther, Ilunga: \"Careful with MAc-then-SIGn: A Computational Analysis of the EDHOC Lightweight Authenticated Key Exchange Protocol\". Dec 2022. https://eprint.iacr.org/2022/1705",
      "createdAt": "2022-12-10T16:38:20Z",
      "updatedAt": "2022-12-16T16:58:18Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "0cc529730582c8d156cb2aa015cbbb7a56767d5c",
      "headRepository": "fxguenther/edhoc",
      "headRefName": "master",
      "headRefOid": "6740c84b7affd7e35bffcc5418087e101957c04d",
      "closedAt": "2022-12-16T16:58:18Z",
      "mergedAt": "2022-12-16T16:58:18Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "b370d4de6fa0bf073d527aab19c756c7fa8d57c3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5IyPQO",
          "commit": {
            "abbreviatedOid": "39bdeaf"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-16T16:31:59Z",
          "updatedAt": "2022-12-16T16:31:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 383,
      "id": "PR_kwDOEItXAM5Fy6hr",
      "title": "Stephens non nits rebased",
      "url": "https://github.com/lake-wg/edhoc/pull/383",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR is the same as #381, but rebased on the current master.\r\n\r\nPR #381 consisted of 4 commits, two already merged and the two in this PR",
      "createdAt": "2022-12-19T15:56:52Z",
      "updatedAt": "2022-12-19T16:26:46Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "b548d85e98e82fc7bfec2517f422041e18b977bc",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Stephens-non-nits-rebased",
      "headRefOid": "fb151f9b279c65d20bbf26f87eb9571e573f2a09",
      "closedAt": "2022-12-19T16:26:46Z",
      "mergedAt": "2022-12-19T16:26:46Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "157f86d7a72cfff037081fd7e926e7818d8ad570"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this now to have an updated master to work on for #275 and #384",
          "createdAt": "2022-12-19T16:26:35Z",
          "updatedAt": "2022-12-19T16:26:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5I58im",
          "commit": {
            "abbreviatedOid": "fb151f9"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-19T16:01:59Z",
          "updatedAt": "2022-12-19T16:01:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 390,
      "id": "PR_kwDOEItXAM5HUu4y",
      "title": "Genart review updates",
      "url": "https://github.com/lake-wg/edhoc/pull/390",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "Addresses #386",
      "createdAt": "2023-01-13T11:49:01Z",
      "updatedAt": "2023-01-25T19:06:32Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "c83641e0eb5406a2400369fdd32a6ba7f307562e",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "genart-review-updates",
      "headRefOid": "b694cf5ec44473ca227b87b67336c6869ddf6133",
      "closedAt": "2023-01-25T19:06:31Z",
      "mergedAt": "2023-01-25T19:06:31Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "8ff14c56094197b36f20a3ab65111d1ba99854d4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5KsmQk",
          "commit": {
            "abbreviatedOid": "ddcb900"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T10:23:45Z",
          "updatedAt": "2023-01-18T10:23:45Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I think the Initiator is the one sending message_1. ",
              "createdAt": "2023-01-18T10:23:45Z",
              "updatedAt": "2023-01-18T10:23:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 391,
      "id": "PR_kwDOEItXAM5HU1e3",
      "title": "Updates following tsvart review",
      "url": "https://github.com/lake-wg/edhoc/pull/391",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "Addressing #388",
      "createdAt": "2023-01-13T12:13:47Z",
      "updatedAt": "2023-02-02T10:13:59Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "c83641e0eb5406a2400369fdd32a6ba7f307562e",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "tsvart-review-updates",
      "headRefOid": "5b93a72f87fb9da226c14ea7f37d6b5cedd86c2d",
      "closedAt": "2023-02-02T10:13:58Z",
      "mergedAt": "2023-02-02T10:13:58Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "637946b70b8cb309fcaa0b88f5afef052a15a89f"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Opening a PR with one commit as placeholder, more updates to follow.",
          "createdAt": "2023-01-13T12:15:39Z",
          "updatedAt": "2023-01-13T12:15:39Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I tried to clarify normative text in Appendix A, which led to a refactoring of section A.2. Please comment on if this is going in the right direction.",
          "createdAt": "2023-01-14T13:48:44Z",
          "updatedAt": "2023-01-14T13:50:16Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Editor's note: Remains to write about flow control.",
          "createdAt": "2023-01-14T16:38:45Z",
          "updatedAt": "2023-01-14T16:38:45Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "@chrysn @emanjon @marco-tiloca-sics Are you happy with the latest changes? \r\n\r\n(Plan to merge soon)",
          "createdAt": "2023-02-01T11:15:04Z",
          "updatedAt": "2023-02-01T11:15:04Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me, thanks!",
          "createdAt": "2023-02-01T12:34:19Z",
          "updatedAt": "2023-02-01T12:34:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5Kslu_",
          "commit": {
            "abbreviatedOid": "c069d9b"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-18T10:22:22Z",
          "updatedAt": "2023-01-18T10:22:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEItXAM5Lv7Fc",
          "commit": {
            "abbreviatedOid": "1c4ebe7"
          },
          "author": "chrysn",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "Except for the two annotated places, this looks good to me.",
          "createdAt": "2023-01-26T10:55:09Z",
          "updatedAt": "2023-01-26T12:34:29Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nIf correlation between consecutive messages is not provided by other means then the transport specification SHOULD mandate prepending the appropriate connection identifier (when available from the EDHOC protocol) to the EDHOC message. If message_1 indication is not provided by other means, then the transport SHOULD prepend the message_1 with the CBOR simple value `true` (0xf5), as a unique dummy identifier.\r\n```\r\n\r\n\"SHOULD prepend\" could be mistaken for an implementation having a choice -- but it's a choice the protocol author has, and not inviting them to allow ambiguity.",
              "createdAt": "2023-01-26T10:55:09Z",
              "updatedAt": "2023-01-26T12:34:29Z"
            },
            {
              "originalPosition": 129,
              "body": "> **SHOULD** be prepended with the CBOR serialization\r\n\r\nHow can this be optional? Not doing this leaves the server to guess what message that is, and worse yet, creates an interoperability hazard.\r\n\r\n(See also the comment above -- a SHOULD prefix is a good thing to tell the author of a protocol, but we're acting as the author of the protocol here, and the protocol should either prepend them or not).\r\n\r\nThe later text (specifying the forward and reverse direction) is explicit about when a C_x is sent.",
              "createdAt": "2023-01-26T12:29:46Z",
              "updatedAt": "2023-01-26T12:34:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5LwoCD",
          "commit": {
            "abbreviatedOid": "1c4ebe7"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-26T13:16:57Z",
          "updatedAt": "2023-01-26T13:16:57Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "The SHOULD (instead of SHALL) was written with the knowledge of one specific EDHOC implementation which enables correlation without consideration of transport, simply by only allowing one instance of the protocol at a time. So it seems there is a choice here whether this is solved by \"transport\" or not. An alternative wording is that we consider dealing with correlation to be an aspect of transport, in which case we could change to SHALL. \r\n\r\n(I don't know if this addresses the comment or even makes sense. I wait with the second comment until we have resolved this.)",
              "createdAt": "2023-01-26T13:16:57Z",
              "updatedAt": "2023-01-26T13:16:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5LxeDY",
          "commit": {
            "abbreviatedOid": "1c4ebe7"
          },
          "author": "chrysn",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-26T15:21:40Z",
          "updatedAt": "2023-01-26T15:21:40Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "That's fine for an EDHOC implementation (in fact I'd recommend all this to be handled not by the EDHOC implementation but by the implementation of the transport, eg. EDHOC-over-CoAP).\r\n\r\nThat implementation is also fine with the proposed changed wording; users of that EDHOC implementation would just have the choice of either not using it with transports that need prepended identifiers (such as over CoAP), or it would need to rely on the EDHOC-over-CoAP part of the surrounding implementation to handle the identifiers.\r\n\r\nBut nowhere should an implementation that (as a whole) uses prefix-less messages implement the .well-known/edhoc, or any other rt=core.edhoc interface (because it's not compatible with others).",
              "createdAt": "2023-01-26T15:21:40Z",
              "updatedAt": "2023-01-26T15:21:40Z"
            }
          ]
        }
      ]
    },
    {
      "number": 392,
      "id": "PR_kwDOEItXAM5HdoU7",
      "title": "Intdir review updates",
      "url": "https://github.com/lake-wg/edhoc/pull/392",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Merge?"
      ],
      "body": "Addressing #389",
      "createdAt": "2023-01-16T12:38:42Z",
      "updatedAt": "2023-02-02T10:15:49Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "c83641e0eb5406a2400369fdd32a6ba7f307562e",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "intdir-review-updates",
      "headRefOid": "ae5daa2f29bf1bafa571ff0a6461bfd5f26e3155",
      "closedAt": "2023-02-02T10:15:48Z",
      "mergedAt": "2023-02-02T10:15:48Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "f91b03473009671a76cc1f64cd8b8bfae61cb251"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Not yet addressing random padding and general IANA considerations.",
          "createdAt": "2023-01-16T12:40:07Z",
          "updatedAt": "2023-01-16T12:40:07Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Now addressed essentially all comments from intdir. No change is made on random padding since that feature was requested by the WG. The IANA section is quite changed so expect to see more comments on that. ",
          "createdAt": "2023-01-18T21:31:16Z",
          "updatedAt": "2023-01-18T21:31:16Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The main uncommented part of this PR is the new content in the IANA section. Plan to merge soon. ",
          "createdAt": "2023-02-01T11:19:10Z",
          "updatedAt": "2023-02-01T11:19:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5Ksh1N",
          "commit": {
            "abbreviatedOid": "ef32c74"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T10:13:12Z",
          "updatedAt": "2023-01-18T10:13:13Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "network byte order? Isn't the first element of an array defined by CBOR?",
              "createdAt": "2023-01-18T10:13:12Z",
              "updatedAt": "2023-01-18T10:13:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5KsjRU",
          "commit": {
            "abbreviatedOid": "ef32c74"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T10:16:46Z",
          "updatedAt": "2023-01-18T10:16:47Z",
          "comments": [
            {
              "originalPosition": 164,
              "body": "TEE is a lot bigger than IETF, and not really something IETF is doing. TEEP should probably just be an example.",
              "createdAt": "2023-01-18T10:16:46Z",
              "updatedAt": "2023-01-18T10:16:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5KskYi",
          "commit": {
            "abbreviatedOid": "ef32c74"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T10:19:16Z",
          "updatedAt": "2023-01-18T10:19:17Z",
          "comments": [
            {
              "originalPosition": 220,
              "body": "Lets have a discussion in LAKE regarding registration procedures. ",
              "createdAt": "2023-01-18T10:19:17Z",
              "updatedAt": "2023-01-18T10:19:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5LJjAi",
          "commit": {
            "abbreviatedOid": "ef32c74"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T21:24:29Z",
          "updatedAt": "2023-01-18T21:24:29Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "Changed to first ... in the array",
              "createdAt": "2023-01-18T21:24:29Z",
              "updatedAt": "2023-01-18T21:24:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5LJjHs",
          "commit": {
            "abbreviatedOid": "ef32c74"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T21:24:54Z",
          "updatedAt": "2023-01-18T21:24:54Z",
          "comments": [
            {
              "originalPosition": 164,
              "body": "Made into an example",
              "createdAt": "2023-01-18T21:24:54Z",
              "updatedAt": "2023-01-18T21:24:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5LJjYX",
          "commit": {
            "abbreviatedOid": "ef32c74"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T21:25:50Z",
          "updatedAt": "2023-01-18T21:25:51Z",
          "comments": [
            {
              "originalPosition": 220,
              "body": "Updated. More reviews are welcome.",
              "createdAt": "2023-01-18T21:25:50Z",
              "updatedAt": "2023-01-18T21:25:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5MUiCc",
          "commit": {
            "abbreviatedOid": "ae5daa2"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-02T07:13:59Z",
          "updatedAt": "2023-02-02T07:13:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 395,
      "id": "PR_kwDOEItXAM5Ihh3n",
      "title": "Secdir review update",
      "url": "https://github.com/lake-wg/edhoc/pull/395",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-01-25T15:33:49Z",
      "updatedAt": "2023-02-02T10:33:53Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "f91b03473009671a76cc1f64cd8b8bfae61cb251",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "secdir-review-update",
      "headRefOid": "f1e4be74f0ee159d576a5f11aa281ba46c98a0b0",
      "closedAt": "2023-02-02T10:33:53Z",
      "mergedAt": "2023-02-02T10:33:53Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "66564f9f9a7c3e2b9c4fc7d287313610f5e6b00a"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this as no new comments appeared.",
          "createdAt": "2023-02-02T10:33:47Z",
          "updatedAt": "2023-02-02T10:33:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5MUgkj",
          "commit": {
            "abbreviatedOid": "5c41918"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-02T07:08:03Z",
          "updatedAt": "2023-02-02T07:08:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 397,
      "id": "PR_kwDOEItXAM5K2bkl",
      "title": "#396 - using the same key for Initiator and Responder",
      "url": "https://github.com/lake-wg/edhoc/pull/397",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#396 - using the same key for Initiator and Responder",
      "createdAt": "2023-02-27T16:32:20Z",
      "updatedAt": "2023-03-28T14:17:29Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "cc35a13847383d5b91eb10ff21e07f2c8002b23d",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "#396---using-the-same-key-for-Initiator-and-Responder",
      "headRefOid": "02bbf1bb77c26b00052a414a94336fa85a7e8d6c",
      "closedAt": "2023-03-28T14:17:29Z",
      "mergedAt": "2023-03-28T14:17:28Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "a7c2cea3662f39ce024c2624c994bc8d2198e816"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The document need to say something about this.\r\nIt seems very uncontroversial to state that it MAY be used for both.\r\nI think this can be merged and the issue closed.",
          "createdAt": "2023-02-28T08:37:48Z",
          "updatedAt": "2023-02-28T08:37:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5PCA9P",
          "commit": {
            "abbreviatedOid": "8337dfe"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Proposal: \r\nOLD\r\n\"The same authentication key MAY be used for both the Initiator and Responder roles.\"\r\nNEW\r\n\"The same authentication credential MAY be used for both the Initiator and Responder roles.\"\r\n",
          "createdAt": "2023-03-06T10:34:12Z",
          "updatedAt": "2023-03-06T10:34:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 398,
      "id": "PR_kwDOEItXAM5K2fiS",
      "title": "#375 processing of message_2 and message_3",
      "url": "https://github.com/lake-wg/edhoc/pull/398",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gselander",
        "emanjon"
      ],
      "labels": [],
      "body": "#375 processing of message_2 and message_3",
      "createdAt": "2023-02-27T16:45:27Z",
      "updatedAt": "2023-06-12T14:50:48Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "782b71e8ed68ef744f8cb1a50b77dac74bfd435a",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "#375-processing-of-message_2-and-message_3",
      "headRefOid": "366450e78dded0bd2cf1c1285490584e64e3c4b9",
      "closedAt": "2023-06-12T14:50:48Z",
      "mergedAt": "2023-06-12T14:50:48Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "35b3b0fce61220adf7edac6b3aad7ad84d696ad1"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I think these sections need more considerations and clarifications. Some people has stated that you cannot derive OSCORE keys if you get an EDHOC error. My understanding was that you could. There are two types of EDHOC errors. One parsing errors to you cannot derive keys and then authentication errors (X.509 identity not authorized, X.509 cert expired, X.509 issuer not trusted, OCSP server offline, etc.). Whatever the answer is it needs to be clear. The current situation where people have different understandings is not good.\r\n\r\nWith the first type of error, TLS sends an unprotected error. In the second case TLS sends an protected error. ",
          "createdAt": "2023-02-28T10:52:11Z",
          "updatedAt": "2023-02-28T10:52:11Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "(General error discussion moved to #402)",
          "createdAt": "2023-03-06T16:26:35Z",
          "updatedAt": "2023-03-07T15:44:30Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "(General error discussion moved to #402)",
          "createdAt": "2023-03-06T16:56:21Z",
          "updatedAt": "2023-03-07T15:44:56Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The two points we have been discussing are:\r\n\r\n* When does authentication occur?\r\n* When can the keys derived from PRK_out be used?\r\n\r\n@marco-tiloca-sics @chrysn Do you have any objections to this PR?\r\n\r\n\r\n",
          "createdAt": "2023-06-07T08:59:28Z",
          "updatedAt": "2023-06-07T08:59:28Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that the current text seems to assume that error messages are not secured:\r\n\r\nOLD\r\n> But as the error message is not authenticated, a received error message might also have been sent by an attacker and the receiver MAY therefore try to continue the protocol.\r\n\r\nThis text indicates that a derived key cannot be used for protecting the error. Needs to be clarified, e.g. rephrase sentence above as:\r\nNEW\r\nBut as the error message is expected to not be authenticated, a received error message might also have been sent by an attacker and the receiver MAY therefore try to continue the protocol.\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2023-06-07T09:44:14Z",
          "updatedAt": "2023-06-07T09:44:14Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR looks good to me.\r\n\r\nAlso, the clarification proposed in the comment above [1] looks good.\r\n\r\n[1] https://github.com/lake-wg/edhoc/pull/398#issuecomment-1580322669",
          "createdAt": "2023-06-09T08:57:50Z",
          "updatedAt": "2023-06-09T08:57:50Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this as no objection was received.",
          "createdAt": "2023-06-12T14:50:39Z",
          "updatedAt": "2023-06-12T14:50:39Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 399,
      "id": "PR_kwDOEItXAM5K525h",
      "title": "Editorial EDHOC_KDF changes",
      "url": "https://github.com/lake-wg/edhoc/pull/399",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-02-28T08:13:19Z",
      "updatedAt": "2023-03-28T14:16:15Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "b80884caa8bffcdd61e2ec7976d3e785d633bb8f",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Editorial-EDHOC_KDF-changes",
      "headRefOid": "a67669c4eca276b702016377618cc5dde0dea1ab",
      "closedAt": "2023-03-28T14:16:15Z",
      "mergedAt": "2023-03-28T14:16:15Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "543bd27db0d76e046e715521bf2a17e009c1bdc8"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I strongly think that all 10 EDHOC-KDF should be in the same table\r\nThe text about mac_length_x need to use the defined term hash_length",
          "createdAt": "2023-02-28T08:36:37Z",
          "updatedAt": "2023-02-28T08:36:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5PEUJY",
          "commit": {
            "abbreviatedOid": "a67669c"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I made one commit for review.",
          "createdAt": "2023-03-06T15:13:35Z",
          "updatedAt": "2023-03-06T15:13:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 401,
      "id": "PR_kwDOEItXAM5LX_b2",
      "title": "New error code for unknown credential referenced",
      "url": "https://github.com/lake-wg/edhoc/pull/401",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Proposal to handle #400",
      "createdAt": "2023-03-06T14:21:47Z",
      "updatedAt": "2023-06-02T07:53:18Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "9d3fb1fa50f9de05943b6cfd4ff0d8437e5d3e21",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "credential-negotiation",
      "headRefOid": "e7f2f9b2063f8d9994a46c38d0e69202133be95b",
      "closedAt": "2023-06-02T07:53:17Z",
      "mergedAt": "2023-06-02T07:53:17Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "20a9e5404df82c488e07f6820e5bdeda247cc791"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "ERR_INFO Type is missing",
          "createdAt": "2023-04-20T08:24:34Z",
          "updatedAt": "2023-04-20T08:24:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5W1Z2D",
          "commit": {
            "abbreviatedOid": "e7f2f9b"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-02T07:53:01Z",
          "updatedAt": "2023-06-02T07:53:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 406,
      "id": "PR_kwDOEItXAM5QZc58",
      "title": "Add example to clarify explanation on Wrong Selected Cipher Suite",
      "url": "https://github.com/lake-wg/edhoc/pull/406",
      "state": "CLOSED",
      "author": "geonnave",
      "authorAssociation": "NONE",
      "assignees": [
        "gselander"
      ],
      "labels": [],
      "body": "Adding an example to clarify the explanation on cipher suite negotiation.\r\n\r\nThe reason I think this could help is that:\r\n- in `(...) if the selected cipher suite is the first cipher suite in SUITES_I that the Responder supports (...)`\r\n- the part `first cipher suite` can be confusing with the fact that SUITES_I is an array whose first item is the most preferred cipher suite by the initiator.\r\n- however, in this case, `first cipher suite` does not refer to the first item in the list SUITES_I, but rather to the first item that is supported by the Responder.\r\n- the idea of adding the example is to clarify that.",
      "createdAt": "2023-05-12T15:16:52Z",
      "updatedAt": "2023-06-02T14:24:48Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "781926d30297865cfae134867d71b33de1ea84db",
      "headRepository": "geonnave/edhoc",
      "headRefName": "improve_wrong_selected_suite_explanation",
      "headRefOid": "63e13a3ad76270dda378680d6672c9cff9c599e4",
      "closedAt": "2023-06-02T14:24:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "geonnave",
          "authorAssociation": "NONE",
          "body": "Looks good to me!",
          "createdAt": "2023-06-02T14:24:36Z",
          "updatedAt": "2023-06-02T14:24:36Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5W4TiY",
          "commit": {
            "abbreviatedOid": "63e13a3"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Good catch, this part is not exemplified. I propose to keep the examples together in the following section. Please review 44afd42. Would that resolve the issue?",
          "createdAt": "2023-06-02T14:16:42Z",
          "updatedAt": "2023-06-02T14:17:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 407,
      "id": "PR_kwDOEItXAM5SiL_A",
      "title": "Update based on AD review comments",
      "url": "https://github.com/lake-wg/edhoc/pull/407",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-08T15:29:09Z",
      "updatedAt": "2023-07-03T12:12:41Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "d2ccf175c95ad6d558e5c87499e3f138119dd5fa",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "AD-nits",
      "headRefOid": "0e22431db902b844dc278630b241dfbf143362c6",
      "closedAt": "2023-07-03T12:12:41Z",
      "mergedAt": "2023-07-03T12:12:41Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "e335672b432919d80592038ca078d3fd40320897"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this as no further changes are requested.",
          "createdAt": "2023-07-03T12:12:34Z",
          "updatedAt": "2023-07-03T12:12:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5X1ex-",
          "commit": {
            "abbreviatedOid": "4043fb6"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-11T08:47:28Z",
          "updatedAt": "2023-06-11T08:47:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 409,
      "id": "PR_kwDOEItXAM5Ssscd",
      "title": "#404",
      "url": "https://github.com/lake-wg/edhoc/pull/409",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#404",
      "createdAt": "2023-06-11T08:41:29Z",
      "updatedAt": "2023-06-12T15:01:19Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "3aece25c3bf201a6ba844ec3acf7500804fb53b2",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "emanjon-patch-4",
      "headRefOid": "811e810f790fc679e6dc7eec28e5578ccb7ebd64",
      "closedAt": "2023-06-12T14:55:42Z",
      "mergedAt": "2023-06-12T14:55:41Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "d742408e917238cc0c2cb83779df5e424f915f1c"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Oops, forgot to add the example with message_4. I'll make that on the master branch.\r\n\r\nEdit: Here is the commit: d2ccf17",
          "createdAt": "2023-06-12T14:58:08Z",
          "updatedAt": "2023-06-12T15:01:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5X7OBm",
          "commit": {
            "abbreviatedOid": "811e810"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-12T14:55:28Z",
          "updatedAt": "2023-06-12T14:55:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 410,
      "id": "PR_kwDOEItXAM5S2QtM",
      "title": "Encrypting C_R",
      "url": "https://github.com/lake-wg/edhoc/pull/410",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-13T06:40:43Z",
      "updatedAt": "2023-07-03T12:15:39Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "d2ccf175c95ad6d558e5c87499e3f138119dd5fa",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "emanjon-patch-5",
      "headRefOid": "9a1dc9c874fc8c0ec2bbeabafc33ef22347719f7",
      "closedAt": "2023-07-03T12:15:38Z",
      "mergedAt": "2023-07-03T12:15:38Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "760dbc4e469dd339b975a6825bae737199e221f5"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "@marco-tiloca-sics Do you have any opinions on the position of C_R inside the ciphertext?",
          "createdAt": "2023-06-13T07:19:29Z",
          "updatedAt": "2023-06-13T07:19:29Z"
        },
        {
          "author": "charlie-j",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just say this PR after sending a mail on the ML, but some comments on this:\r\n\r\nHi all,\r\n\r\nSeeing this a bit late, but note that this implies to change the TH_2 computation:\r\n\r\nTH_2 contains C_R, and TH_2 is used to compute  KEYSTREAM_2, itself finally used to encrypt the content of message PLAINTEXT_2.\r\n\r\nSo, if we put C_R in the PLAINTEXT_2, it needs to be dropped from TH_2, and then added to TH_3.\r\n\r\nAs a side a node, including C_R in the plaintext will also imply that the construction from https://datatracker.ietf.org/doc/html/draft-ietf-lake-edhoc-19#name-long-plaintext_2 will also need to be used more frequently, which is debatable whether it is a good thing.\r\n\r\nBest,\r\n\r\nCharlie",
          "createdAt": "2023-06-13T08:31:30Z",
          "updatedAt": "2023-06-13T08:31:30Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @charlie-j Thanks for the input. I removed C_R from TH_2. It is already included in TH_3.\r\n\r\nWe have not decided to do this. But I want to have a PR ready in case we do. Seems quite likely as the security AD is pressing for encryption.",
          "createdAt": "2023-06-13T08:52:05Z",
          "updatedAt": "2023-06-13T08:52:05Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "If we encrypt. @marco-tiloca-sics  would like to have C_R first in the plaintext",
          "createdAt": "2023-06-13T12:07:42Z",
          "updatedAt": "2023-06-13T12:07:42Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "> If we encrypt. @marco-tiloca-sics would like to have C_R first in the plaintext\r\n\r\nYes, that's in order to be kind with strictly sequential parsers that can find C_R at the beginning of PLAINTEXT_2, i.e., as soon as possible.",
          "createdAt": "2023-06-13T12:49:57Z",
          "updatedAt": "2023-06-13T12:49:57Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "For what is worth and also related to the previous comment on seeing C_R as soon as possible, encrypting C_R has a side effect on the accuracy of error messages sent by the Initiator after processing message_2.\r\n\r\nIn general, it is a good thing for the Initiator to gain knowledge of C_R as soon as possible. In the old design with C_R not encrypted, that's basically the case as soon as the Initiator parses a well-formed message_2.\r\n\r\nThis means that, right after that, any error message sent by the Initiator can be prepended by C_R, thus allowing the Responder to retrieve the exact EDHOC session to abort.\r\n\r\nIn the new design, there is a wider sequence of steps that the Initiator has to take (up until and including the decryption of PLAINTEXT_2), before it can gain knowledge of C_R and thus proceed as above. If an error occur before then, it is of course still possible to send an error message to the right Responder peer, but without a prepended C_R. Hence, the Responder would not know which exact EDHOC session it should abort (unless this Responder has only one ongoing session with the Initiator sending the error message).\r\n\r\nTo be clear, I understand the rationale about encrypting C_R in message_2 and support it. At the same time, it is good to also elaborate on such side effects.",
          "createdAt": "2023-06-13T12:52:35Z",
          "updatedAt": "2023-06-13T12:52:35Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "The error handling aspect doesn't seem all that bad to me. In the typical scenario with a client as initiator, it's the client that has to act on the error anyway (eg. by sending different EAD1 or whatever else can be done in that situation). In the reverse direction with the server as Initiator, the client can still send M2 easily (because C_I is unencrypted), and on error processing M2, M3 reaches the client on the return channel without explicit use of C_R.",
          "createdAt": "2023-06-13T21:57:03Z",
          "updatedAt": "2023-06-13T21:57:03Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "About the side note by @charlie-j on increased size of PLAINTEXT_2 and the need to use the Long PLAINTEXT_2 mechanism more frequently: I don't think this is a major drawback since the cut-off is larger than 8 kB and the size of C_R typically much smaller.\r\n\r\n\r\n",
          "createdAt": "2023-07-03T10:39:07Z",
          "updatedAt": "2023-07-03T10:39:07Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "As there is WG consensus to encrypt C_R\r\nhttps://mailarchive.ietf.org/arch/msg/lake/W9tEMIhGT_i5SzbjrR9BNy_Biqs/\r\nwe plan to merge this PR soon to make the draft ready for last call. Further comments are still welcome, also after merge.\r\n",
          "createdAt": "2023-07-03T10:43:40Z",
          "updatedAt": "2023-07-03T12:15:23Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5YAGdx",
          "commit": {
            "abbreviatedOid": "381816e"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-13T07:16:23Z",
          "updatedAt": "2023-06-13T07:16:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 411,
      "id": "PR_kwDOEItXAM5U44i_",
      "title": "CWT and CCS security considerations",
      "url": "https://github.com/lake-wg/edhoc/pull/411",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#403",
      "createdAt": "2023-07-07T08:00:19Z",
      "updatedAt": "2023-07-07T09:32:01Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "2af7ac88245f3e9adb11f018942b3f0ede6934e3",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "CWT-and-CCS",
      "headRefOid": "cb36b41bda47351192eb5ed63970768a630faa1b",
      "closedAt": "2023-07-07T09:32:01Z",
      "mergedAt": "2023-07-07T09:32:01Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "ef56ac4920b81dc1ec1d60b120b5fff8fa27ce34"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging now to prepare for -20",
          "createdAt": "2023-07-07T09:31:41Z",
          "updatedAt": "2023-07-07T09:31:41Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 413,
      "id": "PR_kwDOEItXAM5U5V9N",
      "title": "Correction addressing #412",
      "url": "https://github.com/lake-wg/edhoc/pull/413",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-07T09:24:23Z",
      "updatedAt": "2023-07-07T09:32:28Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "2af7ac88245f3e9adb11f018942b3f0ede6934e3",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "such-as-hash",
      "headRefOid": "d3c8f2016e78f02d63409bb3abcc883d75ed1a84",
      "closedAt": "2023-07-07T09:32:28Z",
      "mergedAt": "2023-07-07T09:32:28Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "e2e9a797dce29b73e8346af776fae6584fb28496"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging to prepare for -20",
          "createdAt": "2023-07-07T09:32:23Z",
          "updatedAt": "2023-07-07T09:32:23Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 416,
      "id": "PR_kwDOEItXAM5YP89a",
      "title": "Addressing Martin Duke's review",
      "url": "https://github.com/lake-wg/edhoc/pull/416",
      "state": "CLOSED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "#415",
      "createdAt": "2023-08-18T13:20:34Z",
      "updatedAt": "2023-08-24T17:20:16Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "81ab86654b9d15444500b69d00271a336de6a1c1",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "martin-duke-review",
      "headRefOid": "ac3de44ed8c7cfa62ac95df6e3718e07a2989dbf",
      "closedAt": "2023-08-24T17:20:15Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Following the merge of #429 and some minor tweaks these merge commits were added into this branch cleanly. Closing this empty PR.",
          "createdAt": "2023-08-24T17:20:15Z",
          "updatedAt": "2023-08-24T17:20:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5edSIe",
          "commit": {
            "abbreviatedOid": "a55fa17"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-18T14:58:35Z",
          "updatedAt": "2023-08-18T14:58:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 423,
      "id": "PR_kwDOEItXAM5YkiZf",
      "title": "Addressing John Scudder's review",
      "url": "https://github.com/lake-wg/edhoc/pull/423",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "",
      "createdAt": "2023-08-23T08:21:14Z",
      "updatedAt": "2023-08-24T17:39:41Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "525cf6cfa569322808f0c80c9abaa5c91a2e7575",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Addressing-John-Scudder's-review",
      "headRefOid": "7ec3e4ee42faf13acf592f8a5f3d7bfffd720713",
      "closedAt": "2023-08-24T17:39:40Z",
      "mergedAt": "2023-08-24T17:39:40Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "e1715f6d0f233ff1378c0a8f223c03ad4bf814e0"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see why one of the checks fail, but content is fine.",
          "createdAt": "2023-08-24T05:03:31Z",
          "updatedAt": "2023-08-24T05:03:31Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging to post revised I-D",
          "createdAt": "2023-08-24T17:39:05Z",
          "updatedAt": "2023-08-24T17:39:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5e7_Wd",
          "commit": {
            "abbreviatedOid": "7ec3e4e"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-24T05:03:42Z",
          "updatedAt": "2023-08-24T05:03:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 424,
      "id": "PR_kwDOEItXAM5Ykr93",
      "title": "Addressing IANA expert review",
      "url": "https://github.com/lake-wg/edhoc/pull/424",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "",
      "createdAt": "2023-08-23T08:48:41Z",
      "updatedAt": "2023-08-24T17:22:15Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "525cf6cfa569322808f0c80c9abaa5c91a2e7575",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Addressing-IANA-expert-review",
      "headRefOid": "aebeb6af1bb98f06a5cd474270651b9b87fc6e87",
      "closedAt": "2023-08-24T17:22:14Z",
      "mergedAt": "2023-08-24T17:22:14Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "cd135414ae39178f770f91baac5ac4d8318c92c1"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "#427",
          "createdAt": "2023-08-23T14:52:35Z",
          "updatedAt": "2023-08-23T14:52:35Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging to post revised I-D",
          "createdAt": "2023-08-24T17:22:10Z",
          "updatedAt": "2023-08-24T17:22:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5e3A3D",
          "commit": {
            "abbreviatedOid": "aebeb6a"
          },
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-23T12:29:49Z",
          "updatedAt": "2023-08-23T12:29:49Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Looks good.\r\n\r\n(Is there a particular reason you are not using a table here?\r\nJust curious.)",
              "createdAt": "2023-08-23T12:29:49Z",
              "updatedAt": "2023-08-23T12:29:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5e3Q9o",
          "commit": {
            "abbreviatedOid": "aebeb6a"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-23T13:03:08Z",
          "updatedAt": "2023-08-23T13:03:08Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "> Is there a particular reason you are not using a table here\r\n\r\nNo, no particular reason. None of the \"tables\" in the document are real tables. I thought about fixing it before when I added aasvg but did not have the time. Maybe time to fix that for -21",
              "createdAt": "2023-08-23T13:03:08Z",
              "updatedAt": "2023-08-23T14:51:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5e5NvZ",
          "commit": {
            "abbreviatedOid": "aebeb6a"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-23T17:08:37Z",
          "updatedAt": "2023-08-23T17:08:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 425,
      "id": "PR_kwDOEItXAM5Ylt1c",
      "title": "Addressing Lars Eggert's review",
      "url": "https://github.com/lake-wg/edhoc/pull/425",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "",
      "createdAt": "2023-08-23T11:47:03Z",
      "updatedAt": "2023-08-24T16:28:15Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "525cf6cfa569322808f0c80c9abaa5c91a2e7575",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "lars-eggert-review",
      "headRefOid": "1edfae9b3da9d00e919735e1f62743d8442ce39a",
      "closedAt": "2023-08-24T16:28:15Z",
      "mergedAt": "2023-08-24T16:28:15Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "fe405dc3102b6a325498ae6a130f3c5a097b4be9"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressing #417 ",
          "createdAt": "2023-08-23T11:57:44Z",
          "updatedAt": "2023-08-23T11:57:44Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging to post revised I-D",
          "createdAt": "2023-08-24T16:28:06Z",
          "updatedAt": "2023-08-24T16:28:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5e4oGb",
          "commit": {
            "abbreviatedOid": "1edfae9"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-23T15:42:37Z",
          "updatedAt": "2023-08-23T15:42:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 426,
      "id": "PR_kwDOEItXAM5YmGEl",
      "title": "Addressing Roman Danyliw's review",
      "url": "https://github.com/lake-wg/edhoc/pull/426",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "First commit",
      "createdAt": "2023-08-23T12:55:06Z",
      "updatedAt": "2023-08-24T17:08:30Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "fe405dc3102b6a325498ae6a130f3c5a097b4be9",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "roman-danyliw-review",
      "headRefOid": "1181dc0d10405b7dfb99fc2959a294769eb1e9f7",
      "closedAt": "2023-08-24T17:08:30Z",
      "mergedAt": "2023-08-24T17:08:30Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "ea04d8fb2ac0e1ed6df54290f9386cadbe42e533"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Now I think all comments in #422 that can be have been addressed.",
          "createdAt": "2023-08-24T09:22:20Z",
          "updatedAt": "2023-08-24T09:22:20Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging to post revised I-D",
          "createdAt": "2023-08-24T17:08:21Z",
          "updatedAt": "2023-08-24T17:08:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5e9g3w",
          "commit": {
            "abbreviatedOid": "9b56b67"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-24T09:35:23Z",
          "updatedAt": "2023-08-24T09:35:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 428,
      "id": "PR_kwDOEItXAM5Ymq5Z",
      "title": "Addressing Erik Kline's review",
      "url": "https://github.com/lake-wg/edhoc/pull/428",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "",
      "createdAt": "2023-08-23T14:25:06Z",
      "updatedAt": "2023-08-24T17:21:28Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "525cf6cfa569322808f0c80c9abaa5c91a2e7575",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "erik-kline-review",
      "headRefOid": "3abe89e2da7be5dbb97df90ff79facd678a539b5",
      "closedAt": "2023-08-24T17:21:27Z",
      "mergedAt": "2023-08-24T17:21:27Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "aaef852a5efdffa9f8266fe53316aa8aec78d08d"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "#418",
          "createdAt": "2023-08-23T14:26:05Z",
          "updatedAt": "2023-08-23T14:26:05Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "I did not like the new suggested figure caption \"One-byte hex encoding of CBOR integers\". I changed it back to the original \"One-Byte CBOR Encoded Integers\". The addition of 2A and 0F are excellent and enough. ",
          "createdAt": "2023-08-23T15:00:35Z",
          "updatedAt": "2023-08-23T15:00:35Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "The \"man-in-the-middle\" comment from Erik is handled in Lars's PR #425",
          "createdAt": "2023-08-23T15:03:28Z",
          "updatedAt": "2023-08-23T15:36:13Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The capitalization of the title, like \"One-Byte CBOR Encoded Integers.\", turn out to not be  consequential. Half the figures don't. So \"One-byte CBOR encoded integers.\" is another option.",
          "createdAt": "2023-08-23T15:34:54Z",
          "updatedAt": "2023-08-23T15:34:54Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "\"One-byte CBOR encoded integers\" seems good",
          "createdAt": "2023-08-23T15:38:04Z",
          "updatedAt": "2023-08-23T15:38:04Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging to post revised I-D",
          "createdAt": "2023-08-24T17:21:23Z",
          "updatedAt": "2023-08-24T17:21:23Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5e4UKm",
          "commit": {
            "abbreviatedOid": "264d9e5"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-23T15:02:34Z",
          "updatedAt": "2023-08-23T15:02:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 429,
      "id": "PR_kwDOEItXAM5Yoca3",
      "title": "Potential update to section 3.4 Transport",
      "url": "https://github.com/lake-wg/edhoc/pull/429",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "Having received several comments related to transport (#415, #417, #420, #422) and tried to address them in different PRs (#416, #425) and mails, especially [1], I got the impression that there seems to be some basic content missing from section 3.4. So I made an update. Comments are welcome!\r\n\r\n[1] https://mailarchive.ietf.org/arch/msg/lake/wuoYFmItMlbtNMYzHDH1ZAOHlno/\r\n",
      "createdAt": "2023-08-23T20:31:44Z",
      "updatedAt": "2023-08-24T17:11:50Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "525cf6cfa569322808f0c80c9abaa5c91a2e7575",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "update-transport-section",
      "headRefOid": "8e7fd1c30bbd7a8d92fe7bce69a131a38339e49f",
      "closedAt": "2023-08-24T17:11:49Z",
      "mergedAt": "2023-08-24T17:11:49Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "81ab86654b9d15444500b69d00271a336de6a1c1"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging to post revised I-D",
          "createdAt": "2023-08-24T17:11:33Z",
          "updatedAt": "2023-08-24T17:11:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5e70QG",
          "commit": {
            "abbreviatedOid": "8e7fd1c"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-24T03:57:13Z",
          "updatedAt": "2023-08-24T03:57:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 430,
      "id": "PR_kwDOEItXAM5YqPP2",
      "title": "EDITORIAL. Align caption format",
      "url": "https://github.com/lake-wg/edhoc/pull/430",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "",
      "createdAt": "2023-08-24T06:44:24Z",
      "updatedAt": "2023-08-24T17:25:32Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "cd135414ae39178f770f91baac5ac4d8318c92c1",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "EDITORIAL.-Align-caption-format",
      "headRefOid": "1860000bae847d5c138185801a86bb68bb4ca29a",
      "closedAt": "2023-08-24T17:25:31Z",
      "mergedAt": "2023-08-24T17:25:31Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "64c0ed44d18bf790496931949c6ed98a3ab40a30"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Aligning all captions to sentence form.\r\n\r\n#427",
          "createdAt": "2023-08-24T06:45:01Z",
          "updatedAt": "2023-08-24T06:45:01Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging to post revised I-D",
          "createdAt": "2023-08-24T17:23:25Z",
          "updatedAt": "2023-08-24T17:23:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5e_IFA",
          "commit": {
            "abbreviatedOid": "5a185b9"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-24T13:32:30Z",
          "updatedAt": "2023-08-24T13:32:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 434,
      "id": "PR_kwDOEItXAM5YxMlw",
      "title": "Update 3.4",
      "url": "https://github.com/lake-wg/edhoc/pull/434",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Mentioning preference for reliable transport",
      "createdAt": "2023-08-25T08:01:46Z",
      "updatedAt": "2023-08-25T09:18:40Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "4c79a74b9997b1abcfa3184b1a153bb57eb3f3f4",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "reliable-transport",
      "headRefOid": "49e61101a9d717837c267d1a4a14e19ffa233fbb",
      "closedAt": "2023-08-25T09:18:40Z",
      "mergedAt": "2023-08-25T09:18:40Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "6866d9cb6c0d2241ab85c2a4e4930aad3e38bfe4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5fFQF4",
          "commit": {
            "abbreviatedOid": "2e54b7e"
          },
          "author": "zaheduzzaman",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-25T08:30:00Z",
          "updatedAt": "2023-08-25T08:30:01Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This is getting close to where I think it should be. I would suggest to rephrase like following -\r\n\r\nEDHOC is not bound to a particular transport layer and can even be used in environments without IP. Ultimately, the application is free to choose how to transport EDHOC messages including errors. In order to avoid unnecessary message processing at the application or protocol termination, it is RECOMMENDED to use a reliable transport ( EDHOC originally designed to be transported over CoAP in reliable mode, see appendix A). The transport, in general, SHOULD handle:",
              "createdAt": "2023-08-25T08:30:01Z",
              "updatedAt": "2023-08-25T08:30:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fFkXA",
          "commit": {
            "abbreviatedOid": "49e6110"
          },
          "author": "zaheduzzaman",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "LGTM, thanks.",
          "createdAt": "2023-08-25T09:15:19Z",
          "updatedAt": "2023-08-25T09:15:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEItXAM5fFlJ-",
          "commit": {
            "abbreviatedOid": "49e6110"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-25T09:17:15Z",
          "updatedAt": "2023-08-25T09:17:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 442,
      "id": "PR_kwDOEItXAM5ZJdDw",
      "title": "Traces: Examples of invalid EDHOC messages",
      "url": "https://github.com/lake-wg/edhoc/pull/442",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-30T14:33:30Z",
      "updatedAt": "2023-09-14T04:28:40Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "7164d0289c568e96076605737365b1a2b6b37830",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Examples-of-invalid-EDHOC-messages",
      "headRefOid": "cc0a3d117d54a4b448fcf4189affa05c1d362d4a",
      "closedAt": "2023-09-14T04:28:40Z",
      "mergedAt": "2023-09-14T04:28:40Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "33d4ee6c631a0b6e69492b1b887337211a6e1a22"
      },
      "comments": [
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "These are some detailed tests on parsing message_1 and validating the point. The question is why would we do this only for message_1 and not for e.g. message_2 as well? I agree that these are very useful and I already caught several bugs in my implementation that need to be fixed for these tests to pass.",
          "createdAt": "2023-08-30T16:24:53Z",
          "updatedAt": "2023-08-30T16:24:53Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": ">I agree that these are very useful and I already caught several bugs in my implementation that need to be fixed for these tests to pass.\r\n\r\nThat is a very good argument for why we should include this.\r\n\r\n>The question is why would we do this only for message_1 and not for e.g. message_2 as well?\r\n\r\nAs a first start I just came up with as many different types of invalidity as possible, trying to not repeat things. My idea was that the implementer would need to make sure that the same type of invalidity is checked in other parts as well. That should probably be written out.\r\n\r\nYes, I think it is a good idea to have some invalid examples for message_2 as well. There we could have a \"wrong number of items\" message_2 as well as PLAINTEXT_2 with invalid ID_CRED_R.\r\n\r\n",
          "createdAt": "2023-08-31T04:38:46Z",
          "updatedAt": "2023-08-31T04:38:46Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "@malishav I added some invalid message_2 and PLAINTEXT_2 and added some more text in the beginning of the section. Please check",
          "createdAt": "2023-08-31T05:20:58Z",
          "updatedAt": "2023-08-31T05:20:58Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> This message indicates cipher suite 6, which has X25519 as EDHOC key exchange algorithm (ECDH curve).\r\n> \r\n> Since the error is about G_X not corresponding to a point on the P-256 curve, it is better for consistency to indicate cipher suite 2, 3 or 5 instead.\r\n> \r\n\r\nIndeed. I just used the example in 4.1. message_1 (first time) and missed that 6 is not P-256. I'll change to 2\r\n",
          "createdAt": "2023-08-31T08:45:31Z",
          "updatedAt": "2023-08-31T08:45:31Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Added that implementations must not compose these examples according to EDHOC. Added reference to RFC 8949\r\n\r\nAdded more invalid examples concerning SUITES_I and ID_CRED_R.\r\n\r\nPlease review.",
          "createdAt": "2023-09-01T06:42:31Z",
          "updatedAt": "2023-09-01T06:42:31Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "\"must not compose\" is a bit strong. There is no RFC2119 at all in EDHOC-22 describing the use of deterministic CBOR. ",
          "createdAt": "2023-09-04T14:29:05Z",
          "updatedAt": "2023-09-04T14:29:05Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "If we want to have heading I think they should describe the general type of error instead of the specific example.",
          "createdAt": "2023-09-04T14:34:30Z",
          "updatedAt": "2023-09-04T14:34:30Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "> If we want to have heading I think they should describe the general type of error instead of the specific example.\r\n\r\n\"Text string encoding of G_X\" and \"G_X without leading zeroes\" are both examples of \"Invalid encoding of G_X\", would you prefer two sections with the same heading?\r\n\r\nSimilarly, \"x-coordinate of G_X not in interval [0, p-1]\" and \"x-coordinate of G_X not corresponding to a point\" are both examples of \"Invalid x-coordinate of G_X\"\r\n\r\nAlternative, we could just enumerate the cases: \"Invalid case 1\", \"Invalid case 2\", ...\r\n\r\nRelated question, should we skip the sub-sections and itemize in some other way (e.g. bullets)?\r\n",
          "createdAt": "2023-09-04T15:09:23Z",
          "updatedAt": "2023-09-04T15:09:23Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe some headings\r\n- Invalid G_X (cddl correct)\r\n- Invalid cddl\r\n- Nor deterministic encoding\r\n\r\nand then subbullets inside\r\n\r\nSent from Outlook for iOS<https://aka.ms/o0ukef>\r\n________________________________\r\nFrom: G\u00f6ran Selander ***@***.***>\r\nSent: Monday, September 4, 2023 5:09 PM\r\nTo: lake-wg/edhoc ***@***.***>\r\nCc: John Mattsson ***@***.***>; Author ***@***.***>\r\nSubject: Re: [lake-wg/edhoc] Examples of invalid EDHOC messages (PR #442)\r\n\r\n\r\nIf we want to have heading I think they should describe the general type of error instead of the specific example.\r\n\r\n\"Text string encoding of G_X\" and \"G_X without leading zeroes\" are both examples of \"Invalid encoding of G_X\", would you prefer two sections with the same heading?\r\n\r\nSimilarly, \"x-coordinate of G_X not in interval [0, p-1]\" and \"x-coordinate of G_X not corresponding to a point\" are both examples of \"Invalid x-coordinate of G_X\"\r\n\r\nAlternative, we could just enumerate the cases: \"Invalid case 1\", \"Invalid case 2\", ...\r\n\r\nRelated question, should we skip the sub-sections and itemize in some other way (e.g. bullets)?\r\n\r\n\u2014\r\nReply to this email directly, view it on GitHub<https://protect2.fireeye.com/v1/url?k=31323334-501cfaf3-313273af-454445554331-52c95170901fff23&q=1&e=c235fe80-03ff-4ff1-b9d3-2726d78df225&u=https%3A%2F%2Fgithub.com%2Flake-wg%2Fedhoc%2Fpull%2F442%23issuecomment-1705425104>, or unsubscribe<https://protect2.fireeye.com/v1/url?k=31323334-501cfaf3-313273af-454445554331-7ed3269f70c38866&q=1&e=c235fe80-03ff-4ff1-b9d3-2726d78df225&u=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAFYXKYWQTFW3BISLWW6SYB3XYXVK3ANCNFSM6AAAAAA4EUBBWU>.\r\nYou are receiving this because you authored the thread.Message ID: ***@***.***>\r\n",
          "createdAt": "2023-09-05T05:41:32Z",
          "updatedAt": "2023-09-05T05:41:32Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The third category - non-deterministic CBOR - is not necessarily invalid. See discussion in #446.",
          "createdAt": "2023-09-05T10:14:11Z",
          "updatedAt": "2023-09-05T10:14:11Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Added a curve25519 point (p) of low order which produces the all zero value\r\nhttps://github.com/jedisct1/libsodium/blob/master/src/libsodium/crypto_scalarmult/curve25519/ref10/x25519_ref10.c#L17",
          "createdAt": "2023-09-08T08:14:29Z",
          "updatedAt": "2023-09-08T08:14:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5fi3TY",
          "commit": {
            "abbreviatedOid": "6d6f75e"
          },
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-30T15:27:13Z",
          "updatedAt": "2023-08-30T15:27:13Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "This seems to be a valid EDHOC message with EAD label `0x0f` and no EAD value. @marco-tiloca-sics could you confirm?",
              "createdAt": "2023-08-30T15:27:13Z",
              "updatedAt": "2023-08-30T15:27:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fi_wm",
          "commit": {
            "abbreviatedOid": "6d6f75e"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-30T15:45:04Z",
          "updatedAt": "2023-08-30T15:45:04Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "Yes, I agree.\r\n\r\nThe only exception would be if this particular EAD item is defined to have a mandatory value, but for that we'd need such an EAD item to be specified and registered already.",
              "createdAt": "2023-08-30T15:45:04Z",
              "updatedAt": "2023-08-30T15:45:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fjB3c",
          "commit": {
            "abbreviatedOid": "6d6f75e"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-30T15:49:42Z",
          "updatedAt": "2023-08-30T15:49:42Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "Maybe have this instead?\r\n\r\n```\r\n03 06 58 20 74 1a 13 d7 ba 04 8f bb 61 5e 94 38 6a a3 b6 1b ea 5b 3d\r\n8f 65 f3 26 20 b7 49 be e8 d2 78 ef a9 0e 0f 60\r\n```\r\n\r\nThe error would be not about a wrong number of elements in the sequence, but having ead_value as a CBOR text string instead of a CBOR byte string.\r\n",
              "createdAt": "2023-08-30T15:49:42Z",
              "updatedAt": "2023-08-30T15:49:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fmfv1",
          "commit": {
            "abbreviatedOid": "6d6f75e"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T04:29:54Z",
          "updatedAt": "2023-08-31T04:29:54Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "Good, I removed it for now as it we already have a \"wrong type\" example.",
              "createdAt": "2023-08-31T04:29:54Z",
              "updatedAt": "2023-08-31T04:29:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fnqVx",
          "commit": {
            "abbreviatedOid": "e28fc0e"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T08:34:08Z",
          "updatedAt": "2023-08-31T08:34:08Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "This message indicates cipher suite 6, which has X25519 as EDHOC key exchange algorithm (ECDH curve).\r\n\r\nSince the error is about G_X not corresponding to a point on the P-256 curve, it is better for consistency to indicate cipher suite 2, 3 or 5 instead.\r\n\r\n(not sure if the same applies to the previous example, as also considering ciphers suite 6).",
              "createdAt": "2023-08-31T08:34:08Z",
              "updatedAt": "2023-08-31T08:34:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fnxdJ",
          "commit": {
            "abbreviatedOid": "ba767fa"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T08:48:13Z",
          "updatedAt": "2023-08-31T08:48:14Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "fixed",
              "createdAt": "2023-08-31T08:48:13Z",
              "updatedAt": "2023-08-31T08:48:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fnytk",
          "commit": {
            "abbreviatedOid": "ba767fa"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T08:51:03Z",
          "updatedAt": "2023-08-31T08:51:04Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "(This comment was made on a commit, but I add it here too to be sure it's not missed)\r\n\r\n\r\n\r\nWhat is the invalidity in the new example?\r\n\r\nThis seems the correct way to encode the credential identifier of type 'kid' with value 0x3210.",
              "createdAt": "2023-08-31T08:51:03Z",
              "updatedAt": "2023-08-31T08:51:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fn8Fm",
          "commit": {
            "abbreviatedOid": "ba767fa"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T09:10:24Z",
          "updatedAt": "2023-08-31T09:10:25Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "My understanding of Section 3.5.3.2. of draft-ietf-lake-edhoc-22 is that the CBOR map { 4 : kid_x } is always replaced by the byte string kid_x.\r\n\r\nI.e. the correct encoding of this PLAINTEXT_2 is \r\n27 42 32 10 48 fa 5e fa 2e bf 92 0b f3\r\n\r\n",
              "createdAt": "2023-08-31T09:10:25Z",
              "updatedAt": "2023-08-31T09:12:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fn-nd",
          "commit": {
            "abbreviatedOid": "ba767fa"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T09:16:03Z",
          "updatedAt": "2023-08-31T09:16:04Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "Ops, you're right :-)\r\n\r\nMaybe it's useful if these examples shortly explain what their invalidity is, possibly pointing to the relevant section of -lake-edhoc\r\n\r\nEDIT: s/mention/explain",
              "createdAt": "2023-08-31T09:16:03Z",
              "updatedAt": "2023-08-31T09:16:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5foC8B",
          "commit": {
            "abbreviatedOid": "ba767fa"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T09:25:42Z",
          "updatedAt": "2023-08-31T09:25:42Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "That is a good idea\r\n",
              "createdAt": "2023-08-31T09:25:42Z",
              "updatedAt": "2023-08-31T09:25:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fo-jf",
          "commit": {
            "abbreviatedOid": "20ddaf6"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T11:49:58Z",
          "updatedAt": "2023-08-31T11:49:58Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "Done",
              "createdAt": "2023-08-31T11:49:58Z",
              "updatedAt": "2023-08-31T11:49:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fv_vF",
          "commit": {
            "abbreviatedOid": "daeaddf"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-01T07:34:23Z",
          "updatedAt": "2023-09-01T07:34:23Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "I think it is better to refer to Section 3.1 of -lake-edhoc (instead of Section 1.4).\r\n\r\nThat's where deterministic encoding is mentioned as a property of the protocol (emphasis mine):\r\n\r\n> All **EDHOC messages** are CBOR Sequences [[RFC8742](https://www.rfc-editor.org/info/rfc8742)], and **are deterministically encoded**.\r\n\r\nwhile Section 1.4 is more about terminology and language for the document (emphasis mine):\r\n\r\n> When referring to CBOR, this **specification** always **refers** to Deterministically Encoded CBOR as specified in Sections 4.2.1 and 4.2.2 of [[RFC8949](https://www.rfc-editor.org/info/rfc8949)].",
              "createdAt": "2023-09-01T07:34:23Z",
              "updatedAt": "2023-09-01T07:34:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fwDoy",
          "commit": {
            "abbreviatedOid": "daeaddf"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-01T07:46:03Z",
          "updatedAt": "2023-09-01T07:46:04Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "Instead of Section 1.4 of -lake-edhoc, I think it is better to refer to both Sections 3.1 (as mentioning deterministic encoding) and Section 3.5.3 (as talking about ID_CRED_X and its encoding).\r\n\r\nNote that Section 3.5.3 is not *explicitly* saying that the CBOR map encoding ID_CRED_X has to be deterministically encoded; it is just silently inheriting that requirement from Section 3.1.\r\n\r\nIs it worth adding an explicit reminder in Section 3.5.3 in -lake-edhoc? Such a reminder is in fact present in Section 3.5.2 when discussing authentication credentials instead.",
              "createdAt": "2023-09-01T07:46:04Z",
              "updatedAt": "2023-09-01T07:46:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fwEq0",
          "commit": {
            "abbreviatedOid": "daeaddf"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-01T07:49:05Z",
          "updatedAt": "2023-09-01T07:49:05Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "i think it is more precise to refer to Section 5.2.2 of -lake-edhoc; that's where the two variants for encoding SUITES_I are defined.",
              "createdAt": "2023-09-01T07:49:05Z",
              "updatedAt": "2023-09-01T07:49:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fxYZn",
          "commit": {
            "abbreviatedOid": "daeaddf"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-01T11:36:07Z",
          "updatedAt": "2023-09-01T11:36:07Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "Can do",
              "createdAt": "2023-09-01T11:36:07Z",
              "updatedAt": "2023-09-01T11:36:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fxbPI",
          "commit": {
            "abbreviatedOid": "eb35212"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-01T11:45:15Z",
          "updatedAt": "2023-09-01T11:45:15Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Done. I will try to update the EDHOC specification during AUTH48 so that section 3.1 refers to 4.2.1 of [[RFC8949](https://www.rfc-editor.org/info/rfc8949)].",
              "createdAt": "2023-09-01T11:45:15Z",
              "updatedAt": "2023-09-01T11:45:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEItXAM5fxbjD",
          "commit": {
            "abbreviatedOid": "eb35212"
          },
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-01T11:46:17Z",
          "updatedAt": "2023-09-01T11:46:18Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "I will suggst to add an explicit reminder in Section 3.5.3 during AUTH48",
              "createdAt": "2023-09-01T11:46:17Z",
              "updatedAt": "2023-09-01T11:46:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 445,
      "id": "PR_kwDOEItXAM5ZchLu",
      "title": "Gen-ART review",
      "url": "https://github.com/lake-wg/edhoc/pull/445",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#444",
      "createdAt": "2023-09-04T05:36:47Z",
      "updatedAt": "2023-09-04T07:30:55Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "0eb467a719c88cd4c3cbc5e50a895d78c1808b40",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Gen-ART-review",
      "headRefOid": "67007e1ef1f95569fe946b6d39e7d8a043178eb7",
      "closedAt": "2023-09-04T07:30:55Z",
      "mergedAt": "2023-09-04T07:30:55Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "a461918c643883e1f69d1f3ebe8b0083fa95e4c1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 446,
      "id": "PR_kwDOEItXAM5ZfoK1",
      "title": "EDHOC: Encoding clarifications",
      "url": "https://github.com/lake-wg/edhoc/pull/446",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "Intent is to provide clarifications regarding encoding. Suggested from implementors that this is needed.\r\n\r\nThe PR is not finished. There will be more commits.",
      "createdAt": "2023-09-04T14:53:05Z",
      "updatedAt": "2024-01-22T09:21:24Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "a461918c643883e1f69d1f3ebe8b0083fa95e4c1",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Encoding-clarifications",
      "headRefOid": "4fb2fafcf4638a998fcb863818fdfa671f72add4",
      "closedAt": "2024-01-22T09:21:24Z",
      "mergedAt": "2024-01-22T09:21:24Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "7dcec5628437b2c798e15e181cc4d52d16ea865c"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "The PR is now changing from \"RECOMMENDED to abort\" to \"MAY abort\" because it is thought to simplify implementation and there are no obvious security reasons to prevent non-deterministic CBOR.\r\n\r\n@marco-tiloca-sics @malishav @chrysn It would be good to get some feedback on the difficulty/ease of enforcing deterministic CBOR. \r\n",
          "createdAt": "2023-09-05T10:11:35Z",
          "updatedAt": "2023-09-05T10:11:35Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "> The PR is now changing from \"RECOMMENDED to abort\" to \"MAY abort\" because it is thought to simplify implementation and there are no obvious security reasons to prevent non-deterministic CBOR.\r\n> \r\n> @marco-tiloca-sics @malishav @chrysn It would be good to get some feedback on the difficulty/ease of enforcing deterministic CBOR.\r\n\r\nAt least the CBOR library that I use does not seem to provide a method for checking that incoming CBOR data is deterministically encoded.\r\n\r\nImplementing those checks does not feel like challenging (I'm doing that for CBOR integers at the moment), but avoiding the need for having those in place certainly simplifies things.\r\n\r\nI think the advantage is also functional when thinking of authentication credentials (which was my original point about this topic). If CRED_X is CBOR based (e.g., a CCS or a CWT) and it is transported by value in ID_CRED_X, it's great that the recipient peer can use CRED_X as is, i.e., even when it is not deterministically encoded.\r\n\r\nHowever, since the case above has CRED_X specified by value in ID_CRED_X, which is a field of PLAINTEXT, then forcing deterministic encoding of messages would also imply deterministic encoding of CBOR based credentials that are transported by value in ID_CRED_X (so that the requirement on the message as a whole is fulfilled).\r\n\r\nIf non-deterministic encoding can be admitted while still being safe in terms of security, that it feels better to not be strict in mandating it (while a peer might still be strict about it and MAY abort the session anyway as per the new phrasing).",
          "createdAt": "2023-09-05T10:37:04Z",
          "updatedAt": "2023-09-05T10:37:04Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "EDHOC-22 states:\r\n\r\n   The Initiator\r\n   and Responder SHOULD use an available authentication credential\r\n   (transported in EDHOC or otherwise provisioned) without re-encoding.\r\n\r\nMy and G\u00f6rans interpretation is that the byte string value of bccs and kcwt are treated as opaque strings by EDHOC when creating the messages. I.e. no requirement to encode deterministic. Let's clarify this.\r\n",
          "createdAt": "2023-09-05T10:57:40Z",
          "updatedAt": "2023-09-05T10:57:40Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "> At least the CBOR library that I use does not seem to provide a method for checking that incoming CBOR data is deterministically encoded.\r\n> \r\n> Implementing those checks does not feel like challenging (I'm doing that for CBOR integers at the moment), but avoiding the need for having those in place certainly simplifies things.\r\n\r\nThat is good input. If I remember correctly, deterministic encoding of the fields before G_X in message one had a security impact if the hash function (SHA-2) turns out to have significant weaknesses. \r\n\r\n   message_1 = (\r\n     METHOD : int,\r\n     SUITES_I : suites,\r\n     G_X : bstr,\r\n     C_I : bstr / -24..23,\r\n     ? EAD_1,\r\n   )\r\n\r\nShould maybe clarify that.",
          "createdAt": "2023-09-05T11:01:25Z",
          "updatedAt": "2023-09-05T11:01:25Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "NONE",
          "body": "The libraries I know off my head don't provide checking; sure it can be performed, but without library modifications it'd be re-encoding, and that's tedious (eg. because you need an extra buffer, or you need to be careful about overwriting in-place). Unless there are concrete security concerns, I'd prefer requirement on verifying deterministic rules (but I'm fine with keeping the requirement that things be encoded deterministically).\r\n\r\nThere are two arguments I see against it (divergent decoding may be overlooked when testing against relaxed peers; and the covert channel), but both have good counterarguments (read the specs and test with more than one peer; there are already optional EADs and there's nobody to hide communication from because by EDHOC design only the peers can read the plaintext).",
          "createdAt": "2023-09-08T08:44:46Z",
          "updatedAt": "2023-09-08T08:44:46Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "Approval of the PR would mean that the following invalid test vector should be removed from draft-ietf-lake-traces\r\n\r\n> \r\n>    4.3.3.  Non-lexicographic order of map\r\n> \r\n>    Invalid encoding of the map ID_CRED_R in PLAINTEXT_2.  Correct is the\r\n>    deterministic bytewise lexicographic order encoding according to\r\n>    Section 3.1 of [I-D.ietf-lake-edhoc] and Section 4.2.1 of [RFC8949].\r\n> \r\n>    Invalid PLAINTEXT_2 (25 bytes)\r\n>    27 A2 0A 46 6D 6F 72 64 6F 72 04 44 72 69 6E 67 48 fa 5e fa 2e bf 92\r\n>    0b f3\r\n> ",
          "createdAt": "2023-09-21T11:47:20Z",
          "updatedAt": "2023-09-21T11:47:20Z"
        },
        {
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is this ready for merge? Let me know if I should poll the WG for final comments?",
          "createdAt": "2023-10-02T12:42:00Z",
          "updatedAt": "2023-10-02T12:42:00Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "I just responded to the list.",
          "createdAt": "2023-10-02T14:49:28Z",
          "updatedAt": "2023-10-02T14:49:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR #446 has been sent to the RFC editor.",
          "createdAt": "2023-10-17T16:49:45Z",
          "updatedAt": "2023-10-17T16:49:45Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging for submission of -23.\r\n",
          "createdAt": "2024-01-22T09:21:17Z",
          "updatedAt": "2024-01-22T09:21:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5ihXKB",
          "commit": {
            "abbreviatedOid": "4fb2faf"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-02T14:48:01Z",
          "updatedAt": "2023-10-02T14:48:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 450,
      "id": "PR_kwDOEItXAM5a5Xjf",
      "title": " Align with #446",
      "url": "https://github.com/lake-wg/edhoc/pull/450",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": " Align with #446",
      "createdAt": "2023-09-21T14:23:26Z",
      "updatedAt": "2023-09-22T11:46:54Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "af7f74c76ea351ac3f114c594b3c680a10f0e86a",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "emanjon-patch-6",
      "headRefOid": "9c0ea7776313dbbcf5487c5a6dbd257c2f890d68",
      "closedAt": "2023-09-22T11:46:54Z",
      "mergedAt": "2023-09-22T11:46:54Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "a5b602ba9f212c1f2f1a88ccb945d77042df8735"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "COLLABORATOR",
          "body": "#443",
          "createdAt": "2023-09-21T14:24:09Z",
          "updatedAt": "2023-09-21T14:24:09Z"
        },
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Since no objection has been noted I merge this to submit a revised version of -traces",
          "createdAt": "2023-09-22T11:46:46Z",
          "updatedAt": "2023-09-22T11:46:46Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 451,
      "id": "PR_kwDOEItXAM5a5ZOv",
      "title": "Addressing Murray's IESG comments",
      "url": "https://github.com/lake-wg/edhoc/pull/451",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": " Traces: IESG Murray Kucherawy's comments #449",
      "createdAt": "2023-09-21T14:26:29Z",
      "updatedAt": "2023-09-22T11:35:13Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "af7f74c76ea351ac3f114c594b3c680a10f0e86a",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "Addressing-Murray's-IESG-comments",
      "headRefOid": "002988dbea9da14ad402e2b5cdcce5366fd48865",
      "closedAt": "2023-09-22T11:35:13Z",
      "mergedAt": "2023-09-22T11:35:13Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "c54eeee2effb961b41d83c1495d720bb33ac3507"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Solves issue #449. Merging now to submit revised I-D.",
          "createdAt": "2023-09-22T11:35:03Z",
          "updatedAt": "2023-09-22T11:35:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 455,
      "id": "PR_kwDOEItXAM5jrwFt",
      "title": "Protect C_R within message_2",
      "url": "https://github.com/lake-wg/edhoc/pull/455",
      "state": "MERGED",
      "author": "gselander",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready to merge?"
      ],
      "body": "",
      "createdAt": "2024-01-10T13:11:46Z",
      "updatedAt": "2024-01-22T09:22:53Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "a5b602ba9f212c1f2f1a88ccb945d77042df8735",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "cr-in-mac2",
      "headRefOid": "bf4acb5cff698285561e496ec35cad17e74f5254",
      "closedAt": "2024-01-22T09:22:53Z",
      "mergedAt": "2024-01-22T09:22:53Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "1fe7db707b3c82e2fc0f8e80fc72ca7f6d7795ca"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging as agreed in the WG.",
          "createdAt": "2024-01-22T09:22:47Z",
          "updatedAt": "2024-01-22T09:22:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5sIzNl",
          "commit": {
            "abbreviatedOid": "f301b68"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-10T21:44:36Z",
          "updatedAt": "2024-01-10T21:44:36Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Exactly like in the text below describing PLAINTEXT_2, this description of context_2 should also include here a bullet point about C_R, and especially with the warning about its special encoding. That is:\r\n\r\n> * C_R - variable length connection identifier. Note that connection identifiers are byte strings but certain values are represented as integers in the message, see {{bstr-repr}}.",
              "createdAt": "2024-01-10T21:44:36Z",
              "updatedAt": "2024-01-10T21:44:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 456,
      "id": "PR_kwDOEItXAM5kFRN8",
      "title": "Traces v -09 (C_R authenticated in message_2)",
      "url": "https://github.com/lake-wg/edhoc/pull/456",
      "state": "MERGED",
      "author": "marco-tiloca-sics",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR updates the EDHOC traces according to https://github.com/lake-wg/edhoc/pull/455",
      "createdAt": "2024-01-15T11:42:23Z",
      "updatedAt": "2024-01-27T14:11:28Z",
      "baseRepository": "lake-wg/edhoc",
      "baseRefName": "master",
      "baseRefOid": "a5b602ba9f212c1f2f1a88ccb945d77042df8735",
      "headRepository": "lake-wg/edhoc",
      "headRefName": "traces-09",
      "headRefOid": "6a93a0779a753719b40bf3642a5efb675d8b297a",
      "closedAt": "2024-01-27T14:11:28Z",
      "mergedAt": "2024-01-27T14:11:28Z",
      "mergedBy": "gselander",
      "mergeCommit": {
        "oid": "3e09e9233188e56f77bd04a643ee08689b0f6b33"
      },
      "comments": [
        {
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "body": "Marek confirmed too. Merging this for -09.",
          "createdAt": "2024-01-27T14:11:21Z",
          "updatedAt": "2024-01-27T14:11:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEItXAM5sldiA",
          "commit": {
            "abbreviatedOid": "6a93a07"
          },
          "author": "gselander",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I haven't checked any values, but the things that were changes and the sizes looks right. Thanks for adding clarification in headings too at the end.",
          "createdAt": "2024-01-15T14:09:00Z",
          "updatedAt": "2024-01-15T14:09:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEItXAM5uBxA-",
          "commit": {
            "abbreviatedOid": "6a93a07"
          },
          "author": "malishav",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Hi,\r\n\r\nI went through the second trace manually and I couldn't spot any error in what I could verify with our implementation. Thanks for providing the PR!",
          "createdAt": "2024-01-26T15:13:26Z",
          "updatedAt": "2024-01-26T16:06:36Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "OK",
              "createdAt": "2024-01-26T15:13:27Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 21,
              "body": "OK",
              "createdAt": "2024-01-26T15:17:39Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 57,
              "body": "OK",
              "createdAt": "2024-01-26T15:26:31Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 83,
              "body": "OK",
              "createdAt": "2024-01-26T15:27:23Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 89,
              "body": "OK",
              "createdAt": "2024-01-26T15:28:10Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 97,
              "body": "OK",
              "createdAt": "2024-01-26T15:28:22Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 103,
              "body": "OK",
              "createdAt": "2024-01-26T15:28:37Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 112,
              "body": "OK",
              "createdAt": "2024-01-26T15:29:42Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 121,
              "body": "OK",
              "createdAt": "2024-01-26T15:30:55Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 130,
              "body": "OK",
              "createdAt": "2024-01-26T15:32:57Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 168,
              "body": "OK",
              "createdAt": "2024-01-26T15:35:21Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 150,
              "body": "OK",
              "createdAt": "2024-01-26T15:37:13Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 185,
              "body": "OK",
              "createdAt": "2024-01-26T15:39:36Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 196,
              "body": "OK",
              "createdAt": "2024-01-26T15:41:33Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 210,
              "body": "OK",
              "createdAt": "2024-01-26T15:46:44Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 249,
              "body": "OK",
              "createdAt": "2024-01-26T15:51:08Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 255,
              "body": "OK",
              "createdAt": "2024-01-26T15:51:18Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 263,
              "body": "OK",
              "createdAt": "2024-01-26T15:51:33Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 269,
              "body": "OK",
              "createdAt": "2024-01-26T15:51:54Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 278,
              "body": "OK",
              "createdAt": "2024-01-26T15:53:09Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 369,
              "body": "OK",
              "createdAt": "2024-01-26T15:58:22Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 519,
              "body": "OK",
              "createdAt": "2024-01-26T16:00:21Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 530,
              "body": "OK",
              "createdAt": "2024-01-26T16:03:58Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 539,
              "body": "OK",
              "createdAt": "2024-01-26T16:04:45Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            },
            {
              "originalPosition": 548,
              "body": "OK",
              "createdAt": "2024-01-26T16:05:13Z",
              "updatedAt": "2024-01-26T16:06:37Z"
            }
          ]
        }
      ]
    }
  ]
}